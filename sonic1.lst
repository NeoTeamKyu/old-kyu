00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000 =00000004                  BitMapXpos	equ	4
00000000 =00000002                  BitMapYpos	equ	2
00000000 =00000100                  BitMapWidth	equ	256
00000000 =00000080                  BitMapHeight	equ	128
00000000 =00000010                  BitMapCellHeight	equ	(BitMapHeight/8)
00000000 =00000020                  BitMapCellWidth	equ	(BitMapWidth/8)
00000000 =00002000                  WallPalBits	equ	$2000
00000000 =00000040                  MapRowWidth	equ	64
00000000 =00008000                  bitmapaddr	equ $8000
00000000 =0000C000                  scrollAaddr	equ	$C000
00000000 =0000D800                  spriteaddr	equ	$D800
00000000 =0000DC00                  hscrolladdr	equ	$DC00
00000000 =0000E000                  scrollBaddr	equ	$E000
00000000 =0000F000                  windowaddr	equ	$F000
00000000 =00000000                  DMA_ByteInc	equ	$0
00000000 =00000002                  DMA_Length1	equ	$2
00000000 =00000004                  DMA_Length2	equ	$4
00000000 =00000006                  DMA_SrcAdr1	equ	$6
00000000 =00000008                  DMA_SrcAdr2	equ	$8
00000000 =0000000A                  DMA_SrcAdr3	equ	$A
00000000 =0000000C                  DMA_DMAenbl	equ	$C
00000000 =0000000E                  DMA_DstAdr1	equ	$E
00000000 =00000010                  DMA_DstAdr2	equ	$10
00000000 =00000012                  DMA_DMADisbl	equ	$12
00000000 =00A04000                  SNDADD		  EQU	 $A04000
00000000 =00A04001                  SNDDAT		  EQU	 $A04001
00000000 =00A10008                  CNTLA		   EQU	 $A10008
00000000 =00A1000A                  CNTLB		   EQU	 $A1000A
00000000 =00A1000C                  CNTLC		   EQU	 $A1000C
00000000 =00A10009                  CNTLAW		  EQU	 $A10009
00000000 =00A1000B                  CNTLBW		  EQU	 $A1000B
00000000 =00A10009                  CNTLCW		  EQU	 $A10009
00000000 =00A1000D                  PPCNTL		  EQU	 $A1000D
00000000 =00A10007                  PPDATA		  EQU	 $A10007
00000000 =00A11100                  BUSREQ		  EQU	 $A11100
00000000 =00A11200                  BUSRES		  EQU	 $A11200
00000000 =00A00000                  Z80RAM		  EQU	 $A00000
00000000 =00C00000                  VDATA		   EQU	 $C00000
00000000 =00C00004                  VCTRL		   EQU	 $C00004
00000000                            SetVdpRegister  MACRO
00000000                            		MOVE.W  #$8000|(\1<<8)|\2,VCTRL; check out the SEGA manual
00000000                            		ENDM
00000000                            SetVdpRegisterCode	  MACRO
00000000                            		and.w   #$00ff,\2			  ; Mask off high part
00000000                            		or.w	#$8000|(\1<<8),\2
00000000                            		move.w  \2,VCTRL
00000000                            		ENDM
00000000                            AutoIncrement   MACRO
00000000                            		SetVdpRegister  15,\1
00000000                            		ENDM
00000000                            VramWrtAddr  MACRO
00000000                            		MOVE.L  #$40000000|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                            		ENDM
00000000                            VSramWrtAddr  MACRO
00000000                            		MOVE.L  #$40000010|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                            		ENDM
00000000                            CramWrtAddr  MACRO
00000000                            		MOVE.L  #$C0000000|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                            		ENDM
00000000                            CalcVramWrtAddrCode MACRO
00000000                            		move.w  \1,\2		  ; Copy for lower 14 bits
00000000                            		and.l   #$3fff,\2	  ; mask
00000000                            		lsl.l   #8,\2
00000000                            		lsl.l   #8,\2		  ; Shift up
00000000                            		or.l	#$40000000,\2  ; Set bit that tells VDP it's a VRAM WRITE
00000000                            		lsr.l   #8,\1
00000000                            		lsr.l   #6,\1		  ; Shift down 14 bits
00000000                            		and.l   #$3,\1
00000000                            		or.l	\1,\2		  ; and combine
00000000                            		ENDM
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            	
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; Equates section - Names for variables.
00000000                            ; ---------------------------------------------------------------------------
00000000                            	include "Variables and Equates.asm"
00000000                            ; size variables - you'll get an informational error if you need to change these...
00000000                            ; they are all in units of bytes
00000000 =00002F00                  Size_of_DAC_samples =		$2F00
00000000 =00006174                  Size_of_SEGA_sound =		$6174
00000000 =00000F64                  Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Object Status Table offsets (for everything between Object_RAM and Primary_Collision)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; universally followed object conventions:
00000000 =00000001                  render_flags =		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile =		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings =		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos =			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000C                  y_pos =			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =00000018                  priority =		$18 ; 0 = front
00000000 =00000019                  width_pixels =		$19
00000000 =0000001A                  mapping_frame =		$1A
00000000 =0000002C                  obWallJump:	equ $2C	; Wall Jump flag
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel =			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel =			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius =		$16 ; collision width / 2
00000000 =00000017                  x_radius =		$17 ; collision height / 2
00000000 =0000001B                  anim_frame =		$1B
00000000 =0000001C                  anim =			$1C
00000000 =0000001D                  next_anim =		$1D
00000000 =0000001E                  anim_frame_duration =	$1E
00000000 =00000022                  status =		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine =		$24
00000000 =00000025                  routine_secondary =	$25
00000000 =00000026                  angle =			$26 ; angle about the z=0 axis (360 degrees = 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags =	$20
00000000 =00000021                  collision_property =	$21
00000000 =00000023                  respawn_index =		$23
00000000 =00000028                  subtype =		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000014                  inertia =		$14 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000027                  flip_angle =		$27 ; angle about the x=0 axis (360 degrees = 256) (twist/tumble)
00000000 =00000028                  air_left =		$28
00000000 =00000029                  flip_turned =		$29 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control =		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000001C                  anim =			$1C
00000000 =0000002B                  status_secondary =	$2B
00000000 =0000002E                  move_lock =		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time =	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time =	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time =	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt =		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt =			$37 ; angle on ground
00000000 =00000038                  stick_to_convex =	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag =		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter =	$3A ; and $3B
00000000 =0000003C                  jumping =		$3C
00000000 =0000003D                  interact =		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000 =0000003E                  layer =			$3E ; collision plane, track switching...
00000000 =0000003F                  layer_plus =		$3F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by several objects but NOT sonic/tails:
00000000 =0000000A                  y_pixel =		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel =		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000 =0000003E                  parent =		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
00000000                            ; (provided because rearrangement of the above values sometimes requires making space in here too)
00000000 =0000000A                  objoff_A =		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
00000000 =0000000B                  objoff_B =		3+x_pos
00000000 =0000000E                  objoff_E =		2+y_pos
00000000 =0000000F                  objoff_F =		3+y_pos
00000000 =00000014                  objoff_14 =		$14
00000000 =00000015                  objoff_15 =		$15
00000000 =0000001F                  objoff_1F =		$1F
00000000 =00000027                  objoff_27 =		$27
00000000 =00000028                  objoff_28 =		$28 ; overlaps subtype, but a few objects use it for other things anyway
00000000 =00000029                  objoff_29 =		$29
00000000 =0000002A                  objoff_2A =		$2A
00000000 =0000002B                  objoff_2B =		$2B
00000000 =0000002C                  objoff_2C =		$2C
00000000 =0000002D                  objoff_2D =		$2D
00000000 =0000002E                  objoff_2E =		$2E
00000000 =0000002F                  objoff_2F =		$2F
00000000 =00000030                  objoff_30 =		$30
00000000 =00000031                  objoff_31 =		$31
00000000 =00000032                  objoff_32 =		$32
00000000 =00000033                  objoff_33 =		$33
00000000 =00000034                  objoff_34 =		$34
00000000 =00000035                  objoff_35 =		$35
00000000 =00000036                  objoff_36 =		$36
00000000 =00000037                  objoff_37 =		$37
00000000 =00000038                  objoff_38 =		$38
00000000 =00000039                  objoff_39 =		$39
00000000 =0000003A                  objoff_3A =		$3A
00000000 =0000003B                  objoff_3B =		$3B
00000000 =0000003C                  objoff_3C =		$3C
00000000 =0000003D                  objoff_3D =		$3D
00000000 =0000003E                  objoff_3E =		$3E
00000000 =0000003F                  objoff_3F =		$3F
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; property of all objects:
00000000 =00000040                  next_object =		$40 ; the size of an object
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; RAM variables
00000000 =FFFF0000                  RAM_Start =			$FFFF0000
00000000 =FFFF0000                  Metablock_Table =		$FFFF0000
00000000 =FFFF8000                  Level_Layout =			$FFFF8000
00000000 =FFFF9000                  Block_Table =			$FFFF9000
00000000 =FFFFAA00                  Decomp_Buffer =			$FFFFAA00
00000000 =FFFFAC00                  Sprite_Table_Input = 		$FFFFAC00 ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
00000000 =FFFFB000                  Object_RAM =			$FFFFB000 ; through $FFFFD5FF
00000000 =FFFFB000                  MainCharacter =			$FFFFB000 ; first object (usually Sonic except in a Tails Alone game)
00000000 =FFFFB040                  Sidekick =			$FFFFB040 ; second object (Tails in a Sonic and Tails game)
00000000 =FFFFD000                  Tails_Tails =			$FFFFD000 ; address of the Tail's Tails object
00000000 =FFFFD100                  Sonic_Dust =			$FFFFD100
00000000 =FFFFD140                  Tails_Dust =			$FFFFD140
00000000                            
00000000 =FFFFD000                  PNT_Buffer =			$FFFFD000 ; in special stage
00000000 =FFFFD600                  Primary_Collision =		$FFFFD600
00000000 =FFFFD700                  Horiz_Scroll_Buf_2 =		$FFFFD700 ; in special stage
00000000 =FFFFD900                  Secondary_Collision =		$FFFFD900
00000000 =FFFFDC00                  VDP_Command_Buffer =		$FFFFDC00 ; stores VDP commands to issue the next time ProcessDMAQueue is called
00000000 =FFFFDCFC                  VDP_Command_Buffer_Slot =	$FFFFDCFC ; stores the address of the next open slot for a queued VDP command
00000000 =FFFFDD00                  Sprite_Table_2 =		$FFFFDD00 ; Sprite attribute table buffer for the bottom split screen in 2-player mode
00000000 =FFFFE000                  Horiz_Scroll_Buf =		$FFFFE000
00000000 =FFFFE400                  Sonic_Stat_Record_Buf =		$FFFFE400
00000000 =FFFFE500                  Sonic_Pos_Record_Buf =		$FFFFE500
00000000 =FFFFE600                  Tails_Pos_Record_Buf =		$FFFFE600
00000000 =FFFFE800                  Ring_Positions =		$FFFFE800
00000000 =FFFFEE00                  Camera_RAM =			$FFFFEE00
00000000 =FFFFEE00                  Camera_X_pos =			$FFFFEE00
00000000 =FFFFEE04                  Camera_Y_pos =			$FFFFEE04
00000000 =FFFFEEC6                  Camera_Max_Y_pos =		$FFFFEEC6
00000000 =FFFFEEC8                  Camera_Min_X_pos =		$FFFFEEC8
00000000 =FFFFEECA                  Camera_Max_X_pos =		$FFFFEECA
00000000 =FFFFEECC                  Camera_Min_Y_pos =		$FFFFEECC
00000000 =FFFFEECE                  Camera_Max_Y_pos_now =		$FFFFEECE ; was "Camera_max_scroll_spd"...
00000000 =FFFFEED2                  Sonic_Pos_Record_Index =	$FFFFEED2 ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
00000000 =FFFFEED6                  Tails_Pos_Record_Index =	$FFFFEED6 ; into Tails_Pos_Record_Buf
00000000 =FFFFEED8                  Camera_Y_pos_bias =		$FFFFEED8 ; added to y position for lookup/lookdown, $60 is center
00000000 =FFFFEEDA                  Camera_Y_pos_bias_2P =		$FFFFEEDA ; for Tails
00000000 =FFFFEEDF                  Dynamic_Resize_Routine =	$FFFFEEDF
00000000 =FFFFEEF8                  Tails_Min_X_pos =		$FFFFEEF8
00000000 =FFFFEEFA                  Tails_Max_X_pos =		$FFFFEEFA
00000000 =FFFFEEFE                  Tails_Max_Y_pos =		$FFFFEEFE
00000000                            
00000000 =FFFFF000                  Underwater_palette_2 = 		$FFFFF000 ; not sure what it's used for but it's only used when there's water
00000000 =FFFFF080                  Underwater_palette = 		$FFFFF080 ; main palette for underwater parts of the screen
00000000 =FFFFF0E0                  Underwater_palette_line4 = 	$FFFFF0E0
00000000                            
00000000 =FFFFF600                  Game_Mode =			$FFFFF600 ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
00000000 =FFFFF602                  Ctrl_1_Logical =		$FFFFF602 ; 2 bytes
00000000 =FFFFF602                  Ctrl_1_Held_Logical =		$FFFFF602 ; 1 byte
00000000 =FFFFF603                  Ctrl_1_Press_Logical =		$FFFFF603 ; 1 byte
00000000 =FFFFF604                  Ctrl_1 =			$FFFFF604 ; 2 bytes
00000000 =FFFFF604                  Ctrl_1_Held =			$FFFFF604 ; 1 byte ; (pressed and held were switched around before)
00000000 =FFFFF605                  Ctrl_1_Press =			$FFFFF605 ; 1 byte
00000000 =FFFFF606                  Ctrl_2 =			$FFFFF606 ; 2 bytes
00000000 =FFFFF606                  Ctrl_2_Held =			$FFFFF606 ; 1 byte
00000000 =FFFFF607                  Ctrl_2_Press =			$FFFFF607 ; 1 byte
00000000 =FFFFF614                  Demo_Time_left =		$FFFFF614 ; 2 bytes
00000000                            
00000000 =FFFFF616                  Vscroll_Factor =		$FFFFF616
00000000 =FFFFF624                  Hint_counter_reserve =		$FFFFF624 ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
00000000 =FFFFF62A                  Delay_Time =			$FFFFF62A ; number of frames to delay the game
00000000 =FFFFF636                  RNG_seed =			$FFFFF636 ; used for random number generation
00000000 =FFFFF63A                  Game_paused =			$FFFFF63A
00000000 =FFFFF640                  DMA_data_thunk =		$FFFFF640 ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.
00000000                            
00000000 =FFFFF646                  Water_Level_1 =			$FFFFF646
00000000 =FFFFF648                  Water_Level_2 =			$FFFFF648
00000000 =FFFFF64A                  Water_Level_3 =			$FFFFF64A
00000000 =FFFFF64D                  Water_routine =			$FFFFF64D
00000000 =FFFFF64E                  Water_move =			$FFFFF64E
00000000 =FFFFF64C                  Water_on =			$FFFFF64C ; is set based on Water_flag
00000000 =FFFFF650                  New_Water_Level =		$FFFFF650
00000000 =FFFFF652                  Water_change_speed =		$FFFFF652
00000000 =FFFFF65E                  Palette_frame_count =		$FFFFF65E
00000000 =FFFFF65F                  Super_Sonic_palette =		$FFFFF65F
00000000 =FFFFF66A                  Ctrl_2_Logical =		$FFFFF66A ; 2 bytes
00000000 =FFFFF66A                  Ctrl_2_Held_Logical =		$FFFFF66A ; 1 byte
00000000 =FFFFF66B                  Ctrl_2_Press_Logical =		$FFFFF66B ; 1 byte
00000000 =FFFFF66C                  Sonic_Look_delay_counter = 	$FFFFF66C ; 2 bytes
00000000 =FFFFF66E                  Tails_Look_delay_counter = 	$FFFFF66E ; 2 bytes
00000000 =FFFFF670                  Super_Sonic_frame_count =	$FFFFF670
00000000 =FFFFF680                  Plc_Buffer =			$FFFFF680 ; Pattern load queue
00000000                            
00000000 =FFFFF700                  Misc_Variables =		$FFFFF700
00000000                            
00000000                            ; extra variables for the second player (CPU) in 1-player mode
00000000 =FFFFF702                  Tails_control_counter =		$FFFFF702 ; how long until the CPU takes control
00000000 =FFFFF704                  Tails_respawn_counter =		$FFFFF704
00000000 =FFFFF708                  Tails_CPU_routine =		$FFFFF708
00000000 =FFFFF70A                  Tails_CPU_target_x =		$FFFFF70A
00000000 =FFFFF70C                  Tails_CPU_target_y =		$FFFFF70C
00000000 =FFFFF70E                  Tails_interact_ID =		$FFFFF70E ; object ID of last object stood on
00000000                            
00000000 =FFFFF711                  Level_started_flag =		$FFFFF711
00000000 =FFFFF71A                  CNZ_Bumper_routine =		$FFFFF71A
00000000 =FFFFF72C                  Dirty_flag =			$FFFFF72C ; if whole screen needs to redraw
00000000 =FFFFF730                  Water_flag =			$FFFFF730 ; if the level has water or oil
00000000                            
00000000 =FFFFF760                  Sonic_top_speed =		$FFFFF760
00000000 =FFFFF762                  Sonic_acceleration =		$FFFFF762
00000000 =FFFFF764                  Sonic_deceleration =		$FFFFF764
00000000 =FFFFF76C                  Obj_placement_routine =		$FFFFF76C
00000000 =FFFFF770                  Obj_load_addr_0 =		$FFFFF770
00000000 =FFFFF774                  Obj_load_addr_1 =		$FFFFF774
00000000 =FFFFF778                  Obj_load_addr_2 =		$FFFFF778
00000000 =FFFFF77C                  Obj_load_addr_3 =		$FFFFF77C
00000000 =FFFFF790                  Demo_button_index =		$FFFFF790 ; index into button press demo data, for player 1
00000000 =FFFFF792                  Demo_press_counter =		$FFFFF792 ; frames remaining until next button press, for player 1
00000000 =FFFFF732                  Demo_button_index_2P =		$FFFFF732 ; index into button press demo data, for player 2
00000000 =FFFFF734                  Demo_press_counter_2P =		$FFFFF734 ; frames remaining until next button press, for player 2
00000000 =FFFFF796                  Collision_addr =		$FFFFF796
00000000 =FFFFF7AA                  Current_Boss_ID =		$FFFFF7AA
00000000 =FFFFF7CC                  Control_Locked =		$FFFFF7CC
00000000 =FFFFF7D0                  Chain_Bonus_counter =		$FFFFF7D0 ; counts up when you destroy things that give points, resets when you touch the ground
00000000 =FFFFF7D2                  Bonus_Countdown_1 =		$FFFFF7D2 ; level results time bonus or special stage sonic ring bonus
00000000 =FFFFF7D4                  Bonus_Countdown_2 =		$FFFFF7D4 ; level results ring bonus or special stage tails ring bonus
00000000 =FFFFF7D6                  Update_Bonus_score =		$FFFFF7D6
00000000 =FFFFF7DA                  Camera_X_pos_coarse =		$FFFFF7DA ; (Camera_X_pos - 128) / 256
00000000                            
00000000 =FFFFF800                  Sprite_Table =			$FFFFF800 ; Sprite attribute table buffer
00000000                            
00000000 =FFFFFB00                  Normal_palette =		$FFFFFB00
00000000 =FFFFFB20                  Normal_palette_line2 =		$FFFFFB20
00000000 =FFFFFB40                  Normal_palette_line3 =		$FFFFFB40
00000000 =FFFFFB60                  Normal_palette_line4 =		$FFFFFB60
00000000 =FFFFFB80                  Second_palette =		$FFFFFB80
00000000 =FFFFFBA0                  Second_palette_line2 =		$FFFFFBA0
00000000 =FFFFFBC0                  Second_palette_line3 =		$FFFFFBC0
00000000 =FFFFFBE0                  Second_palette_line4 =		$FFFFFBE0
00000000                            
00000000 =FFFFFC00                  Object_Respawn_Table =		$FFFFFC00
00000000 =FFFFFE00                  System_Stack =			$FFFFFE00
00000000 =FFFFFE02                  Level_Inactive_flag = 		$FFFFFE02 ; (2 bytes)
00000000 =FFFFFE04                  Timer_frames =			$FFFFFE04 ; (2 bytes)
00000000 =FFFFFE06                  Debug_object =			$FFFFFE06
00000000 =FFFFFE08                  Debug_placement_mode =		$FFFFFE08
00000000 =FFFFFE10                  Current_ZoneAndAct =		$FFFFFE10 ; 2 bytes
00000000 =FFFFFE10                  Current_Zone =			$FFFFFE10 ; 1 byte
00000000 =FFFFFE11                  Current_Act =			$FFFFFE11 ; 1 byte
00000000 =FFFFFE12                  Life_count =			$FFFFFE12
00000000 =FFFFFE16                  Current_Special_Stage =		$FFFFFE16
00000000 =FFFFFE18                  Continue_count =		$FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag =		$FFFFFE19
00000000 =FFFFFE1A                  Time_Over_flag =		$FFFFFE1A
00000000 =FFFFFE1B                  Extra_life_flags =		$FFFFFE1B
00000000                            
00000000                            ; If set, the respective HUD element will be updated.
00000000 =FFFFFE1C                  Update_HUD_lives =		$FFFFFE1C
00000000 =FFFFFE1D                  Update_HUD_rings =		$FFFFFE1D
00000000 =FFFFFE1E                  Update_HUD_timer =		$FFFFFE1E
00000000 =FFFFFE1F                  Update_HUD_score =		$FFFFFE1F
00000000                            
00000000 =FFFFFE20                  Ring_count =			$FFFFFE20 ; 2 bytes
00000000 =FFFFFE22                  Timer =				$FFFFFE22 ; 4 bytes
00000000 =FFFFFE22                  Timer_minute_word =		$FFFFFE22 ; 2 bytes
00000000 =FFFFFE23                  Timer_minute =			$FFFFFE23 ; 1 byte
00000000 =FFFFFE24                  Timer_second =			$FFFFFE24 ; 1 byte
00000000 =FFFFFE25                  Timer_centisecond =		$FFFFFE25 ; 1 byte
00000000 =FFFFFE26                  Score =				$FFFFFE26 ; 4 bytes
00000000 =FFFFFE30                  Last_star_pole_hit =		$FFFFFE30 ; 1 byte -- max activated starpole ID in this act
00000000                            
00000000 =FFFFFE31                  Saved_Last_star_pole_hit =	$FFFFFE31
00000000 =FFFFFE32                  Saved_x_pos =			$FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos =			$FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count =		$FFFFFE36
00000000 =FFFFFE38                  Saved_Timer =			$FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile =		$FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer =			$FFFFFE3E
00000000 =FFFFFE40                  Saved_Camera_X_pos =		$FFFFFE40
00000000 =FFFFFE42                  Saved_Camera_Y_pos =		$FFFFFE42
00000000 =FFFFFE50                  Saved_Water_Level =		$FFFFFE50
00000000 =FFFFFE52                  Saved_Water_routine =		$FFFFFE52
00000000 =FFFFFE53                  Saved_Water_move =		$FFFFFE53
00000000 =FFFFFE54                  Saved_Extra_life_flags =	$FFFFFE54
00000000 =FFFFFE55                  Saved_Extra_life_flags_2P =	$FFFFFE55
00000000 =FFFFFE56                  Saved_Camera_Max_Y_pos =	$FFFFFE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine =	$FFFFFE58
00000000                            
00000000 =FFFFFEA0                  Logspike_anim_counter =		$FFFFFEA0
00000000 =FFFFFEA1                  Logspike_anim_frame =		$FFFFFEA1
00000000 =FFFFFEA2                  Rings_anim_counter =		$FFFFFEA2
00000000 =FFFFFEA3                  Rings_anim_frame =		$FFFFFEA3
00000000 =FFFFFEA4                  Unknown_anim_counter =		$FFFFFEA4 ; I think this was $FFFFFEC4 in the alpha
00000000 =FFFFFEA5                  Unknown_anim_frame =		$FFFFFEA5
00000000 =FFFFFEA6                  Ring_spill_anim_counter =	$FFFFFEA6 ; scattered rings
00000000 =FFFFFEA7                  Ring_spill_anim_frame =		$FFFFFEA7
00000000 =FFFFFEA8                  Ring_spill_anim_accum =		$FFFFFEA8
00000000                            
00000000                            ; values for the second player (some of these only apply to 2-player games)
00000000 =FFFFFEC0                  Tails_top_speed =		$FFFFFEC0 ; Tails_max_vel
00000000 =FFFFFEC2                  Tails_acceleration =		$FFFFFEC2
00000000 =FFFFFEC4                  Tails_deceleration =		$FFFFFEC4
00000000 =FFFFFEC6                  Life_count_2P =			$FFFFFEC6
00000000 =FFFFFEC7                  Extra_life_flags_2P =		$FFFFFEC7
00000000 =FFFFFEC8                  Update_HUD_lives_2P =		$FFFFFEC8
00000000 =FFFFFEC9                  Update_HUD_rings_2P =		$FFFFFEC9
00000000 =FFFFFECA                  Update_HUD_timer_2P =		$FFFFFECA
00000000 =FFFFFECB                  Update_HUD_score_2P =		$FFFFFECB ; mostly unused
00000000 =FFFFFECC                  Time_Over_flag_2P =		$FFFFFECC
00000000 =FFFFFED0                  Ring_count_2P =			$FFFFFED0
00000000 =FFFFFED2                  Timer_2P =			$FFFFFED2 ; 4 bytes
00000000 =FFFFFED2                  Timer_minute_word_2P =		$FFFFFED2 ; 2 bytes
00000000 =FFFFFED3                  Timer_minute_2P =		$FFFFFED3 ; 1 byte
00000000 =FFFFFED4                  Timer_second_2P =		$FFFFFED4 ; 1 byte
00000000 =FFFFFED5                  Timer_centisecond_2P =		$FFFFFED5 ; 1 byte
00000000 =FFFFFED6                  Score_2P =			$FFFFFED6
00000000 =FFFFFEE0                  Last_star_pole_hit_2P =		$FFFFFEE0
00000000                            
00000000 =FFFFFEE1                  Saved_Last_star_pole_hit_2P =	$FFFFFEE1
00000000 =FFFFFEE2                  Saved_x_pos_2P =		$FFFFFEE2
00000000 =FFFFFEE4                  Saved_y_pos_2P =		$FFFFFEE4
00000000 =FFFFFEE6                  Saved_Ring_count_2P =		$FFFFFEE6
00000000 =FFFFFEE8                  Saved_Timer_2P =		$FFFFFEE8
00000000 =FFFFFEEC                  Saved_art_tile_2P =		$FFFFFEEC
00000000 =FFFFFEEE                  Saved_layer_2P =		$FFFFFEEE
00000000                            
00000000 =FFFFFEF8                  Loser_Time_Left =		$FFFFFEF8
00000000 =FFFFFF10                  Results_Screen_2P =		$FFFFFF10 ; 0 = act, 1 = zone, 2 = game, 3 = SS, 4 = SS all
00000000 =FFFFFF20                  Results_Data_2P =		$FFFFFF20 ; $18 bytes
00000000 =FFFFFF20                  EHZ_Results_2P =		$FFFFFF20 ; 6 bytes
00000000 =FFFFFF26                  MCZ_Results_2P =		$FFFFFF26 ; 6 bytes
00000000 =FFFFFF2C                  CNZ_Results_2P =		$FFFFFF2C ; 6 bytes
00000000 =FFFFFF32                  SS_Results_2P =			$FFFFFF32 ; 6 bytes
00000000 =FFFFFF38                  SS_Total_Won =			$FFFFFF38 ; 2 bytes (player 1 then player 2)
00000000 =FFFFFF40                  Perfect_rings_left =		$FFFFFF40
00000000 =FFFFFF70                  Player_mode =			$FFFFFF70 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000 =FFFFFF72                  Player_option =			$FFFFFF72 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000                            
00000000 =FFFFFF74                  Two_player_items =		$FFFFFF74
00000000 =FFFFFF82                  Level_select_zone =		$FFFFFF82
00000000 =FFFFFF84                  Sound_test_sound =		$FFFFFF84
00000000 =FFFFFF86                  Title_screen_option =		$FFFFFF86
00000000 =FFFFFF88                  Current_Zone_2P =		$FFFFFF88
00000000 =FFFFFF89                  Current_Act_2P =		$FFFFFF89
00000000 =FFFFFF8A                  Two_player_mode_copy =		$FFFFFF8A
00000000 =FFFFFF8C                  Options_menu_box =		$FFFFFF8C
00000000 =FFFFFF90                  Level_Music =			$FFFFFF90
00000000 =FFFFFF98                  Game_Over_2P =			$FFFFFF98
00000000 =FFFFFFB0                  Got_Emerald =			$FFFFFFB0
00000000 =FFFFFFB1                  Emerald_count =			$FFFFFFB1
00000000 =FFFFFFB2                  Got_Emeralds_array =		$FFFFFFB2 ; 7 bytes
00000000 =FFFFFFC0                  Next_Extra_life_score =		$FFFFFFC0
00000000 =FFFFFFC4                  Next_Extra_life_score_2P =	$FFFFFFC4
00000000 =FFFFFFC8                  Level_Has_Signpost =		$FFFFFFC8 ; 1 byte ; 1 = signpost, 0 = boss or nothing
00000000 =FFFFFFD0                  Level_select_flag =		$FFFFFFD0
00000000 =FFFFFFD4                  Correct_cheat_entries =		$FFFFFFD4
00000000 =FFFFFFD6                  Correct_cheat_entries_2 =	$FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFFD8                  Two_player_mode =		$FFFFFFD8 ; flag (0 for main game)
00000000                            
00000000                            ; Values in these variables are passed to the sound driver during V-INT.
00000000                            ; They use a playlist index, not a sound test index.
00000000 =FFFFFFE0                  Music_to_play =			$FFFFFFE0
00000000 =FFFFFFE1                  SFX_to_play =			$FFFFFFE1 ; normal
00000000 =FFFFFFE2                  SFX_to_play_2 =			$FFFFFFE2 ; alternating stereo
00000000 =FFFFFFE4                  Music_to_play_2 =		$FFFFFFE4 ; alternate (higher priority?) slot
00000000                            
00000000 =FFFFFFF0                  Demo_mode_flag =		$FFFFFFF0 ; 1 if a demo is playing (2 bytes)
00000000 =FFFFFFF2                  Demo_number =			$FFFFFFF2 ; which demo will play next (2 bytes)
00000000 =FFFFFFF8                  Graphics_Flags =		$FFFFFFF8 ; misc. bitfield
00000000 =FFFFFFFC                  Checksum_fourcc =		$FFFFFFFC ; (4 bytes)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000 =00C00004                  VDP_control_port =		$C00004 ; (8=r/w, 16=r/w)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A10001                  Z80_Version =			$A10001
00000000 =00A10002                  Z80_Port_1_Data =		$A10002
00000000 =00A10008                  Z80_Port_1_Control =		$A10008
00000000 =00A1000A                  Z80_Port_2_Control =		$A1000A
00000000 =00A1000C                  Z80_Expansion_Control =		$A1000C
00000000 =00A11100                  Z80_Bus_Request =		$A11100
00000000 =00A11200                  Z80_Reset =			$A11200
00000000 =00A11200                  Z80_Reset =			$A11200
00000000                            
00000000                            	include "WJConstants.asm"
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ;Shit needed for the Wall Jump.
00000000 =0000003C                  obJumping:	equ $3C	; jumping flag
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =FFFFF602                  v_jpadhold2:	= $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	= $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	= $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	= $FFFFF605	; joypad input - pressed
00000000                            
00000000                            ;status shit
00000000 =00000000                  staFacing:	equ 0
00000000 =00000001                  staAir:		equ 1
00000000 =00000002                  staSpin:	equ 2
00000000 =00000003                  staOnObj:	equ 3
00000000 =00000004                  staRollJump:	equ 4
00000000 =00000005                  staPush:	equ 5
00000000 =00000006                  staWater:	equ 6
00000000 =00000006                  staWater:	equ 6
00000000                            
00000000 =00A14000                  Security_Addr =			$A14000	
00000000                            		include 	"Debugger.asm"
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp	equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000D0                  str		equ		$D0				; flag to display as string (treat as offset, insert string from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr		equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea		*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")			; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp		\console_program										; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0						; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea		4*4(sp), a2
00000000                            		endc
00000000                            		lea		@str\@(pc), a1
00000000                            		jsr		ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea		__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr		ErrorHandler.__extern__console_only
00000000                            		jsr		\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr		ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr		ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            	__stack:set		0						; size of actual stack
00000000                            	__sp:	set		0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string			; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string			; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set		1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')		; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."    
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set		__endpos+1
00000000                            		__pos:	set		instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            
00000000                            	endm
00000000                            	endm
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Device:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3230+  Date:		dc.b '(C)SEGA 2018.Apr' ; Release date
00000120 536F 6E69 6320 5468 6520+  Title_Local:	dc.b 'Sonic The Hedgehog Kyukyoku                     ' ; Domestic name
00000150 536F 6E69 6320 5468 6520+  Title_Int:	dc.b 'Sonic The Hedgehog Kyukyoku                     ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 5241 F820                  SRAMSupport:	dc.l $5241F820	; change to $5241F820 (NOT $5241E020) to create SRAM
000001B4 0020 0000                  	dc.l $200000	; SRAM start
000001B8 0020 0200                  	dc.l $200200	; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 4EB9 0000 0000             		jsr     SegaLogo
00000322 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000328 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032E 2011                       		move.l	(a1),d0
00000330 7200                       		moveq	#0,d1
00000332                            
00000332                            loc_32C:
00000332 D258                       		add.w	(a0)+,d1
00000334 B088                       		cmp.l	a0,d0
00000336 64FA                       		bcc.s	loc_32C
00000338 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033E B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000340 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
00000344 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000348 7E00                       		moveq	#0,d7
0000034A 3C3C 007F                  		move.w	#$7F,d6
0000034E                            
0000034E                            loc_348:
0000034E 2CC7                       		move.l	d7,(a6)+
00000350 51CE FFFC                  		dbf	d6,loc_348
00000354 1039 00A1 0001             		move.b	($A10001).l,d0
0000035A 0200 00C0                  		andi.b	#$C0,d0
0000035E 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000362 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
0000036A                            
0000036A                            GameInit:
0000036A 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000370 7E00                       		moveq	#0,d7
00000372 3C3C 3F7F                  		move.w	#$3F7F,d6
00000376                            
00000376                            GameClrRAM:
00000376 2CC7                       		move.l	d7,(a6)+
00000378 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000392 0240 003C                  		andi.w	#$3C,d0
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003A0                            ; ===========================================================================
000003A0 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003A4                            ; ===========================================================================
000003A4 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A8                            ; ===========================================================================
000003A8 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003BC                            ; ===========================================================================
000003BC 6000 0000                  		bra.w	SSRGScreen	; CreditsSSRG Screen ($20)
000003C0                            ; ===========================================================================
000003C0 4E75                       		rts	
000003C2                            ; ===========================================================================
000003C2                            
000003C2                            CheckSumError:
000003C2 6100 0000                  		bsr.w	VDPSetupGame
000003C6 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003D0 7E3F                       		moveq	#$3F,d7
000003D2                            
000003D2                            CheckSum_Red:
000003D2 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003DA 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003DE                            
000003DE                            CheckSum_Loop:
000003DE 60FE                       		bra.s	CheckSum_Loop
000003E0                            ; ===========================================================================
000003E0                            
000003E0                            
000003E0                            ; ===========================================================================
000003E0                            
000003E0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000900                            		even
00000900                            
00000900                            ; ===========================================================================
00000900                            
00000900                            loc_B10:				; XREF: Vectors
00000900 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000904 4A38 F62A                  		tst.b	($FFFFF62A).w
00000908 6700                       		beq.s	loc_B88
0000090A 3039 00C0 0004             		move.w	($C00004).l,d0
00000910 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000091A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000922 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000928 6700                       		beq.s	loc_B42
0000092A 303C 0700                  		move.w	#$700,d0
0000092E                            
0000092E                            loc_B3E:
0000092E 51C8 FFFE                  		dbf	d0,loc_B3E
00000932                            
00000932                            loc_B42:
00000932 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000936 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
0000093C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000942 0240 003E                  		andi.w	#$3E,d0
00000946 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
0000094A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
0000094E                            
0000094E                            loc_B5E:				; XREF: loc_B88
0000094E 4EB9 0000 0000             		jsr	sub_71B4C
00000954                            
00000954                            loc_B64:				; XREF: loc_D50
00000954 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000958 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
0000095C 4E73                       		rte	
0000095E                            ; ===========================================================================
0000095E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000962 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000966 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
0000096A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
0000096E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000972 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000976 0000                       		dc.w loc_E72-off_B6E
00000978                            ; ===========================================================================
00000978                            
00000978                            loc_B88:				; XREF: loc_B10; off_B6E
00000978 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
0000097E 6700                       		beq.s	loc_B9A
00000980 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000986 6600 FFC6                  		bne.w	loc_B5E
0000098A                            
0000098A                            loc_B9A:
0000098A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000990 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000994 3039 00C0 0004             		move.w	($C00004).l,d0
0000099A 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
000009A0 6700                       		beq.s	loc_BBA
000009A2 303C 0700                  		move.w	#$700,d0
000009A6                            
000009A6                            loc_BB6:
000009A6 51C8 FFFE                  		dbf	d0,loc_BB6
000009AA                            
000009AA                            loc_BBA:
000009AA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
000009B0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
000009B8                            
000009B8                            loc_BC8:
000009B8 0839 0000 00A1 1100        		btst	#0,($A11100).l
000009C0 66F6                       		bne.s	loc_BC8
000009C2 4A38 F64E                  		tst.b	($FFFFF64E).w
000009C6 6600                       		bne.s	loc_BFE
000009C8 4BF9 00C0 0004             		lea	($C00004).l,a5
000009CE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000009D4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000009DA 3ABC 977F                  		move.w	#$977F,(a5)
000009DE 3ABC C000                  		move.w	#$C000,(a5)
000009E2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000009E8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000009EC 6000                       		bra.s	loc_C22
000009EE                            ; ===========================================================================
000009EE                            
000009EE                            loc_BFE:				; XREF: loc_BC8
000009EE 4BF9 00C0 0004             		lea	($C00004).l,a5
000009F4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000009FA 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000A00 3ABC 977F                  		move.w	#$977F,(a5)
00000A04 3ABC C000                  		move.w	#$C000,(a5)
00000A08 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000A0E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000A12                            
00000A12                            loc_C22:				; XREF: loc_BC8
00000A12 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000A16 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000A1E 6000 FF2E                  		bra.w	loc_B5E
00000A22                            ; ===========================================================================
00000A22                            
00000A22                            loc_C32:				; XREF: off_B6E
00000A22 6100 0000                  		bsr.w	sub_106E
00000A26                            
00000A26                            loc_C36:				; XREF: off_B6E
00000A26 4A78 F614                  		tst.w	($FFFFF614).w
00000A2A 6700 0000                  		beq.w	locret_C42
00000A2E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000A32                            
00000A32                            locret_C42:
00000A32 4E75                       		rts	
00000A34                            ; ===========================================================================
00000A34                            
00000A34                            loc_C44:				; XREF: off_B6E
00000A34 6100 0000                  		bsr.w	sub_106E
00000A38 4EB9 0000 0000             		jsr		sub_6886
00000A3E 6100 0000                  		bsr.w	sub_1642
00000A42 4A78 F614                  		tst.w	($FFFFF614).w
00000A46 6700 0000                  		beq.w	locret_C5C
00000A4A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000A4E                            
00000A4E                            locret_C5C:
00000A4E 4E75                       		rts	
00000A50                            ; ===========================================================================
00000A50                            
00000A50                            loc_C5E:				; XREF: off_B6E
00000A50 6100 0000                  		bsr.w	sub_106E
00000A54 4E75                       		rts	
00000A56                            ; ===========================================================================
00000A56                            
00000A56                            loc_C64:				; XREF: off_B6E
00000A56 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000A5C 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000A60                            
00000A60                            loc_C6E:				; XREF: off_B6E
00000A60 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000A68                            
00000A68                            loc_C76:
00000A68 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000A70 66F6                       		bne.s	loc_C76		; if not, branch
00000A72 6100 0000                  		bsr.w	ReadJoypads
00000A76 4A38 F64E                  		tst.b	($FFFFF64E).w
00000A7A 6600                       		bne.s	loc_CB0
00000A7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000A82 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000A88 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000A8E 3ABC 977F                  		move.w	#$977F,(a5)
00000A92 3ABC C000                  		move.w	#$C000,(a5)
00000A96 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000A9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000AA0 6000                       		bra.s	loc_CD4
00000AA2                            ; ===========================================================================
00000AA2                            
00000AA2                            loc_CB0:				; XREF: loc_C76
00000AA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000AA8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000AAE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000AB4 3ABC 977F                  		move.w	#$977F,(a5)
00000AB8 3ABC C000                  		move.w	#$C000,(a5)
00000ABC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000AC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000AC6                            
00000AC6                            loc_CD4:				; XREF: loc_C76
00000AC6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000ACA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000AD0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000AD6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000ADC 3ABC 977F                  		move.w	#$977F,(a5)
00000AE0 3ABC 7C00                  		move.w	#$7C00,(a5)
00000AE4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000AEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000AEE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000AF4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000AFA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000B00 3ABC 977F                  		move.w	#$977F,(a5)
00000B04 3ABC 7800                  		move.w	#$7800,(a5)
00000B08 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000B0E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B12 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000B18                            
00000B18                            loc_D50:
00000B18 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000B20 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000B26 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000B2C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000B32 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000B38 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000B3E 6400                       		bcc.s	Demo_Time
00000B40 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000B46 588F                       		addq.l	#4,sp
00000B48 6000 FE0A                  		bra.w	loc_B64
00000B4C                            
00000B4C                            ; ---------------------------------------------------------------------------
00000B4C                            ; Subroutine to	run a demo for an amount of time
00000B4C                            ; ---------------------------------------------------------------------------
00000B4C                            
00000B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000B4C                            
00000B4C                            
00000B4C                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000B4C 4EB9 0000 0000             		jsr		LoadTilesAsYouMove
00000B52 4EB9 0000 0000             		jsr	AniArt_Load
00000B58 4EB9 0000 0000             		jsr	HudUpdate
00000B5E 6100 0000                  		bsr.w	sub_165E
00000B62 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000B66 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000B6A 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000B6E                            
00000B6E                            Demo_TimeEnd:
00000B6E 4E75                       		rts	
00000B70                            ; End of function Demo_Time
00000B70                            
00000B70                            ; ===========================================================================
00000B70                            
00000B70                            loc_DA6:				; XREF: off_B6E
00000B70 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000B78                            
00000B78                            loc_DAE:
00000B78 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000B80 66F6                       		bne.s	loc_DAE		; if not, branch
00000B82 6100 0000                  		bsr.w	ReadJoypads
00000B86 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B8C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B92 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B98 3ABC 977F                  		move.w	#$977F,(a5)
00000B9C 3ABC C000                  		move.w	#$C000,(a5)
00000BA0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BA6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BB0 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000BB6 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000BBC 3ABC 977F                  		move.w	#$977F,(a5)
00000BC0 3ABC 7800                  		move.w	#$7800,(a5)
00000BC4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000BCA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BCE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BD4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000BDA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000BE0 3ABC 977F                  		move.w	#$977F,(a5)
00000BE4 3ABC 7C00                  		move.w	#$7C00,(a5)
00000BE8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000BEE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000BFA 6100 0000                  		bsr.w	PalCycle_SS
00000BFE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000C04                            
00000C04                            loc_E64:
00000C04 4A78 F614                  		tst.w	($FFFFF614).w
00000C08 6700 0000                  		beq.w	locret_E70
00000C0C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C10                            
00000C10                            locret_E70:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            loc_E72:				; XREF: off_B6E
00000C12 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C1A                            
00000C1A                            loc_E7A:
00000C1A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C22 66F6                       		bne.s	loc_E7A		; if not, branch
00000C24 6100 0000                  		bsr.w	ReadJoypads
00000C28 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C2C 6600                       		bne.s	loc_EB4
00000C2E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C34 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C3A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C40 3ABC 977F                  		move.w	#$977F,(a5)
00000C44 3ABC C000                  		move.w	#$C000,(a5)
00000C48 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C4E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C52 6000                       		bra.s	loc_ED8
00000C54                            ; ===========================================================================
00000C54                            
00000C54                            loc_EB4:				; XREF: loc_E7A
00000C54 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C5A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C60 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C66 3ABC 977F                  		move.w	#$977F,(a5)
00000C6A 3ABC C000                  		move.w	#$C000,(a5)
00000C6E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C74 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C78                            
00000C78                            loc_ED8:				; XREF: loc_E7A
00000C78 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C82 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000C88 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000C8E                            
00000C8E                            loc_EEE:
00000C8E 3ABC 977F                  		move.w	#$977F,(a5)
00000C92 3ABC 7C00                  		move.w	#$7C00,(a5)
00000C96 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000C9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CA0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CA6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CAC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CB2 3ABC 977F                  		move.w	#$977F,(a5)
00000CB6 3ABC 7800                  		move.w	#$7800,(a5)
00000CBA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CC0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CC4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CCA                            
00000CCA                            loc_F54:
00000CCA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000CD2 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000CD8 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000CDE 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000CE4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000CEA 4EB9 0000 0000             		jsr		LoadTilesAsYouMove
00000CF0 4EB9 0000 0000             		jsr	AniArt_Load
00000CF6 4EB9 0000 0000             		jsr	HudUpdate
00000CFC 6100 0000                  		bsr.w	sub_1642
00000D00 4E75                       		rts	
00000D02                            ; ===========================================================================
00000D02                            
00000D02                            loc_F8A:				; XREF: off_B6E
00000D02 6100 0000                  		bsr.w	sub_106E
00000D06 5238 F628                  		addq.b	#1,($FFFFF628).w
00000D0A 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000D10 4E75                       		rts	
00000D12                            ; ===========================================================================
00000D12                            
00000D12                            loc_F9A:				; XREF: off_B6E
00000D12 6100 0000                  		bsr.w	sub_106E
00000D16 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000D1A 6000 0000                  		bra.w	sub_1642
00000D1E                            ; ===========================================================================
00000D1E                            
00000D1E                            loc_FA6:				; XREF: off_B6E
00000D1E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D26                            
00000D26                            loc_FAE:
00000D26 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D2E 66F6                       		bne.s	loc_FAE		; if not, branch
00000D30 6100 0000                  		bsr.w	ReadJoypads
00000D34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D3A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D40 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D46 3ABC 977F                  		move.w	#$977F,(a5)
00000D4A 3ABC C000                  		move.w	#$C000,(a5)
00000D4E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D58 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D5E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D64 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D6A 3ABC 977F                  		move.w	#$977F,(a5)
00000D6E 3ABC 7800                  		move.w	#$7800,(a5)
00000D72 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D78 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D82 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D88 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D8E 3ABC 977F                  		move.w	#$977F,(a5)
00000D92 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D96 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DA0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000DA8 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DAE                            
00000DAE                            loc_1060:
00000DAE 4A78 F614                  		tst.w	($FFFFF614).w
00000DB2 6700 0000                  		beq.w	locret_106C
00000DB6 5378 F614                  		subq.w	#1,($FFFFF614).w
00000DBA                            
00000DBA                            locret_106C:
00000DBA 4E75                       		rts	
00000DBC                            
00000DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000DBC                            
00000DBC                            
00000DBC                            sub_106E:				; XREF: loc_C32; et al
00000DBC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DC4                            
00000DC4                            loc_1076:
00000DC4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DCC 66F6                       		bne.s	loc_1076	; if not, branch
00000DCE 6100 0000                  		bsr.w	ReadJoypads
00000DD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DD6 6600                       		bne.s	loc_10B0
00000DD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DEA 3ABC 977F                  		move.w	#$977F,(a5)
00000DEE 3ABC C000                  		move.w	#$C000,(a5)
00000DF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DFC 6000                       		bra.s	loc_10D4
00000DFE                            ; ===========================================================================
00000DFE                            
00000DFE                            loc_10B0:				; XREF: sub_106E
00000DFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E10 3ABC 977F                  		move.w	#$977F,(a5)
00000E14 3ABC C000                  		move.w	#$C000,(a5)
00000E18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E22                            
00000E22                            loc_10D4:				; XREF: sub_106E
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E2E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC 7800                  		move.w	#$7800,(a5)
00000E3C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E4C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E52 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E58 3ABC 977F                  		move.w	#$977F,(a5)
00000E5C 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E6A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000E72 4E75                       		rts	
00000E74                            ; End of function sub_106E
00000E74                            
00000E74                            ; ---------------------------------------------------------------------------
00000E74                            ; Subroutine to	move pallets from the RAM to CRAM
00000E74                            ; ---------------------------------------------------------------------------
00000E74                            
00000E74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E74                            
00000E74                            
00000E74                            PalToCRAM:
00000E74 46FC 2700                  		move	#$2700,sr
00000E78 4A78 F644                  		tst.w	($FFFFF644).w
00000E7C 6700                       		beq.s	locret_119C
00000E7E 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000E84 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000E88 43F9 00C0 0000             		lea	($C00000).l,a1
00000E8E 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00000E92 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00000E9A 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00000E9C 2298                       		move.l	(a0)+,(a1)
00000E9E 2298                       		move.l	(a0)+,(a1)
00000EA0 2298                       		move.l	(a0)+,(a1)
00000EA2 2298                       		move.l	(a0)+,(a1)
00000EA4 2298                       		move.l	(a0)+,(a1)
00000EA6 2298                       		move.l	(a0)+,(a1)
00000EA8 2298                       		move.l	(a0)+,(a1)
00000EAA 2298                       		move.l	(a0)+,(a1)
00000EAC 2298                       		move.l	(a0)+,(a1)
00000EAE 2298                       		move.l	(a0)+,(a1)
00000EB0 2298                       		move.l	(a0)+,(a1)
00000EB2 2298                       		move.l	(a0)+,(a1)
00000EB4 2298                       		move.l	(a0)+,(a1)
00000EB6 2298                       		move.l	(a0)+,(a1)
00000EB8 2298                       		move.l	(a0)+,(a1)
00000EBA 2298                       		move.l	(a0)+,(a1)
00000EBC 2298                       		move.l	(a0)+,(a1)
00000EBE 2298                       		move.l	(a0)+,(a1)
00000EC0 2298                       		move.l	(a0)+,(a1)
00000EC2 2298                       		move.l	(a0)+,(a1)
00000EC4 2298                       		move.l	(a0)+,(a1)
00000EC6 2298                       		move.l	(a0)+,(a1)
00000EC8 2298                       		move.l	(a0)+,(a1)
00000ECA 2298                       		move.l	(a0)+,(a1)
00000ECC 2298                       		move.l	(a0)+,(a1)
00000ECE 2298                       		move.l	(a0)+,(a1)
00000ED0 2298                       		move.l	(a0)+,(a1)
00000ED2 2298                       		move.l	(a0)+,(a1)
00000ED4 2298                       		move.l	(a0)+,(a1)
00000ED6 2298                       		move.l	(a0)+,(a1)
00000ED8 2298                       		move.l	(a0)+,(a1)
00000EDA 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00000EE0 4CDF 0300                  		movem.l	(sp)+,a0-a1
00000EE4 4A38 F64F                  		tst.b	($FFFFF64F).w
00000EE8 6600                       		bne.s	loc_119E
00000EEA                            
00000EEA                            locret_119C:
00000EEA 4E73                       		rte	
00000EEC                            ; ===========================================================================
00000EEC                            
00000EEC                            loc_119E:				; XREF: PalToCRAM
00000EEC 4238 F64F                  		clr.b	($FFFFF64F).w
00000EF0 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000EF4 6100 FC56                  		bsr.w	Demo_Time
00000EF8 4EB9 0000 0000             		jsr	sub_71B4C
00000EFE 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000F02 4E73                       		rte	
00000F04                            ; End of function PalToCRAM
00000F04                            
00000F04                            ; ---------------------------------------------------------------------------
00000F04                            ; Subroutine to	initialise joypads
00000F04                            ; ---------------------------------------------------------------------------
00000F04                            
00000F04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F04                            
00000F04                            
00000F04                            JoypadInit:				; XREF: GameClrRAM
00000F04 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F0C                            
00000F0C                            Joypad_WaitZ80:
00000F0C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000F14 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000F16 7040                       		moveq	#$40,d0
00000F18 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000F1E 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000F24 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00000F2A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F32 4E75                       		rts	
00000F34                            ; End of function JoypadInit
00000F34                            
00000F34                            ; ---------------------------------------------------------------------------
00000F34                            ; Subroutine to	read joypad input, and send it to the RAM
00000F34                            ; ---------------------------------------------------------------------------
00000F34                            
00000F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F34                            
00000F34                            
00000F34                            ReadJoypads:
00000F34 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00000F38 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000F3E 6100                       		bsr.s	Joypad_Read	; do the first joypad
00000F40 5449                       		addq.w	#2,a1		; do the second	joypad
00000F42                            
00000F42                            Joypad_Read:
00000F42 12BC 0000                  		move.b	#0,(a1)
00000F46 4E71                       		nop	
00000F48 4E71                       		nop	
00000F4A 1011                       		move.b	(a1),d0
00000F4C E508                       		lsl.b	#2,d0
00000F4E 0200 00C0                  		andi.b	#$C0,d0
00000F52 12BC 0040                  		move.b	#$40,(a1)
00000F56 4E71                       		nop	
00000F58 4E71                       		nop	
00000F5A 1211                       		move.b	(a1),d1
00000F5C 0201 003F                  		andi.b	#$3F,d1
00000F60 8001                       		or.b	d1,d0
00000F62 4600                       		not.b	d0
00000F64 1210                       		move.b	(a0),d1
00000F66 B101                       		eor.b	d0,d1
00000F68 10C0                       		move.b	d0,(a0)+
00000F6A C200                       		and.b	d0,d1
00000F6C 10C1                       		move.b	d1,(a0)+
00000F6E 4E75                       		rts	
00000F70                            ; End of function ReadJoypads
00000F70                            
00000F70                            
00000F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F70                            
00000F70                            
00000F70                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00000F70 41F9 00C0 0004             		lea	($C00004).l,a0
00000F76 43F9 00C0 0000             		lea	($C00000).l,a1
00000F7C 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00000F82 7E12                       		moveq	#$12,d7
00000F84                            
00000F84                            VDP_Loop:
00000F84 309A                       		move.w	(a2)+,(a0)
00000F86 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00000F8A                            
00000F8A 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00000F90 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00000F94 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00000F9A 7000                       		moveq	#0,d0
00000F9C 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00000FA6 3E3C 003F                  		move.w	#$3F,d7
00000FAA                            
00000FAA                            VDP_ClrCRAM:
00000FAA 3280                       		move.w	d0,(a1)
00000FAC 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00000FB0                            
00000FB0 42B8 F616                  		clr.l	($FFFFF616).w
00000FB4 42B8 F61A                  		clr.l	($FFFFF61A).w
00000FB8 2F01                       		move.l	d1,-(sp)
00000FBA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC0 3ABC 8F01                  		move.w	#$8F01,(a5)
00000FC4 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00000FCA 3ABC 9780                  		move.w	#$9780,(a5)
00000FCE 2ABC 4000 0080             		move.l	#$40000080,(a5)
00000FD4 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00000FDC                            
00000FDC                            loc_128E:
00000FDC 3215                       		move.w	(a5),d1
00000FDE 0801 0001                  		btst	#1,d1
00000FE2 66F8                       		bne.s	loc_128E
00000FE4                            
00000FE4 3ABC 8F02                  		move.w	#$8F02,(a5)
00000FE8 221F                       		move.l	(sp)+,d1
00000FEA 4E75                       		rts	
00000FEC                            ; End of function VDPSetupGame
00000FEC                            
00000FEC                            ; ===========================================================================
00000FEC 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00000FF4 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00000FFC 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001004 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
0000100C 9001 9100 9200             		dc.w $9001, $9100, $9200
00001012                            
00001012                            ; ---------------------------------------------------------------------------
00001012                            ; Subroutine to	clear the screen
00001012                            ; ---------------------------------------------------------------------------
00001012                            
00001012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001012                            
00001012                            
00001012                            ClearScreen:
00001012 4BF9 00C0 0004             		lea	($C00004).l,a5
00001018 3ABC 8F01                  		move.w	#$8F01,(a5)
0000101C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001022 3ABC 9780                  		move.w	#$9780,(a5)
00001026 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000102C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001034                            
00001034                            loc_12E6:
00001034 3215                       		move.w	(a5),d1
00001036 0801 0001                  		btst	#1,d1
0000103A 66F8                       		bne.s	loc_12E6
0000103C                            
0000103C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001040 4BF9 00C0 0004             		lea	($C00004).l,a5
00001046 3ABC 8F01                  		move.w	#$8F01,(a5)
0000104A 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001050 3ABC 9780                  		move.w	#$9780,(a5)
00001054 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000105A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001062                            
00001062                            loc_1314:
00001062 3215                       		move.w	(a5),d1
00001064 0801 0001                  		btst	#1,d1
00001068 66F8                       		bne.s	loc_1314
0000106A                            
0000106A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000106E 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001076 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000107E 43F8 F800                  		lea	($FFFFF800).w,a1
00001082 7000                       		moveq	#0,d0
00001084 323C 00A0                  		move.w	#$A0,d1
00001088                            
00001088                            loc_133A:
00001088 22C0                       		move.l	d0,(a1)+
0000108A 51C9 FFFC                  		dbf	d1,loc_133A
0000108E                            
0000108E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001092 7000                       		moveq	#0,d0
00001094 323C 0100                  		move.w	#$100,d1
00001098                            
00001098                            loc_134A:
00001098 22C0                       		move.l	d0,(a1)+
0000109A 51C9 FFFC                  		dbf	d1,loc_134A
0000109E 4E75                       		rts	
000010A0                            ; End of function ClearScreen
000010A0                            
000010A0                            ; ---------------------------------------------------------------------------
000010A0                            ; Subroutine to	load the sound driver
000010A0                            ; ---------------------------------------------------------------------------
000010A0                            
000010A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010A0                            
000010A0                            
000010A0                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
000010A0 4E71                       		nop
000010A2 303C 0100                  		move.w	#$100,d0
000010A6 33C0 00A1 1100             		move.w	d0,($A11100).l
000010AC 33C0 00A1 1200             		move.w	d0,($A11200).l
000010B2 41F9 0000 0000             		lea	(MegaPCM).l,a0
000010B8 43F9 00A0 0000             		lea	($A00000).l,a1
000010BE 323C 0000                  		move.w	#(MegaPCM_End-MegaPCM)-1,d1
000010C2                            
000010C2 12D8                       	@Load:	move.b	(a0)+,(a1)+
000010C4 51C9 FFFC                  		dbf	d1,@Load
000010C8 7200                       		moveq	#0,d1
000010CA 33C1 00A1 1200             		move.w	d1,($A11200).l
000010D0 4E71                       		nop
000010D2 4E71                       		nop
000010D4 4E71                       		nop
000010D6 4E71                       		nop
000010D8 33C0 00A1 1200             		move.w	d0,($A11200).l
000010DE 33C1 00A1 1100             		move.w	d1,($A11100).l
000010E4 4E75                       		rts
000010E6                            ; End of function SoundDriverLoad
000010E6                            
000010E6                            ; ---------------------------------------------------------------------------
000010E6                            ; Subroutine to	play a DAC sample
000010E6                            ; ---------------------------------------------------------------------------
000010E6                            
000010E6                            PlaySample:
000010E6 33FC 0100 00A1 1100        	move.w	#$100,($A11100).l	; stop the Z80
000010EE 0839 0000 00A1 1100        @0	btst	#0,($A11100).l
000010F6 66F6                       	bne.s	@0
000010F8 13C0 00A0 1FFF             	move.b	d0,$A01FFF
000010FE 33FC 0000 00A1 1100        	move.w	#0,($A11100).l
00001106 4E75                       	rts
00001108                            
00001108                            ; ---------------------------------------------------------------------------
00001108                            ; Subroutine to	play a sound or	music track
00001108                            ; ---------------------------------------------------------------------------
00001108                            
00001108                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001108                            
00001108                            
00001108                            PlaySound:
00001108 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000110C 4E75                       		rts	
0000110E                            ; End of function PlaySound
0000110E                            
0000110E                            ; ---------------------------------------------------------------------------
0000110E                            ; Subroutine to	play a special sound/music (E0-E4)
0000110E                            ;
0000110E                            ; E0 - Fade out
0000110E                            ; E1 - Sega
0000110E                            ; E2 - Speed up
0000110E                            ; E3 - Normal speed
0000110E                            ; E4 - Stop
0000110E                            ; ---------------------------------------------------------------------------
0000110E                            
0000110E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000110E                            
0000110E                            
0000110E                            PlaySound_Special:
0000110E 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001112 4E75                       		rts	
00001114                            ; End of function PlaySound_Special
00001114                            
00001114                            ; ===========================================================================
00001114                            ; ---------------------------------------------------------------------------
00001114                            ; Unused sound/music subroutine
00001114                            ; ---------------------------------------------------------------------------
00001114                            
00001114                            PlaySound_Unk:
00001114 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001118 4E75                       		rts	
0000111A                            
0000111A                            ; ---------------------------------------------------------------------------
0000111A                            ; Subroutine to	pause the game
0000111A                            ; ---------------------------------------------------------------------------
0000111A                            
0000111A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000111A                            
0000111A                            
0000111A                            PauseGame:				; XREF: Level_MainLoop; et al
0000111A 4E71                       		nop	
0000111C 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001120 6700                       		beq.s	Unpause		; if not, branch
00001122 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001126 6600                       		bne.s	loc_13BE	; if yes, branch
00001128 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000112E 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001130                            
00001130                            loc_13BE:
00001130 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001136 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
0000113C                            
0000113C                            loc_13CA:
0000113C 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001142 6100 0000                  		bsr.w	DelayProgram
00001146 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
0000114A 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000114C 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001152 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001154 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000115A 4E71                       		nop	
0000115C 6000                       		bra.s	loc_1404
0000115E                            ; ===========================================================================
0000115E                            
0000115E                            Pause_ChkBC:				; XREF: PauseGame
0000115E 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001164 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001166 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000116C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000116E                            
0000116E                            Pause_ChkStart:				; XREF: PauseGame
0000116E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001174 67C6                       		beq.s	loc_13CA	; if not, branch
00001176                            
00001176                            loc_1404:				; XREF: PauseGame
00001176 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000117C                            
0000117C                            Unpause:				; XREF: PauseGame
0000117C 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001182                            
00001182                            Pause_DoNothing:			; XREF: PauseGame
00001182 4E75                       		rts	
00001184                            ; ===========================================================================
00001184                            
00001184                            Pause_SlowMo:				; XREF: PauseGame
00001184 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000118A 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001190 4E75                       		rts	
00001192                            ; End of function PauseGame
00001192                            
00001192                            ; ---------------------------------------------------------------------------
00001192                            ; Subroutine to	display	patterns via the VDP
00001192                            ; ---------------------------------------------------------------------------
00001192                            
00001192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001192                            
00001192                            
00001192                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001192 4DF9 00C0 0000             		lea	($C00000).l,a6
00001198 283C 0080 0000             		move.l	#$800000,d4
0000119E                            
0000119E                            loc_142C:
0000119E 2D40 0004                  		move.l	d0,4(a6)
000011A2 3601                       		move.w	d1,d3
000011A4                            
000011A4                            loc_1432:
000011A4 3C99                       		move.w	(a1)+,(a6)
000011A6 51CB FFFC                  		dbf	d3,loc_1432
000011AA D084                       		add.l	d4,d0
000011AC 51CA FFF0                  		dbf	d2,loc_142C
000011B0 4E75                       		rts	
000011B2                            ; End of function ShowVDPGraphics
000011B2                            ; ---------------------------------------------------------------------------
000011B2                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
000011B2                            ; to be issued the next time ProcessDMAQueue is called.
000011B2                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
000011B2                            ; by issuing the commands (this subroutine DOES check for overflow)
000011B2                            ; ---------------------------------------------------------------------------
000011B2                            ; In case you wish to use this queue system outside of the spin dash, this is the
000011B2                            ; registers in which it expects data in:
000011B2                            ; d1.l: Address to data (In 68k address space)
000011B2                            ; d2.w: Destination in VRAM
000011B2                            ; d3.w: Length of data
000011B2                            ; ---------------------------------------------------------------------------
000011B2                            
000011B2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000011B2                            
000011B2                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
000011B2                            QueueDMATransfer:
000011B2 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
000011B6 B2FC C8FC                  		cmpa.w	#$C8FC,a1
000011BA 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000011BC                            
000011BC                            		; piece together some VDP commands and store them for later...
000011BC 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
000011C0 1003                       		move.b	d3,d0
000011C2 32C0                       		move.w	d0,(a1)+ ; store command
000011C4                            
000011C4 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
000011C8 E04B                       		lsr.w	#8,d3
000011CA 1003                       		move.b	d3,d0
000011CC 32C0                       		move.w	d0,(a1)+ ; store command
000011CE                            
000011CE 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
000011D2 E289                       		lsr.l	#1,d1
000011D4 1001                       		move.b	d1,d0
000011D6 32C0                       		move.w	d0,(a1)+ ; store command
000011D8                            
000011D8 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
000011DC E089                       		lsr.l	#8,d1
000011DE 1001                       		move.b	d1,d0
000011E0 32C0                       		move.w	d0,(a1)+ ; store command
000011E2                            
000011E2 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
000011E6 E089                       		lsr.l	#8,d1
000011E8 1001                       		move.b	d1,d0
000011EA 32C0                       		move.w	d0,(a1)+ ; store command
000011EC                            
000011EC 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
000011F2 E58A                       		lsl.l	#2,d2
000011F4 E44A                       		lsr.w	#2,d2
000011F6 4842                       		swap	d2
000011F8 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
000011FE 22C2                       		move.l	d2,(a1)+ ; store command
00001200                            
00001200 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
00001204 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001208 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
0000120A 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
0000120E                            ; return_14AA:
0000120E                            QueueDMATransfer_Done:
0000120E 4E75                       		rts
00001210                            ; End of function QueueDMATransfer
00001210                            
00001210                            
00001210                            ; ---------------------------------------------------------------------------
00001210                            ; Subroutine for issuing all VDP commands that were queued
00001210                            ; (by earlier calls to QueueDMATransfer)
00001210                            ; Resets the queue when it's done
00001210                            ; ---------------------------------------------------------------------------
00001210                            
00001210                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001210                            
00001210                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00001210                            ProcessDMAQueue:
00001210 4BF9 00C0 0004             		lea	($C00004).l,a5
00001216 43F8 C800                  		lea	($FFFFC800).w,a1
0000121A                            ; loc_14B6:
0000121A                            ProcessDMAQueue_Loop:
0000121A 3019                       		move.w	(a1)+,d0
0000121C 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
0000121E                            		; issue a set of VDP commands...
0000121E 3A80                       		move.w	d0,(a5)		; transfer length
00001220 3A99                       		move.w	(a1)+,(a5)	; transfer length
00001222 3A99                       		move.w	(a1)+,(a5)	; source address
00001224 3A99                       		move.w	(a1)+,(a5)	; source address
00001226 3A99                       		move.w	(a1)+,(a5)	; source address
00001228 3A99                       		move.w	(a1)+,(a5)	; destination
0000122A 3A99                       		move.w	(a1)+,(a5)	; destination
0000122C B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001230 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00001232                            ; loc_14CE:
00001232                            ProcessDMAQueue_Done:
00001232 31FC 0000 C800             		move.w	#0,($FFFFC800).w
00001238 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00001240 4E75                       		rts
00001242                            ; End of function ProcessDMAQueue
00001242                            
00001242                            
00001242                            ; ---------------------------------------------------------------------------
00001242                            ; Nemesis decompression	algorithm
00001242                            ; ---------------------------------------------------------------------------
00001242                            
00001242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001242                            
00001242                            
00001242                            	include "NemDec.asm"
00001242                            ; ==============================================================================
00001242                            ; ------------------------------------------------------------------------------
00001242                            ; Nemesis decompression routine
00001242                            ; ------------------------------------------------------------------------------
00001242                            ; Optimized by vladikcomper
00001242                            ; ------------------------------------------------------------------------------
00001242                             
00001242                            NemDec_RAM:
00001242 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00001246 47FA 0000                          lea     NemDec_WriteRowToRAM(pc),a3
0000124A 6000                               bra.s   NemDec_Main
0000124C                             
0000124C                            ; ------------------------------------------------------------------------------
0000124C                            NemDec:
0000124C 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00001250 49F9 00C0 0000                     lea     $C00000,a4              ; load VDP Data Port    
00001256 47FA 0000                          lea     NemDec_WriteRowToVDP(pc),a3
0000125A                             
0000125A                            NemDec_Main:
0000125A 43F8 AA00                          lea     $FFFFAA00,a1            ; load Nemesis decompression buffer
0000125E 3418                               move.w  (a0)+,d2                ; get number of patterns
00001260 6A00                               bpl.s   @0                      ; are we in Mode 0?
00001262 47EB 000A                          lea     $A(a3),a3               ; if not, use Mode 1
00001266 E74A                       @0      lsl.w   #3,d2
00001268 3A42                               movea.w d2,a5
0000126A 7607                               moveq   #7,d3
0000126C 7400                               moveq   #0,d2
0000126E 7800                               moveq   #0,d4
00001270 6100 0000                          bsr.w   NemDec4
00001274 1A18                               move.b  (a0)+,d5                ; get first byte of compressed data
00001276 E145                               asl.w   #8,d5                   ; shift up by a byte
00001278 1A18                               move.b  (a0)+,d5                ; get second byte of compressed data
0000127A 3C3C 0010                          move.w  #$10,d6                 ; set initial shift value
0000127E 6100                               bsr.s   NemDec2
00001280 4CDF 7BFF                          movem.l (sp)+,d0-a1/a3-a6
00001284 4E75                               rts
00001286                             
00001286                            ; ---------------------------------------------------------------------------
00001286                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001286                            ; ---------------------------------------------------------------------------
00001286                             
00001286                            NemDec2:
00001286 3E06                               move.w  d6,d7
00001288 5147                               subq.w  #8,d7                   ; get shift value
0000128A 3205                               move.w  d5,d1
0000128C EE69                               lsr.w   d7,d1                   ; shift so that high bit of the code is in bit position 7
0000128E 0C01 00FC                          cmpi.b  #%11111100,d1           ; are the high 6 bits set?
00001292 6400                               bcc.s   NemDec_InlineData       ; if they are, it signifies inline data
00001294 0241 00FF                          andi.w  #$FF,d1
00001298 D241                               add.w   d1,d1
0000129A 9C31 1000                          sub.b   (a1,d1.w),d6            ; ~~ subtract from shift value so that the next code is read next time around
0000129E 0C46 0009                          cmpi.w  #9,d6                   ; does a new byte need to be read?
000012A2 6400                               bcc.s   @0                      ; if not, branch
000012A4 5046                               addq.w  #8,d6
000012A6 E145                               asl.w   #8,d5
000012A8 1A18                               move.b  (a0)+,d5                ; read next byte
000012AA 1231 1001                  @0      move.b  1(a1,d1.w),d1
000012AE 3001                               move.w  d1,d0
000012B0 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000012B4 0240 00F0                          andi.w  #$F0,d0
000012B8                             
000012B8                            NemDec_GetRepeatCount:
000012B8 E848                               lsr.w   #4,d0                   ; get repeat count
000012BA                             
000012BA                            NemDec_WritePixel:
000012BA E98C                               lsl.l   #4,d4                   ; shift up by a nybble
000012BC 8801                               or.b    d1,d4                   ; write pixel
000012BE 51CB 0000                          dbf     d3,NemDec_WritePixelLoop; ~~
000012C2 4ED3                               jmp     (a3)                    ; otherwise, write the row to its destination
000012C4                            ; ---------------------------------------------------------------------------
000012C4                             
000012C4                            NemDec3:
000012C4 7800                               moveq   #0,d4                   ; reset row
000012C6 7607                               moveq   #7,d3                   ; reset nybble counter
000012C8                             
000012C8                            NemDec_WritePixelLoop:
000012C8 51C8 FFF0                          dbf     d0,NemDec_WritePixel
000012CC 60B8                               bra.s   NemDec2
000012CE                            ; ---------------------------------------------------------------------------
000012CE                             
000012CE                            NemDec_InlineData:
000012CE 5D46                               subq.w  #6,d6                   ; 6 bits needed to signal inline data
000012D0 0C46 0009                          cmpi.w  #9,d6
000012D4 6400                               bcc.s   @0
000012D6 5046                               addq.w  #8,d6
000012D8 E145                               asl.w   #8,d5
000012DA 1A18                               move.b  (a0)+,d5
000012DC 5F46                       @0      subq.w  #7,d6                   ; and 7 bits needed for the inline data itself
000012DE 3205                               move.w  d5,d1
000012E0 EC69                               lsr.w   d6,d1                   ; shift so that low bit of the code is in bit position 0
000012E2 3001                               move.w  d1,d0
000012E4 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000012E8 0240 0070                          andi.w  #$70,d0                 ; high nybble is repeat count for pixel
000012EC 0C46 0009                          cmpi.w  #9,d6
000012F0 64C6                               bcc.s   NemDec_GetRepeatCount
000012F2 5046                               addq.w  #8,d6
000012F4 E145                               asl.w   #8,d5
000012F6 1A18                               move.b  (a0)+,d5
000012F8 60BE                               bra.s   NemDec_GetRepeatCount
000012FA                             
000012FA                            ; ---------------------------------------------------------------------------
000012FA                            ; Subroutines to output decompressed entry
000012FA                            ; Selected depending on current decompression mode
000012FA                            ; ---------------------------------------------------------------------------
000012FA                             
000012FA                            NemDec_WriteRowToVDP:
000012FA                            loc_1502:
000012FA 2884                               move.l  d4,(a4)                 ; write 8-pixel row
000012FC 534D                               subq.w  #1,a5
000012FE 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001300 66C2                               bne.s   NemDec3                 ; if not, branch
00001302 4E75                               rts
00001304                            ; ---------------------------------------------------------------------------
00001304                             
00001304                            NemDec_WriteRowToVDP_XOR:
00001304 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00001306 2882                               move.l  d2,(a4)                 ; and write the result
00001308 534D                               subq.w  #1,a5
0000130A 380D                               move.w  a5,d4
0000130C 66B6                               bne.s   NemDec3
0000130E 4E75                               rts
00001310                            ; ---------------------------------------------------------------------------
00001310                             
00001310                            NemDec_WriteRowToRAM:
00001310 28C4                               move.l  d4,(a4)+                ; write 8-pixel row
00001312 534D                               subq.w  #1,a5
00001314 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001316 66AC                               bne.s   NemDec3                 ; if not, branch
00001318 4E75                               rts
0000131A                            ; ---------------------------------------------------------------------------
0000131A                             
0000131A                            NemDec_WriteRowToRAM_XOR:
0000131A B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
0000131C 28C2                               move.l  d2,(a4)+                ; and write the result
0000131E 534D                               subq.w  #1,a5
00001320 380D                               move.w  a5,d4
00001322 66A0                               bne.s   NemDec3
00001324 4E75                               rts
00001326                             
00001326                            ; ---------------------------------------------------------------------------
00001326                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001326                            ; ---------------------------------------------------------------------------
00001326                             
00001326                            NemDec4:
00001326 1018                               move.b  (a0)+,d0                ; read first byte
00001328                             
00001328                            @ChkEnd:
00001328 0C00 00FF                          cmpi.b  #$FF,d0                 ; has the end of the code table description been reached?
0000132C 6600                               bne.s   @NewPalIndex            ; if not, branch
0000132E 4E75                               rts
00001330                            ; ---------------------------------------------------------------------------
00001330                             
00001330                            @NewPalIndex:
00001330 3E00                               move.w  d0,d7
00001332                             
00001332                            @ItemLoop:
00001332 1018                               move.b  (a0)+,d0                ; read next byte
00001334 6BF2                               bmi.s   @ChkEnd                 ; ~~
00001336 1200                               move.b  d0,d1
00001338 0247 000F                          andi.w  #$F,d7                  ; get palette index
0000133C 0241 0070                          andi.w  #$70,d1                 ; get repeat count for palette index
00001340 8E41                               or.w    d1,d7                   ; combine the two
00001342 0240 000F                          andi.w  #$F,d0                  ; get the length of the code in bits
00001346 1200                               move.b  d0,d1
00001348 E149                               lsl.w   #8,d1
0000134A 8E41                               or.w    d1,d7                   ; combine with palette index and repeat count to form code table entry
0000134C 7208                               moveq   #8,d1
0000134E 9240                               sub.w   d0,d1                   ; is the code 8 bits long?
00001350 6600                               bne.s   @ItemShortCode          ; if not, a bit of extra processing is needed
00001352 1018                               move.b  (a0)+,d0                ; get code
00001354 D040                               add.w   d0,d0                   ; each code gets a word-sized entry in the table
00001356 3387 0000                          move.w  d7,(a1,d0.w)            ; store the entry for the code
0000135A 60D6                               bra.s   @ItemLoop               ; repeat
0000135C                            ; ---------------------------------------------------------------------------
0000135C                             
0000135C                            @ItemShortCode:
0000135C 1018                               move.b  (a0)+,d0                ; get code
0000135E E368                               lsl.w   d1,d0                   ; shift so that high bit is in bit position 7
00001360 D040                               add.w   d0,d0                   ; get index into code table
00001362 7A01                               moveq   #1,d5
00001364 E36D                               lsl.w   d1,d5
00001366 5345                               subq.w  #1,d5                   ; d5 = 2^d1 - 1
00001368 4DF1 0000                          lea     (a1,d0.w),a6            ; ~~
0000136C                             
0000136C                            @ItemShortCodeLoop:
0000136C 3CC7                               move.w  d7,(a6)+                ; ~~ store entry
0000136E 51CD FFFC                          dbf     d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001372 60BE                               bra.s   @ItemLoop
00001372 60BE                               bra.s   @ItemLoop
00001374                            	
00001374                            	include "CompDec.asm"
00001374                            ; ===============================================================
00001374                            ; ---------------------------------------------------------------
00001374                            ; COMPER Decompressor
00001374                            ; ---------------------------------------------------------------
00001374                            ; INPUT:
00001374                            ;       a0      - Source Offset
00001374                            ;       a1      - Destination Offset
00001374                            ; ---------------------------------------------------------------
00001374                             
00001374                            CompDec
00001374                             
00001374                            @newblock
00001374 3018                               move.w  (a0)+,d0                ; fetch description field
00001376 760F                               moveq   #15,d3                  ; set bits counter to 16
00001378                             
00001378                            @mainloop
00001378 D040                               add.w   d0,d0                   ; roll description field
0000137A 6500                               bcs.s   @flag                   ; if a flag issued, branch
0000137C 32D8                               move.w  (a0)+,(a1)+             ; otherwise, do uncompressed data
0000137E 51CB FFF8                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
00001382 60F0                               bra.s   @newblock               ; start a new block
00001384                             
00001384                            ; ---------------------------------------------------------------
00001384 72FF                       @flag   moveq   #-1,d1                  ; init displacement
00001386 1218                               move.b  (a0)+,d1                ; load displacement
00001388 D241                               add.w   d1,d1
0000138A 7400                               moveq   #0,d2                   ; init copy count
0000138C 1418                               move.b  (a0)+,d2                ; load copy length
0000138E 6700                               beq.s   @end                    ; if zero, branch
00001390 45F1 1000                          lea     (a1,d1),a2              ; load start copy address
00001394                             
00001394 32DA                       @loop   move.w  (a2)+,(a1)+             ; copy given sequence
00001396 51CA FFFC                          dbf     d2,@loop                ; repeat
0000139A 51CB FFDC                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
0000139E 60D4                               bra.s   @newblock               ; start a new block
000013A0                             
000013A0 4E75                       @end    rts
000013A0 4E75                       @end    rts
000013A2                            
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            ; Subroutine to	load pattern load cues
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            
000013A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A2                            
000013A2                            
000013A2                            LoadPLC:
000013A2 48E7 0060                  		movem.l	a1-a2,-(sp)
000013A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000013AC D040                       		add.w	d0,d0
000013AE 3031 0000                  		move.w	(a1,d0.w),d0
000013B2 43F1 0000                  		lea	(a1,d0.w),a1
000013B6 45F8 F680                  		lea	($FFFFF680).w,a2
000013BA                            
000013BA                            loc_1598:
000013BA 4A92                       		tst.l	(a2)
000013BC 6700                       		beq.s	loc_15A0
000013BE 5C4A                       		addq.w	#6,a2
000013C0 60F8                       		bra.s	loc_1598
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_15A0:				; XREF: LoadPLC
000013C2 3019                       		move.w	(a1)+,d0
000013C4 6B00                       		bmi.s	loc_15AC
000013C6                            
000013C6                            loc_15A4:
000013C6 24D9                       		move.l	(a1)+,(a2)+
000013C8 34D9                       		move.w	(a1)+,(a2)+
000013CA 51C8 FFFA                  		dbf	d0,loc_15A4
000013CE                            
000013CE                            loc_15AC:
000013CE 4CDF 0600                  		movem.l	(sp)+,a1-a2
000013D2 4E75                       		rts	
000013D4                            ; End of function LoadPLC
000013D4                            
000013D4                            
000013D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D4                            
000013D4                            
000013D4                            LoadPLC2:
000013D4 48E7 0060                  		movem.l	a1-a2,-(sp)
000013D8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000013DE D040                       		add.w	d0,d0
000013E0 3031 0000                  		move.w	(a1,d0.w),d0
000013E4 43F1 0000                  		lea	(a1,d0.w),a1
000013E8 6100                       		bsr.s	ClearPLC
000013EA 45F8 F680                  		lea	($FFFFF680).w,a2
000013EE 3019                       		move.w	(a1)+,d0
000013F0 6B00                       		bmi.s	loc_15D8
000013F2                            
000013F2                            loc_15D0:
000013F2 24D9                       		move.l	(a1)+,(a2)+
000013F4 34D9                       		move.w	(a1)+,(a2)+
000013F6 51C8 FFFA                  		dbf	d0,loc_15D0
000013FA                            
000013FA                            loc_15D8:
000013FA 4CDF 0600                  		movem.l	(sp)+,a1-a2
000013FE 4E75                       		rts	
00001400                            ; End of function LoadPLC2
00001400                            
00001400                            ; ---------------------------------------------------------------------------
00001400                            ; Subroutine to	clear the pattern load cues
00001400                            ; ---------------------------------------------------------------------------
00001400                            
00001400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001400                            
00001400                            
00001400                            ClearPLC:				; XREF: LoadPLC2
00001400 45F8 F680                  		lea	($FFFFF680).w,a2
00001404 701F                       		moveq	#$1F,d0
00001406                            
00001406                            ClearPLC_Loop:
00001406 429A                       		clr.l	(a2)+
00001408 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000140C 4E75                       		rts	
0000140E                            ; End of function ClearPLC
0000140E                            
0000140E                            ; ---------------------------------------------------------------------------
0000140E                            ; Subroutine to	use graphics listed in a pattern load cue
0000140E                            ; ---------------------------------------------------------------------------
0000140E                            
0000140E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140E                            
0000140E                            
0000140E                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000140E 4AB8 F680                  		tst.l	($FFFFF680).w
00001412 6700                       		beq.s	locret_1640
00001414 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001418 6600                       		bne.s	locret_1640
0000141A 2078 F680                  		movea.l	($FFFFF680).w,a0
0000141E 47F9 0000 12FA             		lea	(loc_1502).l,a3
00001424 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001428 3418                       		move.w	(a0)+,d2
0000142A 6A00                       		bpl.s	loc_160E
0000142C D6FC 000A                  		adda.w	#$A,a3
00001430                            
00001430                            loc_160E:
00001430 0242 7FFF                  		andi.w	#$7FFF,d2
00001434 6100 FEF0                  		bsr.w	NemDec4
00001438 1A18                       		move.b	(a0)+,d5
0000143A E145                       		asl.w	#8,d5
0000143C 1A18                       		move.b	(a0)+,d5
0000143E 7C10                       		moveq	#$10,d6
00001440 7000                       		moveq	#0,d0
00001442 21C8 F680                  		move.l	a0,($FFFFF680).w
00001446 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000144A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000144E 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001452 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001456 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000145A 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000145E 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001462                            
00001462                            locret_1640:
00001462 4E75                       		rts	
00001464                            ; End of function RunPLC_RAM
00001464                            
00001464                            
00001464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001464                            
00001464                            
00001464                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001464 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001468 6700 0000                  		beq.w	locret_16DA
0000146C 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001472 7000                       		moveq	#0,d0
00001474 3038 F684                  		move.w	($FFFFF684).w,d0
00001478 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000147E 6000                       		bra.s	loc_1676
00001480                            ; End of function sub_1642
00001480                            
00001480                            
00001480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001480                            
00001480                            
00001480                            sub_165E:				; XREF: Demo_Time
00001480 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001484 6700                       		beq.s	locret_16DA
00001486 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000148C 7000                       		moveq	#0,d0
0000148E 3038 F684                  		move.w	($FFFFF684).w,d0
00001492 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001498                            
00001498                            loc_1676:				; XREF: sub_1642
00001498 49F9 00C0 0004             		lea	($C00004).l,a4
0000149E E588                       		lsl.l	#2,d0
000014A0 E448                       		lsr.w	#2,d0
000014A2 0040 4000                  		ori.w	#$4000,d0
000014A6 4840                       		swap	d0
000014A8 2880                       		move.l	d0,(a4)
000014AA 594C                       		subq.w	#4,a4
000014AC 2078 F680                  		movea.l	($FFFFF680).w,a0
000014B0 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000014B4 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000014B8 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000014BC 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000014C0 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000014C4 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000014C8 43F8 AA00                  		lea	($FFFFAA00).w,a1
000014CC                            
000014CC                            loc_16AA:				; XREF: sub_165E
000014CC 3A7C 0008                  		movea.w	#8,a5
000014D0 6100 FDF2                  		bsr.w	NemDec3
000014D4 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000014D8 6700                       		beq.s	loc_16DC
000014DA 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000014DE 66EC                       		bne.s	loc_16AA
000014E0 21C8 F680                  		move.l	a0,($FFFFF680).w
000014E4 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000014E8 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000014EC 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000014F0 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000014F4 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000014F8 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000014FC                            
000014FC                            locret_16DA:				; XREF: sub_1642
000014FC 4E75                       		rts	
000014FE                            ; ===========================================================================
000014FE                            
000014FE                            loc_16DC:				; XREF: sub_165E
000014FE 41F8 F680                  		lea	($FFFFF680).w,a0
00001502 7015                       		moveq	#$15,d0
00001504                            
00001504                            loc_16E2:				; XREF: sub_165E
00001504 20E8 0006                  		move.l	6(a0),(a0)+
00001508 51C8 FFFA                  		dbf	d0,loc_16E2
0000150C 4E75                       		rts	
0000150E                            ; End of function sub_165E
0000150E                            
0000150E                            ; ---------------------------------------------------------------------------
0000150E                            ; Subroutine to	execute	the pattern load cue
0000150E                            ; ---------------------------------------------------------------------------
0000150E                            
0000150E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000150E                            
0000150E                            
0000150E                            RunPLC_ROM:
0000150E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001514 D040                       		add.w	d0,d0
00001516 3031 0000                  		move.w	(a1,d0.w),d0
0000151A 43F1 0000                  		lea	(a1,d0.w),a1
0000151E 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001520                            
00001520                            RunPLC_Loop:
00001520 2059                       		movea.l	(a1)+,a0	; get art pointer
00001522 7000                       		moveq	#0,d0
00001524 3019                       		move.w	(a1)+,d0	; get VRAM address
00001526 E588                       		lsl.l	#2,d0		; divide address by $20
00001528 E448                       		lsr.w	#2,d0
0000152A 0040 4000                  		ori.w	#$4000,d0
0000152E 4840                       		swap	d0
00001530 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001536 6100 FD14                  		bsr.w	NemDec		; decompress
0000153A 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000153E 4E75                       		rts	
00001540                            ; End of function RunPLC_ROM
00001540                            
00001540                            ; ---------------------------------------------------------------------------
00001540                            ; Enigma decompression algorithm
00001540                            ; ---------------------------------------------------------------------------
00001540                            
00001540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001540                            
00001540                            
00001540                            EniDec:
00001540 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001544 3640                       		movea.w	d0,a3
00001546 1018                       		move.b	(a0)+,d0
00001548 4880                       		ext.w	d0
0000154A 3A40                       		movea.w	d0,a5
0000154C 1818                       		move.b	(a0)+,d4
0000154E E70C                       		lsl.b	#3,d4
00001550 3458                       		movea.w	(a0)+,a2
00001552 D4CB                       		adda.w	a3,a2
00001554 3858                       		movea.w	(a0)+,a4
00001556 D8CB                       		adda.w	a3,a4
00001558 1A18                       		move.b	(a0)+,d5
0000155A E145                       		asl.w	#8,d5
0000155C 1A18                       		move.b	(a0)+,d5
0000155E 7C10                       		moveq	#$10,d6
00001560                            
00001560                            loc_173E:				; XREF: loc_1768
00001560 7007                       		moveq	#7,d0
00001562 3E06                       		move.w	d6,d7
00001564 9E40                       		sub.w	d0,d7
00001566 3205                       		move.w	d5,d1
00001568 EE69                       		lsr.w	d7,d1
0000156A 0241 007F                  		andi.w	#$7F,d1
0000156E 3401                       		move.w	d1,d2
00001570 0C41 0040                  		cmpi.w	#$40,d1
00001574 6400                       		bcc.s	loc_1758
00001576 7006                       		moveq	#6,d0
00001578 E24A                       		lsr.w	#1,d2
0000157A                            
0000157A                            loc_1758:
0000157A 6100 0000                  		bsr.w	sub_188C
0000157E 0242 000F                  		andi.w	#$F,d2
00001582 E849                       		lsr.w	#4,d1
00001584 D241                       		add.w	d1,d1
00001586 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000158A                            ; End of function EniDec
0000158A                            
0000158A                            ; ===========================================================================
0000158A                            
0000158A                            loc_1768:				; XREF: loc_17B4
0000158A 32CA                       		move.w	a2,(a1)+
0000158C 524A                       		addq.w	#1,a2
0000158E 51CA FFFA                  		dbf	d2,loc_1768
00001592 60CC                       		bra.s	loc_173E
00001594                            ; ===========================================================================
00001594                            
00001594                            loc_1772:				; XREF: loc_17B4
00001594 32CC                       		move.w	a4,(a1)+
00001596 51CA FFFC                  		dbf	d2,loc_1772
0000159A 60C4                       		bra.s	loc_173E
0000159C                            ; ===========================================================================
0000159C                            
0000159C                            loc_177A:				; XREF: loc_17B4
0000159C 6100 0000                  		bsr.w	loc_17DC
000015A0                            
000015A0                            loc_177E:
000015A0 32C1                       		move.w	d1,(a1)+
000015A2 51CA FFFC                  		dbf	d2,loc_177E
000015A6 60B8                       		bra.s	loc_173E
000015A8                            ; ===========================================================================
000015A8                            
000015A8                            loc_1786:				; XREF: loc_17B4
000015A8 6100 0000                  		bsr.w	loc_17DC
000015AC                            
000015AC                            loc_178A:
000015AC 32C1                       		move.w	d1,(a1)+
000015AE 5241                       		addq.w	#1,d1
000015B0 51CA FFFA                  		dbf	d2,loc_178A
000015B4 60AA                       		bra.s	loc_173E
000015B6                            ; ===========================================================================
000015B6                            
000015B6                            loc_1794:				; XREF: loc_17B4
000015B6 6100 0000                  		bsr.w	loc_17DC
000015BA                            
000015BA                            loc_1798:
000015BA 32C1                       		move.w	d1,(a1)+
000015BC 5341                       		subq.w	#1,d1
000015BE 51CA FFFA                  		dbf	d2,loc_1798
000015C2 609C                       		bra.s	loc_173E
000015C4                            ; ===========================================================================
000015C4                            
000015C4                            loc_17A2:				; XREF: loc_17B4
000015C4 0C42 000F                  		cmpi.w	#$F,d2
000015C8 6700                       		beq.s	loc_17C4
000015CA                            
000015CA                            loc_17A8:
000015CA 6100 0000                  		bsr.w	loc_17DC
000015CE 32C1                       		move.w	d1,(a1)+
000015D0 51CA FFF8                  		dbf	d2,loc_17A8
000015D4 608A                       		bra.s	loc_173E
000015D6                            ; ===========================================================================
000015D6                            
000015D6                            loc_17B4:				; XREF: EniDec
000015D6 60B2                       		bra.s	loc_1768
000015D8                            ; ===========================================================================
000015D8 60B0                       		bra.s	loc_1768
000015DA                            ; ===========================================================================
000015DA 60B8                       		bra.s	loc_1772
000015DC                            ; ===========================================================================
000015DC 60B6                       		bra.s	loc_1772
000015DE                            ; ===========================================================================
000015DE 60BC                       		bra.s	loc_177A
000015E0                            ; ===========================================================================
000015E0 60C6                       		bra.s	loc_1786
000015E2                            ; ===========================================================================
000015E2 60D2                       		bra.s	loc_1794
000015E4                            ; ===========================================================================
000015E4 60DE                       		bra.s	loc_17A2
000015E6                            ; ===========================================================================
000015E6                            
000015E6                            loc_17C4:				; XREF: loc_17A2
000015E6 5348                       		subq.w	#1,a0
000015E8 0C46 0010                  		cmpi.w	#$10,d6
000015EC 6600                       		bne.s	loc_17CE
000015EE 5348                       		subq.w	#1,a0
000015F0                            
000015F0                            loc_17CE:
000015F0 3008                       		move.w	a0,d0
000015F2 E248                       		lsr.w	#1,d0
000015F4 6400                       		bcc.s	loc_17D6
000015F6 5248                       		addq.w	#1,a0
000015F8                            
000015F8                            loc_17D6:
000015F8 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000015FC 4E75                       		rts	
000015FE                            ; ===========================================================================
000015FE                            
000015FE                            loc_17DC:				; XREF: loc_17A2
000015FE 360B                       		move.w	a3,d3
00001600 1204                       		move.b	d4,d1
00001602 D201                       		add.b	d1,d1
00001604 6400                       		bcc.s	loc_17EE
00001606 5346                       		subq.w	#1,d6
00001608 0D05                       		btst	d6,d5
0000160A 6700                       		beq.s	loc_17EE
0000160C 0043 8000                  		ori.w	#-$8000,d3
00001610                            
00001610                            loc_17EE:
00001610 D201                       		add.b	d1,d1
00001612 6400                       		bcc.s	loc_17FC
00001614 5346                       		subq.w	#1,d6
00001616 0D05                       		btst	d6,d5
00001618 6700                       		beq.s	loc_17FC
0000161A 0643 4000                  		addi.w	#$4000,d3
0000161E                            
0000161E                            loc_17FC:
0000161E D201                       		add.b	d1,d1
00001620 6400                       		bcc.s	loc_180A
00001622 5346                       		subq.w	#1,d6
00001624 0D05                       		btst	d6,d5
00001626 6700                       		beq.s	loc_180A
00001628 0643 2000                  		addi.w	#$2000,d3
0000162C                            
0000162C                            loc_180A:
0000162C D201                       		add.b	d1,d1
0000162E 6400                       		bcc.s	loc_1818
00001630 5346                       		subq.w	#1,d6
00001632 0D05                       		btst	d6,d5
00001634 6700                       		beq.s	loc_1818
00001636 0043 1000                  		ori.w	#$1000,d3
0000163A                            
0000163A                            loc_1818:
0000163A D201                       		add.b	d1,d1
0000163C 6400                       		bcc.s	loc_1826
0000163E 5346                       		subq.w	#1,d6
00001640 0D05                       		btst	d6,d5
00001642 6700                       		beq.s	loc_1826
00001644 0043 0800                  		ori.w	#$800,d3
00001648                            
00001648                            loc_1826:
00001648 3205                       		move.w	d5,d1
0000164A 3E06                       		move.w	d6,d7
0000164C 9E4D                       		sub.w	a5,d7
0000164E 6400                       		bcc.s	loc_1856
00001650 3C07                       		move.w	d7,d6
00001652 0646 0010                  		addi.w	#$10,d6
00001656 4447                       		neg.w	d7
00001658 EF69                       		lsl.w	d7,d1
0000165A 1A10                       		move.b	(a0),d5
0000165C EF3D                       		rol.b	d7,d5
0000165E DE47                       		add.w	d7,d7
00001660 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001664 D245                       		add.w	d5,d1
00001666                            
00001666                            loc_1844:				; XREF: loc_1868
00001666 300D                       		move.w	a5,d0
00001668 D040                       		add.w	d0,d0
0000166A C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000166E D243                       		add.w	d3,d1
00001670 1A18                       		move.b	(a0)+,d5
00001672 E14D                       		lsl.w	#8,d5
00001674 1A18                       		move.b	(a0)+,d5
00001676 4E75                       		rts	
00001678                            ; ===========================================================================
00001678                            
00001678                            loc_1856:				; XREF: loc_1826
00001678 6700                       		beq.s	loc_1868
0000167A EE69                       		lsr.w	d7,d1
0000167C 300D                       		move.w	a5,d0
0000167E D040                       		add.w	d0,d0
00001680 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001684 D243                       		add.w	d3,d1
00001686 300D                       		move.w	a5,d0
00001688 6000                       		bra.s	sub_188C
0000168A                            ; ===========================================================================
0000168A                            
0000168A                            loc_1868:				; XREF: loc_1856
0000168A 7C10                       		moveq	#$10,d6
0000168C                            
0000168C                            loc_186A:
0000168C 60D8                       		bra.s	loc_1844
0000168E                            ; ===========================================================================
0000168E 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000016A4 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            sub_188C:				; XREF: EniDec
000016AE 9C40                       		sub.w	d0,d6
000016B0 0C46 0009                  		cmpi.w	#9,d6
000016B4 6400                       		bcc.s	locret_189A
000016B6 5046                       		addq.w	#8,d6
000016B8 E145                       		asl.w	#8,d5
000016BA 1A18                       		move.b	(a0)+,d5
000016BC                            
000016BC                            locret_189A:
000016BC 4E75                       		rts	
000016BE                            ; End of function sub_188C
000016BE                            
000016BE                            ; ---------------------------------------------------------------------------
000016BE                            ; Kosinski decompression algorithm
000016BE                            ; ---------------------------------------------------------------------------
000016BE                            
000016BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016BE                            
000016BE                            
000016BE                            	include "KosDec.asm"
000016BE                            ; ===========================================================================
000016BE                            ; ---------------------------------------------------------------------------
000016BE                            ; Kosinski decompression routine
000016BE                            ;
000016BE                            ; Created by vladikcomper
000016BE                            ; Special thanks to flamewing and MarkeyJester
000016BE                            ; ---------------------------------------------------------------------------
000016BE                             
000016BE                            _Kos_RunBitStream macro
000016BE                                    dbf     d2,@skip\@
000016BE                                    moveq   #7,d2
000016BE                                    move.b  d1,d0
000016BE                                    swap    d3
000016BE                                    bpl.s   @skip\@
000016BE                                    move.b  (a0)+,d0                        ; get desc. bitfield
000016BE                                    move.b  (a0)+,d1                        ;
000016BE                                    move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000016BE                                    move.b  (a4,d1.w),d1                    ;
000016BE                            @skip\@
000016BE                                    endm
000016BE                            ; ---------------------------------------------------------------------------
000016BE                             
000016BE                            KosDec:
000016BE 7E07                               moveq   #7,d7
000016C0 7000                               moveq   #0,d0
000016C2 7200                               moveq   #0,d1
000016C4 49FA 0000                          lea     KosDec_ByteMap(pc),a4
000016C8 1018                               move.b  (a0)+,d0                        ; get desc field low-byte
000016CA 1218                               move.b  (a0)+,d1                        ; get desc field hi-byte
000016CC 1034 0000                          move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
000016D0 1234 1000                          move.b  (a4,d1.w),d1                    ;
000016D4 7407                               moveq   #7,d2                           ; set repeat count to 8
000016D6 76FF                               moveq   #-1,d3                          ; d3 will be desc field switcher
000016D8 4243                               clr.w   d3                              ;
000016DA 6000                               bra.s   KosDec_FetchNewCode
000016DC                             
000016DC                            KosDec_FetchCodeLoop:
000016DC                                    ; code 1 (Uncompressed byte)
000016DC 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000016F4 12D8                               move.b  (a0)+,(a1)+
000016F6                             
000016F6                            KosDec_FetchNewCode:
000016F6 D000                               add.b   d0,d0                           ; get a bit from the bitstream
000016F8 65E2                               bcs.s   KosDec_FetchCodeLoop            ; if code = 0, branch
000016FA                             
000016FA                                    ; codes 00 and 01
000016FA 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001712 7800                               moveq   #0,d4                           ; d4 will contain copy count
00001714 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001716 6500                               bcs.s   KosDec_Code_01
00001718                             
00001718                                    ; code 00 (Dictionary ref. short)
00001718 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001730 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001732 D944                               addx.w  d4,d4
00001734 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
0000174C D000                               add.b   d0,d0                           ; get a bit from the bitstream
0000174E D944                               addx.w  d4,d4
00001750 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001768 7AFF                               moveq   #-1,d5
0000176A 1A18                               move.b  (a0)+,d5                        ; d5 = displacement
0000176C                             
0000176C                            KosDec_StreamCopy:
0000176C 47F1 5000                          lea     (a1,d5),a3
00001770 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001772                             
00001772                            KosDec_copy:
00001772 12DB                               move.b  (a3)+,(a1)+
00001774 51CC FFFC                          dbf     d4,KosDec_copy
00001778 6000 FF7C                          bra.w   KosDec_FetchNewCode
0000177C                            ; ---------------------------------------------------------------------------
0000177C                            KosDec_Code_01:
0000177C                                    ; code 01 (Dictionary ref. long / special)
0000177C 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001794 1C18                               move.b  (a0)+,d6                        ; d6 = %LLLLLLLL
00001796 1818                               move.b  (a0)+,d4                        ; d4 = %HHHHHCCC
00001798 7AFF                               moveq   #-1,d5
0000179A 1A04                               move.b  d4,d5                           ; d5 = %11111111 HHHHHCCC
0000179C EB4D                               lsl.w   #5,d5                           ; d5 = %111HHHHH CCC00000
0000179E 1A06                               move.b  d6,d5                           ; d5 = %111HHHHH LLLLLLLL
000017A0 C847                               and.w   d7,d4                           ; d4 = %00000CCC
000017A2 66C8                               bne.s   KosDec_StreamCopy               ; if CCC=0, branch
000017A4                             
000017A4                                    ; special mode (extended counter)
000017A4 1818                               move.b  (a0)+,d4                        ; read cnt
000017A6 6700                               beq.s   KosDec_Quit                     ; if cnt=0, quit decompression
000017A8 5304                               subq.b  #1,d4
000017AA 6700 FF4A                          beq.w   KosDec_FetchNewCode             ; if cnt=1, fetch a new code
000017AE                             
000017AE 47F1 5000                          lea     (a1,d5),a3
000017B2 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
000017B4 3C04                               move.w  d4,d6
000017B6 4646                               not.w   d6
000017B8 CC47                               and.w   d7,d6
000017BA DC46                               add.w   d6,d6
000017BC E64C                               lsr.w   #3,d4
000017BE 4EFB 6000                          jmp     KosDec_largecopy(pc,d6.w)
000017C2                             
000017C2                            KosDec_largecopy:
000017C2                                    rept 8
000017C2                                    move.b  (a3)+,(a1)+
000017C2 12DB 12DB 12DB 12DB 12DB+          endr
000017D2 51CC FFEE                          dbf     d4,KosDec_largecopy
000017D6 6000 FF1E                          bra.w   KosDec_FetchNewCode
000017DA                             
000017DA                            KosDec_Quit:
000017DA 4E75                               rts
000017DC                             
000017DC                            ; ---------------------------------------------------------------------------
000017DC                            ; A look-up table to invert bits order in desc. field bytes
000017DC                            ; ---------------------------------------------------------------------------
000017DC                             
000017DC                            KosDec_ByteMap:
000017DC 0080 40C0 20A0 60E0 1090+          dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
000017EC 0888 48C8 28A8 68E8 1898+          dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
000017FC 0484 44C4 24A4 64E4 1494+          dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
0000180C 0C8C 4CCC 2CAC 6CEC 1C9C+          dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
0000181C 0282 42C2 22A2 62E2 1292+          dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
0000182C 0A8A 4ACA 2AAA 6AEA 1A9A+          dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
0000183C 0686 46C6 26A6 66E6 1696+          dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
0000184C 0E8E 4ECE 2EAE 6EEE 1E9E+          dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
0000185C 0181 41C1 21A1 61E1 1191+          dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
0000186C 0989 49C9 29A9 69E9 1999+          dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
0000187C 0585 45C5 25A5 65E5 1595+          dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
0000188C 0D8D 4DCD 2DAD 6DED 1D9D+          dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
0000189C 0383 43C3 23A3 63E3 1393+          dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
000018AC 0B8B 4BCB 2BAB 6BEB 1B9B+          dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
000018BC 0787 47C7 27A7 67E7 1797+          dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
000018CC 0F8F 4FCF 2FAF 6FEF 1F9F+          dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
000018DC                             
000018DC                            ; ===========================================================================
000018DC                            ; ===========================================================================
000018DC                            
000018DC                            ; ---------------------------------------------------------------------------
000018DC                            ; Pallet cycling routine loading subroutine
000018DC                            ; ---------------------------------------------------------------------------
000018DC                            
000018DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018DC                            
000018DC                            
000018DC                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
000018DC 0C38 0002 FFF6             		cmpi.b	#$02, ($FFFFFFF6).w ; if player flag set?
000018E2 6700                       		beq.s	LoadOverclockCycle
000018E4 0C38 0003 FFF6             		cmpi.b	#$03, ($FFFFFFF6).w ; is the player Mighty?
000018EA 6600                       		bne.s	LoadDarkCycle
000018EC 6100 0000                  		bsr.w	PalCycle_SuperMighty
000018F0 4EF9 0000 0000             		jmp		PalCycle_ContinueSuper
000018F6                            
000018F6                            LoadOverclockCycle:
000018F6 6100 0000                  		bsr.w	PalCycle_RedMetal
000018FA 4EF9 0000 0000             		jmp		PalCycle_ContinueSuper
00001900                            
00001900                            LoadDarkCycle:
00001900 6100 0000                  		bsr.w	PalCycle_DarkSonic
00001904                            
00001904                            PalCycle_ContinueSuper:
00001904 7400                       		moveq	#0,d2
00001906 7000                       		moveq	#0,d0
00001908 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
0000190C D040                       		add.w	d0,d0		; multiply by 2
0000190E 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001912 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001916                            ; End of function PalCycle_Load
00001916                            
00001916                            ; ===========================================================================
00001916                            ; ---------------------------------------------------------------------------
00001916                            ; Pallet cycling routines
00001916                            ; ---------------------------------------------------------------------------
00001916 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001918 0000                       		dc.w PalCycle_LZ-PalCycle
0000191A 0000                       		dc.w PalCycle_MZ-PalCycle
0000191C 0000                       		dc.w PalCycle_SLZ-PalCycle
0000191E 0000                       		dc.w PalCycle_SYZ-PalCycle
00001920 0000                       		dc.w PalCycle_SBZ-PalCycle
00001922 0000                       		dc.w PalCycle_GHZ-PalCycle
00001924                            
00001924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001924                            
00001924                            
00001924                            PalCycle_Title:				; XREF: TitleScreen
00001924 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
0000192A 6000                       		bra.s	loc_196A
0000192C                            ; ===========================================================================
0000192C                            
0000192C                            PalCycle_GHZ:				; XREF: PalCycle
0000192C 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001932                            
00001932                            loc_196A:				; XREF: PalCycle_Title
00001932 5378 F634                  		subq.w	#1,($FFFFF634).w
00001936 6A00                       		bpl.s	locret_1990
00001938 31FC 0005 F634             		move.w	#5,($FFFFF634).w
0000193E 3038 F632                  		move.w	($FFFFF632).w,d0
00001942 5278 F632                  		addq.w	#1,($FFFFF632).w
00001946 0240 0003                  		andi.w	#3,d0
0000194A E748                       		lsl.w	#3,d0
0000194C 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001950 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001954 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001958                            
00001958                            locret_1990:
00001958 4E75                       		rts	
0000195A                            ; End of function PalCycle_Title
0000195A                            
0000195A                            
0000195A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000195A                            
0000195A                            
0000195A                            PalCycle_LZ:				; XREF: PalCycle
0000195A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000195E 6A00                       		bpl.s	loc_19D8
00001960 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001966 3038 F632                  		move.w	($FFFFF632).w,d0
0000196A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000196E 0240 0003                  		andi.w	#3,d0
00001972 E748                       		lsl.w	#3,d0
00001974 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
0000197A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001980 6600                       		bne.s	loc_19C0
00001982 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001988                            
00001988                            loc_19C0:
00001988 43F8 FB56                  		lea	($FFFFFB56).w,a1
0000198C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001990 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001994 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001998 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000199C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019A0                            
000019A0                            loc_19D8:
000019A0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000019A4 0240 0007                  		andi.w	#7,d0
000019A8 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019AC 6700                       		beq.s	locret_1A3A
000019AE 7201                       		moveq	#1,d1
000019B0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019B4 6700                       		beq.s	loc_19F0
000019B6 4441                       		neg.w	d1
000019B8                            
000019B8                            loc_19F0:
000019B8 3038 F650                  		move.w	($FFFFF650).w,d0
000019BC 0240 0003                  		andi.w	#3,d0
000019C0 D041                       		add.w	d1,d0
000019C2 0C40 0003                  		cmpi.w	#3,d0
000019C6 6500                       		bcs.s	loc_1A0A
000019C8 3200                       		move.w	d0,d1
000019CA 7000                       		moveq	#0,d0
000019CC 4A41                       		tst.w	d1
000019CE 6A00                       		bpl.s	loc_1A0A
000019D0 7002                       		moveq	#2,d0
000019D2                            
000019D2                            loc_1A0A:
000019D2 31C0 F650                  		move.w	d0,($FFFFF650).w
000019D6 D040                       		add.w	d0,d0
000019D8 3200                       		move.w	d0,d1
000019DA D040                       		add.w	d0,d0
000019DC D041                       		add.w	d1,d0
000019DE 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
000019E4 43F8 FB76                  		lea	($FFFFFB76).w,a1
000019E8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019EC 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000019F0 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
000019F6 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
000019FA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019FE 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A02                            
00001A02                            locret_1A3A:
00001A02 4E75                       		rts	
00001A04                            ; End of function PalCycle_LZ
00001A04                            
00001A04                            ; ===========================================================================
00001A04 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A0C                            ; ===========================================================================
00001A0C                            
00001A0C                            PalCycle_MZ:				; XREF: PalCycle
00001A0C 4E75                       		rts	
00001A0E                            
00001A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A0E                            ;
00001A0E                            ;
00001A0E                            PalCycle_SLZ:				; XREF: PalCycle
00001A0E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A12 6A00                       		bpl.s	locret_1A80
00001A14 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A1A 3038 F632                  		move.w	($FFFFF632).w,d0
00001A1E 5240                       		addq.w	#1,d0
00001A20 0C40 0006                  		cmpi.w	#6,d0
00001A24 6500                       		bcs.s	loc_1A60
00001A26 7000                       		moveq	#0,d0
00001A28                            
00001A28                            loc_1A60:
00001A28 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A2C 3200                       		move.w	d0,d1
00001A2E D241                       		add.w	d1,d1
00001A30 D041                       		add.w	d1,d0
00001A32 D040                       		add.w	d0,d0
00001A34 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A3A 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A3E 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A42 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A48                            
00001A48                            locret_1A80:
00001A48 4E75                       		rts	
00001A4A                            ; End of function PalCycle_SLZ
00001A4A                            
00001A4A                            
00001A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A4A                            
00001A4A                            
00001A4A                            PalCycle_SYZ:				; XREF: PalCycle
00001A4A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A4E 6A00                       		bpl.s	locret_1AC6
00001A50 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A56 3038 F632                  		move.w	($FFFFF632).w,d0
00001A5A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A5E 0240 0003                  		andi.w	#3,d0
00001A62 E548                       		lsl.w	#2,d0
00001A64 3200                       		move.w	d0,d1
00001A66 D040                       		add.w	d0,d0
00001A68 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001A6E 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001A72 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A76 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A7A 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001A80 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A84 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001A88 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001A8E                            
00001A8E                            locret_1AC6:
00001A8E 4E75                       		rts	
00001A90                            ; End of function PalCycle_SYZ
00001A90                            
00001A90                            
00001A90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A90                            
00001A90                            
00001A90                            PalCycle_SBZ:				; XREF: PalCycle
00001A90 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001A96 4A38 FE11                  		tst.b	($FFFFFE11).w
00001A9A 6700                       		beq.s	loc_1ADA
00001A9C 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001AA2                            
00001AA2                            loc_1ADA:
00001AA2 43F8 F650                  		lea	($FFFFF650).w,a1
00001AA6 321A                       		move.w	(a2)+,d1
00001AA8                            
00001AA8                            loc_1AE0:
00001AA8 5311                       		subq.b	#1,(a1)
00001AAA 6B00                       		bmi.s	loc_1AEA
00001AAC 5489                       		addq.l	#2,a1
00001AAE 5C8A                       		addq.l	#6,a2
00001AB0 6000                       		bra.s	loc_1B06
00001AB2                            ; ===========================================================================
00001AB2                            
00001AB2                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AB2 12DA                       		move.b	(a2)+,(a1)+
00001AB4 1011                       		move.b	(a1),d0
00001AB6 5200                       		addq.b	#1,d0
00001AB8 B01A                       		cmp.b	(a2)+,d0
00001ABA 6500                       		bcs.s	loc_1AF6
00001ABC 7000                       		moveq	#0,d0
00001ABE                            
00001ABE                            loc_1AF6:
00001ABE 12C0                       		move.b	d0,(a1)+
00001AC0 0240 000F                  		andi.w	#$F,d0
00001AC4 D040                       		add.w	d0,d0
00001AC6 305A                       		movea.w	(a2)+,a0
00001AC8 365A                       		movea.w	(a2)+,a3
00001ACA 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001ACE                            
00001ACE                            loc_1B06:				; XREF: PalCycle_SBZ
00001ACE 51C9 FFD8                  		dbf	d1,loc_1AE0
00001AD2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AD6 6A00                       		bpl.s	locret_1B64
00001AD8 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001ADE 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001AE4 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AE8 6700                       		beq.s	loc_1B2E
00001AEA 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001AF0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001AF6                            
00001AF6                            loc_1B2E:
00001AF6 72FF                       		moveq	#-1,d1
00001AF8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001AFC 6700                       		beq.s	loc_1B38
00001AFE 4441                       		neg.w	d1
00001B00                            
00001B00                            loc_1B38:
00001B00 3038 F632                  		move.w	($FFFFF632).w,d0
00001B04 0240 0003                  		andi.w	#3,d0
00001B08 D041                       		add.w	d1,d0
00001B0A 0C40 0003                  		cmpi.w	#3,d0
00001B0E 6500                       		bcs.s	loc_1B52
00001B10 3200                       		move.w	d0,d1
00001B12 7000                       		moveq	#0,d0
00001B14 4A41                       		tst.w	d1
00001B16 6A00                       		bpl.s	loc_1B52
00001B18 7002                       		moveq	#2,d0
00001B1A                            
00001B1A                            loc_1B52:
00001B1A 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B1E D040                       		add.w	d0,d0
00001B20 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B24 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B28 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B2C                            
00001B2C                            locret_1B64:
00001B2C 4E75                       		rts	
00001B2E                            ; End of function PalCycle_SBZ
00001B2E                            
00001B2E                            PalCycle_DarkSonic:
00001B2E                            	include	"Dark Sonic Cycle code.asm"
00001B2E 1038 F65F                  	move.b	(Super_Sonic_palette).w,d0
00001B32 6700                       	beq.s	return_2186
00001B34 6B00 0000                  	bmi.w	loc_21E6
00001B38 5300                       	subq.b	#1,d0
00001B3A 6600                       	bne.s	loc_2188
00001B3C 5338 F65E                  	subq.b	#1,(Palette_frame_count).w
00001B40 6A00                       	bpl.s	return_2186
00001B42 11FC 0003 F65E             	move.b	#3,(Palette_frame_count).w
00001B48 41F9 0000 0000             	lea	(DarkSonic_Pal).l,a0
00001B4E 3038 F65C                  	move.w	($FFFFF65C).w,d0
00001B52 5078 F65C                  	addq.w	#8,($FFFFF65C).w
00001B56 0C78 0030 F65C             	cmpi.w	#$30,($FFFFF65C).w
00001B5C 6500                       	bcs.s	super1
00001B5E 11FC 00FF F65F             	move.b	#-1,(Super_Sonic_palette).w
00001B64 11FC 0000 B02A             	move.b	#0,(MainCharacter+obj_control).w
00001B6A                            super1:
00001B6A 43F8 FB04                  	lea	(Normal_palette+4).w,a1
00001B6E 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001B72 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001B76                            
00001B76                            return_2186:
00001B76 4E75                       	rts
00001B78                            ; ===========================================================================
00001B78                            
00001B78                            loc_2188:
00001B78 5338 F65E                  	subq.b	#1,(Palette_frame_count).w
00001B7C 6AF8                       	bpl.s	return_2186
00001B7E 11FC 0003 F65E             	move.b	#3,(Palette_frame_count).w
00001B84 41F9 0000 0000             	lea	(DarkSonic_Pal).l,a0
00001B8A 3038 F65C                  	move.w	($FFFFF65C).w,d0
00001B8E 5178 F65C                  	subq.w	#8,($FFFFF65C).w
00001B92 6400                       	bcc.s	loc_21B0
00001B94 11FC 0000 F65C             	move.b	#0,($FFFFF65C).w
00001B9A 11FC 0000 F65F             	move.b	#0,(Super_Sonic_palette).w
00001BA0                            loc_21B0:
00001BA0 43F8 FB04                  	lea	(Normal_palette+4).w,a1
00001BA4 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001BA8 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001BAC 41F9 0000 0000             	lea	(Pal_22C6).l,a0
00001BB2 0C38 0002 FE10             	cmpi.b	#$2,(Current_Zone).w
00001BB8 6700                       	beq.s	super2
00001BBA 0C38 000F FE10             	cmpi.b	#$F,(Current_Zone).w
00001BC0 66B4                       	bne.s	return_2186
00001BC2 41F9 0000 0000             	lea	(Pal_2346).l,a0
00001BC8                            super2:
00001BC8 43F8 F084                  	lea	(Underwater_palette+4).w,a1
00001BCC 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001BD0 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001BD4 4E75                       	rts
00001BD6                            ; ===========================================================================
00001BD6                            
00001BD6                            loc_21E6:
00001BD6 5338 F65E                  	subq.b	#1,(Palette_frame_count).w
00001BDA 6A9A                       	bpl.s	return_2186
00001BDC 11FC 0007 F65E             	move.b	#7,(Palette_frame_count).w
00001BE2 41F9 0000 0000             	lea	(DarkSonic_Pal).l,a0
00001BE8 3038 F65C                  	move.w	($FFFFF65C).w,d0
00001BEC 5078 F65C                  	addq.w	#8,($FFFFF65C).w
00001BF0 0C78 0078 F65C             	cmpi.w	#$78,($FFFFF65C).w
00001BF6 6500                       	bcs.s	super3
00001BF8 31FC 0030 F65C             	move.w	#$30,($FFFFF65C).w
00001BFE                            super3:
00001BFE 43F8 FB04                  	lea	(Normal_palette+4).w,a1
00001C02 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001C06 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001C0A 41F9 0000 0000             	lea	(Pal_22C6).l,a0
00001C10 0C38 0001 FE10             	cmpi.b	#$1,(Current_Zone).w
00001C16 6700                       	beq.s	super4
00001C18 0C38 000F FE10             	cmpi.b	#$F,(Current_Zone).w
00001C1E 6600 FF56                  	bne.w	return_2186
00001C22 41F9 0000 0000             	lea	(Pal_2346).l,a0
00001C28                            super4:
00001C28 43F8 F084                  	lea	(Underwater_palette+4).w,a1
00001C2C 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001C30 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001C34 4E75                       	rts
00001C36                            ; End of function PalCycle_SuperSonic
00001C36                            ; End of function PalCycle_SuperSonic
00001C36                            
00001C36                            PalCycle_RedMetal:
00001C36                            	include	"Overclock Cycle code.asm"
00001C36 1038 F65F                  	move.b	(Super_Sonic_palette).w,d0
00001C3A 6700                       	beq.s	return2_2186
00001C3C 6B00 0000                  	bmi.w	loc2_21E6
00001C40 5300                       	subq.b	#1,d0
00001C42 6600                       	bne.s	loc2_2188
00001C44 5338 F65E                  	subq.b	#1,(Palette_frame_count).w
00001C48 6A00                       	bpl.s	return2_2186
00001C4A 11FC 0003 F65E             	move.b	#3,(Palette_frame_count).w
00001C50 41F9 0000 0000             	lea	(RedMetal_Pal).l,a0
00001C56 3038 F65C                  	move.w	($FFFFF65C).w,d0
00001C5A 5078 F65C                  	addq.w	#8,($FFFFF65C).w
00001C5E 0C78 0030 F65C             	cmpi.w	#$30,($FFFFF65C).w
00001C64 6500                       	bcs.s	redm1
00001C66 11FC 00FF F65F             	move.b	#-1,(Super_Sonic_palette).w
00001C6C 11FC 0000 B02A             	move.b	#0,(MainCharacter+obj_control).w
00001C72                            redm1:
00001C72 43F8 FB04                  	lea	(Normal_palette+4).w,a1
00001C76 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001C7A 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001C7E                            
00001C7E                            return2_2186:
00001C7E 4E75                       	rts
00001C80                            ; ===========================================================================
00001C80                            
00001C80                            loc2_2188:
00001C80 5338 F65E                  	subq.b	#1,(Palette_frame_count).w
00001C84 6AF8                       	bpl.s	return2_2186
00001C86 11FC 0003 F65E             	move.b	#3,(Palette_frame_count).w
00001C8C 41F9 0000 0000             	lea	(RedMetal_Pal).l,a0
00001C92 3038 F65C                  	move.w	($FFFFF65C).w,d0
00001C96 5178 F65C                  	subq.w	#8,($FFFFF65C).w
00001C9A 6400                       	bcc.s	loc2_21B0
00001C9C 11FC 0000 F65C             	move.b	#0,($FFFFF65C).w
00001CA2 11FC 0000 F65F             	move.b	#0,(Super_Sonic_palette).w
00001CA8                            loc2_21B0:
00001CA8 43F8 FB04                  	lea	(Normal_palette+4).w,a1
00001CAC 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001CB0 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001CB4 41F9 0000 0000             	lea	(Pal_22C6).l,a0
00001CBA 0C38 0002 FE10             	cmpi.b	#$2,(Current_Zone).w
00001CC0 6700                       	beq.s	redm2
00001CC2 0C38 000F FE10             	cmpi.b	#$F,(Current_Zone).w
00001CC8 66B4                       	bne.s	return2_2186
00001CCA 41F9 0000 0000             	lea	(Pal_2346).l,a0
00001CD0                            redm2:
00001CD0 43F8 F084                  	lea	(Underwater_palette+4).w,a1
00001CD4 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001CD8 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001CDC 4E75                       	rts
00001CDE                            ; ===========================================================================
00001CDE                            
00001CDE                            loc2_21E6:
00001CDE 5338 F65E                  	subq.b	#1,(Palette_frame_count).w
00001CE2 6A9A                       	bpl.s	return2_2186
00001CE4 11FC 0007 F65E             	move.b	#7,(Palette_frame_count).w
00001CEA 41F9 0000 0000             	lea	(RedMetal_Pal).l,a0
00001CF0 3038 F65C                  	move.w	($FFFFF65C).w,d0
00001CF4 5078 F65C                  	addq.w	#8,($FFFFF65C).w
00001CF8 0C78 0078 F65C             	cmpi.w	#$78,($FFFFF65C).w
00001CFE 6500                       	bcs.s	redm3
00001D00 31FC 0030 F65C             	move.w	#$30,($FFFFF65C).w
00001D06                            redm3:
00001D06 43F8 FB04                  	lea	(Normal_palette+4).w,a1
00001D0A 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001D0E 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001D12 41F9 0000 0000             	lea	(Pal_22C6).l,a0
00001D18 0C38 0001 FE10             	cmpi.b	#$1,(Current_Zone).w
00001D1E 6700                       	beq.s	redm4
00001D20 0C38 000F FE10             	cmpi.b	#$F,(Current_Zone).w
00001D26 6600 FF56                  	bne.w	return2_2186
00001D2A 41F9 0000 0000             	lea	(Pal_2346).l,a0
00001D30                            redm4:
00001D30 43F8 F084                  	lea	(Underwater_palette+4).w,a1
00001D34 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001D38 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001D3C 4E75                       	rts
00001D3C 4E75                       	rts
00001D3E                            
00001D3E                            PalCycle_SuperMighty:
00001D3E                            	include "Super Mighty Cycle code.asm"
00001D3E 1038 F65F                  	move.b	(Super_Sonic_palette).w,d0
00001D42 6700                       	beq.s	return3_2186
00001D44 6B00 0000                  	bmi.w	loc3_21E6
00001D48 5300                       	subq.b	#1,d0
00001D4A 6600                       	bne.s	loc3_2188
00001D4C 5338 F65E                  	subq.b	#1,(Palette_frame_count).w
00001D50 6A00                       	bpl.s	return3_2186
00001D52 11FC 0003 F65E             	move.b	#3,(Palette_frame_count).w
00001D58 41F9 0000 0000             	lea	(SuperMighty_Pal).l,a0
00001D5E 3038 F65C                  	move.w	($FFFFF65C).w,d0
00001D62 5078 F65C                  	addq.w	#8,($FFFFF65C).w
00001D66 0C78 0030 F65C             	cmpi.w	#$30,($FFFFF65C).w
00001D6C 6500                       	bcs.s	supmty1
00001D6E 11FC 00FF F65F             	move.b	#-1,(Super_Sonic_palette).w
00001D74 11FC 0000 B02A             	move.b	#0,(MainCharacter+obj_control).w
00001D7A                            supmty1:
00001D7A 43F8 FB04                  	lea	(Normal_palette+4).w,a1
00001D7E 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001D82 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001D86                            
00001D86                            return3_2186:
00001D86 4E75                       	rts
00001D88                            ; ===========================================================================
00001D88                            
00001D88                            loc3_2188:
00001D88 5338 F65E                  	subq.b	#1,(Palette_frame_count).w
00001D8C 6AF8                       	bpl.s	return3_2186
00001D8E 11FC 0003 F65E             	move.b	#3,(Palette_frame_count).w
00001D94 41F9 0000 0000             	lea	(SuperMighty_Pal).l,a0
00001D9A 3038 F65C                  	move.w	($FFFFF65C).w,d0
00001D9E 5178 F65C                  	subq.w	#8,($FFFFF65C).w
00001DA2 6400                       	bcc.s	loc3_21B0
00001DA4 11FC 0000 F65C             	move.b	#0,($FFFFF65C).w
00001DAA 11FC 0000 F65F             	move.b	#0,(Super_Sonic_palette).w
00001DB0                            loc3_21B0:
00001DB0 43F8 FB04                  	lea	(Normal_palette+4).w,a1
00001DB4 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001DB8 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001DBC 41F9 0000 0000             	lea	(Pal_22C6).l,a0
00001DC2 0C38 0002 FE10             	cmpi.b	#$2,(Current_Zone).w
00001DC8 6700                       	beq.s	supmty2
00001DCA 0C38 000F FE10             	cmpi.b	#$F,(Current_Zone).w
00001DD0 66B4                       	bne.s	return3_2186
00001DD2 41F9 0000 0000             	lea	(Pal_2346).l,a0
00001DD8                            supmty2:
00001DD8 43F8 F084                  	lea	(Underwater_palette+4).w,a1
00001DDC 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001DE0 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001DE4 4E75                       	rts
00001DE6                            ; ===========================================================================
00001DE6                            
00001DE6                            loc3_21E6:
00001DE6 5338 F65E                  	subq.b	#1,(Palette_frame_count).w
00001DEA 6A9A                       	bpl.s	return3_2186
00001DEC 11FC 0007 F65E             	move.b	#7,(Palette_frame_count).w
00001DF2 41F9 0000 0000             	lea	(SuperMighty_Pal).l,a0
00001DF8 3038 F65C                  	move.w	($FFFFF65C).w,d0
00001DFC 5078 F65C                  	addq.w	#8,($FFFFF65C).w
00001E00 0C78 0078 F65C             	cmpi.w	#$78,($FFFFF65C).w
00001E06 6500                       	bcs.s	supmty3
00001E08 31FC 0030 F65C             	move.w	#$30,($FFFFF65C).w
00001E0E                            supmty3:
00001E0E 43F8 FB04                  	lea	(Normal_palette+4).w,a1
00001E12 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001E16 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001E1A 41F9 0000 0000             	lea	(Pal_22C6).l,a0
00001E20 0C38 0001 FE10             	cmpi.b	#$1,(Current_Zone).w
00001E26 6700                       	beq.s	supmty4
00001E28 0C38 000F FE10             	cmpi.b	#$F,(Current_Zone).w
00001E2E 6600 FF56                  	bne.w	return3_2186
00001E32 41F9 0000 0000             	lea	(Pal_2346).l,a0
00001E38                            supmty4:
00001E38 43F8 F084                  	lea	(Underwater_palette+4).w,a1
00001E3C 22F0 0000                  	move.l	(a0,d0.w),(a1)+
00001E40 22B0 0004                  	move.l	4(a0,d0.w),(a1)
00001E44 4E75                       	rts
00001E44 4E75                       	rts
00001E46                            
00001E46                            ; ===========================================================================
00001E46                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001E66                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001E86                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001EA6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001EB8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001ECA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001F32                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001F56                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001F76                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001F86                            
00001F86                            Pal_SBZCycList:
00001F86                            	include "_inc\SBZ pallet script 1.asm"
00001F86                            ; ---------------------------------------------------------------------------
00001F86                            ; Scrap Brain Zone 1 pallet cycling script
00001F86                            ; ---------------------------------------------------------------------------
00001F86 0008                       	dc.w 8			; number of entries - 1
00001F88 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001F8A 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001F8C FB50                       	dc.w $FB50		; RAM address
00001F8E 0D08                       	dc.b $D, 8
00001F90 0000                       	dc.w Pal_SBZCyc2
00001F92 FB52                       	dc.w $FB52
00001F94 0E08                       	dc.b $E, 8
00001F96 0000                       	dc.w Pal_SBZCyc3
00001F98 FB6E                       	dc.w $FB6E
00001F9A 0B08                       	dc.b $B, 8
00001F9C 0000                       	dc.w Pal_SBZCyc5
00001F9E FB70                       	dc.w $FB70
00001FA0 0708                       	dc.b 7,	8
00001FA2 0000                       	dc.w Pal_SBZCyc6
00001FA4 FB72                       	dc.w $FB72
00001FA6 1C10                       	dc.b $1C, $10
00001FA8 0000                       	dc.w Pal_SBZCyc7
00001FAA FB7E                       	dc.w $FB7E
00001FAC 0303                       	dc.b 3,	3
00001FAE 0000                       	dc.w Pal_SBZCyc8
00001FB0 FB78                       	dc.w $FB78
00001FB2 0303                       	dc.b 3,	3
00001FB4 0000                       	dc.w Pal_SBZCyc8+2
00001FB6 FB7A                       	dc.w $FB7A
00001FB8 0303                       	dc.b 3,	3
00001FBA 0000                       	dc.w Pal_SBZCyc8+4
00001FBC FB7C                       	dc.w $FB7C
00001FBE                            	even
00001FBE                            	even
00001FBE                            
00001FBE                            Pal_SBZCycList2:
00001FBE                            	include "_inc\SBZ pallet script 2.asm"
00001FBE                            ; ---------------------------------------------------------------------------
00001FBE                            ; Scrap Brain Zone 2 pallet cycling script
00001FBE                            ; ---------------------------------------------------------------------------
00001FBE 0006                       	dc.w 6
00001FC0 0708                       	dc.b 7,	8
00001FC2 0000                       	dc.w Pal_SBZCyc1
00001FC4 FB50                       	dc.w $FB50
00001FC6 0D08                       	dc.b $D, 8
00001FC8 0000                       	dc.w Pal_SBZCyc2
00001FCA FB52                       	dc.w $FB52
00001FCC 0908                       	dc.b 9,	8
00001FCE 0000                       	dc.w Pal_SBZCyc9
00001FD0 FB70                       	dc.w $FB70
00001FD2 0708                       	dc.b 7,	8
00001FD4 0000                       	dc.w Pal_SBZCyc6
00001FD6 FB72                       	dc.w $FB72
00001FD8 0303                       	dc.b 3,	3
00001FDA 0000                       	dc.w Pal_SBZCyc8
00001FDC FB78                       	dc.w $FB78
00001FDE 0303                       	dc.b 3,	3
00001FE0 0000                       	dc.w Pal_SBZCyc8+2
00001FE2 FB7A                       	dc.w $FB7A
00001FE4 0303                       	dc.b 3,	3
00001FE6 0000                       	dc.w Pal_SBZCyc8+4
00001FE8 FB7C                       	dc.w $FB7C
00001FEA                            	even
00001FEA                            	even
00001FEA                            
00001FEA                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001FFA                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
0000200A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
0000201A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00002026                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00002036                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00002046                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00002066                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00002070                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00002080                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
0000208C                            DarkSonic_Pal:		incbin	pallet\darksonic.bin
0000210C                            Pal_22C6:	incbin	"pallet\CPZWater SS transformation.bin"
0000218C                            Pal_2346:	incbin	"pallet\ARZWater SS transformation.bin"
0000220C                            RedMetal_Pal:		incbin	pallet\redmetal.bin
0000228C                            SuperMighty_Pal:	incbin	pallet\SuperMighty.bin
0000230C                            ; ---------------------------------------------------------------------------
0000230C                            ; Subroutine to	fade out and fade in
0000230C                            ; ---------------------------------------------------------------------------
0000230C                            
0000230C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000230C                            
0000230C                            
0000230C                            Pal_FadeTo:
0000230C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002312                            
00002312                            Pal_FadeTo2:
00002312 7000                       		moveq	#0,d0
00002314 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002318 1038 F626                  		move.b	($FFFFF626).w,d0
0000231C D0C0                       		adda.w	d0,a0
0000231E 7200                       		moveq	#0,d1
00002320 1038 F627                  		move.b	($FFFFF627).w,d0
00002324                            
00002324                            Pal_ToBlack:
00002324 30C1                       		move.w	d1,(a0)+
00002326 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
0000232A 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
0000232C 7C00                       		moveq	#$00,d6					; MJ: clear d6
0000232E                            
0000232E                            loc_1DCE:
0000232E 6100 F0DE                  		bsr.w	RunPLC_RAM
00002332 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002338 6100 0000                  		bsr.w	DelayProgram
0000233C 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00002340 67EC                       		beq	loc_1DCE				; MJ: if null, delay a frame
00002342 6100                       		bsr.s	Pal_FadeIn
00002344 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00002346 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00002348 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
0000234E 6000 0000                  		bra	DelayProgram				; MJ: ''
00002352                            
00002352                            ; End of function Pal_FadeTo
00002352                            
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet fade-in subroutine
00002352                            ; ---------------------------------------------------------------------------
00002352                            
00002352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002352                            
00002352                            
00002352                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002352 7000                       		moveq	#0,d0
00002354 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002358 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000235C 1038 F626                  		move.b	($FFFFF626).w,d0
00002360 D0C0                       		adda.w	d0,a0
00002362 D2C0                       		adda.w	d0,a1
00002364 1038 F627                  		move.b	($FFFFF627).w,d0
00002368                            
00002368                            loc_1DFA:
00002368 6100                       		bsr.s	Pal_AddColor
0000236A 51C8 FFFC                  		dbf	d0,loc_1DFA
0000236E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002374 6600                       		bne.s	locret_1E24
00002376 7000                       		moveq	#0,d0
00002378 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000237C 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002380 1038 F626                  		move.b	($FFFFF626).w,d0
00002384 D0C0                       		adda.w	d0,a0
00002386 D2C0                       		adda.w	d0,a1
00002388 1038 F627                  		move.b	($FFFFF627).w,d0
0000238C                            
0000238C                            loc_1E1E:
0000238C 6100                       		bsr.s	Pal_AddColor
0000238E 51C8 FFFC                  		dbf	d0,loc_1E1E
00002392                            
00002392                            locret_1E24:
00002392 4E75                       		rts	
00002394                            ; End of function Pal_FadeIn
00002394                            
00002394                            
00002394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002394                            
00002394                            
00002394                            Pal_AddColor:				; XREF: Pal_FadeIn
00002394 1A11                       		move.b	(a1),d5					; MJ: load blue
00002396 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00002398 1401                       		move.b	d1,d2					; MJ: load red
0000239A E809                       		lsr.b	#$04,d1					; MJ: get only green
0000239C 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
000023A0 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
000023A2 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
000023A4 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
000023A8 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
000023AC                            
000023AC                            FCI_NoBlue:
000023AC B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
000023AE 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
000023B2 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
000023B6                            
000023B6                            FCI_NoGreen:
000023B6 B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
000023B8 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
000023BC 5403                       		addq.b	#$02,d3					; MJ: increase red
000023BE                            
000023BE                            FCI_NoRed:
000023BE 30C3                       		move.w	d3,(a0)+				; MJ: save colour
000023C0 4E75                       		rts						; MJ: return
000023C2                            
000023C2                            ; End of function Pal_AddColor
000023C2                            
000023C2                            
000023C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023C2                            
000023C2                            
000023C2                            Pal_FadeFrom:
000023C2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000023C8 7807                       		moveq	#$07,d4					; MJ: set repeat times
000023CA 7C00                       		moveq	#$00,d6					; MJ: clear d6
000023CC                            
000023CC                            loc_1E5C:
000023CC 6100 F040                  		bsr.w	RunPLC_RAM
000023D0 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000023D6 6100 0000                  		bsr.w	DelayProgram
000023DA 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
000023DE 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
000023E0 6100                       		bsr.s	Pal_FadeOut
000023E2 51CC FFE8                  		dbf	d4,loc_1E5C
000023E6 4E75                       		rts	
000023E8                            ; End of function Pal_FadeFrom
000023E8                            
000023E8                            ; ---------------------------------------------------------------------------
000023E8                            ; Pallet fade-out subroutine
000023E8                            ; ---------------------------------------------------------------------------
000023E8                            
000023E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023E8                            
000023E8                            
000023E8                            Pal_FadeOut:				; XREF: Pal_FadeFrom
000023E8 7000                       		moveq	#0,d0
000023EA 41F8 FB00                  		lea	($FFFFFB00).w,a0
000023EE 1038 F626                  		move.b	($FFFFF626).w,d0
000023F2 D0C0                       		adda.w	d0,a0
000023F4 1038 F627                  		move.b	($FFFFF627).w,d0
000023F8                            
000023F8                            loc_1E82:
000023F8 6100                       		bsr.s	Pal_DecColor
000023FA 51C8 FFFC                  		dbf	d0,loc_1E82
000023FE                            
000023FE 7000                       		moveq	#0,d0
00002400 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002404 1038 F626                  		move.b	($FFFFF626).w,d0
00002408 D0C0                       		adda.w	d0,a0
0000240A 1038 F627                  		move.b	($FFFFF627).w,d0
0000240E                            
0000240E                            loc_1E98:
0000240E 6100                       		bsr.s	Pal_DecColor
00002410 51C8 FFFC                  		dbf	d0,loc_1E98
00002414 4E75                       		rts	
00002416                            ; End of function Pal_FadeOut
00002416                            
00002416                            
00002416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002416                            
00002416                            
00002416                            Pal_DecColor:				; XREF: Pal_FadeOut
00002416 3A10                       		move.w	(a0),d5					; MJ: load colour
00002418 3205                       		move.w	d5,d1					; MJ: copy to d1
0000241A 1401                       		move.b	d1,d2					; MJ: load green and red
0000241C 1601                       		move.b	d1,d3					; MJ: load red
0000241E 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
00002422 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
00002426 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
0000242A                            
0000242A                            FCO_NoBlue:
0000242A 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
0000242E                            
0000242E 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
00002432 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
00002436                            
00002436                            FCO_NoGreen:
00002436 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
0000243A 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
0000243E 5505                       		subq.b	#$02,d5					; MJ: decrease red
00002440                            
00002440                            FCO_NoRed:
00002440 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002442 4E75                       		rts						; MJ: return
00002444                            
00002444                            ; End of function Pal_DecColor
00002444                            
00002444                            ; ---------------------------------------------------------------------------
00002444                            ; Subroutine to	fill the pallet	with white (special stage)
00002444                            ; ---------------------------------------------------------------------------
00002444                            
00002444                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002444                            
00002444                            
00002444                            Pal_MakeWhite:				; XREF: SpecialStage
00002444 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000244A 7000                       		moveq	#0,d0
0000244C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002450 1038 F626                  		move.b	($FFFFF626).w,d0
00002454 D0C0                       		adda.w	d0,a0
00002456 323C 0EEE                  		move.w	#$EEE,d1
0000245A 1038 F627                  		move.b	($FFFFF627).w,d0
0000245E                            
0000245E                            PalWhite_Loop:
0000245E 30C1                       		move.w	d1,(a0)+
00002460 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002464 383C 0015                  		move.w	#$15,d4
00002468                            
00002468                            loc_1EF4:
00002468 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000246E 6100 0000                  		bsr.w	DelayProgram
00002472 6100                       		bsr.s	Pal_WhiteToBlack
00002474 6100 EF98                  		bsr.w	RunPLC_RAM
00002478 51CC FFEE                  		dbf	d4,loc_1EF4
0000247C 4E75                       		rts	
0000247E                            ; End of function Pal_MakeWhite
0000247E                            
0000247E                            
0000247E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000247E                            
0000247E                            
0000247E                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000247E 7000                       		moveq	#0,d0
00002480 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002484 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002488 1038 F626                  		move.b	($FFFFF626).w,d0
0000248C D0C0                       		adda.w	d0,a0
0000248E D2C0                       		adda.w	d0,a1
00002490 1038 F627                  		move.b	($FFFFF627).w,d0
00002494                            
00002494                            loc_1F20:
00002494 6100                       		bsr.s	Pal_DecColor2
00002496 51C8 FFFC                  		dbf	d0,loc_1F20
0000249A                            
0000249A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000024A0 6600                       		bne.s	locret_1F4A
000024A2 7000                       		moveq	#0,d0
000024A4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000024A8 43F8 FA00                  		lea	($FFFFFA00).w,a1
000024AC 1038 F626                  		move.b	($FFFFF626).w,d0
000024B0 D0C0                       		adda.w	d0,a0
000024B2 D2C0                       		adda.w	d0,a1
000024B4 1038 F627                  		move.b	($FFFFF627).w,d0
000024B8                            
000024B8                            loc_1F44:
000024B8 6100                       		bsr.s	Pal_DecColor2
000024BA 51C8 FFFC                  		dbf	d0,loc_1F44
000024BE                            
000024BE                            locret_1F4A:
000024BE 4E75                       		rts	
000024C0                            ; End of function Pal_WhiteToBlack
000024C0                            
000024C0                            
000024C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024C0                            
000024C0                            
000024C0                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
000024C0 3419                       		move.w	(a1)+,d2
000024C2 3610                       		move.w	(a0),d3
000024C4 B642                       		cmp.w	d2,d3
000024C6 6700                       		beq.s	loc_1F78
000024C8 3203                       		move.w	d3,d1
000024CA 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000024CE 6500                       		bcs.s	loc_1F64
000024D0 B242                       		cmp.w	d2,d1
000024D2 6500                       		bcs.s	loc_1F64
000024D4 30C1                       		move.w	d1,(a0)+
000024D6 4E75                       		rts	
000024D8                            ; ===========================================================================
000024D8                            
000024D8                            loc_1F64:				; XREF: Pal_DecColor2
000024D8 3203                       		move.w	d3,d1
000024DA 0441 0020                  		subi.w	#$20,d1		; decrease green value
000024DE 6500                       		bcs.s	loc_1F74
000024E0 B242                       		cmp.w	d2,d1
000024E2 6500                       		bcs.s	loc_1F74
000024E4 30C1                       		move.w	d1,(a0)+
000024E6 4E75                       		rts	
000024E8                            ; ===========================================================================
000024E8                            
000024E8                            loc_1F74:				; XREF: loc_1F64
000024E8 5558                       		subq.w	#2,(a0)+	; decrease red value
000024EA 4E75                       		rts	
000024EC                            ; ===========================================================================
000024EC                            
000024EC                            loc_1F78:				; XREF: Pal_DecColor2
000024EC 5448                       		addq.w	#2,a0
000024EE 4E75                       		rts	
000024F0                            ; End of function Pal_DecColor2
000024F0                            
000024F0                            ; ---------------------------------------------------------------------------
000024F0                            ; Subroutine to	make a white flash when	you enter a special stage
000024F0                            ; ---------------------------------------------------------------------------
000024F0                            
000024F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024F0                            
000024F0                            
000024F0                            Pal_MakeFlash:				; XREF: SpecialStage
000024F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000024F6 383C 0015                  		move.w	#$15,d4
000024FA                            
000024FA                            loc_1F86:
000024FA 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002500 6100 0000                  		bsr.w	DelayProgram
00002504 6100                       		bsr.s	Pal_ToWhite
00002506 6100 EF06                  		bsr.w	RunPLC_RAM
0000250A 51CC FFEE                  		dbf	d4,loc_1F86
0000250E 4E75                       		rts	
00002510                            ; End of function Pal_MakeFlash
00002510                            
00002510                            
00002510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002510                            
00002510                            
00002510                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002510 7000                       		moveq	#0,d0
00002512 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002516 1038 F626                  		move.b	($FFFFF626).w,d0
0000251A D0C0                       		adda.w	d0,a0
0000251C 1038 F627                  		move.b	($FFFFF627).w,d0
00002520                            
00002520                            loc_1FAC:
00002520 6100                       		bsr.s	Pal_AddColor2
00002522 51C8 FFFC                  		dbf	d0,loc_1FAC
00002526 7000                       		moveq	#0,d0
00002528 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000252C 1038 F626                  		move.b	($FFFFF626).w,d0
00002530 D0C0                       		adda.w	d0,a0
00002532 1038 F627                  		move.b	($FFFFF627).w,d0
00002536                            
00002536                            loc_1FC2:
00002536 6100                       		bsr.s	Pal_AddColor2
00002538 51C8 FFFC                  		dbf	d0,loc_1FC2
0000253C 4E75                       		rts	
0000253E                            ; End of function Pal_ToWhite
0000253E                            
0000253E                            
0000253E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000253E                            
0000253E                            
0000253E                            Pal_AddColor2:				; XREF: Pal_ToWhite
0000253E 3410                       		move.w	(a0),d2
00002540 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002544 6700                       		beq.s	loc_2006
00002546 3202                       		move.w	d2,d1
00002548 0241 000E                  		andi.w	#$E,d1
0000254C 0C41 000E                  		cmpi.w	#$E,d1
00002550 6700                       		beq.s	loc_1FE2
00002552 5458                       		addq.w	#2,(a0)+	; increase red value
00002554 4E75                       		rts	
00002556                            ; ===========================================================================
00002556                            
00002556                            loc_1FE2:				; XREF: Pal_AddColor2
00002556 3202                       		move.w	d2,d1
00002558 0241 00E0                  		andi.w	#$E0,d1
0000255C 0C41 00E0                  		cmpi.w	#$E0,d1
00002560 6700                       		beq.s	loc_1FF4
00002562 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002566 4E75                       		rts	
00002568                            ; ===========================================================================
00002568                            
00002568                            loc_1FF4:				; XREF: loc_1FE2
00002568 3202                       		move.w	d2,d1
0000256A 0241 0E00                  		andi.w	#$E00,d1
0000256E 0C41 0E00                  		cmpi.w	#$E00,d1
00002572 6700                       		beq.s	loc_2006
00002574 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002578 4E75                       		rts	
0000257A                            ; ===========================================================================
0000257A                            
0000257A                            loc_2006:				; XREF: Pal_AddColor2
0000257A 5448                       		addq.w	#2,a0
0000257C 4E75                       		rts	
0000257E                            ; End of function Pal_AddColor2
0000257E                            
0000257E                            ; ---------------------------------------------------------------------------
0000257E                            ; Pallet cycling routine - Sega	logo
0000257E                            ; ---------------------------------------------------------------------------
0000257E                            
0000257E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000257E                            
0000257E                            
0000257E                            PalCycle_Sega:				; XREF: SegaScreen
0000257E 4A38 F635                  		tst.b	($FFFFF635).w
00002582 6600                       		bne.s	loc_206A
00002584 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002588 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000258E 7205                       		moveq	#5,d1
00002590 3038 F632                  		move.w	($FFFFF632).w,d0
00002594                            
00002594                            loc_2020:
00002594 6A00                       		bpl.s	loc_202A
00002596 5448                       		addq.w	#2,a0
00002598 5341                       		subq.w	#1,d1
0000259A 5440                       		addq.w	#2,d0
0000259C 60F6                       		bra.s	loc_2020
0000259E                            ; ===========================================================================
0000259E                            
0000259E                            loc_202A:				; XREF: PalCycle_Sega
0000259E 3400                       		move.w	d0,d2
000025A0 0242 001E                  		andi.w	#$1E,d2
000025A4 6600                       		bne.s	loc_2034
000025A6 5440                       		addq.w	#2,d0
000025A8                            
000025A8                            loc_2034:
000025A8 0C40 0060                  		cmpi.w	#$60,d0
000025AC 6400                       		bcc.s	loc_203E
000025AE 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000025B2                            
000025B2                            loc_203E:
000025B2 5440                       		addq.w	#2,d0
000025B4 51C9 FFE8                  		dbf	d1,loc_202A
000025B8 3038 F632                  		move.w	($FFFFF632).w,d0
000025BC 5440                       		addq.w	#2,d0
000025BE 3400                       		move.w	d0,d2
000025C0 0242 001E                  		andi.w	#$1E,d2
000025C4 6600                       		bne.s	loc_2054
000025C6 5440                       		addq.w	#2,d0
000025C8                            
000025C8                            loc_2054:
000025C8 0C40 0064                  		cmpi.w	#$64,d0
000025CC 6D00                       		blt.s	loc_2062
000025CE 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
000025D4 70F4                       		moveq	#-$C,d0
000025D6                            
000025D6                            loc_2062:
000025D6 31C0 F632                  		move.w	d0,($FFFFF632).w
000025DA 7001                       		moveq	#1,d0
000025DC 4E75                       		rts	
000025DE                            ; ===========================================================================
000025DE                            
000025DE                            loc_206A:				; XREF: loc_202A
000025DE 5338 F634                  		subq.b	#1,($FFFFF634).w
000025E2 6A00                       		bpl.s	loc_20BC
000025E4 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000025EA 3038 F632                  		move.w	($FFFFF632).w,d0
000025EE 0640 000C                  		addi.w	#$C,d0
000025F2 0C40 0030                  		cmpi.w	#$30,d0
000025F6 6500                       		bcs.s	loc_2088
000025F8 7000                       		moveq	#0,d0
000025FA 4E75                       		rts	
000025FC                            ; ===========================================================================
000025FC                            
000025FC                            loc_2088:				; XREF: loc_206A
000025FC 31C0 F632                  		move.w	d0,($FFFFF632).w
00002600 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002606 41F0 0000                  		lea	(a0,d0.w),a0
0000260A 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000260E 22D8                       		move.l	(a0)+,(a1)+
00002610 22D8                       		move.l	(a0)+,(a1)+
00002612 3298                       		move.w	(a0)+,(a1)
00002614 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002618 7000                       		moveq	#0,d0
0000261A 722C                       		moveq	#$2C,d1
0000261C                            
0000261C                            loc_20A8:
0000261C 3400                       		move.w	d0,d2
0000261E 0242 001E                  		andi.w	#$1E,d2
00002622 6600                       		bne.s	loc_20B2
00002624 5440                       		addq.w	#2,d0
00002626                            
00002626                            loc_20B2:
00002626 3390 0000                  		move.w	(a0),(a1,d0.w)
0000262A 5440                       		addq.w	#2,d0
0000262C 51C9 FFEE                  		dbf	d1,loc_20A8
00002630                            
00002630                            loc_20BC:
00002630 7001                       		moveq	#1,d0
00002632 4E75                       		rts	
00002634                            ; End of function PalCycle_Sega
00002634                            
00002634                            ; ===========================================================================
00002634                            
00002634                            Pal_Sega1:	incbin	pallet\sega1.bin
00002640                            Pal_Sega2:	incbin	pallet\sega2.bin
00002670                            
00002670                            ; ---------------------------------------------------------------------------
00002670                            ; Subroutines to load pallets
00002670                            ; ---------------------------------------------------------------------------
00002670                            
00002670                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002670                            
00002670                            PalLoad1:
00002670 1238 FE11                  		move.b ($FFFFFE11),d1
00002674 43F9 0000 0000             		lea (PalPointers).l,a1
0000267A 0C01 0000                  		cmp.b #0,d1
0000267E 6700 0000                  		beq.w PalLoad1_Continue
00002682 43F9 0000 0000             		lea (PalPointers2).l,a1
00002688 0C01 0001                  		cmp.b #1,d1
0000268C 6700 0000                  		beq.w PalLoad1_Continue
00002690 43F9 0000 0000             		lea (PalPointers3).l,a1
00002696                            
00002696                            PalLoad1_Continue:
00002696 E748                       		lsl.w #3,d0
00002698 D2C0                       		adda.w d0,a1
0000269A 2459                       		movea.l (a1)+,a2
0000269C 3659                       		movea.w (a1)+,a3
0000269E D6FC 0080                  		adda.w #$80,a3
000026A2 3E19                       		move.w (a1)+,d7
000026A4                            
000026A4                            loc_2110:
000026A4 26DA                       		move.l (a2)+,(a3)+
000026A6 51CF FFFC                  		dbf d7,loc_2110
000026AA 4E75                       		rts
000026AC                             ; End of function PalLoad1
000026AC                            
000026AC                            
000026AC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000026AC                            
000026AC                            PalLoad2:
000026AC 1238 FE11                  		move.b ($FFFFFE11),d1
000026B0 43F9 0000 0000             		lea (PalPointers).l,a1
000026B6 0C01 0000                  		cmp.b #0,d1
000026BA 6700 0000                  		beq.w PalLoad2_Continue
000026BE 43F9 0000 0000             		lea (PalPointers2).l,a1
000026C4 0C01 0001                  		cmp.b #1,d1
000026C8 6700 0000                  		beq.w PalLoad2_Continue
000026CC 43F9 0000 0000             		lea (PalPointers3).l,a1
000026D2                            
000026D2                            
000026D2                            PalLoad2_Continue:
000026D2 E748                       		lsl.w #3,d0
000026D4 D2C0                       		adda.w d0,a1
000026D6 2459                       		movea.l (a1)+,a2
000026D8 3659                       		movea.w (a1)+,a3
000026DA 3E19                       		move.w (a1)+,d7
000026DC                            
000026DC                            loc_2128:
000026DC 26DA                       		move.l (a2)+,(a3)+
000026DE 51CF FFFC                  		dbf d7,loc_2128
000026E2 4E75                       		rts
000026E4                            ; End of function PalLoad2
000026E4                            
000026E4                            
000026E4                            ; ---------------------------------------------------------------------------
000026E4                            ; Underwater pallet loading subroutine
000026E4                            ; ---------------------------------------------------------------------------
000026E4                            
000026E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000026E4                            
000026E4                            PalLoad3_Water:
000026E4 1238 FE11                  		move.b ($FFFFFE11),d1
000026E8 43F9 0000 0000             		lea (PalPointers).l,a1
000026EE 0C01 0000                  		cmp.b #0,d1
000026F2 6700 0000                  		beq.w PalLoad3_Continue
000026F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000026FC 0C01 0001                  		cmp.b #1,d1
00002700 6700 0000                  		beq.w PalLoad3_Continue
00002704 43F9 0000 0000             		lea (PalPointers3).l,a1
0000270A                            
0000270A                            PalLoad3_Continue:
0000270A E748                       		lsl.w #3,d0
0000270C D2C0                       		adda.w d0,a1
0000270E 2459                       		movea.l (a1)+,a2
00002710 3659                       		movea.w (a1)+,a3
00002712 96FC 0080                  		suba.w #$80,a3
00002716 3E19                       		move.w (a1)+,d7
00002718                            
00002718                            loc_2144:
00002718 26DA                       		move.l (a2)+,(a3)+
0000271A 51CF FFFC                  		dbf d7,loc_2144
0000271E 4E75                       		rts
00002720                            ; End of function PalLoad3_Water
00002720                            
00002720                            
00002720                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002720                            
00002720                            
00002720                            PalLoad4_Water:
00002720 1238 FE11                  		move.b ($FFFFFE11),d1
00002724 43F9 0000 0000             		lea (PalPointers).l,a1
0000272A 0C01 0000                  		cmp.b #0,d1
0000272E 6700 0000                  		beq.w PalLoad4_Continue
00002732 43F9 0000 0000             		lea (PalPointers2).l,a1
00002738 0C01 0001                  		cmp.b #1,d1
0000273C 6700 0000                  		beq.w PalLoad4_Continue
00002740 43F9 0000 0000             		lea (PalPointers3).l,a1
00002746                            
00002746                            PalLoad4_Continue:
00002746 E748                       		lsl.w #3,d0
00002748 D2C0                       		adda.w d0,a1
0000274A 2459                       		movea.l (a1)+,a2
0000274C 3659                       		movea.w (a1)+,a3
0000274E 96FC 0100                  		suba.w #$100,a3
00002752 3E19                       		move.w (a1)+,d7
00002754                            loc_2160:
00002754 26DA                       		move.l (a2)+,(a3)+
00002756 51CF FFFC                  		dbf d7,loc_2160
0000275A 4E75                       		rts
0000275C                             ; End of function PalLoad4_Water
0000275C                            
0000275C                            ; ===========================================================================
0000275C                            ; ---------------------------------------------------------------------------
0000275C                            ; Pallet pointers
0000275C                            ; ---------------------------------------------------------------------------
0000275C                            PalPointers:
0000275C                            	include "_inc\Pallet pointers.asm"	
0000275C                            ; ---------------------------------------------------------------------------
0000275C                            ; Pallet pointers
0000275C                            ; ---------------------------------------------------------------------------
0000275C 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002760 FB00                       	dc.w $FB00		; RAM address
00002762 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002764 0000 0000                  	dc.l Pal_Title
00002768 FB00                       	dc.w $FB00
0000276A 001F                       	dc.w $1F
0000276C 0000 0000                  	dc.l Pal_LevelSel
00002770 FB00                       	dc.w $FB00
00002772 001F                       	dc.w $1F
00002774 0000 0000                  	dc.l Pal_Sonic
00002778 FB00                       	dc.w $FB00
0000277A 0007                       	dc.w 7
0000277C 0000 0000                  	dc.l Pal_GHZ
00002780 FB20                       	dc.w $FB20
00002782 0017                       	dc.w $17
00002784 0000 0000                  	dc.l Pal_LZ
00002788 FB20                       	dc.w $FB20
0000278A 0017                       	dc.w $17
0000278C 0000 0000                  	dc.l Pal_MZ
00002790 FB20                       	dc.w $FB20
00002792 0017                       	dc.w $17
00002794 0000 0000                  	dc.l Pal_SLZ
00002798 FB20                       	dc.w $FB20
0000279A 0017                       	dc.w $17
0000279C 0000 0000                  	dc.l Pal_SYZ
000027A0 FB20                       	dc.w $FB20
000027A2 0017                       	dc.w $17
000027A4 0000 0000                  	dc.l Pal_SBZ1
000027A8 FB20                       	dc.w $FB20
000027AA 0017                       	dc.w $17
000027AC 0000 0000                  	dc.l Pal_Special
000027B0 FB00                       	dc.w $FB00
000027B2 001F                       	dc.w $1F
000027B4 0000 0000                  	dc.l Pal_LZWater
000027B8 FB00                       	dc.w $FB00
000027BA 001F                       	dc.w $1F
000027BC 0000 0000                  	dc.l Pal_SBZ3
000027C0 FB20                       	dc.w $FB20
000027C2 0017                       	dc.w $17
000027C4 0000 0000                  	dc.l Pal_SBZ3Water
000027C8 FB00                       	dc.w $FB00
000027CA 001F                       	dc.w $1F
000027CC 0000 0000                  	dc.l Pal_SBZ2
000027D0 FB20                       	dc.w $FB20
000027D2 0017                       	dc.w $17
000027D4 0000 0000                  	dc.l Pal_LZSonWater
000027D8 FB00                       	dc.w $FB00
000027DA 0007                       	dc.w 7
000027DC 0000 0000                  	dc.l Pal_SBZ3SonWat
000027E0 FB00                       	dc.w $FB00
000027E2 0007                       	dc.w 7
000027E4 0000 0000                  	dc.l Pal_SpeResult
000027E8 FB00                       	dc.w $FB00
000027EA 001F                       	dc.w $1F
000027EC 0000 0000                  	dc.l Pal_SpeContinue
000027F0 FB00                       	dc.w $FB00
000027F2 000F                       	dc.w $F
000027F4 0000 0000                  	dc.l Pal_Ending
000027F8 FB00                       	dc.w $FB00
000027FA 001F                       	dc.w $1F
000027FC 0000 0000                  	dc.l Menu_Palette; pallet address
00002800 FB00                       	dc.w $FB00	; RAM address
00002802 001F                       	dc.w $1F	; (pallet length / 2) - 1
00002804 0000 0000                  	dc.l Pal_Shadow
00002808 FB00                       	dc.w $FB00
0000280A 0007                       	dc.w 7
0000280C 0000 0000                  	dc.l Pal_Mighty
00002810 FB00                       	dc.w $FB00
00002812 0007                       	dc.w 7
00002812 0007                       	dc.w 7
00002814                            PalPointers2:
00002814                            		include "_inc\Pallet pointers2.asm"
00002814                            ; ---------------------------------------------------------------------------
00002814                            ; Pallet pointers 2
00002814                            ; ---------------------------------------------------------------------------
00002814 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002818 FB00                       	dc.w $FB00		; RAM address
0000281A 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000281C 0000 0000                  	dc.l Pal_Title
00002820 FB00                       	dc.w $FB00
00002822 001F                       	dc.w $1F
00002824 0000 0000                  	dc.l Pal_LevelSel
00002828 FB00                       	dc.w $FB00
0000282A 001F                       	dc.w $1F
0000282C 0000 0000                  	dc.l Pal_Sonic
00002830 FB00                       	dc.w $FB00
00002832 0007                       	dc.w 7
00002834 0000 0000                  	dc.l Pal_GHZ2
00002838 FB20                       	dc.w $FB20
0000283A 0017                       	dc.w $17
0000283C 0000 0000                  	dc.l Pal_LZ2
00002840 FB20                       	dc.w $FB20
00002842 0017                       	dc.w $17
00002844 0000 0000                  	dc.l Pal_MZ2
00002848 FB20                       	dc.w $FB20
0000284A 0017                       	dc.w $17
0000284C 0000 0000                  	dc.l Pal_SLZ2
00002850 FB20                       	dc.w $FB20
00002852 0017                       	dc.w $17
00002854 0000 0000                  	dc.l Pal_SYZ2
00002858 FB20                       	dc.w $FB20
0000285A 0017                       	dc.w $17
0000285C 0000 0000                  	dc.l Pal_SBZ1
00002860 FB20                       	dc.w $FB20
00002862 0017                       	dc.w $17
00002864 0000 0000                  	dc.l Pal_Special
00002868 FB00                       	dc.w $FB00
0000286A 001F                       	dc.w $1F
0000286C 0000 0000                  	dc.l Pal_LZWater2
00002870 FB00                       	dc.w $FB00
00002872 001F                       	dc.w $1F
00002874 0000 0000                  	dc.l Pal_SBZ3
00002878 FB20                       	dc.w $FB20
0000287A 0017                       	dc.w $17
0000287C 0000 0000                  	dc.l Pal_SBZ3Water
00002880 FB00                       	dc.w $FB00
00002882 001F                       	dc.w $1F
00002884 0000 0000                  	dc.l Pal_SBZ2
00002888 FB20                       	dc.w $FB20
0000288A 0017                       	dc.w $17
0000288C 0000 0000                  	dc.l Pal_LZSonWater2
00002890 FB00                       	dc.w $FB00
00002892 0007                       	dc.w 7
00002894 0000 0000                  	dc.l Pal_SBZ3SonWat
00002898 FB00                       	dc.w $FB00
0000289A 0007                       	dc.w 7
0000289C 0000 0000                  	dc.l Pal_SpeResult
000028A0 FB00                       	dc.w $FB00
000028A2 001F                       	dc.w $1F
000028A4 0000 0000                  	dc.l Pal_SpeContinue
000028A8 FB00                       	dc.w $FB00
000028AA 000F                       	dc.w $F
000028AC 0000 0000                  	dc.l Pal_Ending
000028B0 FB00                       	dc.w $FB00
000028B2 001F                       	dc.w $1F
000028B4 0000 0000                  	dc.l Menu_Palette; pallet address
000028B8 FB00                       	dc.w $FB00	; RAM address
000028BA 001F                       	dc.w $1F	; (pallet length / 2) - 1
000028BC 0000 0000                  	dc.l Pal_Shadow
000028C0 FB00                       	dc.w $FB00
000028C2 0007                       	dc.w 7
000028C4 0000 0000                  	dc.l Pal_Mighty
000028C8 FB00                       	dc.w $FB00
000028CA 0007                       	dc.w 7
000028CA 0007                       	dc.w 7
000028CC                            PalPointers3:
000028CC                            		include "_inc\Pallet pointers3.asm"
000028CC                            ; ---------------------------------------------------------------------------
000028CC                            ; Pallet pointers 3
000028CC                            ; ---------------------------------------------------------------------------
000028CC 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000028D0 FB00                       	dc.w $FB00		; RAM address
000028D2 001F                       	dc.w $1F		; (pallet length / 2) - 1
000028D4 0000 0000                  	dc.l Pal_Title
000028D8 FB00                       	dc.w $FB00
000028DA 001F                       	dc.w $1F
000028DC 0000 0000                  	dc.l Pal_LevelSel
000028E0 FB00                       	dc.w $FB00
000028E2 001F                       	dc.w $1F
000028E4 0000 0000                  	dc.l Pal_Sonic
000028E8 FB00                       	dc.w $FB00
000028EA 0007                       	dc.w 7
000028EC 0000 0000                  	dc.l Pal_GHZ3
000028F0 FB20                       	dc.w $FB20
000028F2 0017                       	dc.w $17
000028F4 0000 0000                  	dc.l Pal_LZ3
000028F8 FB20                       	dc.w $FB20
000028FA 0017                       	dc.w $17
000028FC 0000 0000                  	dc.l Pal_MZ3
00002900 FB20                       	dc.w $FB20
00002902 0017                       	dc.w $17
00002904 0000 0000                  	dc.l Pal_SLZ3
00002908 FB20                       	dc.w $FB20
0000290A 0017                       	dc.w $17
0000290C 0000 0000                  	dc.l Pal_SYZ3
00002910 FB20                       	dc.w $FB20
00002912 0017                       	dc.w $17
00002914 0000 0000                  	dc.l Pal_SBZ1
00002918 FB20                       	dc.w $FB20
0000291A 0017                       	dc.w $17
0000291C 0000 0000                  	dc.l Pal_Special
00002920 FB00                       	dc.w $FB00
00002922 001F                       	dc.w $1F
00002924 0000 0000                  	dc.l Pal_LZWater3
00002928 FB00                       	dc.w $FB00
0000292A 001F                       	dc.w $1F
0000292C 0000 0000                  	dc.l Pal_SBZ3
00002930 FB20                       	dc.w $FB20
00002932 0017                       	dc.w $17
00002934 0000 0000                  	dc.l Pal_SBZ3Water
00002938 FB00                       	dc.w $FB00
0000293A 001F                       	dc.w $1F
0000293C 0000 0000                  	dc.l Pal_SBZ2
00002940 FB20                       	dc.w $FB20
00002942 0017                       	dc.w $17
00002944 0000 0000                  	dc.l Pal_LZSonWater3
00002948 FB00                       	dc.w $FB00
0000294A 0007                       	dc.w 7
0000294C 0000 0000                  	dc.l Pal_SBZ3SonWat
00002950 FB00                       	dc.w $FB00
00002952 0007                       	dc.w 7
00002954 0000 0000                  	dc.l Pal_SpeResult
00002958 FB00                       	dc.w $FB00
0000295A 001F                       	dc.w $1F
0000295C 0000 0000                  	dc.l Pal_SpeContinue
00002960 FB00                       	dc.w $FB00
00002962 000F                       	dc.w $F
00002964 0000 0000                  	dc.l Pal_Ending
00002968 FB00                       	dc.w $FB00
0000296A 001F                       	dc.w $1F
0000296C 0000 0000                  	dc.l Menu_Palette; pallet address
00002970 FB00                       	dc.w $FB00	; RAM address
00002972 001F                       	dc.w $1F	; (pallet length / 2) - 1
00002974 0000 0000                  	dc.l Pal_Shadow
00002978 FB00                       	dc.w $FB00
0000297A 0007                       	dc.w 7
0000297C 0000 0000                  	dc.l Pal_Mighty
00002980 FB00                       	dc.w $FB00
00002982 0007                       	dc.w 7
00002982 0007                       	dc.w 7
00002984                            
00002984                            ; ---------------------------------------------------------------------------
00002984                            ; Pallet data
00002984                            ; ---------------------------------------------------------------------------
00002984                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002A04                            Pal_Title:	incbin	pallet\title.bin
00002A84                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002B04                            Pal_Sonic:	incbin	pallet\sonic.bin
00002B24                            Pal_GHZ:	incbin	pallet\ghz.bin
00002B84                            Pal_GHZ2:   incbin  pallet\ghz2.bin
00002C04                            Pal_GHZ3:   incbin  pallet\ghz3.bin
00002C64                            Pal_LZ:		incbin	pallet\lz.bin
00002CC4                            Pal_LZ2:    incbin  pallet\lz2.bin
00002D24                            Pal_LZ3:    incbin  pallet\lz3.bin
00002D84                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002E04                            Pal_LZWater2:   incbin  pallet\lz_uw2.bin
00002E84                            Pal_LZWater3:   incbin  pallet\lz_uw3.bin
00002F04                            Pal_MZ:		incbin	pallet\mz.bin
00002F64                            Pal_MZ2:    incbin  pallet\mz2.bin
00002FC4                            Pal_MZ3:	incbin  pallet\mz3.bin
00003024                            Pal_SLZ:	incbin	pallet\slz.bin
00003084                            Pal_SLZ2:	incbin  pallet\slz2.bin
000030E4                            Pal_SLZ3:	incbin  pallet\slz3.bin
00003144                            Pal_SYZ:	incbin	pallet\syz.bin
000031A4                            Pal_SYZ2:	incbin  pallet\syz2.bin
00003204                            Pal_SYZ3:	incbin  pallet\syz3.bin
00003264                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
000032C4                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00003324                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
000033A4                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003404                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00003484                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
000034A4                            Pal_LZSonWater2: incbin pallet\son_lzuw2.bin
000034C4                            Pal_LZSonWater3: incbin pallet\son_lzuw3.bin
000034E4                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003504                            Pal_LZShadWater: incbin pallet\sha_lzuw.bin
00003524                            Pal_LZShadWater2: incbin pallet\sha_lzuw2.bin
00003544                            Pal_LZShadWater3: incbin pallet\sha_lzuw3.bin
00003564                            Pal_SBZ3ShadWat: incbin pallet\sha_sbzu.bin
00003584                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00003604                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003644                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000036C4                            Pal_Shadow:	incbin	pallet\Shadow.bin
000036E4                            Pal_Mighty:	incbin	pallet\Mighty.bin
00003704                            
00003704                            ; ---------------------------------------------------------------------------
00003704                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00003704                            ; ---------------------------------------------------------------------------
00003704                            
00003704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003704                            
00003704                            
00003704                            DelayProgram:				; XREF: PauseGame
00003704 46FC 2300                  		move	#$2300,sr
00003708                            
00003708                            loc_29AC:
00003708 4A38 F62A                  		tst.b	($FFFFF62A).w
0000370C 66FA                       		bne.s	loc_29AC
0000370E 4E75                       		rts	
00003710                            ; End of function DelayProgram
00003710                            
00003710                            ; ---------------------------------------------------------------------------
00003710                            ; Subroutine to	generate a pseudo-random number	in d0
00003710                            ; ---------------------------------------------------------------------------
00003710                            
00003710                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003710                            
00003710                            
00003710                            RandomNumber:
00003710 2238 F636                  		move.l	($FFFFF636).w,d1
00003714 6600                       		bne.s	loc_29C0
00003716 223C 2A6D 365A             		move.l	#$2A6D365A,d1
0000371C                            
0000371C                            loc_29C0:
0000371C 2001                       		move.l	d1,d0
0000371E E581                       		asl.l	#2,d1
00003720 D280                       		add.l	d0,d1
00003722 E781                       		asl.l	#3,d1
00003724 D280                       		add.l	d0,d1
00003726 3001                       		move.w	d1,d0
00003728 4841                       		swap	d1
0000372A D041                       		add.w	d1,d0
0000372C 3200                       		move.w	d0,d1
0000372E 4841                       		swap	d1
00003730 21C1 F636                  		move.l	d1,($FFFFF636).w
00003734 4E75                       		rts	
00003736                            ; End of function RandomNumber
00003736                            
00003736                            
00003736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003736                            
00003736                            
00003736                            CalcSine:				; XREF: SS_BGAnimate; et al
00003736 0240 00FF                  		andi.w	#$FF,d0
0000373A D040                       		add.w	d0,d0
0000373C 0640 0080                  		addi.w	#$80,d0
00003740 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00003744 0440 0080                  		subi.w	#$80,d0
00003748 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
0000374C 4E75                       		rts	
0000374E                            ; End of function CalcSine
0000374E                            
0000374E                            ; ===========================================================================
0000374E                            
0000374E                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
000039CE                            
000039CE                            ; ===========================================================================
000039CE 48E7 6000                  		movem.l	d1-d2,-(sp)
000039D2 3200                       		move.w	d0,d1
000039D4 4841                       		swap	d1
000039D6 7000                       		moveq	#0,d0
000039D8 3200                       		move.w	d0,d1
000039DA 7407                       		moveq	#7,d2
000039DC                            
000039DC                            loc_2C80:
000039DC E599                       		rol.l	#2,d1
000039DE D040                       		add.w	d0,d0
000039E0 5240                       		addq.w	#1,d0
000039E2 9240                       		sub.w	d0,d1
000039E4 6400                       		bcc.s	loc_2C9A
000039E6 D240                       		add.w	d0,d1
000039E8 5340                       		subq.w	#1,d0
000039EA 51CA FFF0                  		dbf	d2,loc_2C80
000039EE E248                       		lsr.w	#1,d0
000039F0 4CDF 0006                  		movem.l	(sp)+,d1-d2
000039F4 4E75                       		rts	
000039F6                            ; ===========================================================================
000039F6                            
000039F6                            loc_2C9A:
000039F6 5240                       		addq.w	#1,d0
000039F8 51CA FFE2                  		dbf	d2,loc_2C80
000039FC E248                       		lsr.w	#1,d0
000039FE 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003A02 4E75                       		rts	
00003A04                            
00003A04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A04                            
00003A04                            
00003A04                            CalcAngle:
00003A04 48E7 1800                  		movem.l	d3-d4,-(sp)
00003A08 7600                       		moveq	#0,d3
00003A0A 7800                       		moveq	#0,d4
00003A0C 3601                       		move.w	d1,d3
00003A0E 3802                       		move.w	d2,d4
00003A10 8843                       		or.w	d3,d4
00003A12 6700                       		beq.s	loc_2D04
00003A14 3802                       		move.w	d2,d4
00003A16 4A43                       		tst.w	d3
00003A18 6A00 0000                  		bpl.w	loc_2CC2
00003A1C 4443                       		neg.w	d3
00003A1E                            
00003A1E                            loc_2CC2:
00003A1E 4A44                       		tst.w	d4
00003A20 6A00 0000                  		bpl.w	loc_2CCA
00003A24 4444                       		neg.w	d4
00003A26                            
00003A26                            loc_2CCA:
00003A26 B843                       		cmp.w	d3,d4
00003A28 6400 0000                  		bcc.w	loc_2CDC
00003A2C E18C                       		lsl.l	#8,d4
00003A2E 88C3                       		divu.w	d3,d4
00003A30 7000                       		moveq	#0,d0
00003A32 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003A36 6000                       		bra.s	loc_2CE6
00003A38                            ; ===========================================================================
00003A38                            
00003A38                            loc_2CDC:				; XREF: CalcAngle
00003A38 E18B                       		lsl.l	#8,d3
00003A3A 86C4                       		divu.w	d4,d3
00003A3C 7040                       		moveq	#$40,d0
00003A3E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003A42                            
00003A42                            loc_2CE6:
00003A42 4A41                       		tst.w	d1
00003A44 6A00 0000                  		bpl.w	loc_2CF2
00003A48 4440                       		neg.w	d0
00003A4A 0640 0080                  		addi.w	#$80,d0
00003A4E                            
00003A4E                            loc_2CF2:
00003A4E 4A42                       		tst.w	d2
00003A50 6A00 0000                  		bpl.w	loc_2CFE
00003A54 4440                       		neg.w	d0
00003A56 0640 0100                  		addi.w	#$100,d0
00003A5A                            
00003A5A                            loc_2CFE:
00003A5A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003A5E 4E75                       		rts	
00003A60                            ; ===========================================================================
00003A60                            
00003A60                            loc_2D04:				; XREF: CalcAngle
00003A60 303C 0040                  		move.w	#$40,d0
00003A64 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003A68 4E75                       		rts	
00003A6A                            ; End of function CalcAngle
00003A6A                            
00003A6A                            ; ===========================================================================
00003A6A                            
00003A6A                            Angle_Data:	incbin	misc\angles.bin
00003B6C                            
00003B6C                            ; ===========================================================================
00003B6C                            
00003B6C                            ; ---------------------------------------------------------------------------
00003B6C                            ; Sega screen
00003B6C                            ; ---------------------------------------------------------------------------
00003B6C                            
00003B6C                            SegaScreen:			; XREF: GameModeArray
00003B6C 103C 00E4                  		move.b	#$E4,d0
00003B70 6100 D59C                  		bsr.w	PlaySound_Special; stop music
00003B74 6100 D88A                  		bsr.w	ClearPLC
00003B78 6100 E848                  		bsr.w	Pal_FadeFrom
00003B7C 4DF9 00C0 0004             		lea	($C00004).l,a6
00003B82 3CBC 8004                  		move.w	#$8004,(a6)
00003B86 3CBC 8230                  		move.w	#$8230,(a6)
00003B8A 3CBC 8407                  		move.w	#$8407,(a6)
00003B8E 3CBC 8700                  		move.w	#$8700,(a6)
00003B92 3CBC 8B00                  		move.w	#$8B00,(a6)
00003B96 4238 F64E                  		clr.b	($FFFFF64E).w
00003B9A 46FC 2700                  		move	#$2700,sr
00003B9E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003BA2 0200 00BF                  		andi.b	#$BF,d0
00003BA6 33C0 00C0 0004             		move.w	d0,($C00004).l
00003BAC 6100 D464                  		bsr.w	ClearScreen
00003BB0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003BBA 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0; load Sega	logo patterns
00003BC0 6100 D68A                  		bsr.w	NemDec
00003BC4 43F9 00FF 0000             		lea	($FF0000).l,a1
00003BCA 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0; load Sega	logo mappings
00003BD0 303C 0000                  		move.w	#0,d0
00003BD4 6100 D96A                  		bsr.w	EniDec
00003BD8 43F9 00FF 0000             		lea	($FF0000).l,a1
00003BDE 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003BE4 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003BEA 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003BF0 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003BF6 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003BFA 0000 0040                  		ori.b	#$40,d0
00003BFE 33C0 00C0 0004             		move.w	d0,($C00004).l
00003C04                            
00003C04                            
00003C04                            Sega_GotoTitle:
00003C04 11FC 0020 F600             		move.b  #$20,($FFFFF600).w
00003C0A 4E75                       		rts
00003C0C                            
00003C0C                            		include	"SSRG/SSRG.asm"
00003C0C                            ; ===========================================================================
00003C0C                            ; ---------------------------------------------------------------------------
00003C0C                            ; SSRG Splash Screen
00003C0C                            ; ---------------------------------------------------------------------------
00003C0C                            
00003C0C                            SSRGScreen:
00003C0C 70E4                       		moveq	#$FFFFFFE4,d0				; set music ID to "stop music"
00003C0E 4EB8 110E                  		jsr	PlaySound_Special			; play ID
00003C12 4EB8 1400                  		jsr	ClearPLC				; clear pattern load cues list
00003C16 4EB8 23C2                  		jsr	Pal_FadeFrom				; fade palettes out
00003C1A 4EB8 1012                  		jsr	ClearScreen				; clear the plane mappings
00003C1E 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram address to a1
00003C22 7000                       		moveq	#$00,d0					; clear d0
00003C24 323C 01FF                  		move.w	#$01FF,d1				; set repeat times
00003C28                            
00003C28                            SRG_ClearObjects:
00003C28 22C0                       		move.l	d0,(a1)+				; clear object ram
00003C2A 22C0                       		move.l	d0,(a1)+				; ''
00003C2C 22C0                       		move.l	d0,(a1)+				; ''
00003C2E 22C0                       		move.l	d0,(a1)+				; ''
00003C30 51C9 FFF6                  		dbf	d1,SRG_ClearObjects			; repeat til all object slots are cleared
00003C34 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
00003C38 4DF9 00C0 0004             		lea	($C00004).l,a6				; load VDP address port address
00003C3E 3CBC 8700                  		move.w	#$8700,(a6)				; set backdrop colour to the very first colour
00003C42 3CBC 8B03                  		move.w	#$8B03,(a6)				; set scroll mode to horizontal sliced (by line)
00003C46 21FC FFF8 FFD4 F616        		move.l	#$FFF8FFD4,($FFFFF616).w		; set Y scroll positions
00003C4E 23FC 4020 0000 00C0 0004   		move.l	#$40200000,($C00004).l			; set VDP to V-Ram write mode with address
00003C58 41FA 0000                  		lea	ArtMain_SSRG(pc),a0			; load compressed art address
00003C5C 4EB8 124C                  		jsr	NemDec					; decompress and dump
00003C60 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l			; set VDP to V-Ram write mode with address
00003C6A 41FA 0000                  		lea	ArtSquare_SSRG(pc),a0			; load compressed art address
00003C6E 4EB8 124C                  		jsr	NemDec					; decompress and dump
00003C72 23FC 4000 0002 00C0 0004   		move.l	#$40000002,($C00004).l			; set VDP to V-Ram write mode with address
00003C7C 41FA 0000                  		lea	ArtSonic_SSRG(pc),a0			; load compressed art address
00003C80 4EB8 124C                  		jsr	NemDec					; decompress and dump
00003C84 23FC 5000 0002 00C0 0004   		move.l	#$50000002,($C00004).l			; set VDP to V-Ram write mode with address
00003C8E 41FA 0000                  		lea	ArtLink_SSRG(pc),a0			; load compressed art address
00003C92 4EB8 124C                  		jsr	NemDec					; decompress and dump
00003C96 41FA 0000                  		lea	MapLink_SSRG(pc),a0			; load compressed mappings address
00003C9A 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
00003CA0 4EB8 16BE                  		jsr	KosDec					; decompress and dump
00003CA4 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
00003CAA 701F                       		moveq	#$1F,d0					; set number of columns
00003CAC 7200                       		moveq	#$00,d1					; set number of rows
00003CAE 243C 4C08 0003             		move.l	#$4C080003,d2				; set to write to FG plane
00003CB4 6100 0000                  		bsr	MapScreen				; write to the map plane
00003CB8 41FA 0000                  		lea	MapMain_SSRG(pc),a0			; load compressed mappings address
00003CBC 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
00003CC2 4EB8 16BE                  		jsr	KosDec					; decompress and dump
00003CC6 41FA 0000                  		lea	MapSquare_SSRG(pc),a0			; load compressed mappings address
00003CCA 43F9 FFFF 4000             		lea	($FFFF4000).l,a1			; set temporary ram space to dump to
00003CD0 4EB8 16BE                  		jsr	KosDec					; decompress and dump
00003CD4 41FA 0000                  		lea	Pal_SSRG(pc),a0				; load palette address to a0
00003CD8 43F8 FB80                  		lea	($FFFFFB80).w,a1			; load palette buffer address to a1
00003CDC 7E07                       		moveq	#$07,d7					; set repeat times
00003CDE                            
00003CDE                            SRG_DumpPal:
00003CDE 22D8                       		move.l	(a0)+,(a1)+				; dump palette
00003CE0 22D8                       		move.l	(a0)+,(a1)+				; ''
00003CE2 22D8                       		move.l	(a0)+,(a1)+				; ''
00003CE4 22D8                       		move.l	(a0)+,(a1)+				; ''
00003CE6 51CF FFF6                  		dbf	d7,SRG_DumpPal				; repeat until done
00003CEA 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram to a1
00003CEE 12BC 0001                  		move.b	#$01,(a1)				; set "S"
00003CF2 137C 0002 0040             		move.b	#$02,$40(a1)				; set "S"
00003CF8 137C 0003 0080             		move.b	#$03,$80(a1)				; set "R"
00003CFE 137C 0004 00C0             		move.b	#$04,$C0(a1)				; set "G"
00003D04 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
00003D08 4EB8 230C                  		jsr	Pal_FadeTo				; fade palettes in
00003D0C 7000                       		moveq	#$00,d0					; clear d0
00003D0E 23C0 FFFF 7800             		move.l	d0,($FFFF7800).l			; reset SSRG timer/flags
00003D14 23C0 FFFF 7804             		move.l	d0,($FFFF7804).l			; ''
00003D1A 23C0 FFFF 7808             		move.l	d0,($FFFF7808).l			; ''
00003D20                            
00003D20                            ; ---------------------------------------------------------------------------
00003D20                            ; SSRG Splash Screen main loop
00003D20                            ; ---------------------------------------------------------------------------
00003D20                            
00003D20                            SSRGScreen_Loop:
00003D20 11FC 0004 F62A             		move.b	#$04,($FFFFF62A).w			; set V-Blank routine to run
00003D26 4EB8 3704                  		jsr	DelayProgram				; hult til V-Blank begins
00003D2A 5279 FFFF 7800             		addq.w	#$01,($FFFF7800).l			; increase timer
00003D30 41F8 D000                  		lea	($FFFFD000).w,a0			; load "S" object ram
00003D34 6100 0000                  		bsr	ObjectLetters				; run "S"
00003D38 41E8 0040                  		lea	$40(a0),a0				; load "S" object ram
00003D3C 6100 0000                  		bsr	ObjectLetters				; run "S"
00003D40 41E8 0040                  		lea	$40(a0),a0				; load "R" object ram
00003D44 6100 0000                  		bsr	ObjectLetters				; run "R"
00003D48 41E8 0040                  		lea	$40(a0),a0				; load "G" object ram
00003D4C 6100 0000                  		bsr	ObjectLetters				; run "G"
00003D50 41E8 0040                  		lea	$40(a0),a0				; load Square object ram
00003D54 6100 0000                  		bsr	ObjectSquare				; run Square
00003D58 41F8 D140                  		lea	($FFFFD140).w,a0			; load Neon Sonic object ram
00003D5C 6100 0000                  		bsr	ObjectSonicNeon				; run Neon Sonic
00003D60 6100 0000                  		bsr	SRG_ScrollFG				; scroll the FG plane correctly
00003D64 6100 0000                  		bsr	SRG_DrawFG				; draw the FG plane correctly
00003D68 4EB9 0000 0000             		jsr	BuildSprites				; present all object sprites on screen
00003D6E 4A38 F605                  		tst.b	($FFFFF605).w				; has player 1 pressed start button?
00003D72 6B00 0000                  		bmi	SSRGScreen_Finish			; if so, branch
00003D76 0C79 0200 FFFF 7800        		cmpi.w	#$0200,($FFFF7800).l			; has timer finished?
00003D7E 6DA0                       		blt	SSRGScreen_Loop				; if not, loop
00003D80                            
00003D80                            SSRGScreen_Finish:
00003D80 4EB9 0000 0000             		jsr		SegaScreen2 ; go to next screen
00003D86 4E75                       		rts						; return
00003D88                            
00003D88                            ; ===========================================================================
00003D88                            ; ---------------------------------------------------------------------------
00003D88                            ; Subroutine to control the FG scrolling
00003D88                            ; ---------------------------------------------------------------------------
00003D88                            
00003D88                            SRG_ScrollFG:
00003D88 43F8 CDCC                  		lea	($FFFFCDCC).w,a1			; load the horizontal scroll buffer address
00003D8C 7000                       		moveq	#$00,d0					; clear d0
00003D8E 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
00003D94 0640 0030                  		addi.w	#$0030,d0				; increase to scroll in sooner
00003D98 0C40 00F7                  		cmpi.w	#$00F7,d0				; has timer reached finish?
00003D9C 6C00 0000                  		bge	SRG_FinFGScroll				; if not, branch
00003DA0 D040                       		add.w	d0,d0					; multiply by 2
00003DA2 4440                       		neg.w	d0					; negate to move left insted
00003DA4 4840                       		swap	d0					; send left for FG
00003DA6 7E1F                       		moveq	#$1F,d7					; set repeat times
00003DA8                            
00003DA8                            SRG_SFG_Scroll01:
00003DA8 22C0                       		move.l	d0,(a1)+				; dump to buffer
00003DAA 51CF FFFC                  		dbf	d7,SRG_SFG_Scroll01			; repeat til this section is done
00003DAE                            
00003DAE                            SRG_FinFGScroll:
00003DAE 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load the horizontal scroll buffer address
00003DB2 3039 FFFF 7808             		move.w	($FFFF7808).l,d0			; set BG position
00003DB8 3E3C 00DF                  		move.w	#$00DF,d7				; set repeat times
00003DBC                            
00003DBC                            SRG_SBG_Scroll02:
00003DBC 5449                       		addq.w	#$02,a1					; skip FG
00003DBE 32C0                       		move.w	d0,(a1)+				; dump BG
00003DC0 51CF FFFA                  		dbf	d7,SRG_SBG_Scroll02			; repeat for all scanlines
00003DC4 4E75                       		rts						; return
00003DC6                            
00003DC6                            ; ===========================================================================
00003DC6                            ; ---------------------------------------------------------------------------
00003DC6                            ; Subroutine to control the FG map/drawing
00003DC6                            ; ---------------------------------------------------------------------------
00003DC6                            
00003DC6                            SRG_DrawFG:
00003DC6 7000                       		moveq	#$00,d0					; clear d0
00003DC8 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
00003DCE D040                       		add.w	d0,d0					; multiply by 2
00003DD0 0440 0040                  		subi.w	#$0040,d0				; subtract starting point
00003DD4 0C40 0110                  		cmpi.w	#$0110,d0				; has the scrolling surpassed the starting or ending par?
00003DD8 6200 0000                  		bhi	SRG_DFG_FlashOn				; if so, branch
00003DDC 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
00003DE0 49F9 FFFF 0000             		lea	($FFFF0000).l,a4			; load map buffer space address to a4
00003DE6 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
00003DEC 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
00003DF0 2C3C 4704 0003             		move.l	#$47040003,d6				; set starting V-Ram
00003DF6 0240 01F8                  		andi.w	#$01F8,d0				; get within 8 pixels
00003DFA E448                       		lsr.w	#$02,d0					; divide by 4
00003DFC 3200                       		move.w	d0,d1					; copy to d1
00003DFE 4840                       		swap	d0					; align
00003E00 DC80                       		add.l	d0,d6					; add to V-Ram address
00003E02 D8C1                       		adda.w	d1,a4					; add to map buffer address
00003E04 3CBC 8F80                  		move.w	#$8F80,(a6)				; set increment mode to 80 (new line)
00003E08 323C 2000                  		move.w	#$2000,d1				; prepare palette line add value
00003E0C 2C86                       		move.l	d6,(a6)					; set VDP mode and address
00003E0E 3014                       		move.w	(a4),d0					; load map tile
00003E10 D041                       		add.w	d1,d0					; increase palette to next line
00003E12 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
00003E14 49EC 0046                  		lea	$46(a4),a4				; advance to next line
00003E18 3014                       		move.w	(a4),d0					; load map tile
00003E1A D041                       		add.w	d1,d0					; increase palette to next line
00003E1C 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
00003E1E 49EC 0046                  		lea	$46(a4),a4				; advance to next line
00003E22 3014                       		move.w	(a4),d0					; load map tile
00003E24 D041                       		add.w	d1,d0					; increase palette to next line
00003E26 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
00003E28 3CBC 8F02                  		move.w	#$8F02,(a6)				; set increment mode to 02 (standard word)
00003E2C 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
00003E30 4E75                       		rts						; return
00003E32                            
00003E32                            SRG_DFG_FlashOn:
00003E32 0440 0170                  		subi.w	#$0170,d0				; minus starting point
00003E36 6B00 0000                  		bmi	SRG_DFG_NoDraw				; if not reached the starting point, branch
00003E3A 7A00                       		moveq	#$00,d5					; set tile add value (Light)
00003E3C 0C40 0060                  		cmpi.w	#$0060,d0				; has it reached PASSED the ending point?
00003E40 6200 0000                  		bhi	SRG_DFG_NoDraw				; if so, branch to skip the lot
00003E44 0C40 0050                  		cmpi.w	#$0050,d0				; has it reached the ending point?
00003E48 6200 0000                  		bhi	SRG_DFG_DrawFlash			; if so, branch for lights on
00003E4C 0200 0008                  		andi.b	#$08,d0					; get within 8
00003E50 6700 0000                  		beq	SRG_DFG_DrawFlash			; if from 0 to 7 insted of 8 to F, branch
00003E54 3A3C 2000                  		move.w	#$2000,d5				; set tile add value (Faded)
00003E58                            
00003E58                            SRG_DFG_DrawFlash:
00003E58 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
00003E5E 7022                       		moveq	#$22,d0					; set number of columns
00003E60 7202                       		moveq	#$02,d1					; set number of rows
00003E62 243C 4704 0003             		move.l	#$47040003,d2				; set to write to FG plane
00003E68 6100 0000                  		bsr	MapScreenAdd				; write to the map plane
00003E6C                            
00003E6C                            SRG_DFG_NoDraw:
00003E6C 4E75                       		rts						; return
00003E6E                            
00003E6E                            ; ===========================================================================
00003E6E                            ; ---------------------------------------------------------------------------
00003E6E                            ; Subroutine to control a Neon Sonic object
00003E6E                            ; ---------------------------------------------------------------------------
00003E6E                            
00003E6E                            ObjectSonicNeon:
00003E6E 4A28 0024                  		tst.b	$24(a0)					; has the object alread been setup?
00003E72 6600 0000                  		bne	OSN_SetupDone				; if so, branch
00003E76 10BC 0001                  		move.b	#$01,(a0)				; engine doesn't like the ID being null
00003E7A 317C 6400 0002             		move.w	#$6400,$02(a0)				; set V-Ram address read
00003E80 217C 0000 0000 0004        		move.l	#ObjSonNeonMap,$04(a0)			; set mappings to use
00003E88 217C 0000 00DE 0008        		move.l	#$000000DE,$08(a0)			; set starting X and Y positions
00003E90 317C 2020 0018             		move.w	#$2020,$18(a0)				; set out of distance display & width
00003E96 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
00003E9C 317C 00C0 002A             		move.w	#$00C0,$2A(a0)				; set timer
00003EA2 317C 0400 0010             		move.w	#$0400,$10(a0)				; set X speed
00003EA8 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003EAC                            
00003EAC                            OSN_SetupDone:
00003EAC 4A68 002A                  		tst.w	$2A(a0)					; has timer finished?
00003EB0 6700 0000                  		beq	OSN_MoveIn				; if not, branch
00003EB4 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
00003EB8 4E75                       		rts						; return
00003EBA                            
00003EBA                            OSN_MoveIn:
00003EBA 0C28 0002 0024             		cmpi.b	#$02,$24(a0)				; is the routine counter still at sonic moving?
00003EC0 6E00 0000                  		bgt	OSN_NoStop				; if not, branch
00003EC4 0C68 00DE 0008             		cmpi.w	#$00DE,$08(a0)				; has sonic moved to the square yet?
00003ECA 6D00 0000                  		blt	OSN_NoStop				; if not, branch
00003ECE 317C 00DE 0008             		move.w	#$00DE,$08(a0)				; set him directly at the square
00003ED4 4268 0010                  		clr.w	$10(a0)					; stop sonic moving (no X speed)
00003ED8 70BE                       		moveq	#$FFFFFFBE,d0				; set to play spinning SFX
00003EDA 4EB8 110E                  		jsr	PlaySound_Special			; play SFX
00003EDE 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003EE2                            
00003EE2                            OSN_NoStop:
00003EE2 0668 0040 002C             		addi.w	#$0040,$2C(a0)				; increase map speed
00003EE8 1028 002C                  		move.b	$2C(a0),d0				; load current map speed
00003EEC 0C00 0006                  		cmpi.b	#$06,d0					; has the map ID supassed 5?
00003EF0 6D00 0000                  		blt	OSN_NoResetAni				; if not, branch
00003EF4 7000                       		moveq	#$00,d0					; reset to 0
00003EF6 3140 002C                  		move.w	d0,$2C(a0)				; reset map speed
00003EFA                            
00003EFA                            OSN_NoResetAni:
00003EFA 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
00003EFE 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer
00003F04 0200 0007                  		andi.b	#$07,d0					; keep within 8 frames
00003F08 6600 0000                  		bne	OSN_NoCyclePalette			; if it's not been 8 frames, branch
00003F0C 43F8 FB68                  		lea	($FFFFFB68).w,a1			; load palette green buffer address to a1
00003F10 45D1                       		lea	(a1),a2					; '' to a2
00003F12 3019                       		move.w	(a1)+,d0				; store first colour
00003F14 34D9                       		move.w	(a1)+,(a2)+				; shift colours back
00003F16 34D9                       		move.w	(a1)+,(a2)+				; ''
00003F18 34D1                       		move.w	(a1),(a2)+				; ''
00003F1A 3280                       		move.w	d0,(a1)					; save first colour as last
00003F1C                            
00003F1C                            OSN_NoCyclePalette:
00003F1C 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
00003F20 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
00003F26                            
00003F26                            ; ===========================================================================
00003F26                            ; ---------------------------------------------------------------------------
00003F26 0000                       ObjSonNeonMap:	dc.w	ObjSon00-ObjSonNeonMap			; 00
00003F28 0000                       		dc.w	ObjSon01-ObjSonNeonMap			; 01
00003F2A 0000                       		dc.w	ObjSon02-ObjSonNeonMap			; 02
00003F2C 0000                       		dc.w	ObjSon03-ObjSonNeonMap			; 03
00003F2E 0000                       		dc.w	ObjSon04-ObjSonNeonMap			; 04
00003F30 0000                       		dc.w	ObjSon05-ObjSonNeonMap			; 05
00003F32                            ; ---------------------------------------------------------------------------
00003F32 04                         ObjSon00:	dc.b	$04
00003F33 EB0D 0000 EC               		dc.b	$EB,$0D,$00,$00,$EC
00003F38 FB09 0008 EC               		dc.b	$FB,$09,$00,$08,$EC
00003F3D FB06 000E 04               		dc.b	$FB,$06,$00,$0E,$04
00003F42 0B04 0014 EC               		dc.b	$0B,$04,$00,$14,$EC
00003F47 02                         ObjSon01:	dc.b	$02
00003F48 EC0D 0000 ED               		dc.b	$EC,$0D,$00,$00,$ED
00003F4D FC0E 0016 F5               		dc.b	$FC,$0E,$00,$16,$F5
00003F52 02                         ObjSon02:	dc.b	$02
00003F53 ED09 0022 F3               		dc.b	$ED,$09,$00,$22,$F3
00003F58 FD0A 0028 F3               		dc.b	$FD,$0A,$00,$28,$F3
00003F5D 04                         ObjSon03:	dc.b	$04
00003F5E EB09 0022 F4               		dc.b	$EB,$09,$00,$22,$F4
00003F63 FB09 0031 EC               		dc.b	$FB,$09,$00,$31,$EC
00003F68 FB06 0037 04               		dc.b	$FB,$06,$00,$37,$04
00003F6D 0B04 003D EC               		dc.b	$0B,$04,$00,$3D,$EC
00003F72 02                         ObjSon04:	dc.b	$02
00003F73 EC09 0022 F3               		dc.b	$EC,$09,$00,$22,$F3
00003F78 FC0E 003F EB               		dc.b	$FC,$0E,$00,$3F,$EB
00003F7D 03                         ObjSon05:	dc.b	$03
00003F7E ED0D 0000 EC               		dc.b	$ED,$0D,$00,$00,$EC
00003F83 FD0C 004B F4               		dc.b	$FD,$0C,$00,$4B,$F4
00003F88 0509 004F F4               		dc.b	$05,$09,$00,$4F,$F4
00003F8E 00                         		even
00003F8E                            ; ---------------------------------------------------------------------------
00003F8E                            ; ===========================================================================
00003F8E                            ; ---------------------------------------------------------------------------
00003F8E                            ; Subroutine to control the Square much like objects
00003F8E                            ; ---------------------------------------------------------------------------
00003F8E                            
00003F8E                            ObjectSquare:
00003F8E 7000                       		moveq	#$00,d0					; clear d0
00003F90 1028 0024                  		move.b	$24(a0),d0				; load routine counter
00003F94 303B 0000                  		move.w	OS_Index(pc,d0.w),d0			; load correct PC add address
00003F98 4EFB 0000                  		jmp	OS_Index(pc,d0.w)			; add and jump
00003F9C                            
00003F9C                            ; ===========================================================================
00003F9C                            ; ---------------------------------------------------------------------------
00003F9C 0000                       OS_Index:	dc.w	OS_Startup-OS_Index			; 00
00003F9E 0000                       		dc.w	OL_WaitTime-OS_Index			; 02
00003FA0 0000                       		dc.w	OS_PlaySound-OS_Index			; 04
00003FA2 0000                       		dc.w	OS_SpinIn-OS_Index			; 06
00003FA4 0000                       		dc.w	OS_UpAndLand-OS_Index			; 08
00003FA6 0000                       		dc.w	OS_FinishSpin-OS_Index			; 0A
00003FA8                            ; ---------------------------------------------------------------------------
00003FA8                            ; ===========================================================================
00003FA8                            ; ---------------------------------------------------------------------------
00003FA8                            ; Startup
00003FA8                            ; ---------------------------------------------------------------------------
00003FA8                            
00003FA8                            OS_Startup:
00003FA8 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003FAC 217C FF40 0020 0008        		move.l	#$FF400020,$08(a0)			; set starting X and Y positions
00003FB4 317C 00A0 002A             		move.w	#$00A0,$2A(a0)				; set time to wait for
00003FBA 217C 0800 0000 0010        		move.l	#$08000000,$10(a0)			; set X and Y starting speeds
00003FC2 6000 0000                  		bra	UpdateScrollPositions			; update positions
00003FC6                            
00003FC6                            ; ===========================================================================
00003FC6                            ; ---------------------------------------------------------------------------
00003FC6                            ; Playing spin sound once
00003FC6                            ; ---------------------------------------------------------------------------
00003FC6                            
00003FC6                            OS_PlaySound:
00003FC6 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003FCA 70BC                       		moveq	#$FFFFFFBC,d0				; set to play spin release SFX
00003FCC 4EB8 110E                  		jsr	PlaySound_Special			; play SFX
00003FD0                            
00003FD0                            ; ===========================================================================
00003FD0                            ; ---------------------------------------------------------------------------
00003FD0                            ; Spinning in and hitting the SSRG letters
00003FD0                            ; ---------------------------------------------------------------------------
00003FD0                            
00003FD0                            OS_SpinIn:
00003FD0 5468 002A                  		addq.w	#$02,$2A(a0)				; increase spin counter
00003FD4 3028 0008                  		move.w	$08(a0),d0				; load X position
00003FD8 0C40 0060                  		cmpi.w	#$0060,d0				; has the square hit the letters?
00003FDC 6D00 0000                  		blt	OS_Display				; if not, branch
00003FE0 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00003FE4 70BD                       		moveq	#$FFFFFFBD,d0				; set to play spiked chandelier SFX
00003FE6 4EB8 110E                  		jsr	PlaySound_Special			; play SFX
00003FEA 217C FF00 FC00 0010        		move.l	#$FF00FC00,$10(a0)			; set X and Y bounce off speeds
00003FF2 43F9 FFFF D010             		lea	($FFFFD010).l,a1			; load object ram's X and Y speeds
00003FF8 22BC 0300 FC00             		move.l	#$0300FC00,(a1)				; save "S" X and Y speeds
00003FFE 237C 0300 FD00 0040        		move.l	#$0300FD00,$40(a1)			; save "S" X and Y speeds
00004006 237C 0300 FE00 0080        		move.l	#$0300FE00,$80(a1)			; save "R" X and Y speeds
0000400E 237C 0300 FF00 00C0        		move.l	#$0300FF00,$C0(a1)			; save "G" X and Y speeds
00004016 6000 0000                  		bra	OS_Display				; continue
0000401A                            
0000401A                            ; ===========================================================================
0000401A                            ; ---------------------------------------------------------------------------
0000401A                            ; Spinning in and hitting the SSRG letters
0000401A                            ; ---------------------------------------------------------------------------
0000401A                            
0000401A                            OS_UpAndLand:
0000401A 5168 002A                  		subq.w	#$08,$2A(a0)				; increase spin counter
0000401E 0668 0020 0012             		addi.w	#$0020,$12(a0)				; increase gravity
00004024 6B00 0000                  		bmi	OS_Display				; if not going down, branch
00004028 0C68 0020 000A             		cmpi.w	#$0020,$0A(a0)				; has the square hit the ground?
0000402E 6D00 0000                  		blt	OS_Display				; if not, branch
00004032 317C 0020 000A             		move.w	#$0020,$0A(a0)				; set to the ground
00004038 7000                       		moveq	#$00,d0					; clear d0
0000403A 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
0000403E 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00004042 317C 0A40 002C             		move.w	#$0A40,$2C(a0)				; set speed of spin
00004048 6000 0000                  		bra	OS_Display				; continue
0000404C                            
0000404C                            ; ===========================================================================
0000404C                            ; ---------------------------------------------------------------------------
0000404C                            ; Finishing the spin by slowing down
0000404C                            ; ---------------------------------------------------------------------------
0000404C                            
0000404C                            OS_FinishSpin:
0000404C 3028 002C                  		move.w	$2C(a0),d0				; has spin speed finished?
00004050 6A00 0000                  		bpl	OS_NoFinish				; if not, branch
00004054 43F8 FB62                  		lea	($FFFFFB62).w,a1			; load palette buffer address
00004058 0C51 0E0E                  		cmpi.w	#$0E0E,(a1)				; has the colour finished changing?
0000405C 6700 0000                  		beq	OS_NoColour01				; if so, branch
00004060 0651 0202                  		addi.w	#$0202,(a1)				; increase the colour
00004064                            
00004064                            OS_NoColour01:
00004064 5849                       		addq.w	#$04,a1					; goto next 2nd colour
00004066 0C51 0404                  		cmpi.w	#$0404,(a1)				; has the colour finished changing?
0000406A 6700 0000                  		beq	OS_Display				; if so, branch
0000406E 0451 0202                  		subi.w	#$0202,(a1)				; decrease the colour
00004072 6000 0000                  		bra	OS_Display				; continue
00004076                            
00004076                            OS_NoFinish:
00004076 0440 0018                  		subi.w	#$18,d0					; decrease spin speed
0000407A 3200                       		move.w	d0,d1					; copy to d1
0000407C E049                       		lsr.w	#$08,d1					; get left byte only
0000407E 9368 002A                  		sub.w	d1,$2A(a0)				; subtract that from the spin position
00004082 3140 002C                  		move.w	d0,$2C(a0)				; update spin speed
00004086                            
00004086                            ; ===========================================================================
00004086                            ; ---------------------------------------------------------------------------
00004086                            ; Displaying the square
00004086                            ; ---------------------------------------------------------------------------
00004086                            
00004086                            OS_Display:
00004086 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
0000408C 6100 0000                  		bsr	UpdateScrollPositions			; update positions
00004090                            
00004090                            OS_DiplayEnd:
00004090 3F28 002A                  		move.w	$2A(a0),-(sp)				; store spin counter
00004094 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
00004098 7010                       		moveq	#$10,d0					; set number of columns
0000409A 7210                       		moveq	#$10,d1					; set number of rows
0000409C 243C 6000 0003             		move.l	#$60000003,d2				; set to write to BG plane
000040A2 7A00                       		moveq	#$00,d5					; set blank tile
000040A4 6100 0000                  		bsr	MapScreenSingle				; write to the map plane
000040A8 301F                       		move.w	(sp)+,d0				; load spin counter
000040AA 0240 0018                  		andi.w	#$0018,d0				; keep in range
000040AE D040                       		add.w	d0,d0					; multiply by 2
000040B0 49FB 0000                  		lea	MapRamData(pc,d0.w),a4			; load map ram address data
000040B4 2A5C                       		movea.l	(a4)+,a5				; load mappings to read
000040B6 241C                       		move.l	(a4)+,d2				; load V-Ram address
000040B8 301C                       		move.w	(a4)+,d0				; load X draw amount
000040BA 321C                       		move.w	(a4)+,d1				; load Y draw amount
000040BC 6100 0000                  		bsr	MapScreen				; write to the map plane
000040C0 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
000040C4 4E75                       		rts						; return
000040C6                            
000040C6                            ; ---------------------------------------------------------------------------
000040C6                            ; Updating the scroll positions for the BG plane
000040C6                            ; ---------------------------------------------------------------------------
000040C6                            
000040C6                            UpdateScrollPositions:
000040C6 33E8 0008 FFFF 7808        		move.w	$08(a0),($FFFF7808).l			; load X position as X scroll BG
000040CE 3028 000A                  		move.w	$0A(a0),d0				; load Y position
000040D2 4440                       		neg.w	d0					; negate opposite direction
000040D4 31C0 F618                  		move.w	d0,($FFFFF618).w			; save as Y scroll BG
000040D8 4E75                       		rts						; return
000040DA                            
000040DA                            ; ===========================================================================
000040DA                            ; ---------------------------------------------------------------------------
000040DA FFFF 4000                  MapRamData:	dc.l	$FFFF4000				; Map address
000040DE 6104 0003                  		dc.l	$61040003				; V-Ram address
000040E2 000B 000B                  		dc.l	$000B000B				; X and Y draw amount
000040E6 0000 0000                  		dc.l	$00000000				; null/spare
000040EA FFFF 4120                  		dc.l	$FFFF4120				; ''
000040EE 6000 0003                  		dc.l	$60000003				; ''
000040F2 000F 000F                  		dc.l	$000F000F				; ''
000040F6 0000 0000                  		dc.l	$00000000				; ''
000040FA FFFF 4320                  		dc.l	$FFFF4320				; ''
000040FE 6000 0003                  		dc.l	$60000003				; ''
00004102 0010 0010                  		dc.l	$00100010				; ''
00004106 0000 0000                  		dc.l	$00000000				; ''
0000410A FFFF 4562                  		dc.l	$FFFF4562				; ''
0000410E 6000 0003                  		dc.l	$60000003				; ''
00004112 000F 000F                  		dc.l	$000F000F				; ''
00004116 0000 0000                  		dc.l	$00000000				; ''
0000411A                            ; ---------------------------------------------------------------------------
0000411A                            ; ===========================================================================
0000411A                            ; ---------------------------------------------------------------------------
0000411A                            ; Subroutine to control the "SSRG" letter sprites
0000411A                            ; ---------------------------------------------------------------------------
0000411A                            
0000411A                            ObjectLetters:
0000411A 7000                       		moveq	#$00,d0					; clear d0
0000411C 1028 0024                  		move.b	$24(a0),d0				; load routine counter
00004120 303B 0000                  		move.w	OL_Index(pc,d0.w),d0			; load correct PC add address
00004124 4EFB 0000                  		jmp	OL_Index(pc,d0.w)			; add and jump
00004128                            
00004128                            ; ===========================================================================
00004128                            ; ---------------------------------------------------------------------------
00004128 0000                       OL_Index:	dc.w	OL_Startup-OL_Index			; 00
0000412A 0000                       		dc.w	OL_WaitTime-OL_Index			; 02
0000412C 0000                       		dc.w	OL_FlyUp-OL_Index			; 04
0000412E 0000                       		dc.w	OL_Spring-OL_Index			; 06
00004130 0000                       		dc.w	OL_SlowDown-OL_Index			; 08
00004132 0000                       		dc.w	OL_Idle-OL_Index			; 0A
00004134                            ; ---------------------------------------------------------------------------
00004134                            ; ===========================================================================
00004134                            ; ---------------------------------------------------------------------------
00004134                            ; Object data	dc.w	$XXXX,$YYYY,$VRAM,$TIME,$XSPD,$YSPD,$MAPI,$????
00004134                            ; ---------------------------------------------------------------------------
00004134 0182 0180 0001 0001 FF00+  OL_Data:	dc.w	$0182,$0180,$0001,$0001,$FF00,$F400,$0000,$0000
00004144 01A8 0180 0001 0011 FF00+  		dc.w	$01A8,$0180,$0001,$0011,$FF00,$F400,$0000,$0000
00004154 01D0 0180 0011 0021 FF00+  		dc.w	$01D0,$0180,$0011,$0021,$FF00,$F400,$0000,$0000
00004164 01F8 0180 0021 0031 FF00+  		dc.w	$01F8,$0180,$0021,$0031,$FF00,$F400,$0000,$0000
00004174                            ; ---------------------------------------------------------------------------
00004174                            ; ===========================================================================
00004174                            ; ---------------------------------------------------------------------------
00004174                            ; Startup
00004174                            ; ---------------------------------------------------------------------------
00004174                            
00004174                            OL_Startup:
00004174 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00004178 1010                       		move.b	(a0),d0					; load object type
0000417A 5300                       		subq.b	#$01,d0					; decrease by 1
0000417C E948                       		lsl.w	#$04,d0					; multiply by 10
0000417E 43FB 00B4                  		lea	OL_Data(pc,d0.w),a1			; load correct data address
00004182 2159 0008                  		move.l	(a1)+,$08(a0)				; set X & Y position
00004186 3159 0002                  		move.w	(a1)+,$02(a0)				; set V-Ram
0000418A 3159 002A                  		move.w	(a1)+,$2A(a0)				; set Timer
0000418E 2159 0010                  		move.l	(a1)+,$10(a0)				; set X and Y speeds
00004192 3019                       		move.w	(a1)+,d0				; load map ID
00004194 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
00004198 217C 0000 0000 0004        		move.l	#ObjLet_Map,$04(a0)			; set mappings to use
000041A0 317C 2020 0018             		move.w	#$2020,$18(a0)				; set out of distance display & width
000041A6 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
000041AC                            
000041AC                            ; ===========================================================================
000041AC                            ; ---------------------------------------------------------------------------
000041AC                            ; Delay/Time wait
000041AC                            ; ---------------------------------------------------------------------------
000041AC                            
000041AC                            OL_WaitTime:
000041AC 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
000041B0 6600 0000                  		bne	OL_WT_Wait				; if not finished, branch
000041B4 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000041B8                            
000041B8                            OL_WT_Wait:
000041B8 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
000041BE                            
000041BE                            ; ===========================================================================
000041BE                            ; ---------------------------------------------------------------------------
000041BE                            ; Flying up and landing
000041BE                            ; ---------------------------------------------------------------------------
000041BE                            
000041BE                            OL_FlyUp:
000041BE 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000041C4 0668 0040 0012             		addi.w	#$0040,$12(a0)				; increase speed
000041CA 6B00 0000                  		bmi	OL_NoStopDown				; if still moving up, branch
000041CE 303C 00F0                  		move.w	#$00F0,d0				; set Y speed to check
000041D2 B068 000A                  		cmp.w	$0A(a0),d0				; has the letter dropped to the landing line?
000041D6 6C00 0000                  		bge	OL_NoStopDown				; if not, branch
000041DA 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000041DE                            
000041DE                            OL_NoStopDown:
000041DE 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
000041E4                            
000041E4                            ; ===========================================================================
000041E4                            ; ---------------------------------------------------------------------------
000041E4                            ; Springing under the land and back up again
000041E4                            ; ---------------------------------------------------------------------------
000041E4                            
000041E4                            OL_Spring:
000041E4 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000041EA 0468 0080 0012             		subi.w	#$0080,$12(a0)				; decrease speed
000041F0 6A00 0000                  		bpl	OL_NoStopUp				; if still moving down, branch
000041F4 303C 00E8                  		move.w	#$00E8,d0				; set Y speed to check
000041F8 B068 000A                  		cmp.w	$0A(a0),d0				; has the letter moved up to the landing line?
000041FC 6D00 0000                  		blt	OL_NoStopUp				; if not, branch
00004200 4268 0012                  		clr.w	$12(a0)					; set no Y speed
00004204 4268 002A                  		clr.w	$2A(a0)					; clear timer
00004208 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
0000420C                            
0000420C                            OL_NoStopUp:
0000420C 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
00004212                            
00004212                            ; ===========================================================================
00004212                            ; ---------------------------------------------------------------------------
00004212                            ; Slowing the letter down on X
00004212                            ; ---------------------------------------------------------------------------
00004212                            
00004212                            OL_SlowDown:
00004212 4A68 0010                  		tst.w	$10(a0)					; is there any left movement on X?
00004216 6A00 0000                  		bpl	OL_NoMove				; if not, branch
0000421A 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
00004220 0668 0020 0010             		addi.w	#$0020,$10(a0)				; increase X speed to slow down to move right
00004226 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
0000422C                            
0000422C                            OL_NoMove:
0000422C 5228 002A                  		addi.b	#$01,$2A(a0)				; increase timer
00004230 1028 002A                  		move.b	$2A(a0),d0				; load timer
00004234 0200 0001                  		andi.b	#$01,d0					; get only the odd bit
00004238 6700 0000                  		beq	OL_Idle					; if null, branch to skip (Slows the flash down)
0000423C 7040                       		moveq	#$40,d0					; set colour line to check value on
0000423E B028 0002                  		cmp.b	$02(a0),d0				; has colour line reached last?
00004242 6E00 0000                  		bgt	OL_NoFinish				; if not, branch
00004246 0228 009F 0002             		andi.b	#$9F,$02(a0)				; reset colour line to first
0000424C 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
00004250 7000                       		moveq	#$00,d0					; clear d0
00004252 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
00004256 0268 01FF 000A             		andi.w	#$01FF,$0A(a0)				; reset Y position range correctly
0000425C 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
00004262 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
00004268                            
00004268                            OL_NoFinish:
00004268 0628 0020 0002             		addi.b	#$20,$02(a0)				; increase palette line being used
0000426E                            
0000426E                            ; ===========================================================================
0000426E                            ; ---------------------------------------------------------------------------
0000426E                            ; Idle (Finish)
0000426E                            ; ---------------------------------------------------------------------------
0000426E                            
0000426E                            OL_Idle:
0000426E 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
00004272 0C68 00E4 000A             		cmpi.w	#$00E4,$0A(a0)				; has the letter moved up to the landing line?
00004278 6700 0000                  		beq	OL_CheckXSpeed				; if so, branch
0000427C 6D00 0000                  		blt	OL_CheckYSpeed				; if not, branch
00004280 4268 0012                  		clr.w	$12(a0)					; set no Y speed
00004284 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
0000428A 6000 0000                  		bra	OL_CheckXSpeed				; continue
0000428E                            
0000428E                            OL_CheckYSpeed:
0000428E 0668 0080 0012             		addi.w	#$0080,$12(a0)				; increase gravity
00004294                            
00004294                            OL_CheckXSpeed:
00004294 303C 0040                  		move.w	#$0040,d0				; set speed decrease
00004298 4A68 0010                  		tst.w	$10(a0)					; is there any X speed?
0000429C 6700 0000                  		beq	OL_Display				; if not, branch
000042A0 6A00 0000                  		bpl	OL_DecreaseRight			; if it's moving right, branch
000042A4 4440                       		neg.w	d0					; negate decreasing speed
000042A6                            
000042A6                            OL_DecreaseRight:
000042A6 9168 0010                  		sub.w	d0,$10(a0)				; decrease speed
000042AA                            
000042AA                            OL_Display:
000042AA 4EF9 0000 0000             		jmp	DisplaySprite				; save object for displaying
000042B0                            
000042B0                            ; ===========================================================================
000042B0                            ; ---------------------------------------------------------------------------
000042B0 0000                       ObjLet_Map:	dc.w	ObjLet_SSRG-ObjLet_Map			; 00
000042B2                            ; ---------------------------------------------------------------------------
000042B2 01                         ObjLet_SSRG:	dc.b	$01
000042B3 F00F 0000 F0               		dc.b	$F0,$0F,$00,$00,$F0
000042B8                            		even
000042B8                            ; ---------------------------------------------------------------------------
000042B8                            ; ===========================================================================
000042B8                            ; ---------------------------------------------------------------------------
000042B8                            ; Subroutine to convert speed to position for HUD objects
000042B8                            ; ---------------------------------------------------------------------------
000042B8                            
000042B8                            SpeedToPosHud:
000042B8 3028 0010                  		move.w	$10(a0),d0				; load X speed
000042BC 48C0                       		ext.l	d0					; extend incase it's negative
000042BE E180                       		asl.l	#$08,d0					; multiply by 100
000042C0 4840                       		swap	d0					; get X add position
000042C2 D168 0008                  		add.w	d0,$08(a0)				; save new X position
000042C6 3028 0012                  		move.w	$12(a0),d0				; load Y speed
000042CA 48C0                       		ext.l	d0					; extend incase it's negative
000042CC E180                       		asl.l	#$08,d0					; multiply by 100
000042CE D1A8 000A                  		add.l	d0,$0A(a0)				; save new Y position
000042D2 4E75                       		rts						; return
000042D4                            
000042D4                            ; ===========================================================================
000042D4                            ; ---------------------------------------------------------------------------
000042D4                            ; Subroutine to map tile to VDP screen
000042D4                            ; ---------------------------------------------------------------------------
000042D4                            
000042D4                            MapScreen:
000042D4 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000042DA 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000042DE 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
000042E4                            
000042E4                            MapScreen_Row:
000042E4 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
000042E6 3600                       		move.w	d0,d3					; reload number of columns
000042E8                            
000042E8                            MapScreen_Column:
000042E8 3C9D                       		move.w	(a5)+,(a6)				; dump map to VDP map slot
000042EA 51CB FFFC                  		dbf	d3,MapScreen_Column			; repeat til columns have dumped
000042EE D484                       		add.l	d4,d2					; increae to next row on VRam
000042F0 51C9 FFF2                  		dbf	d1,MapScreen_Row			; repeat til all rows have dumped
000042F4 4E75                       		rts						; return
000042F6                            
000042F6                            ; ===========================================================================
000042F6                            ; ---------------------------------------------------------------------------
000042F6                            ; Subroutine to map tile to VDP screen (Adding contents of d5)
000042F6                            ; ---------------------------------------------------------------------------
000042F6                            
000042F6                            MapScreenAdd:
000042F6 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000042FC 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
00004300 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
00004306                            
00004306                            MapScreenAdd_Row:
00004306 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
00004308 3600                       		move.w	d0,d3					; reload number of columns
0000430A                            
0000430A                            MapScreenAdd_Column:
0000430A 3C1D                       		move.w	(a5)+,d6				; load map ID
0000430C DC45                       		add.w	d5,d6					; add d5 contents
0000430E 3C86                       		move.w	d6,(a6)					; dump map to VDP map slot
00004310 51CB FFF8                  		dbf	d3,MapScreenAdd_Column			; repeat til columns have dumped
00004314 D484                       		add.l	d4,d2					; increae to next row on VRam
00004316 51C9 FFEE                  		dbf	d1,MapScreenAdd_Row			; repeat til all rows have dumped
0000431A 4E75                       		rts						; return
0000431C                            
0000431C                            ; ===========================================================================
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            ; Subroutine to map a single tile to VDP screen
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            
0000431C                            MapScreenSingle:
0000431C 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
00004322 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
00004326 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
0000432C                            
0000432C                            MapScreenSingle_Row:
0000432C 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
0000432E 3600                       		move.w	d0,d3					; reload number of columns
00004330                            
00004330                            MapScreenSingle_Column:
00004330 3C85                       		move.w	d5,(a6)					; dump map to VDP map slot
00004332 51CB FFFC                  		dbf	d3,MapScreenSingle_Column		; repeat til columns have dumped
00004336 D484                       		add.l	d4,d2					; increae to next row on VRam
00004338 51C9 FFF2                  		dbf	d1,MapScreenSingle_Row			; repeat til all rows have dumped
0000433C 4E75                       		rts						; return
0000433E                            
0000433E                            ; ===========================================================================
0000433E                            ; ---------------------------------------------------------------------------
0000433E                            ; SSRG Data
0000433E                            ; ---------------------------------------------------------------------------
0000433E 0000 0400 0800 0C00 0E00+  Pal_SSRG:	dc.w	$0000,$0400,$0800,$0C00,$0E00,$0EEE,$0AAA,$0888
0000434E 0666 0444 0222 0000 0000+  		dc.w	$0666,$0444,$0222,$0000,$0000,$0000,$0000,$0000
0000435E 0000 0444 0888 0CCC 0EEE+  		dc.w	$0000,$0444,$0888,$0CCC,$0EEE,$0888,$0666,$0444
0000436E 0222 0000 0000 0000 0000+  		dc.w	$0222,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000437E 0000 0422 0844 0C66 0E88+  		dc.w	$0000,$0422,$0844,$0C66,$0E88,$0000,$0000,$0000
0000438E 0000 0000 0000 0000 0000+  		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000439E 0000 0404 0808 0E0E 00E0+  		dc.w	$0000,$0404,$0808,$0E0E,$00E0,$00C0,$00A0,$0080
000043AE 0000 0000 0000 0000 0000+  		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000043BE                            		even
000043BE                            ; ---------------------------------------------------------------------------
000043BE                            ArtMain_SSRG:	incbin	"SSRG/ArtMain.nem"
00004A32 00                         		even
00004A32                            ArtSquare_SSRG:	incbin	"SSRG/ArtSquare.nem"
00004E9E 00                         		even
00004E9E                            ArtSonic_SSRG:	incbin	"SSRG/ArtSonic.nem"
0000517C                            		even
0000517C                            ArtLink_SSRG:	incbin	"SSRG/ArtLink.nem"
00005264                            		even
00005264                            ; ---------------------------------------------------------------------------
00005264                            MapMain_SSRG:	incbin	"SSRG/MapMain.kos"
00005316 00                         		even
00005316                            MapSquare_SSRG:	incbin	"SSRG/MapSquare.kos"
00005560                            		even
00005560                            MapLink_SSRG:	incbin	"SSRG/MapLink.kos"
00005596                            		even
00005596                            ; ---------------------------------------------------------------------------
00005596                            ; ===========================================================================
00005596                            ; ===========================================================================
00005596                            
00005596                            ; ============================================================================================
00005596                            ; Sega Screen example
00005596                            ; This version is for splash screens that load AFTER the SEGA screen
00005596                            ; For A version that replaces the SEGA screen, read the guide this code came from!
00005596                            ; 2014, Hitaxas
00005596                            ; Ported to Sonic 1 Hivebrain 2005 Thanks to ProjectFM
00005596                            ; ============================================================================================
00005596                            SegaScreen2:
00005596 303C 009E                  	move.w	#$9E,d0
0000559A 4EB9 0000 1108             	jsr	(PlaySound).l	; play extra life music
000055A0 4EB8 23C2                  	jsr     Pal_FadeFrom.w			; fade palettes out
000055A4 4EB8 1012                  	jsr     ClearScreen.w			; clear the plane mappings
000055A8                            	; load art, mappings and the palette
000055A8 43F9 00FF 0000             	lea     ($FF0000).l,a1			; load dump location
000055AE 41F9 0000 0000             	lea     MAPS_SEGA.l,a0			; load compressed mappings address
000055B4 303C 0140                  	move.w  #320,d0				; prepare pattern index value to patch to mappings
000055B8 4EB8 1540                  	jsr     EniDec.w			; decompress and dump
000055BC 43F9 00FF 0000             	lea     ($FF0000).l,a1
000055C2 203C 6000 0003             	move.l	#$60000003,d0
000055C8 7227                       	moveq	#39,d1
000055CA 741E                       	moveq	#30,d2
000055CC 6100 BBC4                  	bsr.w   ShowVDPGraphics			; flush mappings to VRAM
000055D0 23FC 6800 0000 FFC0 0004   	move.l  #$68000000,($FFC00004).l	; set vdp loc
000055DA 41F9 0000 0000             	lea     ART_SEGA.l,a0			; load background art
000055E0 4EB8 124C                  	jsr     NemDec				; run NemDec to decompress art for display
000055E4 41F9 0000 0000             	lea	Pal_SEGANew.l,a0		; load this palette
000055EA 43F9 FFFF FB80             	lea	($FFFFFB80).l,a1		; set as line 2
000055F0 303C 000F                  	move.w	#$F,d0
000055F4                            
000055F4                            SegaScreen_PalLoop2:
000055F4 22D8                       	move.l	(a0)+,(a1)+			; copy colours to buffer
000055F6 22D8                       	move.l	(a0)+,(a1)+			; ''
000055F8 51C8 FFFA                  	dbf	d0,SegaScreen_PalLoop2		; repeat until done
000055FC 4EB8 230C                  	jsr	Pal_FadeTo			; fade palette in
00005600 31FC 003C F614             	move.w	#1*60,($FFFFF614).w		; set delay time (3 seconds on a 60hz system)
00005606                            
00005606                            Sega_MainLoop2:
00005606 11FC 0002 F62A             	move.b	#2,($FFFFF62A).w		; set V-blank routine to run
0000560C 4EB8 3704                  	jsr	DelayProgram.w			; wait for V-blank (decreases "Demo_Time_left")
00005610 4A38 F605                  	tst.b	($FFFFF605).w			; has player 1 pressed start button?
00005614 6B00                       	bmi.s	sega_GotoTitle2			; if so, branch
00005616                            ;	tst.w	($FFFFF614).w			; has the delay time finished?
00005616                            ;	bne.s	Sega_MainLoop2			; if not, branch
00005616 4EF8 5606                  	jmp		Sega_MainLoop2
0000561A                            
0000561A                            sega_GotoTitle2:
0000561A 11FC 0004 F600             	move.b	#$04,($FFFFF600).w		; set the screen mode to Title Screen
00005620 4E75                       	rts						; return
00005622                            ; ===========================================================================
00005622                            ; ---------------------------------------------------------------------------
00005622                            ; Title	screen
00005622                            ; ---------------------------------------------------------------------------
00005622                            
00005622                            TitleScreen:				; XREF: GameModeArray
00005622 4238 FFF6                          clr.b     ($FFFFFFF6).w
00005626 103C 00E4                  		move.b	#$E4,d0
0000562A 6100 BAE2                  		bsr.w	PlaySound_Special ; stop music
0000562E 6100 BDD0                  		bsr.w	ClearPLC
00005632 6100 CD8E                  		bsr.w	Pal_FadeFrom
00005636 46FC 2700                  		move	#$2700,sr
0000563A 6100 BA64                  		bsr.w	SoundDriverLoad
0000563E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005644 3CBC 8004                  		move.w	#$8004,(a6)
00005648 3CBC 8230                  		move.w	#$8230,(a6)
0000564C 3CBC 8407                  		move.w	#$8407,(a6)
00005650 3CBC 9001                  		move.w	#$9001,(a6)
00005654 3CBC 9200                  		move.w	#$9200,(a6)
00005658 3CBC 8B03                  		move.w	#$8B03,(a6)
0000565C 3CBC 8720                  		move.w	#$8720,(a6)
00005660 4238 F64E                  		clr.b	($FFFFF64E).w
00005664 6100 B9AC                  		bsr.w	ClearScreen
00005668 43F8 D000                  		lea	($FFFFD000).w,a1
0000566C 7000                       		moveq	#0,d0
0000566E 323C 07FF                  		move.w	#$7FF,d1
00005672                            
00005672                            Title_ClrObjRam:
00005672 22C0                       		move.l	d0,(a1)+
00005674 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00005678                            
00005678 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00005682 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00005688 6100 BBC2                  		bsr.w	NemDec
0000568C 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00005696 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000569C 6100 BBAE                  		bsr.w	NemDec
000056A0 43F9 00FF 0000             		lea	($FF0000).l,a1
000056A6 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000056AC 303C 0000                  		move.w	#0,d0
000056B0 6100 BE8E                  		bsr.w	EniDec
000056B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000056BA 203C 4000 0003             		move.l	#$40000003,d0
000056C0 7227                       		moveq	#$27,d1
000056C2 741B                       		moveq	#$1B,d2
000056C4 6100 BACC                  		bsr.w	ShowVDPGraphics
000056C8 43F8 FB80                  		lea	($FFFFFB80).w,a1
000056CC 7000                       		moveq	#0,d0
000056CE 323C 001F                  		move.w	#$1F,d1
000056D2                            
000056D2                            Title_ClrPallet:
000056D2 22C0                       		move.l	d0,(a1)+
000056D4 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000056D8                            
000056D8 7003                       		moveq	#3,d0		; load Sonic's pallet
000056DA 6100 CF94                  		bsr.w	PalLoad1
000056DE 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000056E4 4EB9 0000 0000             		jsr	ObjectsLoad
000056EA 4EB9 0000 0000             		jsr	BuildSprites
000056F0 6100 CC1A                  		bsr.w	Pal_FadeTo
000056F4 46FC 2700                  		move	#$2700,sr
000056F8 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00005702 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00005708 6100 BB42                  		bsr.w	NemDec
0000570C 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00005716 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000571C 6100 BB2E                  		bsr.w	NemDec
00005720 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000572A 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00005730 6100 BB1A                  		bsr.w	NemDec
00005734 4DF9 00C0 0000             		lea	($C00000).l,a6
0000573A 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00005742 4BF9 0000 03E0             		lea	(Art_Text).l,a5
00005748 323C 028F                  		move.w	#$28F,d1
0000574C                            
0000574C                            Title_LoadText:
0000574C 3C9D                       		move.w	(a5)+,(a6)
0000574E 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00005752                            
00005752 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00005758 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000575E 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00005764 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000576A 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00005770 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00005776 6100 0000                  		bsr.w	LevelSizeLoad
0000577A 6100 0000                  		bsr.w	DeformBgLayer
0000577E 43F8 B000                  		lea	($FFFFB000).w,a1
00005782 41F9 0000 0000             		lea	(Blk16_End).l,a0 ; load	GHZ 16x16 mappings
00005788 303C 0000                  		move.w	#0,d0
0000578C 6100 BDB2                  		bsr.w	EniDec
00005790                            ;		lea	(Blk256_End).l,a0 ; load GHZ 256x256 mappings
00005790                            ;		lea	($FF0000).l,a1
00005790                            ;		bsr.w	KosDec
00005790 6100 0000                  		bsr.w	LevelLayoutLoad
00005794 6100 CC2C                  		bsr.w	Pal_FadeFrom
00005798 46FC 2700                  		move	#$2700,sr
0000579C 6100 B874                  		bsr.w	ClearScreen
000057A0 4BF9 00C0 0004             		lea	($C00004).l,a5
000057A6 4DF9 00C0 0000             		lea	($C00000).l,a6
000057AC 47F8 F708                  		lea	($FFFFF708).w,a3
000057B0 49F8 A440                  		lea	($FFFFA440).w,a4
000057B4 343C 6000                  		move.w	#$6000,d2
000057B8 6100 0000                  		bsr.w	LoadTilesFromStart2
000057BC 43F9 00FF 0000             		lea	($FF0000).l,a1
000057C2 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000057C8 303C 0000                  		move.w	#0,d0
000057CC 6100 BD72                  		bsr.w	EniDec
000057D0 43F9 00FF 0000             		lea	($FF0000).l,a1
000057D6 203C 4206 0003             		move.l	#$42060003,d0
000057DC 7221                       		moveq	#$21,d1
000057DE 7415                       		moveq	#$15,d2
000057E0 6100 B9B0                  		bsr.w	ShowVDPGraphics
000057E4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000057EE 41F9 0000 0000             		lea	(Nem_Title).l,a0 ; load Title patterns
000057F4 6100 BA56                  		bsr.w	NemDec
000057F8 7001                       		moveq	#1,d0		; load title screen pallet
000057FA 6100 CE74                  		bsr.w	PalLoad1
000057FE 103C 008A                  		move.b	#$8A,d0		; play title screen music
00005802 6100 B90A                  		bsr.w	PlaySound_Special
00005806 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000580C 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00005812 43F8 D080                  		lea	($FFFFD080).w,a1
00005816 7000                       		moveq	#0,d0
00005818 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
0000581C                            
0000581C                            Title_ClrObjRam2:
0000581C 22C0                       		move.l	d0,(a1)+
0000581E 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00005822                            
00005822 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00005828 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
0000582E 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00005834 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000583A 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00005840 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00005846 4EB9 0000 0000             		jsr	ObjectsLoad
0000584C 6100 0000                  		bsr.w	DeformBgLayer
00005850 4EB9 0000 0000             		jsr	BuildSprites
00005856 7000                       		moveq	#0,d0
00005858 6100 BB7A                  		bsr.w	LoadPLC2
0000585C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00005862 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00005868 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000586C 0000 0040                  		ori.b	#$40,d0
00005870 33C0 00C0 0004             		move.w	d0,($C00004).l
00005876 6100 CA94                  		bsr.w	Pal_FadeTo
0000587A                            
0000587A                            loc_317C:
0000587A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005880 6100 DE82                  		bsr.w	DelayProgram
00005884 4EB9 0000 0000             		jsr	ObjectsLoad
0000588A 6100 0000                  		bsr.w	DeformBgLayer
0000588E 4EB9 0000 0000             		jsr	BuildSprites
00005894 6100 C08E                  		bsr.w	PalCycle_Title
00005898 6100 BB74                  		bsr.w	RunPLC_RAM
0000589C 3038 D008                  		move.w	($FFFFD008).w,d0
000058A0 5440                       		addq.w	#2,d0
000058A2 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000058A6 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000058AA 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000058AC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000058B2 4E75                       		rts	
000058B4                            ; ===========================================================================
000058B4                            
000058B4                            Title_ChkRegion:
000058B4 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000058B8 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000058BA 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000058C0 6000                       		bra.s	Title_EnterCheat
000058C2                            ; ===========================================================================
000058C2                            
000058C2                            Title_RegionJ:				; XREF: Title_ChkRegion
000058C2 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000058C8                            
000058C8                            Title_EnterCheat:			; XREF: Title_ChkRegion
000058C8 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000058CC D0C0                       		adda.w	d0,a0
000058CE 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000058D2 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000058D6 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000058D8 6600                       		bne.s	loc_3210	; if not, branch
000058DA 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000058DE 4A00                       		tst.b	d0
000058E0 6600                       		bne.s	Title_CountC
000058E2 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000058E6 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000058EA E249                       		lsr.w	#1,d1
000058EC 0241 0003                  		andi.w	#3,d1
000058F0 6700                       		beq.s	Title_PlayRing
000058F2 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000058F6 6A00                       		bpl.s	Title_PlayRing
000058F8 7201                       		moveq	#1,d1
000058FA 1181 1001                  		move.b	d1,1(a0,d1.w)
000058FE                            
000058FE                            Title_PlayRing:
000058FE 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00005904 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00005908 6100 B804                  		bsr.w	PlaySound_Special
0000590C 6000                       		bra.s	Title_CountC
0000590E                            ; ===========================================================================
0000590E                            
0000590E                            loc_3210:				; XREF: Title_EnterCheat
0000590E 4A00                       		tst.b	d0
00005910 6700                       		beq.s	Title_CountC
00005912 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00005918 6700                       		beq.s	Title_CountC
0000591A 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00005920                            
00005920                            Title_CountC:
00005920 1038 F605                  		move.b	($FFFFF605).w,d0
00005924 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00005928 6700                       		beq.s	loc_3230	; if not, branch
0000592A 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
0000592E                            
0000592E                            loc_3230:
0000592E                            ;		tst.w	($FFFFF614).w
0000592E                            ;		beq.w	Demo
0000592E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00005934 6700 FF44                  		beq.w	loc_317C	; if not, branch
00005938                            
00005938                            Title_ChkLevSel:
00005938 4EF9 0000 0000             		jmp	Level_Select_Menu; Go to Sonic 2 Level Select
0000593E 7002                       		moveq	#2,d0
00005940 6100 CD6A                  		bsr.w	PalLoad2; load level select pallet
00005944 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005948 7000                       		moveq	#0,d0
0000594A 323C 00DF                  		move.w	#$DF,d1
0000594E 4E75                       		rts
00005950                            
00005950                            Title_ClrScroll:
00005950 22C0                       		move.l	d0,(a1)+
00005952 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00005956                            
00005956 21C0 F616                  		move.l	d0,($FFFFF616).w
0000595A 46FC 2700                  		move	#$2700,sr
0000595E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005964 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000596E 323C 03FF                  		move.w	#$3FF,d1
00005972                            
00005972                            Title_ClrVram:
00005972 2C80                       		move.l	d0,(a6)
00005974 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00005978                            
00005978 6100 0000                  		bsr.w	LevSelTextLoad
0000597C                            
0000597C                            ; ---------------------------------------------------------------------------
0000597C                            ; Level	Select
0000597C                            ; ---------------------------------------------------------------------------
0000597C                            
0000597C                            LevelSelect:
0000597C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005982 6100 DD80                  		bsr.w	DelayProgram
00005986 6100 0000                  		bsr.w	LevSelControls
0000598A 6100 BA82                  		bsr.w	RunPLC_RAM
0000598E 4AB8 F680                  		tst.l	($FFFFF680).w
00005992 66E8                       		bne.s	LevelSelect
00005994 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000599A 67E0                       		beq.s	LevelSelect	; if not, branch
0000599C 3038 FF82                  		move.w	($FFFFFF82).w,d0
000059A0 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000059A4 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000059A6 3038 FF84                  		move.w	($FFFFFF84).w,d0
000059AA 0640 0080                  		addi.w	#$80,d0
000059AE 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000059B2 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000059B4 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000059B8 6700                       		beq.s	LevSel_Ending	; if yes, branch
000059BA 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000059BE 6700                       		beq.s	LevSel_Credits	; if yes, branch
000059C0                            
000059C0                            LevSel_NoCheat:
000059C0 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000059C4 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000059C6 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000059CA 65B0                       		bcs.s	LevelSelect	; if yes, branch
000059CC                            
000059CC                            LevSel_PlaySnd:
000059CC 6100 B740                  		bsr.w	PlaySound_Special
000059D0 60AA                       		bra.s	LevelSelect
000059D2                            ; ===========================================================================
000059D2                            
000059D2                            LevSel_Ending:				; XREF: LevelSelect
000059D2 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000059D8 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000059DE 4E75                       		rts	
000059E0                            ; ===========================================================================
000059E0                            
000059E0                            LevSel_Credits:				; XREF: LevelSelect
000059E0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000059E6 103C 0091                  		move.b	#$91,d0
000059EA 6100 B722                  		bsr.w	PlaySound_Special ; play credits music
000059EE 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000059F4 4E75                       		rts	
000059F6                            ; ===========================================================================
000059F6                            
000059F6                            LevSel_Level_SS:			; XREF: LevelSelect
000059F6 D040                       		add.w	d0,d0
000059F8 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000059FC 6B00 FF7E                  		bmi.w	LevelSelect
00005A00 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00005A04 6600                       		bne.s	LevSel_Level	; if not, branch
00005A06 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00005A0C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00005A10 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005A16 7000                       		moveq	#0,d0
00005A18 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005A1C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005A20 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005A24 4E75                       		rts	
00005A26                            ; ===========================================================================
00005A26                            
00005A26                            LevSel_Level:				; XREF: LevSel_Level_SS
00005A26 0240 3FFF                  		andi.w	#$3FFF,d0
00005A2A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00005A2E                            
00005A2E                            PlayLevel:				; XREF: ROM:00003246j ...
00005A2E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005A34 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005A3A 7000                       		moveq	#0,d0
00005A3C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005A40 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005A44 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005A48 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00005A4C 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00005A50 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00005A54 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00005A58 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00005A5C 103C 00E0                  		move.b	#$E0,d0
00005A60 6100 B6AC                  		bsr.w	PlaySound_Special ; fade out music
00005A64 4E75                       		rts	
00005A66                            ; ===========================================================================
00005A66                            ; ---------------------------------------------------------------------------
00005A66                            ; Level	select - level pointers
00005A66                            ; ---------------------------------------------------------------------------
00005A66                            LSelectPointers:
00005A66                            		incbin	misc\ls_point.bin
00005A90                            		even
00005A90                            ; ---------------------------------------------------------------------------
00005A90                            ; Level	select codes
00005A90                            ; ---------------------------------------------------------------------------
00005A90                            LevelSelectCode_J:
00005A90                            		incbin	misc\ls_jcode.bin
00005A9A                            		even
00005A9A                            
00005A9A                            LevelSelectCode_US:
00005A9A                            		incbin	misc\ls_ucode.bin
00005AA4                            		even
00005AA4                            ; ===========================================================================
00005AA4                            
00005AA4                            ; ---------------------------------------------------------------------------
00005AA4                            ; Demo mode
00005AA4                            ; ---------------------------------------------------------------------------
00005AA4                            
00005AA4                            Demo:					; XREF: TitleScreen
00005AA4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00005AAA                            
00005AAA                            loc_33B6:				; XREF: loc_33E4
00005AAA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005AB0 6100 DC52                  		bsr.w	DelayProgram
00005AB4 6100 0000                  		bsr.w	DeformBgLayer
00005AB8 6100 BE22                  		bsr.w	PalCycle_Load
00005ABC 6100 B950                  		bsr.w	RunPLC_RAM
00005AC0 3038 D008                  		move.w	($FFFFD008).w,d0
00005AC4 5440                       		addq.w	#2,d0
00005AC6 31C0 D008                  		move.w	d0,($FFFFD008).w
00005ACA 0C40 1C00                  		cmpi.w	#$1C00,d0
00005ACE 6500                       		bcs.s	loc_33E4
00005AD0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00005AD6 4E75                       		rts	
00005AD8                            ; ===========================================================================
00005AD8                            
00005AD8                            loc_33E4:				; XREF: Demo
00005AD8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005ADE 6600 FE58                  		bne.w	Title_ChkLevSel	; if yes, branch
00005AE2 4A78 F614                  		tst.w	($FFFFF614).w
00005AE6 6600 FFC2                  		bne.w	loc_33B6
00005AEA 103C 00E0                  		move.b	#$E0,d0
00005AEE 6100 B61E                  		bsr.w	PlaySound_Special ; fade out music
00005AF2 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00005AF6 0240 0007                  		andi.w	#7,d0
00005AFA D040                       		add.w	d0,d0
00005AFC 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00005B00 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00005B04 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00005B08 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00005B0E 6500                       		bcs.s	loc_3422	; if yes, branch
00005B10 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00005B16                            
00005B16                            loc_3422:
00005B16 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00005B1C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00005B22 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00005B26 6600                       		bne.s	Demo_Level	; if not, branch
00005B28 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00005B2E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00005B32 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00005B36                            
00005B36                            Demo_Level:
00005B36 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005B3C 7000                       		moveq	#0,d0
00005B3E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005B42 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005B46 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005B4A 4E75                       		rts	
00005B4C                            ; ===========================================================================
00005B4C                            ; ---------------------------------------------------------------------------
00005B4C                            ; Levels used in demos
00005B4C                            ; ---------------------------------------------------------------------------
00005B4C                            Demo_Levels:	incbin	misc\dm_ord1.bin
00005B54                            		even
00005B54                            
00005B54                            ; ---------------------------------------------------------------------------
00005B54                            ; Subroutine to	change what you're selecting in the level select
00005B54                            ; ---------------------------------------------------------------------------
00005B54                            
00005B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005B54                            
00005B54                            
00005B54                            LevSelControls:				; XREF: LevelSelect
00005B54 1238 F605                  		move.b	($FFFFF605).w,d1
00005B58 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00005B5C 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00005B5E 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00005B62 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00005B64                            
00005B64                            LevSel_UpDown:
00005B64 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00005B6A 1238 F604                  		move.b	($FFFFF604).w,d1
00005B6E 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00005B72 6700                       		beq.s	LevSel_SndTest	; if not, branch
00005B74 3038 FF82                  		move.w	($FFFFFF82).w,d0
00005B78 0801 0000                  		btst	#0,d1		; is up	pressed?
00005B7C 6700                       		beq.s	LevSel_Down	; if not, branch
00005B7E 5340                       		subq.w	#1,d0		; move up 1 selection
00005B80 6400                       		bcc.s	LevSel_Down
00005B82 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00005B84                            
00005B84                            LevSel_Down:
00005B84 0801 0001                  		btst	#1,d1		; is down pressed?
00005B88 6700                       		beq.s	LevSel_Refresh	; if not, branch
00005B8A 5240                       		addq.w	#1,d0		; move down 1 selection
00005B8C 0C40 0015                  		cmpi.w	#$15,d0
00005B90 6500                       		bcs.s	LevSel_Refresh
00005B92 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00005B94                            
00005B94                            LevSel_Refresh:
00005B94 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00005B98 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00005B9C 4E75                       		rts	
00005B9E                            ; ===========================================================================
00005B9E                            
00005B9E                            LevSel_SndTest:				; XREF: LevSelControls
00005B9E 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00005BA4 6600                       		bne.s	LevSel_NoMove	; if not, branch
00005BA6 1238 F605                  		move.b	($FFFFF605).w,d1
00005BAA 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00005BAE 6700                       		beq.s	LevSel_NoMove	; if not, branch
00005BB0 3038 FF84                  		move.w	($FFFFFF84).w,d0
00005BB4 0801 0002                  		btst	#2,d1		; is left pressed?
00005BB8 6700                       		beq.s	LevSel_Right	; if not, branch
00005BBA 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00005BBC 6400                       		bcc.s	LevSel_Right
00005BBE 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00005BC0                            
00005BC0                            LevSel_Right:
00005BC0 0801 0003                  		btst	#3,d1		; is right pressed?
00005BC4 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00005BC6 5240                       		addq.w	#1,d0		; add 1	to sound test
00005BC8 0C40 0050                  		cmpi.w	#$50,d0
00005BCC 6500                       		bcs.s	LevSel_Refresh2
00005BCE 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00005BD0                            
00005BD0                            LevSel_Refresh2:
00005BD0 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00005BD4 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00005BD8                            
00005BD8                            LevSel_NoMove:
00005BD8 4E75                       		rts	
00005BDA                            ; End of function LevSelControls
00005BDA                            
00005BDA                            ; ---------------------------------------------------------------------------
00005BDA                            ; Subroutine to load level select text
00005BDA                            ; ---------------------------------------------------------------------------
00005BDA                            
00005BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BDA                            
00005BDA                            
00005BDA                            LevSelTextLoad:				; XREF: TitleScreen
00005BDA 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00005BE0 4DF9 00C0 0000             		lea	($C00000).l,a6
00005BE6 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00005BEC 363C E680                  		move.w	#$E680,d3	; VRAM setting
00005BF0 7214                       		moveq	#$14,d1		; number of lines of text
00005BF2                            
00005BF2                            loc_34FE:				; XREF: LevSelTextLoad+26j
00005BF2 2D44 0004                  		move.l	d4,4(a6)
00005BF6 6100 0000                  		bsr.w	LevSel_ChgLine
00005BFA 0684 0080 0000             		addi.l	#$800000,d4
00005C00 51C9 FFF0                  		dbf	d1,loc_34FE
00005C04 7000                       		moveq	#0,d0
00005C06 3038 FF82                  		move.w	($FFFFFF82).w,d0
00005C0A 3200                       		move.w	d0,d1
00005C0C 283C 6210 0003             		move.l	#$62100003,d4
00005C12 EF48                       		lsl.w	#7,d0
00005C14 4840                       		swap	d0
00005C16 D880                       		add.l	d0,d4
00005C18 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00005C1E E749                       		lsl.w	#3,d1
00005C20 3001                       		move.w	d1,d0
00005C22 D241                       		add.w	d1,d1
00005C24 D240                       		add.w	d0,d1
00005C26 D2C1                       		adda.w	d1,a1
00005C28 363C C680                  		move.w	#$C680,d3
00005C2C 2D44 0004                  		move.l	d4,4(a6)
00005C30 6100 0000                  		bsr.w	LevSel_ChgLine
00005C34 363C E680                  		move.w	#$E680,d3
00005C38 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00005C3E 6600                       		bne.s	loc_3550
00005C40 363C C680                  		move.w	#$C680,d3
00005C44                            
00005C44                            loc_3550:
00005C44 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00005C4E 3038 FF84                  		move.w	($FFFFFF84).w,d0
00005C52 0640 0080                  		addi.w	#$80,d0
00005C56 1400                       		move.b	d0,d2
00005C58 E808                       		lsr.b	#4,d0
00005C5A 6100 0000                  		bsr.w	LevSel_ChgSnd
00005C5E 1002                       		move.b	d2,d0
00005C60 6100 0000                  		bsr.w	LevSel_ChgSnd
00005C64 4E75                       		rts	
00005C66                            ; End of function LevSelTextLoad
00005C66                            
00005C66                            
00005C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C66                            
00005C66                            
00005C66                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00005C66 0240 000F                  		andi.w	#$F,d0
00005C6A 0C00 000A                  		cmpi.b	#$A,d0
00005C6E 6500                       		bcs.s	loc_3580
00005C70 5E00                       		addi.b	#7,d0
00005C72                            
00005C72                            loc_3580:
00005C72 D043                       		add.w	d3,d0
00005C74 3C80                       		move.w	d0,(a6)
00005C76 4E75                       		rts	
00005C78                            ; End of function LevSel_ChgSnd
00005C78                            
00005C78                            
00005C78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C78                            
00005C78                            
00005C78                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00005C78 7417                       		moveq	#$17,d2		; number of characters per line
00005C7A                            
00005C7A                            loc_3588:
00005C7A 7000                       		moveq	#0,d0
00005C7C 1019                       		move.b	(a1)+,d0
00005C7E 6A00                       		bpl.s	loc_3598
00005C80 3CBC 0000                  		move.w	#0,(a6)
00005C84 51CA FFF4                  		dbf	d2,loc_3588
00005C88 4E75                       		rts	
00005C8A                            ; ===========================================================================
00005C8A                            
00005C8A                            loc_3598:				; XREF: LevSel_ChgLine
00005C8A D043                       		add.w	d3,d0
00005C8C 3C80                       		move.w	d0,(a6)
00005C8E 51CA FFEA                  		dbf	d2,loc_3588
00005C92 4E75                       		rts	
00005C94                            ; End of function LevSel_ChgLine
00005C94                            
00005C94                            ; ===========================================================================
00005C94                            ; ---------------------------------------------------------------------------
00005C94                            ; Level	select menu text
00005C94                            ; ---------------------------------------------------------------------------
00005C94                            LevelMenuText:	incbin	misc\menutext.bin
00005E8C                            		even
00005E8C                            ; ---------------------------------------------------------------------------
00005E8C                            ; Music	playlist
00005E8C                            ; ---------------------------------------------------------------------------
00005E8C                            MusicList1:	incbin	misc\muslist1.bin
00005E94                            		even
00005E94                            MusicList2:	incbin	misc\muslist2.bin
00005E9A                            		even
00005E9A                            MusicList3:	incbin	misc\muslist3.bin
00005EA0                            		even
00005EA0                            MusicList4:	incbin	misc\muslist4.bin
00005EA6                            		even
00005EA6                            ; ===========================================================================
00005EA6                            
00005EA6                            ; ---------------------------------------------------------------------------
00005EA6                            ; Level
00005EA6                            ; ---------------------------------------------------------------------------
00005EA6                            
00005EA6                            Level:					; XREF: GameModeArray
00005EA6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00005EAC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005EB0 6B00                       		bmi.s	loc_37B6
00005EB2 103C 00E0                  		move.b	#$E0,d0
00005EB6 6100 B256                  		bsr.w	PlaySound_Special ; fade out music
00005EBA                            
00005EBA                            loc_37B6:
00005EBA 13FC 0001 00A1 30F1        		move.b	#1,($A130F1).l	; enable SRAM (required)
00005EC2 43F9 0020 0001             		lea	($200001).l,a1	; base of SRAM + 1
00005EC8 3038 FE10                  		move.w	($FFFFFE10).w,d0	; move zone and act number to d0 (we can't do it directly)
00005ECC 0189 0000                  		movep.w	d0,0(a1)	; save zone and act to SRAM
00005ED0 13FC 0000 00A1 30F1        		move.b	#0,($A130F1).l	; disable SRAM (required)
00005ED8 6100 B526                  		bsr.w	ClearPLC
00005EDC 6100 C4E4                  		bsr.w	Pal_FadeFrom
00005EE0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00005EE4 6B00                       		bmi.s	Level_ClrRam
00005EE6 46FC 2700                  		move	#$2700,sr
00005EEA 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005EF4 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005EFA 6100 B350                  		bsr.w	NemDec
00005EFE 46FC 2300                  		move	#$2300,sr
00005F02 7000                       		moveq	#0,d0
00005F04 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005F08 E948                       		lsl.w	#4,d0
00005F0A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00005F10 45F2 0000                  		lea	(a2,d0.w),a2
00005F14 7000                       		moveq	#0,d0
00005F16 1012                       		move.b	(a2),d0
00005F18 6700                       		beq.s	loc_37FC
00005F1A 6100 B486                  		bsr.w	LoadPLC		; load level patterns
00005F1E                            
00005F1E                            loc_37FC:
00005F1E 7001                       		moveq	#1,d0
00005F20 6100 B480                  		bsr.w	LoadPLC		; load standard	patterns
00005F24 0C38 0001 FFF6                     cmp.b    #1,($FFFFFFF6).w
00005F2A 6700                               beq.s    ShadLife_Load
00005F2C 0C38 0002 FFF6             		cmp.b	#2, ($FFFFFFF6).w
00005F32 6700                       		beq.s	MetLife_Load
00005F34 0C38 0003 FFF6             		cmp.b	#3, ($FFFFFFF6).w
00005F3A 6600                       		bne.s	Level_ClrRam
00005F3C 7022                       		moveq	#$22,d0
00005F3E 6100 B462                  		bsr.w	LoadPLC
00005F42 4EF9 0000 0000             		jmp		Level_ClrRam
00005F48                            
00005F48                            MetLife_Load:
00005F48 7021                               moveq    #$21,d0
00005F4A 6100 B456                          bsr.w    LoadPLC
00005F4E 4EF9 0000 0000             		jmp		Level_ClrRam
00005F54                            
00005F54                            ShadLife_Load:
00005F54 7020                               moveq    #$20,d0
00005F56 6100 B44A                          bsr.w    LoadPLC
00005F5A                            
00005F5A                            Level_ClrRam:
00005F5A 43F8 D000                  		lea	($FFFFD000).w,a1
00005F5E 7000                       		moveq	#0,d0
00005F60 323C 07FF                  		move.w	#$7FF,d1
00005F64                            
00005F64                            Level_ClrObjRam:
00005F64 22C0                       		move.l	d0,(a1)+
00005F66 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00005F6A                            
00005F6A 43F8 F628                  		lea	($FFFFF628).w,a1
00005F6E 7000                       		moveq	#0,d0
00005F70 323C 0015                  		move.w	#$15,d1
00005F74                            
00005F74                            Level_ClrVars:
00005F74 22C0                       		move.l	d0,(a1)+
00005F76 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00005F7A                            
00005F7A 43F8 F700                  		lea	($FFFFF700).w,a1
00005F7E 7000                       		moveq	#0,d0
00005F80 323C 003F                  		move.w	#$3F,d1
00005F84                            
00005F84                            Level_ClrVars2:
00005F84 22C0                       		move.l	d0,(a1)+
00005F86 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00005F8A                            
00005F8A 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005F8E 7000                       		moveq	#0,d0
00005F90 323C 0047                  		move.w	#$47,d1
00005F94                            
00005F94                            Level_ClrVars3:
00005F94 22C0                       		move.l	d0,(a1)+
00005F96 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00005F9A                            
00005F9A 46FC 2700                  		move	#$2700,sr
00005F9E 6100 B072                  		bsr.w	ClearScreen
00005FA2 4DF9 00C0 0004             		lea	($C00004).l,a6
00005FA8 3CBC 8B03                  		move.w	#$8B03,(a6)
00005FAC 3CBC 8230                  		move.w	#$8230,(a6)
00005FB0 3CBC 8407                  		move.w	#$8407,(a6)
00005FB4 3CBC 857C                  		move.w	#$857C,(a6)
00005FB8 3CBC 9001                  		move.w	#$9001,(a6)
00005FBC 3CBC 8004                  		move.w	#$8004,(a6)
00005FC0 3CBC 8720                  		move.w	#$8720,(a6)
00005FC4 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005FCA 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005FCE 4278 C800                  		clr.w	($FFFFC800).w
00005FD2 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00005FDA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00005FE0 6600                       		bne.s	Level_LoadPal	; if not, branch
00005FE2 3CBC 8014                  		move.w	#$8014,(a6)
00005FE6 7000                       		moveq	#0,d0
00005FE8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00005FEC D040                       		add.w	d0,d0
00005FEE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00005FF4 3031 0000                  		move.w	(a1,d0.w),d0
00005FF8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00005FFC 31C0 F648                  		move.w	d0,($FFFFF648).w
00006000 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00006004 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00006008 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000600C 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00006012                            
00006012                            Level_LoadPal:
00006012 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00006018 46FC 2300                  		move	#$2300,sr
0000601C 7003                       		moveq	#3,d0
0000601E 0C38 0001 FFF6             		cmpi.b	 #$01, ($FFFFFFF6).w ; is the player Shadow?
00006024 6700                               beq.s   Level_LoadPal_shad ; if not, cancel
00006026 0C38 0003 FFF6             		cmpi.b	 #$03, ($FFFFFFF6).w ; is the player Mighty?
0000602C 6600                       		bne.s	Level_LoadPal_cont
0000602E 7016                       		moveq	#$16,d0
00006030 4EF9 0000 0000             		jmp		Level_LoadPal_cont
00006036                            
00006036                            Level_LoadPal_shad:
00006036 7015                               moveq   #$15,d0 ; $15 is the number of the palette ID in "pallet pointers.asm"
00006038                                 
00006038                            Level_LoadPal_cont:
00006038 6100 C672                  		bsr.w	PalLoad2	; load Sonic's pallet line
0000603C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00006042 6600                       		bne.s	Level_GetBgm	; if not, branch
00006044 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00006046 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
0000604C 6600                       		bne.s	Level_WaterPal	; if not, branch
0000604E 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00006050                            
00006050                            Level_WaterPal:
00006050 6100 C692                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00006054 4A38 FE30                  		tst.b	($FFFFFE30).w
00006058 6700                       		beq.s	Level_GetBgm
0000605A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00006060                            
00006060                            ; NineKode begins here - How to play different songs on different acts
00006060                             
00006060                            Level_GetBgm:
00006060 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00006064 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00006068 7000                       		moveq	#0,d0
0000606A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000606E                             
0000606E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00006074 6600                       		bne.s	Level_GetBgm2	; if not, branch
00006076 43F9 0000 5E8C             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0000607C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000607E                             
0000607E                            Level_GetBgm2:
0000607E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00006084 6600                       		bne.s	Level_GetBgm3	; if not, branch
00006086 43F9 0000 5E94             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0000608C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000608E                             
0000608E                            Level_GetBgm3:
0000608E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00006094 6600                       		bne.s	Level_GetBgm4	; if not, branch
00006096 43F9 0000 5E9A             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0000609C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000609E                             
0000609E                            Level_GetBgm4:
0000609E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000060A4 6600                       		bne.s	Level_PlayBgm	; if not, branch
000060A6 43F9 0000 5EA0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000060AC                             
000060AC                            Level_PlayBgm:
000060AC 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
000060B0 6100 B056                  		bsr.w	PlaySound	; play music
000060B4 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
000060BA                             
000060BA                            ; NineKode ends here
000060BA                            
000060BA                            Level_TtlCard:
000060BA 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000060C0 6100 D642                  		bsr.w	DelayProgram
000060C4 4EB9 0000 0000             		jsr	ObjectsLoad
000060CA 4EB9 0000 0000             		jsr	BuildSprites
000060D0 6100 B33C                  		bsr.w	RunPLC_RAM
000060D4 3038 D108                  		move.w	($FFFFD108).w,d0
000060D8 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000060DC 66DC                       		bne.s	Level_TtlCard	; if not, branch
000060DE 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000060E2 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000060E4 4EB9 0000 0000             		jsr	Hud_Base
000060EA                            
000060EA                            loc_3946:
000060EA 7003                       		moveq	#3,d0
000060EC 6100 C582                  		bsr.w	PalLoad1	; load Sonic's pallet line
000060F0 6100 0000                  		bsr.w	LevelSizeLoad
000060F4 6100 0000                  		bsr.w	DeformBgLayer
000060F8 08F8 0002 F754             		bset	#2,($FFFFF754).w
000060FE 6100 0000                  		bsr.w	LoadZoneTiles	; load level art
00006102 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00006106 6100 0000                  		bsr.w	LoadTilesFromStart
0000610A 4EB9 0000 0000             		jsr	FloorLog_Unk
00006110 6100 0000                  		bsr.w	ColIndexLoad
00006114 6100 0000                  		bsr.w	LZWaterEffects
00006118 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000611E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00006122 6B00                       		bmi.s	Level_ChkDebug
00006124 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000612A                            
0000612A                            Level_ChkDebug:
0000612A 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000612E 6700                       		beq.s	Level_ChkWater	; if not, branch
00006130 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00006136 6700                       		beq.s	Level_ChkWater	; if not, branch
00006138 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000613E                            
0000613E                            Level_ChkWater:
0000613E 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00006144 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000614A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00006150 6600                       		bne.s	Level_LoadObj	; if not, branch
00006152 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00006158 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000615E 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00006164 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000616A                            
0000616A                            Level_LoadObj:
0000616A 4EB9 0000 0000             		jsr	ObjPosLoad
00006170 4EB9 0000 0000             		jsr	ObjectsLoad
00006176 4EB9 0000 0000             		jsr	BuildSprites
0000617C 7000                       		moveq	#0,d0
0000617E 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00006182 6600                       		bne.s	loc_39E8	; if yes, branch
00006184 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006188 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000618C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00006190                            
00006190                            loc_39E8:
00006190 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00006194 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00006198 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000619C 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000061A0 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000061A4 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000061A8 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000061AC 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000061B0 6100 0000                  		bsr.w	OscillateNumInit
000061B4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000061BA 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
000061C0 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000061C6 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000061CC 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
000061D2 7000                       		moveq	#0,d0
000061D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000061D8 E548                       		lsl.w	#2,d0
000061DA 2271 0000                  		movea.l	(a1,d0.w),a1
000061DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000061E2 6A00                       		bpl.s	Level_Demo	; if yes, branch
000061E4 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000061EA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000061EE 5340                       		subq.w	#1,d0
000061F0 E548                       		lsl.w	#2,d0
000061F2 2271 0000                  		movea.l	(a1,d0.w),a1
000061F6                            
000061F6                            Level_Demo:
000061F6 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000061FC 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00006200 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00006206 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000620A 6A00                       		bpl.s	Level_ChkWaterPal
0000620C 31FC 021C F614             		move.w	#540,($FFFFF614).w
00006212 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00006218 6600                       		bne.s	Level_ChkWaterPal
0000621A 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00006220                            
00006220                            Level_ChkWaterPal:
00006220 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00006226 6600                       		bne.s	Level_Delay	; if not, branch
00006228 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
0000622A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00006230 6600                       		bne.s	Level_WaterPal2	; if not, branch
00006232 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00006234                            
00006234                            Level_WaterPal2:
00006234 6100 C4EA                  		bsr.w	PalLoad4_Water
00006238                            
00006238                            Level_Delay:
00006238 323C 0003                  		move.w	#3,d1
0000623C                            
0000623C                            Level_DelayLoop:
0000623C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00006242 6100 D4C0                  		bsr.w	DelayProgram
00006246 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000624A                            
0000624A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00006250 6100 C0C0                  		bsr.w	Pal_FadeTo2
00006254 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00006258 6B00                       		bmi.s	Level_ClrCardArt
0000625A 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000625E 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00006262 5838 D124                  		addq.b	#4,($FFFFD124).w
00006266 5838 D164                  		addq.b	#4,($FFFFD164).w
0000626A 6000                       		bra.s	Level_StartGame
0000626C                            ; ===========================================================================
0000626C                            
0000626C                            Level_ClrCardArt:
0000626C 7002                       		moveq	#2,d0
0000626E 4EB9 0000 13A2             		jsr	(LoadPLC).l	; load explosion patterns
00006274 7000                       		moveq	#0,d0
00006276 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000627A 0640 0015                  		addi.w	#$15,d0
0000627E 4EB9 0000 13A2             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00006284                            
00006284                            Level_StartGame:
00006284 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000628A                            
0000628A                            ; ---------------------------------------------------------------------------
0000628A                            ; Main level loop (when	all title card and loading sequences are finished)
0000628A                            ; ---------------------------------------------------------------------------
0000628A                            
0000628A                            Level_MainLoop:
0000628A 6100 AE8E                          bsr.w    PauseGame
0000628E 11FC 0008 F62A                     move.b    #8,($FFFFF62A).w
00006294 6100 D46E                          bsr.w    DelayProgram
00006298 5278 FE04                          addq.w    #1,($FFFFFE04).w    ; add 1 to level timer
0000629C 6100 0000                          bsr.w    MoveSonicInDemo
000062A0 6100 0000                          bsr.w    LZWaterEffects
000062A4 4EB9 0000 0000                     jsr    ObjectsLoad
000062AA 4A78 FE02                          tst.w    ($FFFFFE02).w    ; is the level set to restart?
000062AE 6600 FBF6                          bne.w    Level        ; if yes, branch
000062B2 4A78 FE08                          tst.w    ($FFFFFE08).w
000062B6 6600                               bne.s    loc_3B10
000062B8 0C38 0006 D024                     cmpi.b    #6,($FFFFD024).w    ; is Sonic dying?
000062BE 6400                               bcc.s    loc_3B14        ; if yes, branch
000062C0                            
000062C0                            loc_3B10:
000062C0 6100 0000                          bsr.w    DeformBgLayer
000062C4                            
000062C4                            loc_3B14:
000062C4 4EB9 0000 0000                     jsr    BuildSprites
000062CA 4EB9 0000 0000                     jsr    ObjPosLoad
000062D0 6100 B60A                          bsr.w    PalCycle_Load
000062D4 6100 B138                          bsr.w    RunPLC_RAM
000062D8 6100 0000                          bsr.w    OscillateNumDo
000062DC 6100 0000                          bsr.w    ChangeRingFrame
000062E0 6100 0000                          bsr.w    SignpostArtLoad
000062E4 0C38 0008 F600                     cmpi.b    #8,($FFFFF600).w
000062EA 6700                               beq.s    Level_ChkDemo    ; if screen mode is 08 (demo), branch
000062EC 0C38 000C F600                     cmpi.b    #$C,($FFFFF600).w
000062F2 6700 FF96                          beq.w    Level_MainLoop    ; if screen mode is $0C    (level), branch
000062F6 4E75                               rts            ; quit
000062F8                            ; ===========================================================================
000062F8                            
000062F8                            Level_ChkDemo:				; XREF: Level_MainLoop
000062F8 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000062FC 6600                       		bne.s	Level_EndDemo	; if yes, branch
000062FE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00006302 6700                       		beq.s	Level_EndDemo	; if not, branch
00006304 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000630A 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000630E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006314 4E75                       		rts	
00006316                            ; ===========================================================================
00006316                            
00006316                            Level_EndDemo:				; XREF: Level_ChkDemo
00006316 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
0000631C 6600                       		bne.s	loc_3B88	; if not, branch
0000631E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006324 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006328 6A00                       		bpl.s	loc_3B88	; if yes, branch
0000632A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00006330                            
00006330                            loc_3B88:
00006330 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00006336 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000633C 4278 F794                  		clr.w	($FFFFF794).w
00006340                            
00006340                            loc_3B98:
00006340 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00006346 6100 D3BC                  		bsr.w	DelayProgram
0000634A 6100 0000                  		bsr.w	MoveSonicInDemo
0000634E 4EB9 0000 0000             		jsr	ObjectsLoad
00006354 4EB9 0000 0000             		jsr	BuildSprites
0000635A 4EB9 0000 0000             		jsr	ObjPosLoad
00006360 5378 F794                  		subq.w	#1,($FFFFF794).w
00006364 6A00                       		bpl.s	loc_3BC8
00006366 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000636C 6100 C07A                  		bsr.w	Pal_FadeOut
00006370                            
00006370                            loc_3BC8:
00006370 4A78 F614                  		tst.w	($FFFFF614).w
00006374 66CA                       		bne.s	loc_3B98
00006376 4E75                       		rts	
00006378                            ; ===========================================================================
00006378                            ; ---------------------------------------------------------------------------
00006378                            ; Subroutine to	do special water effects in Labyrinth Zone
00006378                            ; ---------------------------------------------------------------------------
00006378                            
00006378                            LZWaterEffects:				; XREF: Level
00006378 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000637E 6600                       		bne.s	locret_3C28	; if not, branch
00006380 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00006386 6400                       		bcc.s	LZMoveWater
00006388 6100 0000                  		bsr.w	LZWindTunnels
0000638C 6100 0000                  		bsr.w	LZWaterSlides
00006390 6100 0000                  		bsr.w	LZDynamicWater
00006394                            
00006394                            LZMoveWater:
00006394 4238 F64E                  		clr.b	($FFFFF64E).w
00006398 7000                       		moveq	#0,d0
0000639A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000639E E248                       		lsr.w	#1,d0
000063A0 D078 F648                  		add.w	($FFFFF648).w,d0
000063A4 31C0 F646                  		move.w	d0,($FFFFF646).w
000063A8 3038 F646                  		move.w	($FFFFF646).w,d0
000063AC 9078 F704                  		sub.w	($FFFFF704).w,d0
000063B0 6400                       		bcc.s	loc_3C1A
000063B2 4A40                       		tst.w	d0
000063B4 6A00                       		bpl.s	loc_3C1A
000063B6 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000063BC 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000063C2                            
000063C2                            loc_3C1A:
000063C2 0C40 00DF                  		cmpi.w	#$DF,d0
000063C6 6500                       		bcs.s	loc_3C24
000063C8 303C 00DF                  		move.w	#$DF,d0
000063CC                            
000063CC                            loc_3C24:
000063CC 11C0 F625                  		move.b	d0,($FFFFF625).w
000063D0                            
000063D0                            locret_3C28:
000063D0 4E75                       		rts	
000063D2                            ; ===========================================================================
000063D2                            ; ---------------------------------------------------------------------------
000063D2                            ; Labyrinth default water heights
000063D2                            ; ---------------------------------------------------------------------------
000063D2                            WaterHeight:	incbin	misc\lz_heigh.bin
000063DA                            		even
000063DA                            ; ===========================================================================
000063DA                            
000063DA                            ; ---------------------------------------------------------------------------
000063DA                            ; Labyrinth dynamic water routines
000063DA                            ; ---------------------------------------------------------------------------
000063DA                            
000063DA                            LZDynamicWater:				; XREF: LZWaterEffects
000063DA 7000                       		moveq	#0,d0
000063DC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000063E0 D040                       		add.w	d0,d0
000063E2 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000063E6 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000063EA 7200                       		moveq	#0,d1
000063EC 1238 F64C                  		move.b	($FFFFF64C).w,d1
000063F0 3038 F64A                  		move.w	($FFFFF64A).w,d0
000063F4 9078 F648                  		sub.w	($FFFFF648).w,d0
000063F8 6700                       		beq.s	locret_3C5A
000063FA 6400                       		bcc.s	loc_3C56
000063FC 4441                       		neg.w	d1
000063FE                            
000063FE                            loc_3C56:
000063FE D378 F648                  		add.w	d1,($FFFFF648).w
00006402                            
00006402                            locret_3C5A:
00006402 4E75                       		rts	
00006404                            ; ===========================================================================
00006404 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00006406 0000                       		dc.w DynWater_LZ2-DynWater_Index
00006408 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000640A 0000                       		dc.w DynWater_SBZ3-DynWater_Index
0000640C                            ; ===========================================================================
0000640C                            
0000640C                            DynWater_LZ1:				; XREF: DynWater_Index
0000640C 3038 F700                  		move.w	($FFFFF700).w,d0
00006410 1438 F64D                  		move.b	($FFFFF64D).w,d2
00006414 6600                       		bne.s	loc_3CD0
00006416 323C 00B8                  		move.w	#$B8,d1
0000641A 0C40 0600                  		cmpi.w	#$600,d0
0000641E 6500                       		bcs.s	loc_3CB4
00006420 323C 0108                  		move.w	#$108,d1
00006424 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000642A 6500                       		bcs.s	loc_3CBA
0000642C 0C40 0C00                  		cmpi.w	#$C00,d0
00006430 6500                       		bcs.s	loc_3CB4
00006432 323C 0318                  		move.w	#$318,d1
00006436 0C40 1080                  		cmpi.w	#$1080,d0
0000643A 6500                       		bcs.s	loc_3CB4
0000643C 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00006442 323C 05C8                  		move.w	#$5C8,d1
00006446 0C40 1380                  		cmpi.w	#$1380,d0
0000644A 6500                       		bcs.s	loc_3CB4
0000644C 323C 03A8                  		move.w	#$3A8,d1
00006450 B278 F648                  		cmp.w	($FFFFF648).w,d1
00006454 6600                       		bne.s	loc_3CB4
00006456 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000645C                            
0000645C                            loc_3CB4:
0000645C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00006460 4E75                       		rts	
00006462                            ; ===========================================================================
00006462                            
00006462                            loc_3CBA:				; XREF: DynWater_LZ1
00006462 0C40 0C80                  		cmpi.w	#$C80,d0
00006466 65F4                       		bcs.s	loc_3CB4
00006468 323C 00E8                  		move.w	#$E8,d1
0000646C 0C40 1500                  		cmpi.w	#$1500,d0
00006470 65EA                       		bcs.s	loc_3CB4
00006472 323C 0108                  		move.w	#$108,d1
00006476 60E4                       		bra.s	loc_3CB4
00006478                            ; ===========================================================================
00006478                            
00006478                            loc_3CD0:				; XREF: DynWater_LZ1
00006478 5302                       		subq.b	#1,d2
0000647A 6600                       		bne.s	locret_3CF4
0000647C 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00006482 6400                       		bcc.s	locret_3CF4
00006484 323C 03A8                  		move.w	#$3A8,d1
00006488 0C40 1300                  		cmpi.w	#$1300,d0
0000648C 6500                       		bcs.s	loc_3CF0
0000648E 323C 0108                  		move.w	#$108,d1
00006492 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00006498                            
00006498                            loc_3CF0:
00006498 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000649C                            
0000649C                            locret_3CF4:
0000649C 4E75                       		rts	
0000649E                            ; ===========================================================================
0000649E                            
0000649E                            DynWater_LZ2:				; XREF: DynWater_Index
0000649E 3038 F700                  		move.w	($FFFFF700).w,d0
000064A2 323C 0328                  		move.w	#$328,d1
000064A6 0C40 0500                  		cmpi.w	#$500,d0
000064AA 6500                       		bcs.s	loc_3D12
000064AC 323C 03C8                  		move.w	#$3C8,d1
000064B0 0C40 0B00                  		cmpi.w	#$B00,d0
000064B4 6500                       		bcs.s	loc_3D12
000064B6 323C 0428                  		move.w	#$428,d1
000064BA                            
000064BA                            loc_3D12:
000064BA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000064BE 4E75                       		rts	
000064C0                            ; ===========================================================================
000064C0                            
000064C0                            DynWater_LZ3:				; XREF: DynWater_Index
000064C0 3038 F700                  		move.w	($FFFFF700).w,d0
000064C4 1438 F64D                  		move.b	($FFFFF64D).w,d2
000064C8 6600                       		bne.s	loc_3D5E
000064CA 323C 0900                  		move.w	#$900,d1
000064CE 0C40 0600                  		cmpi.w	#$600,d0
000064D2 6500                       		bcs.s	loc_3D54
000064D4 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000064DA 6500                       		bcs.s	loc_3D54
000064DC 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000064E2 6400                       		bcc.s	loc_3D54
000064E4 323C 04C8                  		move.w	#$4C8,d1
000064E8 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
000064EE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000064F4 303C 00B7                  		move.w	#$B7,d0
000064F8 6100 AC14                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000064FC                            
000064FC                            loc_3D54:
000064FC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00006500 31C1 F648                  		move.w	d1,($FFFFF648).w
00006504 4E75                       		rts	
00006506                            ; ===========================================================================
00006506                            
00006506                            loc_3D5E:				; XREF: DynWater_LZ3
00006506 5302                       		subq.b	#1,d2
00006508 6600                       		bne.s	loc_3DA8
0000650A 323C 04C8                  		move.w	#$4C8,d1
0000650E 0C40 0770                  		cmpi.w	#$770,d0
00006512 6500                       		bcs.s	loc_3DA2
00006514 323C 0308                  		move.w	#$308,d1
00006518 0C40 1400                  		cmpi.w	#$1400,d0
0000651C 6500                       		bcs.s	loc_3DA2
0000651E 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00006524 6700                       		beq.s	loc_3D8E
00006526 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000652C 6400                       		bcc.s	loc_3D8E
0000652E 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00006534 6400                       		bcc.s	loc_3DA2
00006536                            
00006536                            loc_3D8E:
00006536 323C 0508                  		move.w	#$508,d1
0000653A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000653E 0C40 1770                  		cmpi.w	#$1770,d0
00006542 6500                       		bcs.s	loc_3DA2
00006544 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000654A                            
0000654A                            loc_3DA2:
0000654A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000654E 4E75                       		rts	
00006550                            ; ===========================================================================
00006550                            
00006550                            loc_3DA8:
00006550 5302                       		subq.b	#1,d2
00006552 6600                       		bne.s	loc_3DD2
00006554 323C 0508                  		move.w	#$508,d1
00006558 0C40 1860                  		cmpi.w	#$1860,d0
0000655C 6500                       		bcs.s	loc_3DCC
0000655E 323C 0188                  		move.w	#$188,d1
00006562 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00006566 6400                       		bcc.s	loc_3DC6
00006568 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000656C 6600                       		bne.s	loc_3DCC
0000656E                            
0000656E                            loc_3DC6:
0000656E 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00006574                            
00006574                            loc_3DCC:
00006574 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00006578 4E75                       		rts	
0000657A                            ; ===========================================================================
0000657A                            
0000657A                            loc_3DD2:
0000657A 5302                       		subq.b	#1,d2
0000657C 6600                       		bne.s	loc_3E0E
0000657E 323C 0188                  		move.w	#$188,d1
00006582 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00006586 6500                       		bcs.s	loc_3E04
00006588 323C 0900                  		move.w	#$900,d1
0000658C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00006590 6500                       		bcs.s	loc_3E04
00006592 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00006598 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000659E 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000065A4 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000065AA 4E75                       		rts	
000065AC                            ; ===========================================================================
000065AC                            
000065AC                            loc_3E04:
000065AC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000065B0 31C1 F648                  		move.w	d1,($FFFFF648).w
000065B4 4E75                       		rts	
000065B6                            ; ===========================================================================
000065B6                            
000065B6                            loc_3E0E:
000065B6 0C40 1E00                  		cmpi.w	#$1E00,d0
000065BA 6500                       		bcs.s	locret_3E1A
000065BC 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000065C2                            
000065C2                            locret_3E1A:
000065C2 4E75                       		rts	
000065C4                            ; ===========================================================================
000065C4                            
000065C4                            DynWater_SBZ3:				; XREF: DynWater_Index
000065C4 323C 0228                  		move.w	#$228,d1
000065C8 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000065CE 6500                       		bcs.s	loc_3E2C
000065D0 323C 04C8                  		move.w	#$4C8,d1
000065D4                            
000065D4                            loc_3E2C:
000065D4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000065D8 4E75                       		rts
000065DA                            
000065DA                            ; ---------------------------------------------------------------------------
000065DA                            ; Labyrinth Zone "wind tunnels"	subroutine
000065DA                            ; ---------------------------------------------------------------------------
000065DA                            
000065DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065DA                            
000065DA                            
000065DA                            LZWindTunnels:				; XREF: LZWaterEffects
000065DA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000065DE 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000065E2 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000065E8 7000                       		moveq	#0,d0
000065EA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000065EE E748                       		lsl.w	#3,d0
000065F0 D4C0                       		adda.w	d0,a2
000065F2 7200                       		moveq	#0,d1
000065F4 4A38 FE11                  		tst.b	($FFFFFE11).w
000065F8 6600                       		bne.s	loc_3E56
000065FA 7201                       		moveq	#1,d1
000065FC 514A                       		subq.w	#8,a2
000065FE                            
000065FE                            loc_3E56:
000065FE 43F8 D000                  		lea	($FFFFD000).w,a1
00006602                            
00006602                            LZWind_Loop:
00006602 3029 0008                  		move.w	8(a1),d0
00006606 B052                       		cmp.w	(a2),d0
00006608 6500 0000                  		bcs.w	loc_3EF4
0000660C B06A 0004                  		cmp.w	4(a2),d0
00006610 6400 0000                  		bcc.w	loc_3EF4
00006614 3429 000C                  		move.w	$C(a1),d2
00006618 B46A 0002                  		cmp.w	2(a2),d2
0000661C 6500                       		bcs.s	loc_3EF4
0000661E B46A 0006                  		cmp.w	6(a2),d2
00006622 6400                       		bcc.s	loc_3EF4
00006624 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006628 0200 003F                  		andi.b	#$3F,d0
0000662C 6600                       		bne.s	loc_3E90
0000662E 303C 00D0                  		move.w	#$D0,d0
00006632 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play rushing water sound
00006638                            
00006638                            loc_3E90:
00006638 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000663C 6600 0000                  		bne.w	locret_3F0A
00006640 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00006646 6400                       		bcc.s	loc_3F06
00006648 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000664E 0440 0080                  		subi.w	#$80,d0
00006652 B052                       		cmp.w	(a2),d0
00006654 6400                       		bcc.s	LZWind_Move
00006656 7002                       		moveq	#2,d0
00006658 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000665E 6600                       		bne.s	loc_3EBA
00006660 4440                       		neg.w	d0
00006662                            
00006662                            loc_3EBA:
00006662 D169 000C                  		add.w	d0,$C(a1)
00006666                            
00006666                            LZWind_Move:
00006666 5869 0008                  		addq.w	#4,8(a1)
0000666A 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00006670 337C 0000 0012             		move.w	#0,$12(a1)
00006676 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000667C 08E9 0001 0022             		bset	#1,$22(a1)
00006682 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00006688 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000668A 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000668E                            
0000668E                            LZWind_MoveDown:
0000668E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00006694 6700                       		beq.s	locret_3EF2	; if not, branch
00006696 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000669A                            
0000669A                            locret_3EF2:
0000669A 4E75                       		rts	
0000669C                            ; ===========================================================================
0000669C                            
0000669C                            loc_3EF4:				; XREF: LZWindTunnels
0000669C 504A                       		addq.w	#8,a2
0000669E 51C9 FF62                  		dbf	d1,LZWind_Loop
000066A2 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000066A6 6700                       		beq.s	locret_3F0A
000066A8 137C 0000 001C             		move.b	#0,$1C(a1)
000066AE                            
000066AE                            loc_3F06:
000066AE 4238 F7C7                  		clr.b	($FFFFF7C7).w
000066B2                            
000066B2                            locret_3F0A:
000066B2 4E75                       		rts	
000066B4                            ; End of function LZWindTunnels
000066B4                            
000066B4                            ; ===========================================================================
000066B4 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000066BC 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000066CE 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000066DC                            					; XREF: LZWindTunnels
000066DC                            		even
000066DC                            
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            ; Labyrinth Zone water slide subroutine
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            
000066DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066DC                            
000066DC                            
000066DC                            LZWaterSlides:				; XREF: LZWaterEffects
000066DC 43F8 D000                  		lea	($FFFFD000).w,a1
000066E0 0829 0001 0022             		btst	#1,$22(a1)
000066E6 6600                       		bne.s	loc_3F6A
000066E8 3029 000C                  		move.w	$C(a1),d0
000066EC E248                       		lsr.w	#1,d0
000066EE 0240 0380                  		andi.w	#$380,d0
000066F2 1229 0008                  		move.b	8(a1),d1
000066F6 0241 007F                  		andi.w	#$7F,d1
000066FA D041                       		add.w	d1,d0
000066FC 45F8 A400                  		lea	($FFFFA400).w,a2
00006700 1032 0000                  		move.b	(a2,d0.w),d0
00006704 45FA 0000                  		lea	byte_3FCF(pc),a2
00006708 7206                       		moveq	#6,d1
0000670A                            
0000670A                            loc_3F62:
0000670A B022                       		cmp.b	-(a2),d0
0000670C 57C9 FFFC                  		dbeq	d1,loc_3F62
00006710 6700                       		beq.s	LZSlide_Move
00006712                            
00006712                            loc_3F6A:
00006712 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00006716 6700                       		beq.s	locret_3F7A
00006718 337C 0005 003E             		move.w	#5,$3E(a1)
0000671E 4238 F7CA                  		clr.b	($FFFFF7CA).w
00006722                            
00006722                            locret_3F7A:
00006722 4E75                       		rts	
00006724                            ; ===========================================================================
00006724                            
00006724                            LZSlide_Move:				; XREF: LZWaterSlides
00006724 0C41 0003                  		cmpi.w	#3,d1
00006728 6400                       		bcc.s	loc_3F84
0000672A 4E71                       		nop	
0000672C                            
0000672C                            loc_3F84:
0000672C 08A9 0000 0022             		bclr	#0,$22(a1)
00006732 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00006736 1340 0014                  		move.b	d0,$14(a1)
0000673A 6A00                       		bpl.s	loc_3F9A
0000673C 08E9 0000 0022             		bset	#0,$22(a1)
00006742                            
00006742                            loc_3F9A:
00006742 4229 0015                  		clr.b	$15(a1)
00006746 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000674C 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00006752 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00006756 0200 001F                  		andi.b	#$1F,d0
0000675A 6600                       		bne.s	locret_3FBE
0000675C 303C 00D0                  		move.w	#$D0,d0
00006760 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play water sound
00006766                            
00006766                            locret_3FBE:
00006766 4E75                       		rts	
00006768                            ; End of function LZWaterSlides
00006768                            
00006768                            ; ===========================================================================
00006768 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00006777 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00006778                            		even
00006778                            
00006778                            ; ---------------------------------------------------------------------------
00006778                            ; Subroutine to	move Sonic in demo mode
00006778                            ; ---------------------------------------------------------------------------
00006778                            
00006778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006778                            
00006778                            
00006778                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00006778 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000677C 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000677E 4E75                       		rts	
00006780                            ; ===========================================================================
00006780                            
00006780                            ; This is an unused subroutine for recording a demo
00006780                            
00006780                            MoveDemo_Record:
00006780 43F9 0008 0000             		lea	($80000).l,a1
00006786 3038 F790                  		move.w	($FFFFF790).w,d0
0000678A D2C0                       		adda.w	d0,a1
0000678C 1038 F604                  		move.b	($FFFFF604).w,d0
00006790 B011                       		cmp.b	(a1),d0
00006792 6600                       		bne.s	loc_3FFA
00006794 5229 0001                  		addq.b	#1,1(a1)
00006798 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000679E 6700                       		beq.s	loc_3FFA
000067A0 4E75                       		rts	
000067A2                            ; ===========================================================================
000067A2                            
000067A2                            loc_3FFA:				; XREF: MoveDemo_Record
000067A2 1340 0002                  		move.b	d0,2(a1)
000067A6 137C 0000 0003             		move.b	#0,3(a1)
000067AC 5478 F790                  		addq.w	#2,($FFFFF790).w
000067B0 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000067B6 4E75                       		rts	
000067B8                            ; ===========================================================================
000067B8                            
000067B8                            MoveDemo_On:				; XREF: MoveSonicInDemo
000067B8 4A38 F604                  		tst.b	($FFFFF604).w
000067BC 6A00                       		bpl.s	loc_4022
000067BE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000067C2 6B00                       		bmi.s	loc_4022
000067C4 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000067CA                            
000067CA                            loc_4022:
000067CA 43F9 0000 0000             		lea	(Demo_Index).l,a1
000067D0 7000                       		moveq	#0,d0
000067D2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000067D6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000067DC 6600                       		bne.s	loc_4038
000067DE 7006                       		moveq	#6,d0
000067E0                            
000067E0                            loc_4038:
000067E0 E548                       		lsl.w	#2,d0
000067E2 2271 0000                  		movea.l	(a1,d0.w),a1
000067E6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000067EA 6A00                       		bpl.s	loc_4056
000067EC 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000067F2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000067F6 5340                       		subq.w	#1,d0
000067F8 E548                       		lsl.w	#2,d0
000067FA 2271 0000                  		movea.l	(a1,d0.w),a1
000067FE                            
000067FE                            loc_4056:
000067FE 3038 F790                  		move.w	($FFFFF790).w,d0
00006802 D2C0                       		adda.w	d0,a1
00006804 1011                       		move.b	(a1),d0
00006806 41F8 F604                  		lea	($FFFFF604).w,a0
0000680A 1200                       		move.b	d0,d1
0000680C 1428 FFFE                  		move.b	-2(a0),d2
00006810 B500                       		eor.b	d2,d0
00006812 10C1                       		move.b	d1,(a0)+
00006814 C001                       		and.b	d1,d0
00006816 10C0                       		move.b	d0,(a0)+
00006818 5338 F792                  		subq.b	#1,($FFFFF792).w
0000681C 6400                       		bcc.s	locret_407E
0000681E 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00006824 5478 F790                  		addq.w	#2,($FFFFF790).w
00006828                            
00006828                            locret_407E:
00006828 4E75                       		rts	
0000682A                            ; End of function MoveSonicInDemo
0000682A                            
0000682A                            ; ===========================================================================
0000682A                            ; ---------------------------------------------------------------------------
0000682A                            ; Demo sequence	pointers
0000682A                            ; ---------------------------------------------------------------------------
0000682A                            Demo_Index:
0000682A                            	include "_inc\Demo pointers for intro.asm"
0000682A                            ; ---------------------------------------------------------------------------
0000682A                            ; Demo sequence	pointers
0000682A                            ; ---------------------------------------------------------------------------
0000682A 0000 0000                  	dc.l Demo_GHZ
0000682E 0000 0000                  	dc.l Demo_GHZ
00006832 0000 0000                  	dc.l Demo_MZ
00006836 0000 0000                  	dc.l Demo_MZ
0000683A 0000 0000                  	dc.l Demo_SYZ
0000683E 0000 0000                  	dc.l Demo_SYZ
00006842 0000 0000                  	dc.l Demo_SS
00006846 0000 0000                  	dc.l Demo_SS
00006846 0000 0000                  	dc.l Demo_SS
0000684A                            
0000684A                            Demo_EndIndex:
0000684A                            	include "_inc\Demo pointers for ending.asm"
0000684A                            ; ---------------------------------------------------------------------------
0000684A                            ; Demo (ending) sequence pointers
0000684A                            ; ---------------------------------------------------------------------------
0000684A 0000 0000                  	dc.l Demo_EndGHZ1
0000684E 0000 0000                  	dc.l Demo_EndMZ
00006852 0000 0000                  	dc.l Demo_EndSYZ
00006856 0000 0000                  	dc.l Demo_EndLZ
0000685A 0000 0000                  	dc.l Demo_EndSLZ
0000685E 0000 0000                  	dc.l Demo_EndSBZ1
00006862 0000 0000                  	dc.l Demo_EndSBZ2
00006866 0000 0000                  	dc.l Demo_EndGHZ2
00006866 0000 0000                  	dc.l Demo_EndGHZ2
0000686A                            
0000686A 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000687A 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000688A 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000689A                            		even
0000689A                            
0000689A                            ; ---------------------------------------------------------------------------
0000689A                            ; Collision index loading subroutine
0000689A                            ; ---------------------------------------------------------------------------
0000689A                            
0000689A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000689A                            
0000689A                            
0000689A                            ColIndexLoad:				; XREF: Level
0000689A 7000                       		moveq	#0,d0
0000689C 1038 FE10                  		move.b	($FFFFFE10).w,d0
000068A0 E548                       		lsl.w	#2,d0
000068A2 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000068A8 4E75                       		rts	
000068AA                            ; End of function ColIndexLoad
000068AA                            
000068AA                            ; ===========================================================================
000068AA                            ; ---------------------------------------------------------------------------
000068AA                            ; Collision index pointers
000068AA                            ; ---------------------------------------------------------------------------
000068AA                            ColPointers:
000068AA                            	include "_inc\Collision index pointers.asm"
000068AA                            ; ---------------------------------------------------------------------------
000068AA                            ; Collision index pointers
000068AA                            ; ---------------------------------------------------------------------------
000068AA 0000 0000                  	dc.l Col_GHZ
000068AE 0000 0000                  	dc.l Col_LZ
000068B2 0000 0000                  	dc.l Col_MZ
000068B6 0000 0000                  	dc.l Col_SLZ
000068BA 0000 0000                  	dc.l Col_SYZ
000068BE 0000 0000                  	dc.l Col_SBZ
000068BE 0000 0000                  	dc.l Col_SBZ
000068C2                            
000068C2                            ; ---------------------------------------------------------------------------
000068C2                            ; Oscillating number subroutine
000068C2                            ; ---------------------------------------------------------------------------
000068C2                            
000068C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068C2                            
000068C2                            
000068C2                            OscillateNumInit:			; XREF: Level
000068C2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000068C6 45F9 0000 0000             		lea	(Osc_Data).l,a2
000068CC 7220                       		moveq	#$20,d1
000068CE                            
000068CE                            Osc_Loop:
000068CE 32DA                       		move.w	(a2)+,(a1)+
000068D0 51C9 FFFC                  		dbf	d1,Osc_Loop
000068D4 4E75                       		rts	
000068D6                            ; End of function OscillateNumInit
000068D6                            
000068D6                            ; ===========================================================================
000068D6 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000068DA 0000 0080                  		dc.w 0,	$80
000068DE 0000 0080                  		dc.w 0,	$80
000068E2 0000 0080                  		dc.w 0,	$80
000068E6 0000 0080                  		dc.w 0,	$80
000068EA 0000 0080                  		dc.w 0,	$80
000068EE 0000 0080                  		dc.w 0,	$80
000068F2 0000 0080                  		dc.w 0,	$80
000068F6 0000 0080                  		dc.w 0,	$80
000068FA 0000 50F0                  		dc.w 0,	$50F0
000068FE 011E 2080                  		dc.w $11E, $2080
00006902 00B4 3080                  		dc.w $B4, $3080
00006906 010E 5080                  		dc.w $10E, $5080
0000690A 01C2 7080                  		dc.w $1C2, $7080
0000690E 0276 0080                  		dc.w $276, $80
00006912 0000 0080                  		dc.w 0,	$80
00006916 0000                       		dc.w 0
00006918                            		even
00006918                            
00006918                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006918                            
00006918                            
00006918                            OscillateNumDo:				; XREF: Level
00006918 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000691E 6400                       		bcc.s	locret_41C4
00006920 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00006924 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000692A 3619                       		move.w	(a1)+,d3
0000692C 720F                       		moveq	#$F,d1
0000692E                            
0000692E                            loc_4184:
0000692E 341A                       		move.w	(a2)+,d2
00006930 381A                       		move.w	(a2)+,d4
00006932 0303                       		btst	d1,d3
00006934 6600                       		bne.s	loc_41A4
00006936 3029 0002                  		move.w	2(a1),d0
0000693A D042                       		add.w	d2,d0
0000693C 3340 0002                  		move.w	d0,2(a1)
00006940 D151                       		add.w	d0,0(a1)
00006942 B811                       		cmp.b	0(a1),d4
00006944 6200                       		bhi.s	loc_41BA
00006946 03C3                       		bset	d1,d3
00006948 6000                       		bra.s	loc_41BA
0000694A                            ; ===========================================================================
0000694A                            
0000694A                            loc_41A4:				; XREF: OscillateNumDo
0000694A 3029 0002                  		move.w	2(a1),d0
0000694E 9042                       		sub.w	d2,d0
00006950 3340 0002                  		move.w	d0,2(a1)
00006954 D151                       		add.w	d0,0(a1)
00006956 B811                       		cmp.b	0(a1),d4
00006958 6300                       		bls.s	loc_41BA
0000695A 0383                       		bclr	d1,d3
0000695C                            
0000695C                            loc_41BA:
0000695C 5849                       		addq.w	#4,a1
0000695E 51C9 FFCE                  		dbf	d1,loc_4184
00006962 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00006966                            
00006966                            locret_41C4:
00006966 4E75                       		rts	
00006968                            ; End of function OscillateNumDo
00006968                            
00006968                            ; ===========================================================================
00006968 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000696C 0002 0018                  		dc.w 2,	$18
00006970 0002 0020                  		dc.w 2,	$20
00006974 0002 0030                  		dc.w 2,	$30
00006978 0004 0020                  		dc.w 4,	$20
0000697C 0008 0008                  		dc.w 8,	8
00006980 0008 0040                  		dc.w 8,	$40
00006984 0004 0040                  		dc.w 4,	$40
00006988 0002 0050                  		dc.w 2,	$50
0000698C 0002 0050                  		dc.w 2,	$50
00006990 0002 0020                  		dc.w 2,	$20
00006994 0003 0030                  		dc.w 3,	$30
00006998 0005 0050                  		dc.w 5,	$50
0000699C 0007 0070                  		dc.w 7,	$70
000069A0 0002 0010                  		dc.w 2,	$10
000069A4 0002 0010                  		dc.w 2,	$10
000069A8                            		even
000069A8                            
000069A8                            ; ---------------------------------------------------------------------------
000069A8                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000069A8                            ; ---------------------------------------------------------------------------
000069A8                            
000069A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A8                            
000069A8                            
000069A8                            ChangeRingFrame:			; XREF: Level
000069A8 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000069AC 6A00                       		bpl.s	loc_421C
000069AE 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000069B4 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000069B8 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000069BE                            
000069BE                            loc_421C:
000069BE 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000069C2 6A00                       		bpl.s	loc_4232
000069C4 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000069CA 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000069CE 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000069D4                            
000069D4                            loc_4232:
000069D4 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000069D8 6A00                       		bpl.s	loc_4250
000069DA 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000069E0 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000069E4 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000069EA 6500                       		bcs.s	loc_4250
000069EC 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000069F2                            
000069F2                            loc_4250:
000069F2 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000069F6 6700                       		beq.s	locret_4272
000069F8 7000                       		moveq	#0,d0
000069FA 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000069FE D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00006A02 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00006A06 EF58                       		rol.w	#7,d0
00006A08 0240 0003                  		andi.w	#3,d0
00006A0C 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00006A10 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00006A14                            
00006A14                            locret_4272:
00006A14 4E75                       		rts	
00006A16                            ; End of function ChangeRingFrame
00006A16                            
00006A16                            ; ---------------------------------------------------------------------------
00006A16                            ; End-of-act signpost pattern loading subroutine
00006A16                            ; ---------------------------------------------------------------------------
00006A16                            
00006A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A16                            
00006A16                            
00006A16                            SignpostArtLoad:			; XREF: Level
00006A16 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00006A1A 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00006A1E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00006A24 6700                       		beq.s	Signpost_Exit	; if yes, branch
00006A26 3038 F700                  		move.w	($FFFFF700).w,d0
00006A2A 3238 F72A                  		move.w	($FFFFF72A).w,d1
00006A2E 0441 0100                  		subi.w	#$100,d1
00006A32 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00006A34 6D00                       		blt.s	Signpost_Exit	; if not, branch
00006A36 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00006A3A 6700                       		beq.s	Signpost_Exit
00006A3C B278 F728                  		cmp.w	($FFFFF728).w,d1
00006A40 6700                       		beq.s	Signpost_Exit
00006A42 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00006A46 4DF9 00C0 0004                     lea    ($C00004).l,a6
00006A4C 2CBC 5420 0003                     move.l    #$54200003,(a6)
00006A52 41F9 0000 0000                     lea    (Art_SonicPost).l,a0
00006A58 0C38 0000 FFF6                     cmp.b    #0,($FFFFFFF6).w    ; is the character actually Sonic?
00006A5E 6700                               beq.s    @player_is_sonic    ; if so, branch
00006A60 41F9 0000 0000                     lea    (Art_ShadowPost).l,a0
00006A66 0C38 0001 FFF6                     cmp.b    #1,($FFFFFFF6).w    ; is the character actually shadow?
00006A6C 6700                               beq.s    @player_is_sonic    ; if so, branch
00006A6E 41F9 0000 0000                     lea    (Art_MetalPost).l,a0
00006A74 0C38 0002 FFF6                     cmp.b    #2,($FFFFFFF6).w    ; is the character actually shadow?
00006A7A 6700                               beq.s    @player_is_sonic    ; if so, branch
00006A7C 41F9 0000 0000                     lea    (Art_MightyPost).l,a0
00006A82                            @player_is_sonic:
00006A82 223C 0000 00BF                     move.l    #($300/4)-1,d1
00006A88                            @load_art
00006A88 2D58 FFFC                          move.l    (a0)+,-4(a6)
00006A8C 51C9 FFFA                          dbf    d1,@load_art
00006A90 7012                       		moveq	#$12,d0
00006A92 6000 A940                  		bra.w	LoadPLC2	; load signpost	patterns
00006A96                            ; ===========================================================================
00006A96                            
00006A96                            Signpost_Exit:
00006A96 4E75                       		rts	
00006A98                            ; End of function SignpostArtLoad
00006A98                            
00006A98                            ; ===========================================================================
00006A98                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00006B18                            Demo_MZ:	incbin	demodata\i_mz.bin
00006C48                            Demo_SYZ:	incbin	demodata\i_syz.bin
00006CC8                            Demo_SS:	incbin	demodata\i_ss.bin
00006DC8                            ; ===========================================================================
00006DC8                            
00006DC8                            ; ---------------------------------------------------------------------------
00006DC8                            ; Special Stage
00006DC8                            ; ---------------------------------------------------------------------------
00006DC8                            
00006DC8                            SpecialStage:				; XREF: GameModeArray
00006DC8 303C 00CA                  		move.w	#$CA,d0
00006DCC 6100 A340                  		bsr.w	PlaySound_Special ; play special stage entry sound
00006DD0 6100 B71E                  		bsr.w	Pal_MakeFlash
00006DD4 46FC 2700                  		move	#$2700,sr
00006DD8 4DF9 00C0 0004             		lea	($C00004).l,a6
00006DDE 3CBC 8B03                  		move.w	#$8B03,(a6)
00006DE2 3CBC 8004                  		move.w	#$8004,(a6)
00006DE6 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00006DEC 3CBC 9011                  		move.w	#$9011,(a6)
00006DF0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006DF4 0200 00BF                  		andi.b	#$BF,d0
00006DF8 33C0 00C0 0004             		move.w	d0,($C00004).l
00006DFE 6100 A212                  		bsr.w	ClearScreen
00006E02 46FC 2300                  		move	#$2300,sr
00006E06 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E0C 3ABC 8F01                  		move.w	#$8F01,(a5)
00006E10 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00006E16 3ABC 9780                  		move.w	#$9780,(a5)
00006E1A 2ABC 5000 0081             		move.l	#$50000081,(a5)
00006E20 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00006E28                            
00006E28                            loc_463C:
00006E28 3215                       		move.w	(a5),d1
00006E2A 0801 0001                  		btst	#1,d1
00006E2E 66F8                       		bne.s	loc_463C
00006E30 3ABC 8F02                  		move.w	#$8F02,(a5)
00006E34 6100 0000                  		bsr.w	SS_BGLoad
00006E38 7014                       		moveq	#$14,d0
00006E3A 6100 A6D2                  		bsr.w	RunPLC_ROM	; load special stage patterns
00006E3E 43F8 D000                  		lea	($FFFFD000).w,a1
00006E42 7000                       		moveq	#0,d0
00006E44 323C 07FF                  		move.w	#$7FF,d1
00006E48                            
00006E48                            SS_ClrObjRam:
00006E48 22C0                       		move.l	d0,(a1)+
00006E4A 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00006E4E                            
00006E4E 43F8 F700                  		lea	($FFFFF700).w,a1
00006E52 7000                       		moveq	#0,d0
00006E54 323C 003F                  		move.w	#$3F,d1
00006E58                            
00006E58                            SS_ClrRam:
00006E58 22C0                       		move.l	d0,(a1)+
00006E5A 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00006E5E                            
00006E5E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00006E62 7000                       		moveq	#0,d0
00006E64 323C 0027                  		move.w	#$27,d1
00006E68                            
00006E68                            SS_ClrRam2:
00006E68 22C0                       		move.l	d0,(a1)+
00006E6A 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00006E6E                            
00006E6E 43F8 AA00                  		lea	($FFFFAA00).w,a1
00006E72 7000                       		moveq	#0,d0
00006E74 323C 007F                  		move.w	#$7F,d1
00006E78                            
00006E78                            SS_ClrNemRam:
00006E78 22C0                       		move.l	d0,(a1)+
00006E7A 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00006E7E                            
00006E7E 4238 F64E                  		clr.b	($FFFFF64E).w
00006E82 4278 FE02                  		clr.w	($FFFFFE02).w
00006E86 700A                       		moveq	#$A,d0
00006E88 6100 B7E6                  		bsr.w	PalLoad1	; load special stage pallet
00006E8C 4EB9 0000 0000             		jsr	SS_Load
00006E92 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00006E9A 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00006EA2 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00006EA8 6100 0000                  		bsr.w	PalCycle_SS
00006EAC 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00006EB0 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00006EB6 303C 0089                  		move.w	#$89,d0
00006EBA 6100 A24C                  		bsr.w	PlaySound	; play special stage BG	music
00006EBE 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00006EC4 43F9 0000 682A             		lea	(Demo_Index).l,a1
00006ECA 7006                       		moveq	#6,d0
00006ECC E548                       		lsl.w	#2,d0
00006ECE 2271 0000                  		movea.l	(a1,d0.w),a1
00006ED2 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00006ED8 5338 F792                  		subq.b	#1,($FFFFF792).w
00006EDC 4278 FE20                  		clr.w	($FFFFFE20).w
00006EE0 4238 FE1B                  		clr.b	($FFFFFE1B).w
00006EE4 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00006EEA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00006EF0 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00006EF4 6700                       		beq.s	SS_NoDebug	; if not, branch
00006EF6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00006EFC 6700                       		beq.s	SS_NoDebug	; if not, branch
00006EFE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00006F04                            
00006F04                            SS_NoDebug:
00006F04 3038 F60C                  		move.w	($FFFFF60C).w,d0
00006F08 0000 0040                  		ori.b	#$40,d0
00006F0C 33C0 00C0 0004             		move.w	d0,($C00004).l
00006F12 6100 B530                  		bsr.w	Pal_MakeWhite
00006F16                            
00006F16                            ; ---------------------------------------------------------------------------
00006F16                            ; Main Special Stage loop
00006F16                            ; ---------------------------------------------------------------------------
00006F16                            
00006F16                            SS_MainLoop:
00006F16 6100 A202                  		bsr.w	PauseGame
00006F1A 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00006F20 6100 C7E2                  		bsr.w	DelayProgram
00006F24 6100 F852                  		bsr.w	MoveSonicInDemo
00006F28 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00006F2E 4EB9 0000 0000             		jsr	ObjectsLoad
00006F34 4EB9 0000 0000             		jsr	BuildSprites
00006F3A 4EB9 0000 0000             		jsr	SS_ShowLayout
00006F40 6100 0000                  		bsr.w	SS_BGAnimate
00006F44 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006F48 6700                       		beq.s	SS_ChkEnd	; if not, branch
00006F4A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00006F4E 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00006F52                            
00006F52                            SS_ChkEnd:
00006F52 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00006F58 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00006F5C                            
00006F5C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006F60 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00006F64 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00006F6A 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00006F70 6500                       		bcs.s	SS_End		; if not, branch
00006F72 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00006F76                            
00006F76                            SS_End:
00006F76 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00006F7C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006F82 4278 F794                  		clr.w	($FFFFF794).w
00006F86                            
00006F86                            SS_EndLoop:
00006F86 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00006F8C 6100 C776                  		bsr.w	DelayProgram
00006F90 6100 F7E6                  		bsr.w	MoveSonicInDemo
00006F94 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00006F9A 4EB9 0000 0000             		jsr	ObjectsLoad
00006FA0 4EB9 0000 0000             		jsr	BuildSprites
00006FA6 4EB9 0000 0000             		jsr	SS_ShowLayout
00006FAC 6100 0000                  		bsr.w	SS_BGAnimate
00006FB0 5378 F794                  		subq.w	#1,($FFFFF794).w
00006FB4 6A00                       		bpl.s	loc_47D4
00006FB6 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00006FBC 6100 B552                  		bsr.w	Pal_ToWhite
00006FC0                            
00006FC0                            loc_47D4:
00006FC0 4A78 F614                  		tst.w	($FFFFF614).w
00006FC4 66C0                       		bne.s	SS_EndLoop
00006FC6                            
00006FC6 46FC 2700                  		move	#$2700,sr
00006FCA 4DF9 00C0 0004             		lea	($C00004).l,a6
00006FD0 3CBC 8230                  		move.w	#$8230,(a6)
00006FD4 3CBC 8407                  		move.w	#$8407,(a6)
00006FD8 3CBC 9001                  		move.w	#$9001,(a6)
00006FDC 6100 A034                  		bsr.w	ClearScreen
00006FE0 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00006FEA 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00006FF0 6100 A25A                  		bsr.w	NemDec
00006FF4 4EB9 0000 0000             		jsr	Hud_Base
00006FFA 4278 C800                  		clr.w	($FFFFC800).w
00006FFE 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00007006 46FC 2300                  		move	#$2300,sr
0000700A 7011                       		moveq	#$11,d0
0000700C 6100 B69E                  		bsr.w	PalLoad2	; load results screen pallet
00007010 7000                       		moveq	#0,d0
00007012 6100 A3C0                  		bsr.w	LoadPLC2
00007016 701B                       		moveq	#$1B,d0
00007018 6100 A388                  		bsr.w	LoadPLC		; load results screen patterns
0000701C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00007022 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00007028 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000702C C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00007030 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00007034 303C 008E                  		move.w	#$8E,d0
00007038 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000703E 43F8 D000                  		lea	($FFFFD000).w,a1
00007042 7000                       		moveq	#0,d0
00007044 323C 07FF                  		move.w	#$7FF,d1
00007048                            
00007048                            SS_EndClrObjRam:
00007048 22C0                       		move.l	d0,(a1)+
0000704A 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000704E                            
0000704E 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00007054                            
00007054                            SS_NormalExit:
00007054 6100 A0C4                  		bsr.w	PauseGame
00007058 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000705E 6100 C6A4                  		bsr.w	DelayProgram
00007062 4EB9 0000 0000             		jsr	ObjectsLoad
00007068 4EB9 0000 0000             		jsr	BuildSprites
0000706E 6100 A39E                  		bsr.w	RunPLC_RAM
00007072 4A78 FE02                  		tst.w	($FFFFFE02).w
00007076 67DC                       		beq.s	SS_NormalExit
00007078 4AB8 F680                  		tst.l	($FFFFF680).w
0000707C 66D6                       		bne.s	SS_NormalExit
0000707E 303C 00CA                  		move.w	#$CA,d0
00007082 6100 A08A                  		bsr.w	PlaySound_Special ; play special stage exit sound
00007086 6100 B468                  		bsr.w	Pal_MakeFlash
0000708A 4E75                       		rts	
0000708C                            ; ===========================================================================
0000708C                            
0000708C                            SS_ToSegaScreen:
0000708C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00007092 4E75                       		rts
00007094                            
00007094                            ; ---------------------------------------------------------------------------
00007094                            ; Special stage	background loading subroutine
00007094                            ; ---------------------------------------------------------------------------
00007094                            
00007094                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007094                            
00007094                            
00007094                            SS_BGLoad:				; XREF: SpecialStage
00007094 43F9 00FF 0000             		lea	($FF0000).l,a1
0000709A 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000070A0 303C 4051                  		move.w	#$4051,d0
000070A4 6100 A49A                  		bsr.w	EniDec
000070A8 263C 5000 0001             		move.l	#$50000001,d3
000070AE 45F9 00FF 0080             		lea	($FF0080).l,a2
000070B4 7E06                       		moveq	#6,d7
000070B6                            
000070B6                            loc_48BE:
000070B6 2003                       		move.l	d3,d0
000070B8 7C03                       		moveq	#3,d6
000070BA 7800                       		moveq	#0,d4
000070BC 0C47 0003                  		cmpi.w	#3,d7
000070C0 6400                       		bcc.s	loc_48CC
000070C2 7801                       		moveq	#1,d4
000070C4                            
000070C4                            loc_48CC:
000070C4 7A07                       		moveq	#7,d5
000070C6                            
000070C6                            loc_48CE:
000070C6 224A                       		movea.l	a2,a1
000070C8 0A04 0001                  		eori.b	#1,d4
000070CC 6600                       		bne.s	loc_48E2
000070CE 0C47 0006                  		cmpi.w	#6,d7
000070D2 6600                       		bne.s	loc_48F2
000070D4 43F9 00FF 0000             		lea	($FF0000).l,a1
000070DA                            
000070DA                            loc_48E2:
000070DA 48E7 F800                  		movem.l	d0-d4,-(sp)
000070DE 7207                       		moveq	#7,d1
000070E0 7407                       		moveq	#7,d2
000070E2 6100 A0AE                  		bsr.w	ShowVDPGraphics
000070E6 4CDF 001F                  		movem.l	(sp)+,d0-d4
000070EA                            
000070EA                            loc_48F2:
000070EA 0680 0010 0000             		addi.l	#$100000,d0
000070F0 51CD FFD4                  		dbf	d5,loc_48CE
000070F4 0680 0380 0000             		addi.l	#$3800000,d0
000070FA 0A04 0001                  		eori.b	#1,d4
000070FE 51CE FFC4                  		dbf	d6,loc_48CC
00007102 0683 1000 0000             		addi.l	#$10000000,d3
00007108 6A00                       		bpl.s	loc_491C
0000710A 4843                       		swap	d3
0000710C 0683 0000 C000             		addi.l	#$C000,d3
00007112 4843                       		swap	d3
00007114                            
00007114                            loc_491C:
00007114 D4FC 0080                  		adda.w	#$80,a2
00007118 51CF FF9C                  		dbf	d7,loc_48BE
0000711C 43F9 00FF 0000             		lea	($FF0000).l,a1
00007122 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00007128 303C 4000                  		move.w	#$4000,d0
0000712C 6100 A412                  		bsr.w	EniDec
00007130 43F9 00FF 0000             		lea	($FF0000).l,a1
00007136 203C 4000 0003             		move.l	#$40000003,d0
0000713C 723F                       		moveq	#$3F,d1
0000713E 741F                       		moveq	#$1F,d2
00007140 6100 A050                  		bsr.w	ShowVDPGraphics
00007144 43F9 00FF 0000             		lea	($FF0000).l,a1
0000714A 203C 5000 0003             		move.l	#$50000003,d0
00007150 723F                       		moveq	#$3F,d1
00007152 743F                       		moveq	#$3F,d2
00007154 6100 A03C                  		bsr.w	ShowVDPGraphics
00007158 4E75                       		rts	
0000715A                            ; End of function SS_BGLoad
0000715A                            
0000715A                            ; ---------------------------------------------------------------------------
0000715A                            ; Pallet cycling routine - special stage
0000715A                            ; ---------------------------------------------------------------------------
0000715A                            
0000715A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000715A                            
0000715A                            
0000715A                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
0000715A 4A78 F63A                  		tst.w	($FFFFF63A).w
0000715E 6600                       		bne.s	locret_49E6
00007160 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00007164 6A00                       		bpl.s	locret_49E6
00007166 4DF9 00C0 0004             		lea	($C00004).l,a6
0000716C 3038 F79A                  		move.w	($FFFFF79A).w,d0
00007170 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00007174 0240 001F                  		andi.w	#$1F,d0
00007178 E548                       		lsl.w	#2,d0
0000717A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00007180 D0C0                       		adda.w	d0,a0
00007182 1018                       		move.b	(a0)+,d0
00007184 6A00                       		bpl.s	loc_4992
00007186 303C 01FF                  		move.w	#$1FF,d0
0000718A                            
0000718A                            loc_4992:
0000718A 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000718E 7000                       		moveq	#0,d0
00007190 1018                       		move.b	(a0)+,d0
00007192 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00007196 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000719C 43F1 0000                  		lea	(a1,d0.w),a1
000071A0 303C 8200                  		move.w	#-$7E00,d0
000071A4 1019                       		move.b	(a1)+,d0
000071A6 3C80                       		move.w	d0,(a6)
000071A8 11D1 F616                  		move.b	(a1),($FFFFF616).w
000071AC 303C 8400                  		move.w	#-$7C00,d0
000071B0 1018                       		move.b	(a0)+,d0
000071B2 3C80                       		move.w	d0,(a6)
000071B4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000071BE 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000071C6 7000                       		moveq	#0,d0
000071C8 1018                       		move.b	(a0)+,d0
000071CA 6B00                       		bmi.s	loc_49E8
000071CC 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000071D2 D2C0                       		adda.w	d0,a1
000071D4 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000071D8 24D9                       		move.l	(a1)+,(a2)+
000071DA 24D9                       		move.l	(a1)+,(a2)+
000071DC 24D9                       		move.l	(a1)+,(a2)+
000071DE                            
000071DE                            locret_49E6:
000071DE 4E75                       		rts	
000071E0                            ; ===========================================================================
000071E0                            
000071E0                            loc_49E8:				; XREF: PalCycle_SS
000071E0 3238 F79E                  		move.w	($FFFFF79E).w,d1
000071E4 0C40 008A                  		cmpi.w	#$8A,d0
000071E8 6500                       		bcs.s	loc_49F4
000071EA 5241                       		addq.w	#1,d1
000071EC                            
000071EC                            loc_49F4:
000071EC C2FC 002A                  		mulu.w	#$2A,d1
000071F0 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000071F6 D2C1                       		adda.w	d1,a1
000071F8 0240 007F                  		andi.w	#$7F,d0
000071FC 0880 0000                  		bclr	#0,d0
00007200 6700                       		beq.s	loc_4A18
00007202 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00007206 24D1                       		move.l	(a1),(a2)+
00007208 24E9 0004                  		move.l	4(a1),(a2)+
0000720C 24E9 0008                  		move.l	8(a1),(a2)+
00007210                            
00007210                            loc_4A18:
00007210 D2FC 000C                  		adda.w	#$C,a1
00007214 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00007218 0C40 000A                  		cmpi.w	#$A,d0
0000721C 6500                       		bcs.s	loc_4A2E
0000721E 0440 000A                  		subi.w	#$A,d0
00007222 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00007226                            
00007226                            loc_4A2E:
00007226 3200                       		move.w	d0,d1
00007228 D040                       		add.w	d0,d0
0000722A D041                       		add.w	d1,d0
0000722C D2C0                       		adda.w	d0,a1
0000722E 24D9                       		move.l	(a1)+,(a2)+
00007230 34D9                       		move.w	(a1)+,(a2)+
00007232 4E75                       		rts	
00007234                            ; End of function PalCycle_SS
00007234                            
00007234                            ; ===========================================================================
00007234 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00007244                            					; XREF: PalCycle_SS
00007244 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00007254 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00007264 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00007274 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00007284 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00007294 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000072A4 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
000072B4                            		even
000072B4 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
000072C2                            					; XREF: PalCycle_SS
000072C2                            		even
000072C2                            
000072C2                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000730A                            		even
0000730A                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
000073DC                            		even
000073DC                            
000073DC                            ; ---------------------------------------------------------------------------
000073DC                            ; Subroutine to	make the special stage background animated
000073DC                            ; ---------------------------------------------------------------------------
000073DC                            
000073DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073DC                            
000073DC                            
000073DC                            SS_BGAnimate:				; XREF: SpecialStage
000073DC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000073E0 6600                       		bne.s	loc_4BF6
000073E2 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
000073E8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000073EE                            
000073EE                            loc_4BF6:
000073EE 0C40 0008                  		cmpi.w	#8,d0
000073F2 6400                       		bcc.s	loc_4C4E
000073F4 0C40 0006                  		cmpi.w	#6,d0
000073F8 6600                       		bne.s	loc_4C10
000073FA 5278 F718                  		addq.w	#1,($FFFFF718).w
000073FE 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00007402 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007408                            
00007408                            loc_4C10:
00007408 7000                       		moveq	#0,d0
0000740A 3038 F708                  		move.w	($FFFFF708).w,d0
0000740E 4440                       		neg.w	d0
00007410 4840                       		swap	d0
00007412 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00007418 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000741C 7609                       		moveq	#9,d3
0000741E                            
0000741E                            loc_4C26:
0000741E 302B 0002                  		move.w	2(a3),d0
00007422 6100 C312                  		bsr.w	CalcSine
00007426 7400                       		moveq	#0,d2
00007428 1419                       		move.b	(a1)+,d2
0000742A C1C2                       		muls.w	d2,d0
0000742C E080                       		asr.l	#8,d0
0000742E 36C0                       		move.w	d0,(a3)+
00007430 1419                       		move.b	(a1)+,d2
00007432 4882                       		ext.w	d2
00007434 D55B                       		add.w	d2,(a3)+
00007436 51CB FFE6                  		dbf	d3,loc_4C26
0000743A 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000743E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00007444 6000                       		bra.s	loc_4C7E
00007446                            ; ===========================================================================
00007446                            
00007446                            loc_4C4E:				; XREF: SS_BGAnimate
00007446 0C40 000C                  		cmpi.w	#$C,d0
0000744A 6600                       		bne.s	loc_4C74
0000744C 5378 F718                  		subq.w	#1,($FFFFF718).w
00007450 47F8 AB00                  		lea	($FFFFAB00).w,a3
00007454 243C 0001 8000             		move.l	#$18000,d2
0000745A 7206                       		moveq	#6,d1
0000745C                            
0000745C                            loc_4C64:
0000745C 2013                       		move.l	(a3),d0
0000745E 9082                       		sub.l	d2,d0
00007460 26C0                       		move.l	d0,(a3)+
00007462 0482 0000 2000             		subi.l	#$2000,d2
00007468 51C9 FFF2                  		dbf	d1,loc_4C64
0000746C                            
0000746C                            loc_4C74:
0000746C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00007470 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00007476                            
00007476                            loc_4C7E:
00007476 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000747A 3038 F718                  		move.w	($FFFFF718).w,d0
0000747E 4440                       		neg.w	d0
00007480 4840                       		swap	d0
00007482 7600                       		moveq	#0,d3
00007484 161A                       		move.b	(a2)+,d3
00007486 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000748A 4442                       		neg.w	d2
0000748C 0242 00FF                  		andi.w	#$FF,d2
00007490 E54A                       		lsl.w	#2,d2
00007492                            
00007492                            loc_4C9A:
00007492 301B                       		move.w	(a3)+,d0
00007494 544B                       		addq.w	#2,a3
00007496 7200                       		moveq	#0,d1
00007498 121A                       		move.b	(a2)+,d1
0000749A 5341                       		subq.w	#1,d1
0000749C                            
0000749C                            loc_4CA4:
0000749C 2380 2000                  		move.l	d0,(a1,d2.w)
000074A0 5842                       		addq.w	#4,d2
000074A2 0242 03FC                  		andi.w	#$3FC,d2
000074A6 51C9 FFF4                  		dbf	d1,loc_4CA4
000074AA 51CB FFE6                  		dbf	d3,loc_4C9A
000074AE 4E75                       		rts	
000074B0                            ; End of function SS_BGAnimate
000074B0                            
000074B0                            ; ===========================================================================
000074B0 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000074BC                            		even
000074BC 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000074C4                            		even
000074C4 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000074D8                            		even
000074D8                            					; XREF: SS_BGAnimate
000074D8                            ; ===========================================================================
000074D8                            
000074D8                            ; ---------------------------------------------------------------------------
000074D8                            ; Continue screen
000074D8                            ; ---------------------------------------------------------------------------
000074D8                            
000074D8                            ContinueScreen:				; XREF: GameModeArray
000074D8 6100 AEE8                  		bsr.w	Pal_FadeFrom
000074DC 46FC 2700                  		move	#$2700,sr
000074E0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000074E4 0200 00BF                  		andi.b	#$BF,d0
000074E8 33C0 00C0 0004             		move.w	d0,($C00004).l
000074EE 4DF9 00C0 0004             		lea	($C00004).l,a6
000074F4 3CBC 8004                  		move.w	#$8004,(a6)
000074F8 3CBC 8700                  		move.w	#$8700,(a6)
000074FC 6100 9B14                  		bsr.w	ClearScreen
00007500 43F8 D000                  		lea	($FFFFD000).w,a1
00007504 7000                       		moveq	#0,d0
00007506 323C 07FF                  		move.w	#$7FF,d1
0000750A                            
0000750A                            Cont_ClrObjRam:
0000750A 22C0                       		move.l	d0,(a1)+
0000750C 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00007510                            
00007510 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000751A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00007520 6100 9D2A                  		bsr.w	NemDec
00007524 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000752E 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00007534 6100 9D16                  		bsr.w	NemDec
00007538 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00007542 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00007548 6100 9D02                  		bsr.w	NemDec
0000754C 720A                       		moveq	#10,d1
0000754E 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00007554 7012                       		moveq	#$12,d0
00007556 6100 B118                  		bsr.w	PalLoad1	; load continue	screen pallet
0000755A 103C 0090                  		move.b	#$90,d0
0000755E 6100 9BA8                  		bsr.w	PlaySound	; play continue	music
00007562 708F                       		moveq	#$FFFFFF8F,d0
00007564 4EB8 10E6                  		jsr	PlaySample
00007568 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000756E 42B8 F700                  		clr.l	($FFFFF700).w
00007572 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000757A 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00007580 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00007586 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000758C 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00007592 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00007598 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000759E 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000075A4 4EB9 0000 0000             		jsr	ObjectsLoad
000075AA 4EB9 0000 0000             		jsr	BuildSprites
000075B0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000075B4 0000 0040                  		ori.b	#$40,d0
000075B8 33C0 00C0 0004             		move.w	d0,($C00004).l
000075BE 6100 AD4C                  		bsr.w	Pal_FadeTo
000075C2                            
000075C2                            ; ---------------------------------------------------------------------------
000075C2                            ; Continue screen main loop
000075C2                            ; ---------------------------------------------------------------------------
000075C2                            
000075C2                            Cont_MainLoop:
000075C2 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000075C8 6100 C13A                  		bsr.w	DelayProgram
000075CC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000075D2 6400                       		bcc.s	loc_4DF2
000075D4 46FC 2700                  		move	#$2700,sr
000075D8 3238 F614                  		move.w	($FFFFF614).w,d1
000075DC 82FC 003C                  		divu.w	#$3C,d1
000075E0 0281 0000 000F             		andi.l	#$F,d1
000075E6 4EB9 0000 0000             		jsr	ContScrCounter
000075EC 46FC 2300                  		move	#$2300,sr
000075F0                            
000075F0                            loc_4DF2:
000075F0 4EB9 0000 0000             		jsr	ObjectsLoad
000075F6 4EB9 0000 0000             		jsr	BuildSprites
000075FC 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00007602 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00007604 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000760A 64B6                       		bcc.s	Cont_MainLoop
0000760C 4A78 F614                  		tst.w	($FFFFF614).w
00007610 6600 FFB0                  		bne.w	Cont_MainLoop
00007614 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000761A 4E75                       		rts	
0000761C                            ; ===========================================================================
0000761C                            
0000761C                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000761C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00007622 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00007628 7000                       		moveq	#0,d0
0000762A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000762E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00007632 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00007636 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000763A 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000763E 4E75                       		rts	
00007640                            ; ===========================================================================
00007640                            
00007640                            ; ---------------------------------------------------------------------------
00007640                            ; Object 80 - Continue screen elements
00007640                            ; ---------------------------------------------------------------------------
00007640                            
00007640                            Obj80:					; XREF: Obj_Index
00007640 7000                       		moveq	#0,d0
00007642 1028 0024                  		move.b	$24(a0),d0
00007646 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000764A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000764E                            ; ===========================================================================
0000764E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00007650 0000                       		dc.w Obj80_Display-Obj80_Index
00007652 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00007654 0000                       		dc.w Obj80_ChkType-Obj80_Index
00007656                            ; ===========================================================================
00007656                            
00007656                            Obj80_Main:				; XREF: Obj80_Index
00007656 5428 0024                  		addq.b	#2,$24(a0)
0000765A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00007662 317C 8500 0002             		move.w	#$8500,2(a0)
00007668 117C 0000 0001             		move.b	#0,1(a0)
0000766E 117C 003C 0019             		move.b	#$3C,$19(a0)
00007674 317C 0120 0008             		move.w	#$120,8(a0)
0000767A 317C 00C0 000A             		move.w	#$C0,$A(a0)
00007680 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00007686                            
00007686                            Obj80_Display:				; XREF: Obj80_Index
00007686 4EF9 0000 0000             		jmp	DisplaySprite
0000768C                            ; ===========================================================================
0000768C                            Obj80_MiniSonicPos:
0000768C 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000769E 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000076AA                            ; ===========================================================================
000076AA                            
000076AA                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000076AA 2248                       		movea.l	a0,a1
000076AC 45F9 0000 768C             		lea	(Obj80_MiniSonicPos).l,a2
000076B2 7200                       		moveq	#0,d1
000076B4 1238 FE18                  		move.b	($FFFFFE18).w,d1
000076B8 5501                       		subq.b	#2,d1
000076BA 6400                       		bcc.s	loc_4EC4
000076BC 4EF9 0000 0000             		jmp	DeleteObject
000076C2                            ; ===========================================================================
000076C2                            
000076C2                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000076C2 7601                       		moveq	#1,d3
000076C4 0C01 000E                  		cmpi.b	#$E,d1
000076C8 6500                       		bcs.s	loc_4ED0
000076CA 7600                       		moveq	#0,d3
000076CC 720E                       		moveq	#$E,d1
000076CE                            
000076CE                            loc_4ED0:
000076CE 1401                       		move.b	d1,d2
000076D0 0202 0001                  		andi.b	#1,d2
000076D4                            
000076D4                            Obj80_MiniSonLoop:
000076D4 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000076D8 335A 0008                  		move.w	(a2)+,8(a1)
000076DC 4A02                       		tst.b	d2
000076DE 6700                       		beq.s	loc_4EEA
000076E0 0469 000A 0008             		subi.w	#$A,8(a1)
000076E6                            
000076E6                            loc_4EEA:
000076E6 337C 00D0 000A             		move.w	#$D0,$A(a1)
000076EC 137C 0006 001A             		move.b	#6,$1A(a1)
000076F2 137C 0006 0024             		move.b	#6,$24(a1)
000076F8 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00007700 337C 8551 0002             		move.w	#$8551,2(a1)
00007706 137C 0000 0001             		move.b	#0,1(a1)
0000770C 43E9 0040                  		lea	$40(a1),a1
00007710 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00007714 43E9 FFC0                  		lea	-$40(a1),a1
00007718 1343 0028                  		move.b	d3,$28(a1)
0000771C                            
0000771C                            Obj80_ChkType:				; XREF: Obj80_Index
0000771C 4A28 0028                  		tst.b	$28(a0)
00007720 6700                       		beq.s	loc_4F40
00007722 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007728 6500                       		bcs.s	loc_4F40
0000772A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000772E 0200 0001                  		andi.b	#1,d0
00007732 6600                       		bne.s	loc_4F40
00007734 4A78 D010                  		tst.w	($FFFFD010).w
00007738 6600                       		bne.s	Obj80_Delete
0000773A 4E75                       		rts	
0000773C                            ; ===========================================================================
0000773C                            
0000773C                            loc_4F40:				; XREF: Obj80_ChkType
0000773C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00007740 0200 000F                  		andi.b	#$F,d0
00007744 6600                       		bne.s	Obj80_Display2
00007746 0868 0000 001A             		bchg	#0,$1A(a0)
0000774C                            
0000774C                            Obj80_Display2:
0000774C 4EF9 0000 0000             		jmp	DisplaySprite
00007752                            ; ===========================================================================
00007752                            
00007752                            Obj80_Delete:				; XREF: Obj80_ChkType
00007752 4EF9 0000 0000             		jmp	DeleteObject
00007758                            ; ===========================================================================
00007758                            
00007758                            ; ---------------------------------------------------------------------------
00007758                            ; Object 81 - Sonic on the continue screen
00007758                            ; ---------------------------------------------------------------------------
00007758                            
00007758                            Obj81:					; XREF: Obj_Index
00007758 7000                       		moveq	#0,d0
0000775A 1028 0024                  		move.b	$24(a0),d0
0000775E 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00007762 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00007766 4EF9 0000 0000             		jmp	DisplaySprite
0000776C                            ; ===========================================================================
0000776C 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000776E 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00007770 0000                       		dc.w Obj81_Animate-Obj81_Index
00007772 0000                       		dc.w Obj81_Run-Obj81_Index
00007774                            ; ===========================================================================
00007774                            
00007774                            Obj81_Main:				; XREF: Obj81_Index
00007774 5428 0024                  		addq.b	#2,$24(a0)
00007778 317C 00A0 0008             		move.w	#$A0,8(a0)
0000777E 317C 00C0 000C             		move.w	#$C0,$C(a0)
00007784 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000778C 317C 0780 0002             		move.w	#$780,2(a0)
00007792 117C 0004 0001             		move.b	#4,1(a0)
00007798 117C 0002 0018             		move.b	#2,$18(a0)
0000779E 117C 0023 001C             		move.b	#$23,$1C(a0)	; use "floating" animation
000077A4 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000077AA                            
000077AA                            Obj81_ChkLand:				; XREF: Obj81_Index
000077AA 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000077B0 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000077B2 5428 0024                  		addq.b	#2,$24(a0)
000077B6 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000077BA 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000077C2 317C 8500 0002             		move.w	#$8500,2(a0)
000077C8 117C 0000 001C             		move.b	#0,$1C(a0)
000077CE 6000                       		bra.s	Obj81_Animate
000077D0                            ; ===========================================================================
000077D0                            
000077D0                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000077D0 4EB9 0000 0000             		jsr	SpeedToPos
000077D6 4EB9 0000 0000             		jsr	Sonic_Animate
000077DC 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000077E2                            ; ===========================================================================
000077E2                            
000077E2                            Obj81_Animate:				; XREF: Obj81_Index
000077E2 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000077E6 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000077E8 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000077EE 4EF9 0000 0000             		jmp	AnimateSprite
000077F4                            ; ===========================================================================
000077F4                            
000077F4                            Obj81_GetUp:				; XREF: Obj81_Animate
000077F4 5428 0024                  		addq.b	#2,$24(a0)
000077F8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00007800 317C 0780 0002             		move.w	#$780,2(a0)
00007806 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000780C 4268 0014                  		clr.w	$14(a0)
00007810 5168 000C                  		subq.w	#8,$C(a0)
00007814 708E                       		moveq	#$FFFFFF8E,d0
00007816 4EB8 10E6                  		jsr	PlaySample
0000781A 103C 00E0                  		move.b	#$E0,d0
0000781E 6100 98EE                  		bsr.w	PlaySound_Special ; fade out music
00007822                            
00007822                            Obj81_Run:				; XREF: Obj81_Index
00007822 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00007828 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000782A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00007830 6000                       		bra.s	Obj81_ShowRun
00007832                            ; ===========================================================================
00007832                            
00007832                            Obj81_AddSpeed:				; XREF: Obj81_Run
00007832 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00007838                            
00007838                            Obj81_ShowRun:				; XREF: Obj81_Run
00007838 4EB9 0000 0000             		jsr	SpeedToPos
0000783E 4EB9 0000 0000             		jsr	Sonic_Animate
00007844 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000784A                            ; ===========================================================================
0000784A                            Ani_obj81:
0000784A                            	include "_anim\obj81.asm"
0000784A                            ; ---------------------------------------------------------------------------
0000784A                            ; Animation script - Sonic on the continue screen
0000784A                            ; ---------------------------------------------------------------------------
0000784A 0000                       		dc.w byte_504A-Ani_obj81
0000784C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00007858 00                         		even
00007858 00                         		even
00007858                            
00007858                            ; ---------------------------------------------------------------------------
00007858                            ; Sprite mappings - Continue screen
00007858                            ; ---------------------------------------------------------------------------
00007858                            Map_obj80:
00007858                            	include "_maps\obj80.asm"
00007858                            ; ---------------------------------------------------------------------------
00007858                            ; Sprite mappings - Continue screen
00007858                            ; ---------------------------------------------------------------------------
00007858 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000785C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00007860 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00007864 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00007868 0B                         byte_5066:	dc.b $B
00007869 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000786E F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00007873 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00007878 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000787D F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00007882 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00007887 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000788C F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00007891 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00007896 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000789B 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000078A0 03                         byte_509E:	dc.b 3
000078A1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000078A6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000078AB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000078B0 03                         byte_50AE:	dc.b 3
000078B1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000078B6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000078BB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000078C0 03                         byte_50BE:	dc.b 3
000078C1 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000078C6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000078CB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000078D0 02                         byte_50CE:	dc.b 2
000078D1 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000078D6 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000078DB 01                         byte_50D9:	dc.b 1
000078DC 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000078E1 01                         byte_50DF:	dc.b 1
000078E2 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000078E8 00                         		even
000078E8 00                         		even
000078E8                            
000078E8                            ; ===========================================================================
000078E8                            ; ---------------------------------------------------------------------------
000078E8                            ; Ending sequence in Green Hill	Zone
000078E8                            ; ---------------------------------------------------------------------------
000078E8                            
000078E8                            EndingSequence:				; XREF: GameModeArray
000078E8 103C 00E4                  		move.b	#$E4,d0
000078EC 6100 9820                  		bsr.w	PlaySound_Special ; stop music
000078F0 6100 AAD0                  		bsr.w	Pal_FadeFrom
000078F4 43F8 D000                  		lea	($FFFFD000).w,a1
000078F8 7000                       		moveq	#0,d0
000078FA 323C 07FF                  		move.w	#$7FF,d1
000078FE                            
000078FE                            End_ClrObjRam:
000078FE 22C0                       		move.l	d0,(a1)+
00007900 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00007904                            
00007904 43F8 F628                  		lea	($FFFFF628).w,a1
00007908 7000                       		moveq	#0,d0
0000790A 323C 0015                  		move.w	#$15,d1
0000790E                            
0000790E                            End_ClrRam:
0000790E 22C0                       		move.l	d0,(a1)+
00007910 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00007914                            
00007914 43F8 F700                  		lea	($FFFFF700).w,a1
00007918 7000                       		moveq	#0,d0
0000791A 323C 003F                  		move.w	#$3F,d1
0000791E                            
0000791E                            End_ClrRam2:
0000791E 22C0                       		move.l	d0,(a1)+
00007920 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00007924                            
00007924 43F8 FE60                  		lea	($FFFFFE60).w,a1
00007928 7000                       		moveq	#0,d0
0000792A 323C 0047                  		move.w	#$47,d1
0000792E                            
0000792E                            End_ClrRam3:
0000792E 22C0                       		move.l	d0,(a1)+
00007930 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00007934                            
00007934 46FC 2700                  		move	#$2700,sr
00007938 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000793C 0200 00BF                  		andi.b	#$BF,d0
00007940 33C0 00C0 0004             		move.w	d0,($C00004).l
00007946 6100 96CA                  		bsr.w	ClearScreen
0000794A 4DF9 00C0 0004             		lea	($C00004).l,a6
00007950 3CBC 8B03                  		move.w	#$8B03,(a6)
00007954 3CBC 8230                  		move.w	#$8230,(a6)
00007958 3CBC 8407                  		move.w	#$8407,(a6)
0000795C 3CBC 857C                  		move.w	#$857C,(a6)
00007960 3CBC 9001                  		move.w	#$9001,(a6)
00007964 3CBC 8004                  		move.w	#$8004,(a6)
00007968 3CBC 8720                  		move.w	#$8720,(a6)
0000796C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00007972 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00007976 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000797C 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00007982 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00007988 6700                       		beq.s	End_LoadData	; if yes, branch
0000798A 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00007990                            
00007990                            End_LoadData:
00007990 701C                       		moveq	#$1C,d0
00007992 6100 9B7A                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00007996 4EB9 0000 0000             		jsr	Hud_Base
0000799C 6100 0000                  		bsr.w	LevelSizeLoad
000079A0 6100 0000                  		bsr.w	DeformBgLayer
000079A4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000079AA 6100 0000                  		bsr.w	LoadZoneTiles	; load level art
000079AE 6100 0000                  		bsr.w	MainLoadBlockLoad
000079B2 6100 0000                  		bsr.w	LoadTilesFromStart
000079B6 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000079BE 46FC 2300                  		move	#$2300,sr
000079C2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000079C8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000079CC 6100 9CF0                  		bsr.w	KosDec
000079D0 7003                       		moveq	#3,d0
000079D2 6100 AC9C                  		bsr.w	PalLoad1	; load Sonic's pallet
000079D6 303C 008B                  		move.w	#$8B,d0
000079DA 6100 972C                  		bsr.w	PlaySound	; play ending sequence music
000079DE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000079E4 6700                       		beq.s	End_LoadSonic	; if not, branch
000079E6 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000079EC                            
000079EC                            End_LoadSonic:
000079EC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000079F2 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000079F8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000079FE 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00007A04 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00007A0A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00007A10 4EB9 0000 0000             		jsr	ObjPosLoad
00007A16 4EB9 0000 0000             		jsr	ObjectsLoad
00007A1C 4EB9 0000 0000             		jsr	BuildSprites
00007A22 7000                       		moveq	#0,d0
00007A24 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00007A28 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00007A2C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00007A30 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00007A34 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00007A38 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00007A3C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00007A40 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00007A44 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00007A48 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00007A4C 6100 EE74                  		bsr.w	OscillateNumInit
00007A50 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00007A56 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00007A5C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00007A62 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00007A68 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00007A6E 6100 BC94                  		bsr.w	DelayProgram
00007A72 3038 F60C                  		move.w	($FFFFF60C).w,d0
00007A76 0000 0040                  		ori.b	#$40,d0
00007A7A 33C0 00C0 0004             		move.w	d0,($C00004).l
00007A80 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00007A86 6100 A884                  		bsr.w	Pal_FadeTo
00007A8A                            
00007A8A                            ; ---------------------------------------------------------------------------
00007A8A                            ; Main ending sequence loop
00007A8A                            ; ---------------------------------------------------------------------------
00007A8A                            
00007A8A                            End_MainLoop:
00007A8A 6100 968E                  		bsr.w	PauseGame
00007A8E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00007A94 6100 BC6E                  		bsr.w	DelayProgram
00007A98 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00007A9C 6100 0000                  		bsr.w	End_MoveSonic
00007AA0 4EB9 0000 0000             		jsr	ObjectsLoad
00007AA6 6100 0000                  		bsr.w	DeformBgLayer
00007AAA 4EB9 0000 0000             		jsr	BuildSprites
00007AB0 4EB9 0000 0000             		jsr	ObjPosLoad
00007AB6 6100 9E24                  		bsr.w	PalCycle_Load
00007ABA 6100 EE5C                  		bsr.w	OscillateNumDo
00007ABE 6100 EEE8                  		bsr.w	ChangeRingFrame
00007AC2 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00007AC8 6700                       		beq.s	loc_52DA	; if yes, branch
00007ACA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00007AD0 0C38 0001 FFF6                     cmp.b    #1,($FFFFFFF6).w    ; is the character actually shadow?
00007AD6 6600                               bne.s    @son_cred    ; if not, branch
00007AD8 303C 009A                  		move.w	#$9A,d0
00007ADC 4EF9 0000 1108             		jmp	(PlaySound).l	; play invincibility music
00007AE2                            		@son_cred:
00007AE2 303C 0091                  		move.w	#$91,d0
00007AE6 4EF9 0000 1108             		jmp	(PlaySound).l	; play invincibility music
00007AEC 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00007AF2 4E75                       		rts	
00007AF4                            ; ===========================================================================
00007AF4                            
00007AF4                            loc_52DA:
00007AF4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00007AF8 6700 FF90                  		beq.w	End_MainLoop	; if not, branch
00007AFC                            
00007AFC 4278 FE02                  		clr.w	($FFFFFE02).w
00007B00 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00007B06 4278 F794                  		clr.w	($FFFFF794).w
00007B0A                            
00007B0A                            End_AllEmlds:				; XREF: loc_5334
00007B0A 6100 960E                  		bsr.w	PauseGame
00007B0E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00007B14 6100 BBEE                  		bsr.w	DelayProgram
00007B18 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00007B1C 6100 0000                  		bsr.w	End_MoveSonic
00007B20 4EB9 0000 0000             		jsr	ObjectsLoad
00007B26 6100 0000                  		bsr.w	DeformBgLayer
00007B2A 4EB9 0000 0000             		jsr	BuildSprites
00007B30 4EB9 0000 0000             		jsr	ObjPosLoad
00007B36 6100 EDE0                  		bsr.w	OscillateNumDo
00007B3A 6100 EE6C                  		bsr.w	ChangeRingFrame
00007B3E 5378 F794                  		subq.w	#1,($FFFFF794).w
00007B42 6A00                       		bpl.s	loc_5334
00007B44 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00007B4A 6100 A9C4                  		bsr.w	Pal_ToWhite
00007B4E                            
00007B4E                            loc_5334:
00007B4E 4A78 FE02                  		tst.w	($FFFFFE02).w
00007B52 6700 FFB6                  		beq.w	End_AllEmlds
00007B56 4278 FE02                  		clr.w	($FFFFFE02).w
00007B5A 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00007B60 4BF9 00C0 0004             		lea	($C00004).l,a5
00007B66 4DF9 00C0 0000             		lea	($C00000).l,a6
00007B6C 47F8 F700                  		lea	($FFFFF700).w,a3
00007B70 49F8 A400                  		lea	($FFFFA400).w,a4
00007B74 343C 4000                  		move.w	#$4000,d2
00007B78 6100 0000                  		bsr.w	LoadTilesFromStart2
00007B7C 7013                       		moveq	#$13,d0
00007B7E 6100 AAF0                  		bsr.w	PalLoad1	; load ending pallet
00007B82 6100 A8C0                  		bsr.w	Pal_MakeWhite
00007B86 6000 FF02                  		bra.w	End_MainLoop
00007B8A                            
00007B8A                            ; ---------------------------------------------------------------------------
00007B8A                            ; Subroutine controlling Sonic on the ending sequence
00007B8A                            ; ---------------------------------------------------------------------------
00007B8A                            
00007B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B8A                            
00007B8A                            
00007B8A                            End_MoveSonic:				; XREF: End_MainLoop
00007B8A 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00007B8E 6600                       		bne.s	End_MoveSonic2
00007B90 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00007B96 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00007B98 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00007B9C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00007BA2 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00007BA8 4E75                       		rts	
00007BAA                            ; ===========================================================================
00007BAA                            
00007BAA                            End_MoveSonic2:				; XREF: End_MoveSonic
00007BAA 5500                       		subq.b	#2,d0
00007BAC 6600                       		bne.s	End_MoveSonic3
00007BAE 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00007BB4 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00007BB6 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00007BBA 7000                       		moveq	#0,d0
00007BBC 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00007BC0 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00007BC4 31C0 D014                  		move.w	d0,($FFFFD014).w
00007BC8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00007BCE 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00007BD4 117C 0005 001C             		move.b	#$5,$1C(a0)	; use "standing" animation
00007BDA 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00007BE0 4E75                       		rts	
00007BE2                            ; ===========================================================================
00007BE2                            
00007BE2                            End_MoveSonic3:				; XREF: End_MoveSonic
00007BE2 5500                       		subq.b	#2,d0
00007BE4 6600                       		bne.s	End_MoveSonExit
00007BE6 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00007BEA 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00007BF0 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00007BF6 4278 D024                  		clr.w	($FFFFD024).w
00007BFA                            
00007BFA                            End_MoveSonExit:
00007BFA 4E75                       		rts	
00007BFC                            ; End of function End_MoveSonic
00007BFC                            
00007BFC                            ; ===========================================================================
00007BFC                            ; ---------------------------------------------------------------------------
00007BFC                            ; Object 87 - Sonic on ending sequence
00007BFC                            ; ---------------------------------------------------------------------------
00007BFC                            
00007BFC                            Obj87:					; XREF: Obj_Index
00007BFC 7000                       		moveq	#0,d0
00007BFE 1028 0025                  		move.b	$25(a0),d0
00007C02 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00007C06 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00007C0A 4EF9 0000 0000             		jmp	DisplaySprite
00007C10                            ; ===========================================================================
00007C10 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00007C14 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00007C18 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00007C1C 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00007C20 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00007C24                            ; ===========================================================================
00007C24                            
00007C24                            Obj87_Main:				; XREF: Obj87_Index
00007C24 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00007C2A 6700                       		beq.s	Obj87_Main2	; if yes, branch
00007C2C 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00007C32 317C 00D8 0030             		move.w	#$D8,$30(a0)
00007C38 4E75                       		rts	
00007C3A                            ; ===========================================================================
00007C3A                            
00007C3A                            Obj87_Main2:				; XREF: Obj87_Main
00007C3A 5428 0025                  		addq.b	#2,$25(a0)
00007C3E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00007C46 317C 03E1 0002             		move.w	#$3E1,2(a0)
00007C4C 117C 0004 0001             		move.b	#4,1(a0)
00007C52 4228 0022                  		clr.b	$22(a0)
00007C56 117C 0002 0018             		move.b	#2,$18(a0)
00007C5C 117C 0000 001A             		move.b	#0,$1A(a0)
00007C62 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00007C68                            
00007C68                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00007C68 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00007C6C 6600                       		bne.s	Obj87_Wait
00007C6E 5428 0025                  		addq.b	#2,$25(a0)
00007C72 317C 0001 001C             		move.w	#1,$1C(a0)
00007C78 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00007C7E                            
00007C7E                            Obj87_Wait:
00007C7E 4E75                       		rts	
00007C80                            ; ===========================================================================
00007C80                            
00007C80                            Obj87_LookUp:				; XREF: Obj87_Index
00007C80 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00007C88 6600                       		bne.s	locret_5480
00007C8A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00007C90 317C 005A 0030             		move.w	#$5A,$30(a0)
00007C96 5428 0025                  		addq.b	#2,$25(a0)
00007C9A                            
00007C9A                            locret_5480:
00007C9A 4E75                       		rts	
00007C9C                            ; ===========================================================================
00007C9C                            
00007C9C                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00007C9C 5368 0030                  		subq.w	#1,$30(a0)
00007CA0 6600                       		bne.s	Obj87_Wait2
00007CA2 43F8 D400                  		lea	($FFFFD400).w,a1
00007CA6 323C 00FF                  		move.w	#$FF,d1
00007CAA                            
00007CAA                            Obj87_ClrLoop:
00007CAA 4299                       		clr.l	(a1)+
00007CAC 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00007CB0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00007CB6 5428 0025                  		addq.b	#2,$25(a0)
00007CBA 117C 0001 001C             		move.b	#1,$1C(a0)
00007CC0 317C 003C 0030             		move.w	#$3C,$30(a0)
00007CC6                            
00007CC6                            Obj87_Wait2:
00007CC6 4E75                       		rts	
00007CC8                            ; ===========================================================================
00007CC8                            
00007CC8                            Obj87_MakeLogo:				; XREF: Obj87_Index
00007CC8 5368 0030                  		subq.w	#1,$30(a0)
00007CCC 6600                       		bne.s	Obj87_Wait3
00007CCE 5428 0025                  		addq.b	#2,$25(a0)
00007CD2 317C 00B4 0030             		move.w	#$B4,$30(a0)
00007CD8 117C 0002 001C             		move.b	#2,$1C(a0)
00007CDE 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00007CE4                            
00007CE4                            Obj87_Wait3:
00007CE4 4E75                       		rts	
00007CE6                            ; ===========================================================================
00007CE6                            
00007CE6                            Obj87_Animate:				; XREF: Obj87_Index
00007CE6 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00007CEC 4EF9 0000 0000             		jmp	AnimateSprite
00007CF2                            ; ===========================================================================
00007CF2                            
00007CF2                            Obj87_Leap:				; XREF: Obj87_Index
00007CF2 5368 0030                  		subq.w	#1,$30(a0)
00007CF6 6600                       		bne.s	Obj87_Wait4
00007CF8 5428 0025                  		addq.b	#2,$25(a0)
00007CFC 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00007D04 317C 03E1 0002             		move.w	#$3E1,2(a0)
00007D0A 117C 0004 0001             		move.b	#4,1(a0)
00007D10 4228 0022                  		clr.b	$22(a0)
00007D14 117C 0002 0018             		move.b	#2,$18(a0)
00007D1A 117C 0005 001A             		move.b	#5,$1A(a0)
00007D20 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00007D26 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00007D2C 60B8                       		bra.s	Obj87_Animate
00007D2E                            ; ===========================================================================
00007D2E                            
00007D2E                            Obj87_Wait4:				; XREF: Obj87_Leap
00007D2E 4E75                       		rts	
00007D30                            ; ===========================================================================
00007D30                            Ani_obj87:
00007D30                            	include "_anim\obj87.asm"
00007D30                            ; ---------------------------------------------------------------------------
00007D30                            ; Animation script - Sonic on the ending sequence
00007D30                            ; ---------------------------------------------------------------------------
00007D30 0000                       		dc.w byte_551C-Ani_obj87
00007D32 0000                       		dc.w byte_552A-Ani_obj87
00007D34 0000                       		dc.w byte_5534-Ani_obj87
00007D36 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00007D44 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00007D4E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00007D56                            		even
00007D56                            		even
00007D56                            
00007D56                            ; ===========================================================================
00007D56                            ; ---------------------------------------------------------------------------
00007D56                            ; Object 88 - chaos emeralds on	the ending sequence
00007D56                            ; ---------------------------------------------------------------------------
00007D56                            
00007D56                            Obj88:					; XREF: Obj_Index
00007D56 7000                       		moveq	#0,d0
00007D58 1028 0024                  		move.b	$24(a0),d0
00007D5C 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00007D60 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00007D64 4EF9 0000 0000             		jmp	DisplaySprite
00007D6A                            ; ===========================================================================
00007D6A 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00007D6C 0000                       		dc.w Obj88_Move-Obj88_Index
00007D6E                            ; ===========================================================================
00007D6E                            
00007D6E                            Obj88_Main:				; XREF: Obj88_Index
00007D6E 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00007D74 6700                       		beq.s	Obj88_Main2
00007D76 588F                       		addq.l	#4,sp
00007D78 4E75                       		rts	
00007D7A                            ; ===========================================================================
00007D7A                            
00007D7A                            Obj88_Main2:				; XREF: Obj88_Main
00007D7A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00007D80 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00007D86 2248                       		movea.l	a0,a1
00007D88 7600                       		moveq	#0,d3
00007D8A 7401                       		moveq	#1,d2
00007D8C 7205                       		moveq	#5,d1
00007D8E                            
00007D8E                            Obj88_MainLoop:
00007D8E 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00007D92 5429 0024                  		addq.b	#2,$24(a1)
00007D96 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00007D9E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00007DA4 137C 0004 0001             		move.b	#4,1(a1)
00007DAA 137C 0001 0018             		move.b	#1,$18(a1)
00007DB0 3368 0008 0038             		move.w	8(a0),$38(a1)
00007DB6 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00007DBC 1342 001C                  		move.b	d2,$1C(a1)
00007DC0 1342 001A                  		move.b	d2,$1A(a1)
00007DC4 5202                       		addq.b	#1,d2
00007DC6 1343 0026                  		move.b	d3,$26(a1)
00007DCA 0603 002A                  		addi.b	#$2A,d3
00007DCE 43E9 0040                  		lea	$40(a1),a1
00007DD2 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00007DD6                            
00007DD6                            Obj88_Move:				; XREF: Obj88_Index
00007DD6 3028 003E                  		move.w	$3E(a0),d0
00007DDA D168 0026                  		add.w	d0,$26(a0)
00007DDE 1028 0026                  		move.b	$26(a0),d0
00007DE2 4EB9 0000 3736             		jsr	(CalcSine).l
00007DE8 7800                       		moveq	#0,d4
00007DEA 1828 003C                  		move.b	$3C(a0),d4
00007DEE C3C4                       		muls.w	d4,d1
00007DF0 E081                       		asr.l	#8,d1
00007DF2 C1C4                       		muls.w	d4,d0
00007DF4 E080                       		asr.l	#8,d0
00007DF6 D268 0038                  		add.w	$38(a0),d1
00007DFA D068 003A                  		add.w	$3A(a0),d0
00007DFE 3141 0008                  		move.w	d1,8(a0)
00007E02 3140 000C                  		move.w	d0,$C(a0)
00007E06 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00007E0C 6700                       		beq.s	loc_55FA
00007E0E 0668 0020 003C             		addi.w	#$20,$3C(a0)
00007E14                            
00007E14                            loc_55FA:
00007E14 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00007E1A 6700                       		beq.s	loc_5608
00007E1C 0668 0020 003E             		addi.w	#$20,$3E(a0)
00007E22                            
00007E22                            loc_5608:
00007E22 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00007E28 6700                       		beq.s	locret_5614
00007E2A 5368 003A                  		subq.w	#1,$3A(a0)
00007E2E                            
00007E2E                            locret_5614:
00007E2E 4E75                       		rts	
00007E30                            ; ===========================================================================
00007E30                            ; ---------------------------------------------------------------------------
00007E30                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00007E30                            ; ---------------------------------------------------------------------------
00007E30                            
00007E30                            Obj89:					; XREF: Obj_Index
00007E30 7000                       		moveq	#0,d0
00007E32 1028 0024                  		move.b	$24(a0),d0
00007E36 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00007E3A 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00007E3E                            ; ===========================================================================
00007E3E 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00007E40 0000                       		dc.w Obj89_Move-Obj89_Index
00007E42 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00007E44                            ; ===========================================================================
00007E44                            
00007E44                            Obj89_Main:				; XREF: Obj89_Index
00007E44 5428 0024                  		addq.b	#2,$24(a0)
00007E48 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00007E4E 317C 00D8 000A             		move.w	#$D8,$A(a0)
00007E54 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00007E5C 317C 05C5 0002             		move.w	#$5C5,2(a0)
00007E62 117C 0000 0001             		move.b	#0,1(a0)
00007E68 117C 0000 0018             		move.b	#0,$18(a0)
00007E6E                            
00007E6E                            Obj89_Move:				; XREF: Obj89_Index
00007E6E 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00007E74 6700                       		beq.s	Obj89_Delay	; if yes, branch
00007E76 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00007E7C 4EF9 0000 0000             		jmp		DisplaySprite
00007E82                            ; ===========================================================================
00007E82                            
00007E82                            Obj89_Delay:				; XREF: Obj89_Move
00007E82 5428 0024                  		addq.b	#2,$24(a0)
00007E86 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00007E8C                            
00007E8C                            Obj89_GotoCredits:			; XREF: Obj89_Index
00007E8C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00007E90 6A00                       		bpl.s	Obj89_Display
00007E92 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00007E98                            
00007E98                            Obj89_Display:
00007E98 4EF9 0000 0000             		jmp		DisplaySprite
00007E9E                            ; ===========================================================================
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E                            ; Sprite mappings - Sonic on the ending	sequence
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E                            Map_obj87:
00007E9E                            	include "_maps\obj87.asm"
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E                            ; Sprite mappings - Sonic on the ending	sequence
00007E9E                            ; ---------------------------------------------------------------------------
00007E9E 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00007EA2 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00007EA6 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00007EAA 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00007EAE 02                         byte_5690:	dc.b 2
00007EAF EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00007EB4 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00007EB9 03                         byte_569B:	dc.b 3
00007EBA FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00007EBF EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00007EC4 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00007EC9 02                         byte_56AB:	dc.b 2
00007ECA EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00007ECF FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00007ED4 02                         byte_56B6:	dc.b 2
00007ED5 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00007EDA FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00007EDF 02                         byte_56C1:	dc.b 2
00007EE0 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00007EE5 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00007EEA 03                         byte_56CC:	dc.b 3
00007EEB EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00007EF0 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00007EF5 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00007EFA 07                         byte_56DC:	dc.b 7
00007EFB B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00007F00 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00007F05 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00007F0A CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00007F0F DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00007F14 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00007F19 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00007F1E 18                         byte_5700:	dc.b $18
00007F1F 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00007F24 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00007F29 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00007F2E 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00007F33 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00007F38 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00007F3D 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00007F42 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00007F47 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00007F4C B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00007F51 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00007F56 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00007F5B C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00007F60 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00007F65 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00007F6A D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00007F6F D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00007F74 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00007F79 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00007F7E E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00007F83 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00007F88 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00007F8D F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00007F92 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00007F98 00                         		even
00007F98 00                         		even
00007F98                            
00007F98                            ; ---------------------------------------------------------------------------
00007F98                            ; Sprite mappings - chaos emeralds on the ending sequence
00007F98                            ; ---------------------------------------------------------------------------
00007F98                            Map_obj88:
00007F98                            	include "_maps\obj88.asm"
00007F98                            ; ---------------------------------------------------------------------------
00007F98                            ; Sprite mappings - chaos emeralds on the ending sequence
00007F98                            ; ---------------------------------------------------------------------------
00007F98 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00007F9C 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00007FA0 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00007FA4 0000                       		dc.w byte_57AC-Map_obj88
00007FA6 01                         byte_5788:	dc.b 1
00007FA7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007FAC 01                         byte_578E:	dc.b 1
00007FAD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00007FB2 01                         byte_5794:	dc.b 1
00007FB3 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00007FB8 01                         byte_579A:	dc.b 1
00007FB9 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00007FBE 01                         byte_57A0:	dc.b 1
00007FBF F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00007FC4 01                         byte_57A6:	dc.b 1
00007FC5 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00007FCA 01                         byte_57AC:	dc.b 1
00007FCB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00007FD0                            		even
00007FD0                            		even
00007FD0                            
00007FD0                            ; ---------------------------------------------------------------------------
00007FD0                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00007FD0                            ; ---------------------------------------------------------------------------
00007FD0                            Map_obj89:
00007FD0                            	include "_maps\obj89.asm"
00007FD0                            ; ---------------------------------------------------------------------------
00007FD0                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00007FD0                            ; ---------------------------------------------------------------------------
00007FD0 0000                       		dc.w byte_57B4-Map_obj89
00007FD2 03                         byte_57B4:	dc.b 3
00007FD3 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00007FD8 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00007FDD F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00007FE2                            		even
00007FE2                            		even
00007FE2                            
00007FE2                            ; ===========================================================================
00007FE2                            ; ---------------------------------------------------------------------------
00007FE2                            ; Credits ending sequence
00007FE2                            ; ---------------------------------------------------------------------------
00007FE2                            
00007FE2                            Credits:				; XREF: GameModeArray
00007FE2 6100 941C                  		bsr.w	ClearPLC
00007FE6 6100 A3DA                  		bsr.w	Pal_FadeFrom
00007FEA 4DF9 00C0 0004             		lea	($C00004).l,a6
00007FF0 3CBC 8004                  		move.w	#$8004,(a6)
00007FF4 3CBC 8230                  		move.w	#$8230,(a6)
00007FF8 3CBC 8407                  		move.w	#$8407,(a6)
00007FFC 3CBC 9001                  		move.w	#$9001,(a6)
00008000 3CBC 9200                  		move.w	#$9200,(a6)
00008004 3CBC 8B03                  		move.w	#$8B03,(a6)
00008008 3CBC 8720                  		move.w	#$8720,(a6)
0000800C 4238 F64E                  		clr.b	($FFFFF64E).w
00008010 6100 9000                  		bsr.w	ClearScreen
00008014 43F8 D000                  		lea	($FFFFD000).w,a1
00008018 7000                       		moveq	#0,d0
0000801A 323C 07FF                  		move.w	#$7FF,d1
0000801E                            
0000801E                            Cred_ClrObjRam:
0000801E 22C0                       		move.l	d0,(a1)+
00008020 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00008024                            
00008024 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000802E 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00008034 6100 9216                  		bsr.w	NemDec
00008038 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000803C 7000                       		moveq	#0,d0
0000803E 323C 001F                  		move.w	#$1F,d1
00008042                            
00008042                            Cred_ClrPallet:
00008042 22C0                       		move.l	d0,(a1)+
00008044 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00008048                            
00008048 7003                       		moveq	#3,d0
0000804A 6100 A624                  		bsr.w	PalLoad1	; load Sonic's pallet
0000804E 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00008054 4EB9 0000 0000             		jsr	ObjectsLoad
0000805A 4EB9 0000 0000             		jsr	BuildSprites
00008060 6100 0000                  		bsr.w	EndingDemoLoad
00008064 7000                       		moveq	#0,d0
00008066 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000806A E948                       		lsl.w	#4,d0
0000806C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00008072 45F2 0000                  		lea	(a2,d0.w),a2
00008076 7000                       		moveq	#0,d0
00008078 1012                       		move.b	(a2),d0
0000807A 6700                       		beq.s	loc_5862
0000807C 6100 9324                  		bsr.w	LoadPLC		; load level patterns
00008080                            
00008080                            loc_5862:
00008080 7001                       		moveq	#1,d0
00008082 6100 931E                  		bsr.w	LoadPLC		; load standard	level patterns
00008086 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
0000808C 6100 A27E                  		bsr.w	Pal_FadeTo
00008090                            
00008090                            Cred_WaitLoop:
00008090 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00008096 6100 B66C                  		bsr.w	DelayProgram
0000809A 6100 9372                  		bsr.w	RunPLC_RAM
0000809E 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000080A2 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000080A4 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000080A8 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000080AA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000080B0 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000080B4 4E75                       		rts	
000080B6                            
000080B6                            ; ---------------------------------------------------------------------------
000080B6                            ; Ending sequence demo loading subroutine
000080B6                            ; ---------------------------------------------------------------------------
000080B6                            
000080B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080B6                            
000080B6                            
000080B6                            EndingDemoLoad:				; XREF: Credits
000080B6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000080BA 0240 000F                  		andi.w	#$F,d0
000080BE D040                       		add.w	d0,d0
000080C0 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000080C4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000080C8 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000080CC 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000080D2 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000080D4 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000080DA 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000080E0 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000080E6 7000                       		moveq	#0,d0
000080E8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000080EC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000080F0 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000080F4 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000080F8 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000080FE 6600                       		bne.s	EndDemo_Exit	; if not, branch
00008100 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00008106 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000810A 303C 0008                  		move.w	#8,d0
0000810E                            
0000810E                            EndDemo_LampLoad:
0000810E 24D9                       		move.l	(a1)+,(a2)+
00008110 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00008114                            
00008114                            EndDemo_Exit:
00008114 4E75                       		rts	
00008116                            ; End of function EndingDemoLoad
00008116                            
00008116                            ; ===========================================================================
00008116                            ; ---------------------------------------------------------------------------
00008116                            ; Levels used in the end sequence demos
00008116                            ; ---------------------------------------------------------------------------
00008116                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00008126                            
00008126                            ; ---------------------------------------------------------------------------
00008126                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00008126                            ; ---------------------------------------------------------------------------
00008126                            EndDemo_LampVar:
00008126 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00008128 0A00 062C 000D             		dc.w $A00, $62C, $D
0000812E 0000 0000                  		dc.l 0
00008132 0000                       		dc.b 0,	0
00008134 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00008148 0101                       		dc.b 1,	1
0000814A                            ; ===========================================================================
0000814A                            ; ---------------------------------------------------------------------------
0000814A                            ; "TRY AGAIN" and "END"	screens
0000814A                            ; ---------------------------------------------------------------------------
0000814A                            
0000814A                            TryAgainEnd:				; XREF: Credits
0000814A 6100 92B4                  		bsr.w	ClearPLC
0000814E 6100 A272                  		bsr.w	Pal_FadeFrom
00008152 4DF9 00C0 0004             		lea	($C00004).l,a6
00008158 3CBC 8004                  		move.w	#$8004,(a6)
0000815C 3CBC 8230                  		move.w	#$8230,(a6)
00008160 3CBC 8407                  		move.w	#$8407,(a6)
00008164 3CBC 9001                  		move.w	#$9001,(a6)
00008168 3CBC 9200                  		move.w	#$9200,(a6)
0000816C 3CBC 8B03                  		move.w	#$8B03,(a6)
00008170 3CBC 8720                  		move.w	#$8720,(a6)
00008174 4238 F64E                  		clr.b	($FFFFF64E).w
00008178 6100 8E98                  		bsr.w	ClearScreen
0000817C 43F8 D000                  		lea	($FFFFD000).w,a1
00008180 7000                       		moveq	#0,d0
00008182 323C 07FF                  		move.w	#$7FF,d1
00008186                            
00008186                            TryAg_ClrObjRam:
00008186 22C0                       		move.l	d0,(a1)+
00008188 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000818C                            
0000818C 701D                       		moveq	#$1D,d0
0000818E 6100 937E                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00008192 43F8 FB80                  		lea	($FFFFFB80).w,a1
00008196 7000                       		moveq	#0,d0
00008198 323C 001F                  		move.w	#$1F,d1
0000819C                            
0000819C                            TryAg_ClrPallet:
0000819C 22C0                       		move.l	d0,(a1)+
0000819E 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000081A2                            
000081A2 7013                       		moveq	#$13,d0
000081A4 6100 A4CA                  		bsr.w	PalLoad1	; load ending pallet
000081A8 4278 FBC0                  		clr.w	($FFFFFBC0).w
000081AC 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000081B2 4EB9 0000 0000             		jsr	ObjectsLoad
000081B8 4EB9 0000 0000             		jsr	BuildSprites
000081BE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000081C4 6100 A146                  		bsr.w	Pal_FadeTo
000081C8                            
000081C8                            ; ---------------------------------------------------------------------------
000081C8                            ; "TRY AGAIN" and "END"	screen main loop
000081C8                            ; ---------------------------------------------------------------------------
000081C8                            TryAg_MainLoop:
000081C8 6100 8F50                  		bsr.w	PauseGame
000081CC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000081D2 6100 B530                  		bsr.w	DelayProgram
000081D6 4EB9 0000 0000             		jsr	ObjectsLoad
000081DC 4EB9 0000 0000             		jsr	BuildSprites
000081E2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000081E8 6600                       		bne.s	TryAg_Exit	; if yes, branch
000081EA 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000081EE 6700                       		beq.s	TryAg_Exit	; if yes, branch
000081F0 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000081F6 67D0                       		beq.s	TryAg_MainLoop
000081F8                            
000081F8                            TryAg_Exit:
000081F8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000081FE 4E75                       		rts	
00008200                            
00008200                            ; ===========================================================================
00008200                            ; ---------------------------------------------------------------------------
00008200                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00008200                            ; ---------------------------------------------------------------------------
00008200                            
00008200                            Obj8B:					; XREF: Obj_Index
00008200 7000                       		moveq	#0,d0
00008202 1028 0024                  		move.b	$24(a0),d0
00008206 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000820A 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
0000820E 4EF9 0000 0000             		jmp	DisplaySprite
00008214                            ; ===========================================================================
00008214 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00008216 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00008218 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000821A 0000                       		dc.w loc_5A8E-Obj8B_Index
0000821C                            ; ===========================================================================
0000821C                            
0000821C                            Obj8B_Main:				; XREF: Obj8B_Index
0000821C 5428 0024                  		addq.b	#2,$24(a0)
00008220 317C 0120 0008             		move.w	#$120,8(a0)
00008226 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000822C 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00008234 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000823A 117C 0000 0001             		move.b	#0,1(a0)
00008240 117C 0002 0018             		move.b	#2,$18(a0)
00008246 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000824C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00008252 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00008254 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
0000825A 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00008260 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00008266 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000826C                            
0000826C                            Obj8B_Animate:				; XREF: Obj8B_Index
0000826C 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00008272 4EF9 0000 0000             		jmp	AnimateSprite
00008278                            ; ===========================================================================
00008278                            
00008278                            Obj8B_Juggle:				; XREF: Obj8B_Index
00008278 5428 0024                  		addq.b	#2,$24(a0)
0000827C 7002                       		moveq	#2,d0
0000827E 0828 0000 001C             		btst	#0,$1C(a0)
00008284 6700                       		beq.s	loc_5A6A
00008286 4440                       		neg.w	d0
00008288                            
00008288                            loc_5A6A:
00008288 43F8 D800                  		lea	($FFFFD800).w,a1
0000828C 7205                       		moveq	#5,d1
0000828E                            
0000828E                            loc_5A70:
0000828E 1340 003E                  		move.b	d0,$3E(a1)
00008292 3400                       		move.w	d0,d2
00008294 E742                       		asl.w	#3,d2
00008296 D529 0026                  		add.b	d2,$26(a1)
0000829A 43E9 0040                  		lea	$40(a1),a1
0000829E 51C9 FFEE                  		dbf	d1,loc_5A70
000082A2 5228 001A                  		addq.b	#1,$1A(a0)
000082A6 317C 0070 0030             		move.w	#112,$30(a0)
000082AC                            
000082AC                            loc_5A8E:				; XREF: Obj8B_Index
000082AC 5368 0030                  		subq.w	#1,$30(a0)
000082B0 6A00                       		bpl.s	locret_5AA0
000082B2 0868 0000 001C             		bchg	#0,$1C(a0)
000082B8 117C 0002 0024             		move.b	#2,$24(a0)
000082BE                            
000082BE                            locret_5AA0:
000082BE 4E75                       		rts	
000082C0                            ; ===========================================================================
000082C0                            Ani_obj8B:
000082C0                            	include "_anim\obj8B.asm"
000082C0                            ; ---------------------------------------------------------------------------
000082C0                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000082C0                            ; ---------------------------------------------------------------------------
000082C0 0000                       		dc.w byte_5AA8-Ani_obj8B
000082C2 0000                       		dc.w byte_5AAC-Ani_obj8B
000082C4 0000                       		dc.w byte_5AB0-Ani_obj8B
000082C6 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000082CA 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000082CE 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
000082E0                            		even
000082E0                            		even
000082E0                            
000082E0                            ; ===========================================================================
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            
000082E0                            Obj8C:					; XREF: Obj_Index
000082E0 7000                       		moveq	#0,d0
000082E2 1028 0024                  		move.b	$24(a0),d0
000082E6 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
000082EA 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
000082EE 4EF9 0000 0000             		jmp	DisplaySprite
000082F4                            ; ===========================================================================
000082F4 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
000082F6 0000                       		dc.w Obj8C_Move-Obj8C_Index
000082F8                            ; ===========================================================================
000082F8                            
000082F8                            Obj8C_Main:				; XREF: Obj8C_Index
000082F8 2248                       		movea.l	a0,a1
000082FA 7400                       		moveq	#0,d2
000082FC 7600                       		moveq	#0,d3
000082FE 7205                       		moveq	#5,d1
00008300 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00008304                            
00008304                            Obj8C_MakeEms:				; XREF: loc_5B42
00008304 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00008308 5429 0024                  		addq.b	#2,$24(a1)
0000830C 237C 0000 7F98 0004        		move.l	#Map_obj88,4(a1)
00008314 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000831A 137C 0000 0001             		move.b	#0,1(a1)
00008320 137C 0001 0018             		move.b	#1,$18(a1)
00008326 337C 0104 0008             		move.w	#$104,8(a1)
0000832C 337C 0120 0038             		move.w	#$120,$38(a1)
00008332 337C 00EC 000A             		move.w	#$EC,$A(a1)
00008338 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000833E 137C 001C 003C             		move.b	#$1C,$3C(a1)
00008344 47F8 FE58                  		lea	($FFFFFE58).w,a3
00008348                            
00008348                            Obj8C_ChkEms:
00008348 7000                       		moveq	#0,d0
0000834A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000834E 5340                       		subq.w	#1,d0
00008350 6500                       		bcs.s	loc_5B42
00008352                            
00008352                            Obj8C_ChkEmLoop:
00008352 B433 0000                  		cmp.b	(a3,d0.w),d2
00008356 6600                       		bne.s	loc_5B3E
00008358 5202                       		addq.b	#1,d2
0000835A 60EC                       		bra.s	Obj8C_ChkEms
0000835C                            ; ===========================================================================
0000835C                            
0000835C                            loc_5B3E:
0000835C 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00008360                            
00008360                            loc_5B42:
00008360 1342 001A                  		move.b	d2,$1A(a1)
00008364 5229 001A                  		addq.b	#1,$1A(a1)
00008368 5202                       		addq.b	#1,d2
0000836A 137C 0080 0026             		move.b	#$80,$26(a1)
00008370 1343 001E                  		move.b	d3,$1E(a1)
00008374 1343 001F                  		move.b	d3,$1F(a1)
00008378 0643 000A                  		addi.w	#$A,d3
0000837C 43E9 0040                  		lea	$40(a1),a1
00008380 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00008384                            
00008384                            Obj8C_Move:				; XREF: Obj8C_Index
00008384 4A68 003E                  		tst.w	$3E(a0)
00008388 6700                       		beq.s	locret_5BBA
0000838A 4A28 001E                  		tst.b	$1E(a0)
0000838E 6700                       		beq.s	loc_5B78
00008390 5328 001E                  		subq.b	#1,$1E(a0)
00008394 6600                       		bne.s	loc_5B80
00008396                            
00008396                            loc_5B78:
00008396 3028 003E                  		move.w	$3E(a0),d0
0000839A D168 0026                  		add.w	d0,$26(a0)
0000839E                            
0000839E                            loc_5B80:
0000839E 1028 0026                  		move.b	$26(a0),d0
000083A2 6700                       		beq.s	loc_5B8C
000083A4 0C00 0080                  		cmpi.b	#$80,d0
000083A8 6600                       		bne.s	loc_5B96
000083AA                            
000083AA                            loc_5B8C:
000083AA 4268 003E                  		clr.w	$3E(a0)
000083AE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000083B4                            
000083B4                            loc_5B96:
000083B4 4EB9 0000 3736             		jsr	(CalcSine).l
000083BA 7800                       		moveq	#0,d4
000083BC 1828 003C                  		move.b	$3C(a0),d4
000083C0 C3C4                       		muls.w	d4,d1
000083C2 E081                       		asr.l	#8,d1
000083C4 C1C4                       		muls.w	d4,d0
000083C6 E080                       		asr.l	#8,d0
000083C8 D268 0038                  		add.w	$38(a0),d1
000083CC D068 003A                  		add.w	$3A(a0),d0
000083D0 3141 0008                  		move.w	d1,8(a0)
000083D4 3140 000A                  		move.w	d0,$A(a0)
000083D8                            
000083D8                            locret_5BBA:
000083D8 4E75                       		rts	
000083DA                            ; ===========================================================================
000083DA                            ; ---------------------------------------------------------------------------
000083DA                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000083DA                            ; ---------------------------------------------------------------------------
000083DA                            Map_obj8B:
000083DA                            	include "_maps\obj8B.asm"
000083DA                            ; ---------------------------------------------------------------------------
000083DA                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000083DA                            ; ---------------------------------------------------------------------------
000083DA 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000083DE 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000083E2 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000083E6 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000083EA 08                         byte_5BCC:	dc.b 8
000083EB E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000083F0 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000083F5 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000083FA F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000083FF 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00008404 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00008409 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000840E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00008413 08                         byte_5BF5:	dc.b 8
00008414 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00008419 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000841E E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00008423 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00008428 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000842D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00008432 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00008437 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000843C 08                         byte_5C1E:	dc.b 8
0000843D E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00008442 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00008447 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000844C F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00008451 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00008456 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000845B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00008460 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00008465 08                         byte_5C47:	dc.b 8
00008466 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000846B F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00008470 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00008475 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000847A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000847F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00008484 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00008489 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000848E 0C                         byte_5C70:	dc.b $C
0000848F ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00008494 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00008499 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000849E 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000084A3 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000084A8 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000084AD 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000084B2 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000084B7 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000084BC 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000084C1 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000084C6 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000084CB 0A                         byte_5CAD:	dc.b $A
000084CC D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000084D1 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000084D6 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000084DB D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000084E0 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000084E5 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000084EA 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000084EF 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000084F4 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000084F9 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000084FE 0A                         byte_5CE0:	dc.b $A
000084FF C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00008504 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00008509 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000850E C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00008513 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00008518 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000851D 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00008522 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00008527 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000852C 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00008531 0C                         byte_5D13:	dc.b $C
00008532 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00008537 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000853C 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00008541 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00008546 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000854B FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00008550 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00008555 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000855A 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000855F 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00008564 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00008569 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000856E                            		even
0000856E                            		even
0000856E                            
0000856E                            ; ---------------------------------------------------------------------------
0000856E                            ; Ending sequence demos
0000856E                            ; ---------------------------------------------------------------------------
0000856E                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000859C                            		even
0000859C                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000085DC                            		even
000085DC                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000860C                            		even
0000860C                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000863C                            		even
0000863C                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000865C                            		even
0000865C                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000867C                            		even
0000867C                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000086AC                            		even
000086AC                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000086DC                            		even
000086DC                            
000086DC                            ; ---------------------------------------------------------------------------
000086DC                            ; Subroutine to	load level boundaries and start	locations
000086DC                            ; ---------------------------------------------------------------------------
000086DC                            
000086DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086DC                            
000086DC                            
000086DC                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000086DC 7000                       		moveq	#0,d0
000086DE 11C0 F740                  		move.b	d0,($FFFFF740).w
000086E2 11C0 F741                  		move.b	d0,($FFFFF741).w
000086E6 11C0 F746                  		move.b	d0,($FFFFF746).w
000086EA 11C0 F748                  		move.b	d0,($FFFFF748).w
000086EE 11C0 F742                  		move.b	d0,($FFFFF742).w
000086F2 3038 FE10                  		move.w	($FFFFFE10).w,d0
000086F6 ED08                       		lsl.b	#6,d0
000086F8 E848                       		lsr.w	#4,d0
000086FA 3200                       		move.w	d0,d1
000086FC D040                       		add.w	d0,d0
000086FE D041                       		add.w	d1,d0
00008700 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00008704 3018                       		move.w	(a0)+,d0
00008706 31C0 F730                  		move.w	d0,($FFFFF730).w
0000870A 2018                       		move.l	(a0)+,d0
0000870C 21C0 F728                  		move.l	d0,($FFFFF728).w
00008710 21C0 F720                  		move.l	d0,($FFFFF720).w
00008714 2018                       		move.l	(a0)+,d0
00008716 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000871A 21C0 F724                  		move.l	d0,($FFFFF724).w
0000871E 3038 F728                  		move.w	($FFFFF728).w,d0
00008722 0640 0240                  		addi.w	#$240,d0
00008726 31C0 F732                  		move.w	d0,($FFFFF732).w
0000872A 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00008730 3018                       		move.w	(a0)+,d0
00008732 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00008736 6000 0000                  		bra.w	LevSz_ChkLamp
0000873A                            ; ===========================================================================
0000873A                            ; ---------------------------------------------------------------------------
0000873A                            ; Level size array and ending start location array
0000873A                            ; ---------------------------------------------------------------------------
0000873A                            LevelSizeArray:	incbin	misc\lvl_size.bin
0000888A                            		even
0000888A                            
0000888A                            EndingStLocArray:
0000888A                            		incbin	misc\sloc_end.bin
000088AA                            		even
000088AA                            
000088AA                            ; ===========================================================================
000088AA                            
000088AA                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000088AA 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000088AE 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000088B0 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000088B6 3238 D008                  		move.w	($FFFFD008).w,d1
000088BA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000088BE 6000                       		bra.s	loc_60D0
000088C0                            ; ===========================================================================
000088C0                            
000088C0                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000088C0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000088C4 ED08                       		lsl.b	#6,d0
000088C6 E848                       		lsr.w	#4,d0
000088C8 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000088CC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000088D0 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000088D2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000088D6 5340                       		subq.w	#1,d0
000088D8 E548                       		lsl.w	#2,d0
000088DA 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000088DE                            
000088DE                            LevSz_SonicPos:
000088DE 7200                       		moveq	#0,d1
000088E0 3219                       		move.w	(a1)+,d1
000088E2 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000088E6 7000                       		moveq	#0,d0
000088E8 3011                       		move.w	(a1),d0
000088EA 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000088EE                            
000088EE                            loc_60D0:				; XREF: LevSz_ChkLamp
000088EE 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
000088F2 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
000088F6 743F                       		moveq	#63,d2				; begin a 64-step loop
000088F8                            @looppoint:
000088F8 34C1                       		move.w	d1,(a2)+			; fill in X
000088FA 34C0                       		move.w	d0,(a2)+			; fill in Y
000088FC 51CA FFFA                  		dbf	d2,@looppoint		; loop
00008900 0441 00A0                  		subi.w	#$A0,d1
00008904 6400                       		bcc.s	loc_60D8
00008906 7200                       		moveq	#0,d1
00008908                            
00008908                            loc_60D8:
00008908 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000890C B242                       		cmp.w	d2,d1
0000890E 6500                       		bcs.s	loc_60E2
00008910 3202                       		move.w	d2,d1
00008912                            
00008912                            loc_60E2:
00008912 31C1 F700                  		move.w	d1,($FFFFF700).w
00008916 0440 0060                  		subi.w	#$60,d0
0000891A 6400                       		bcc.s	loc_60EE
0000891C 7000                       		moveq	#0,d0
0000891E                            
0000891E                            loc_60EE:
0000891E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00008922 6D00                       		blt.s	loc_60F8
00008924 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008928                            
00008928                            loc_60F8:
00008928 31C0 F704                  		move.w	d0,($FFFFF704).w
0000892C 6100 0000                  		bsr.w	BgScrollSpeed
00008930 7000                       		moveq	#0,d0
00008932 1038 FE10                  		move.b	($FFFFFE10).w,d0
00008936 E508                       		lsl.b	#2,d0
00008938 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000893E 6000 0000                  		bra.w	LevSz_Unk
00008942                            ; ===========================================================================
00008942                            ; ---------------------------------------------------------------------------
00008942                            ; Sonic	start location array
00008942                            ; ---------------------------------------------------------------------------
00008942                            StartLocArray:	incbin	misc\sloc_lev.bin
000089B2                            		even
000089B2                            
000089B2                            ; ---------------------------------------------------------------------------
000089B2                            ; Which	256x256	tiles contain loops or roll-tunnels
000089B2                            ; ---------------------------------------------------------------------------
000089B2                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000089B2                            ; loop,	loop, tunnel, tunnel
000089B2                            ; ---------------------------------------------------------------------------
000089B2                            LoopTileNums:	incbin	misc\loopnums.bin
000089CE                            		even
000089CE                            
000089CE                            ; ===========================================================================
000089CE                            
000089CE                            LevSz_Unk:				; XREF: LevelSizeLoad
000089CE 7000                       		moveq	#0,d0
000089D0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000089D4 E748                       		lsl.w	#3,d0
000089D6 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000089DA 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000089DE 24D9                       		move.l	(a1)+,(a2)+
000089E0 24D9                       		move.l	(a1)+,(a2)+
000089E2 4E75                       		rts	
000089E4                            ; End of function LevelSizeLoad
000089E4                            
000089E4                            ; ===========================================================================
000089E4 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000089EC 0800 0100 0100 0000        		dc.l $8000100, $1000000
000089F4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000089FC 0800 0100 0100 0000        		dc.l $8000100, $1000000
00008A04 0800 0100 0100 0000        		dc.l $8000100, $1000000
00008A0C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00008A14 0070 0100 0100 0100        		dc.l $700100, $1000100
00008A1C                            
00008A1C                            ; ---------------------------------------------------------------------------
00008A1C                            ; Subroutine to	set scroll speed of some backgrounds
00008A1C                            ; ---------------------------------------------------------------------------
00008A1C                            
00008A1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A1C                            
00008A1C                            
00008A1C                            BgScrollSpeed:				; XREF: LevelSizeLoad
00008A1C 4A38 FE30                  		tst.b	($FFFFFE30).w
00008A20 6600                       		bne.s	loc_6206
00008A22 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008A26 31C0 F714                  		move.w	d0,($FFFFF714).w
00008A2A 31C1 F708                  		move.w	d1,($FFFFF708).w
00008A2E 31C1 F710                  		move.w	d1,($FFFFF710).w
00008A32 31C1 F718                  		move.w	d1,($FFFFF718).w
00008A36                            
00008A36                            loc_6206:
00008A36 7400                       		moveq	#0,d2
00008A38 1438 FE10                  		move.b	($FFFFFE10).w,d2
00008A3C D442                       		add.w	d2,d2
00008A3E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00008A42 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00008A46                            ; End of function BgScrollSpeed
00008A46                            
00008A46                            ; ===========================================================================
00008A46 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00008A4A 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00008A4E 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00008A52 0000                       		dc.w BgScroll_End-BgScroll_Index
00008A54                            ; ===========================================================================
00008A54                            
00008A54                            BgScroll_GHZ:				; XREF: BgScroll_Index
00008A54 42B8 F708                  		clr.l	($FFFFF708).w
00008A58 42B8 F70C                  		clr.l	($FFFFF70C).w
00008A5C 42B8 F714                  		clr.l	($FFFFF714).w
00008A60 42B8 F71C                  		clr.l	($FFFFF71C).w
00008A64 45F8 A800                  		lea	($FFFFA800).w,a2
00008A68 429A                       		clr.l	(a2)+
00008A6A 429A                       		clr.l	(a2)+
00008A6C 429A                       		clr.l	(a2)+
00008A6E 4E75                       		rts 
00008A70                            ; ===========================================================================
00008A70                            
00008A70                            BgScroll_LZ:				; XREF: BgScroll_Index
00008A70 E280                       		asr.l	#1,d0
00008A72 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008A76 4E75                       		rts	
00008A78                            ; ===========================================================================
00008A78                            
00008A78                            BgScroll_MZ:				; XREF: BgScroll_Index
00008A78 4E75                       		rts	
00008A7A                            ; ===========================================================================
00008A7A                            
00008A7A                            BgScroll_SLZ:				; XREF: BgScroll_Index
00008A7A E280                       		asr.l	#1,d0
00008A7C 0640 00C0                  		addi.w	#$C0,d0
00008A80 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008A84 42B8 F708                  		clr.l	($FFFFF708).w
00008A88 4E75                       		rts	
00008A8A                            ; ===========================================================================
00008A8A                            
00008A8A                            BgScroll_SYZ:				; XREF: BgScroll_Index
00008A8A E980                       		asl.l	#4,d0
00008A8C 2400                       		move.l	d0,d2
00008A8E E380                       		asl.l	#1,d0
00008A90 D082                       		add.l	d2,d0
00008A92 E080                       		asr.l	#8,d0
00008A94 5240                       		addq.w	#1,d0
00008A96 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008A9A 42B8 F708                  		clr.l	($FFFFF708).w
00008A9E 4E75                       		rts	
00008AA0                            ; ===========================================================================
00008AA0                            
00008AA0                            BgScroll_SBZ:				; XREF: BgScroll_Index
00008AA0 0240 07F8                  		andi.w	#$7F8,d0
00008AA4 E640                       		asr.w	#3,d0
00008AA6 5240                       		addq.w	#1,d0
00008AA8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00008AAC 4E75                       		rts	
00008AAE                            ; ===========================================================================
00008AAE                            
00008AAE                            BgScroll_End:				; XREF: BgScroll_Index
00008AAE 3038 F700                  		move.w	($FFFFF700).w,d0
00008AB2 E240                       		asr.w	#1,d0
00008AB4 31C0 F708                  		move.w	d0,($FFFFF708).w
00008AB8 31C0 F710                  		move.w	d0,($FFFFF710).w
00008ABC E440                       		asr.w	#2,d0
00008ABE 3200                       		move.w	d0,d1
00008AC0 D040                       		add.w	d0,d0
00008AC2 D041                       		add.w	d1,d0
00008AC4 31C0 F718                  		move.w	d0,($FFFFF718).w
00008AC8 42B8 F70C                  		clr.l	($FFFFF70C).w
00008ACC 42B8 F714                  		clr.l	($FFFFF714).w
00008AD0 42B8 F71C                  		clr.l	($FFFFF71C).w
00008AD4 45F8 A800                  		lea	($FFFFA800).w,a2
00008AD8 429A                       		clr.l	(a2)+
00008ADA 429A                       		clr.l	(a2)+
00008ADC 429A                       		clr.l	(a2)+
00008ADE 4E75                       		rts
00008AE0                            
00008AE0                            ; ---------------------------------------------------------------------------
00008AE0                            ; Background layer deformation subroutines
00008AE0                            ; ---------------------------------------------------------------------------
00008AE0                            
00008AE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AE0                            
00008AE0                            
00008AE0                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00008AE0 4A38 F744                  		tst.b	($FFFFF744).w
00008AE4 6700                       		beq.s	loc_628E
00008AE6 4E75                       		rts	
00008AE8                            ; ===========================================================================
00008AE8                            
00008AE8                            loc_628E:
00008AE8 4278 F754                  		clr.w	($FFFFF754).w
00008AEC 4278 F756                  		clr.w	($FFFFF756).w
00008AF0 4278 F758                  		clr.w	($FFFFF758).w
00008AF4 4278 F75A                  		clr.w	($FFFFF75A).w
00008AF8 6100 0000                  		bsr.w	ScrollHoriz
00008AFC 6100 0000                  		bsr.w	ScrollVertical
00008B00 6100 0000                  		bsr.w	DynScrResizeLoad
00008B04 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00008B0A 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00008B10 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00008B16 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008B1C 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00008B22 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00008B28 7000                       		moveq	#0,d0
00008B2A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00008B2E D040                       		add.w	d0,d0
00008B30 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00008B34 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00008B38                            ; End of function DeformBgLayer
00008B38                            
00008B38                            ; ===========================================================================
00008B38                            ; ---------------------------------------------------------------------------
00008B38                            ; Offset index for background layer deformation	code
00008B38                            ; ---------------------------------------------------------------------------
00008B38 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00008B3C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00008B40 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00008B44 0000                       		dc.w Deform_GHZ-Deform_Index
00008B46                            ; ---------------------------------------------------------------------------
00008B46                            ; Green	Hill Zone background layer deformation code
00008B46                            ; ---------------------------------------------------------------------------
00008B46                            
00008B46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B46                            
00008B46                            Deform_GHZ:
00008B46 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008B4A 48C4                       		ext.l	d4
00008B4C EB84                       		asl.l	#5,d4
00008B4E 2204                       		move.l	d4,d1
00008B50 E384                       		asl.l	#1,d4
00008B52 D881                       		add.l	d1,d4
00008B54 7C00                       		moveq	#0,d6
00008B56 6100 0000                  		bsr.w	ScrollBlock6
00008B5A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008B5E 48C4                       		ext.l	d4
00008B60 EF84                       		asl.l	#7,d4
00008B62 7C00                       		moveq	#0,d6
00008B64 6100 0000                  		bsr.w	ScrollBlock5
00008B68 43F8 CC00                  		lea	($FFFFCC00).w,a1
00008B6C 3038 F704                  		move.w	($FFFFF704).w,d0
00008B70 0240 07FF                  		andi.w	#$7FF,d0
00008B74 EA48                       		lsr.w	#5,d0
00008B76 4440                       		neg.w	d0
00008B78 0640 0020                  		addi.w	#$20,d0	; ' '
00008B7C 6A00                       		bpl.s	Deform_GHZ_1
00008B7E 7000                       		moveq	#0,d0
00008B80                            
00008B80                            Deform_GHZ_1:				; XREF: Deform_GHZ
00008B80 3800                       		move.w	d0,d4
00008B82 31C0 F618                  		move.w	d0,($FFFFF618).w
00008B86 3038 F700                  		move.w	($FFFFF700).w,d0
00008B8A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00008B90 6600                       		bne.s	Deform_GHZ_2
00008B92 7000                       		moveq	#0,d0
00008B94                            Deform_GHZ_2:				; XREF: Deform_GHZ
00008B94 4440                       		neg.w	d0
00008B96 4840                       		swap	d0
00008B98 45F8 A800                  		lea	($FFFFA800).w,a2
00008B9C 069A 0001 0000             		addi.l	#$10000,(a2)+
00008BA2 069A 0000 C000             		addi.l	#$C000,(a2)+
00008BA8 069A 0000 8000             		addi.l	#$8000,(a2)+
00008BAE 3038 A800                  		move.w	($FFFFA800).w,d0
00008BB2 D078 F718                  		add.w	($FFFFF718).w,d0
00008BB6 4440                       		neg.w	d0
00008BB8 323C 001F                  		move.w	#$1F,d1
00008BBC 9244                       		sub.w	d4,d1
00008BBE 6500                       		bcs.s	Deform_GHZ_4
00008BC0                            Deform_GHZ_3:				; XREF: Deform_GHZ
00008BC0 22C0                       		move.l	d0,(a1)+
00008BC2 51C9 FFFC                  		dbf	d1,Deform_GHZ_3
00008BC6                            
00008BC6                            Deform_GHZ_4:				; XREF: Deform_GHZ
00008BC6 3038 A804                  		move.w	($FFFFA804).w,d0
00008BCA D078 F718                  		add.w	($FFFFF718).w,d0
00008BCE 4440                       		neg.w	d0
00008BD0 323C 000F                  		move.w	#$F,d1
00008BD4                            
00008BD4                            Deform_GHZ_5:				; XREF: Deform_GHZ
00008BD4 22C0                       		move.l	d0,(a1)+
00008BD6 51C9 FFFC                  		dbf	d1,Deform_GHZ_5
00008BDA 3038 A808                  		move.w	($FFFFA808).w,d0
00008BDE D078 F718                  		add.w	($FFFFF718).w,d0
00008BE2 4440                       		neg.w	d0
00008BE4 323C 000F                  		move.w	#$F,d1
00008BE8                            
00008BE8                            Deform_GHZ_6:				; XREF: Deform_GHZ
00008BE8 22C0                       		move.l	d0,(a1)+
00008BEA 51C9 FFFC                  		dbf	d1,Deform_GHZ_6
00008BEE 323C 002F                  		move.w	#$2F,d1	; '/'
00008BF2 3038 F718                  		move.w	($FFFFF718).w,d0
00008BF6 4440                       		neg.w	d0
00008BF8                            
00008BF8                            Deform_GHZ_7:				; XREF: Deform_GHZ
00008BF8 22C0                       		move.l	d0,(a1)+
00008BFA 51C9 FFFC                  		dbf	d1,Deform_GHZ_7
00008BFE 323C 0027                  		move.w	#$27,d1	; '''
00008C02 3038 F710                  		move.w	($FFFFF710).w,d0
00008C06 4440                       		neg.w	d0
00008C08                            Deform_GHZ_8:				; XREF: Deform_GHZ
00008C08 22C0                       		move.l	d0,(a1)+
00008C0A 51C9 FFFC                  		dbf	d1,Deform_GHZ_8
00008C0E 3038 F710                  		move.w	($FFFFF710).w,d0
00008C12 3438 F700                  		move.w	($FFFFF700).w,d2
00008C16 9440                       		sub.w	d0,d2
00008C18 48C2                       		ext.l	d2
00008C1A E182                       		asl.l	#8,d2
00008C1C 85FC 0068                  		divs.w	#$68,d2	; 'h'
00008C20 48C2                       		ext.l	d2
00008C22 E182                       		asl.l	#8,d2
00008C24 7600                       		moveq	#0,d3
00008C26 3600                       		move.w	d0,d3
00008C28 323C 0047                  		move.w	#$47,d1	; 'G'
00008C2C D244                       		add.w	d4,d1
00008C2E                            Deform_GHZ_9:				; XREF: Deform_GHZ
00008C2E 3003                       		move.w	d3,d0
00008C30 4440                       		neg.w	d0
00008C32 22C0                       		move.l	d0,(a1)+
00008C34 4843                       		swap	d3
00008C36 D682                       		add.l	d2,d3
00008C38 4843                       		swap	d3
00008C3A 51C9 FFF2                  		dbf	d1,Deform_GHZ_9
00008C3E 4E75                       		rts	
00008C40                            ; End of function Deform_GHZ
00008C40                            
00008C40                            
00008C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C40                            
00008C40                            
00008C40                            Deform_LZ:
00008C40 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008C44 48C4                       		ext.l	d4
00008C46 EF84                       		asl.l	#7,d4
00008C48 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00008C4C 48C5                       		ext.l	d5
00008C4E EF85                       		asl.l	#7,d5
00008C50 6100 0000                  		bsr.w	ScrollBlock1
00008C54 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008C5A 47F9 0000 0000             		lea	(LZ_Wave_Data).l,a3
00008C60 45F9 0000 0000             		lea	(Obj0A_WobbleData).l,a2
00008C66 1438 F7D8                  		move.b	($FFFFF7D8).w,d2
00008C6A 1602                       		move.b	d2,d3
00008C6C 0678 0080 F7D8             		addi.w	#$80,($FFFFF7D8).w ; ''
00008C72 D478 F70C                  		add.w	($FFFFF70C).w,d2
00008C76 0242 00FF                  		andi.w	#$FF,d2
00008C7A D678 F704                  		add.w	($FFFFF704).w,d3
00008C7E 0243 00FF                  		andi.w	#$FF,d3
00008C82 43F8 CC00                  		lea	($FFFFCC00).w,a1
00008C86 323C 00DF                  		move.w	#$DF,d1	; 'ß'
00008C8A 3038 F700                  		move.w	($FFFFF700).w,d0
00008C8E 4440                       		neg.w	d0
00008C90 3C00                       		move.w	d0,d6
00008C92 4840                       		swap	d0
00008C94 3038 F708                  		move.w	($FFFFF708).w,d0
00008C98 4440                       		neg.w	d0
00008C9A 3838 F646                  		move.w	($FFFFF646).w,d4
00008C9E 3A38 F704                  		move.w	($FFFFF704).w,d5
00008CA2                            Deform_LZ_1:				; XREF: Deform_LZ
00008CA2 BA44                       		cmp.w	d4,d5
00008CA4 6C00                       		bge.s	Deform_LZ_2
00008CA6 22C0                       		move.l	d0,(a1)+
00008CA8 5245                       		addq.w	#1,d5
00008CAA 5202                       		addq.b	#1,d2
00008CAC 5203                       		addq.b	#1,d3
00008CAE 51C9 FFF2                  		dbf	d1,Deform_LZ_1
00008CB2 4E75                       		rts	
00008CB4                            ; ===========================================================================
00008CB4                            
00008CB4                            Deform_LZ_2:				; XREF: Deform_LZ
00008CB4 1833 3000                  		move.b	(a3,d3.w),d4
00008CB8 4884                       		ext.w	d4
00008CBA D846                       		add.w	d6,d4
00008CBC 32C4                       		move.w	d4,(a1)+
00008CBE 1832 2000                  		move.b	(a2,d2.w),d4
00008CC2 4884                       		ext.w	d4
00008CC4 D840                       		add.w	d0,d4
00008CC6 32C4                       		move.w	d4,(a1)+
00008CC8 5202                       		addq.b	#1,d2
00008CCA 5203                       		addq.b	#1,d3
00008CCC 51C9 FFE6                  		dbf	d1,Deform_LZ_2
00008CD0 4E75                       		rts	
00008CD2                            ; End of function Deform_LZ
00008CD2                            ; ===========================================================================
00008CD2 0101 0202 0303 0303 0202+  LZ_Wave_Data:	dc.b   1,  1,  2,  2,  3,  3,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0
00008CE2 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008CF2 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008D02 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008D12 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008D22 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008D32 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008D42 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008D52 FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,  0,  0,  0,  0
00008D62 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008D72 0101 0202 0303 0303 0202+  		dc.b   1,  1,  2,  2,  3,  3,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0
00008D82 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008D92 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008DA2 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008DB2 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008DC2 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00008DD2                            
00008DD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DD2                            
00008DD2                            
00008DD2                            Deform_MZ:
00008DD2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008DD6 48C4                       		ext.l	d4
00008DD8 ED84                       		asl.l	#6,d4
00008DDA 2204                       		move.l	d4,d1
00008DDC E384                       		asl.l	#1,d4
00008DDE D881                       		add.l	d1,d4
00008DE0 7C02                       		moveq	#2,d6
00008DE2 6100 0000                  		bsr.w	ScrollBlock4
00008DE6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008DEA 48C4                       		ext.l	d4
00008DEC ED84                       		asl.l	#6,d4
00008DEE 7C06                       		moveq	#6,d6
00008DF0 6100 0000                  		bsr.w	ScrollBlock6
00008DF4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00008DF8 48C4                       		ext.l	d4
00008DFA EF84                       		asl.l	#7,d4
00008DFC 7C04                       		moveq	#4,d6
00008DFE 6100 0000                  		bsr.w	ScrollBlock5
00008E02 303C 0200                  		move.w	#$200,d0
00008E06 3238 F704                  		move.w	($FFFFF704).w,d1
00008E0A 0441 01C8                  		subi.w	#$1C8,d1
00008E0E 6500                       		bcs.s	Deform_MZ_1
00008E10 3401                       		move.w	d1,d2
00008E12 D241                       		add.w	d1,d1
00008E14 D242                       		add.w	d2,d1
00008E16 E441                       		asr.w	#2,d1
00008E18 D041                       		add.w	d1,d0
00008E1A                            
00008E1A                            Deform_MZ_1:				; XREF: Deform_MZ
00008E1A 31C0 F714                  		move.w	d0,($FFFFF714).w
00008E1E 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00008E22 6100 0000                  		bsr.w	ScrollBlock3
00008E26 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008E2C 1038 F756                  		move.b	($FFFFF756).w,d0
00008E30 8038 F758                  		or.b	($FFFFF758).w,d0
00008E34 8138 F75A                  		or.b	d0,($FFFFF75A).w
00008E38 4238 F756                  		clr.b	($FFFFF756).w
00008E3C 4238 F758                  		clr.b	($FFFFF758).w
00008E40 43F8 A800                  		lea	($FFFFA800).w,a1
00008E44 3438 F700                  		move.w	($FFFFF700).w,d2
00008E48 4442                       		neg.w	d2
00008E4A 3002                       		move.w	d2,d0
00008E4C E440                       		asr.w	#2,d0
00008E4E 9042                       		sub.w	d2,d0
00008E50 48C0                       		ext.l	d0
00008E52 E780                       		asl.l	#3,d0
00008E54 81FC 0005                  		divs.w	#5,d0
00008E58 48C0                       		ext.l	d0
00008E5A E980                       		asl.l	#4,d0
00008E5C E180                       		asl.l	#8,d0
00008E5E 7600                       		moveq	#0,d3
00008E60 3602                       		move.w	d2,d3
00008E62 E243                       		asr.w	#1,d3
00008E64 323C 0004                  		move.w	#4,d1
00008E68                            
00008E68                            Deform_MZ_2:				; XREF: Deform_MZ
00008E68 32C3                       		move.w	d3,(a1)+
00008E6A 4843                       		swap	d3
00008E6C D680                       		add.l	d0,d3
00008E6E 4843                       		swap	d3
00008E70 51C9 FFF6                  		dbf	d1,Deform_MZ_2
00008E74 3038 F718                  		move.w	($FFFFF718).w,d0
00008E78 4440                       		neg.w	d0
00008E7A 323C 0001                  		move.w	#1,d1
00008E7E                            
00008E7E                            Deform_MZ_3:				; XREF: Deform_MZ
00008E7E 32C0                       		move.w	d0,(a1)+
00008E80 51C9 FFFC                  		dbf	d1,Deform_MZ_3
00008E84 3038 F710                  		move.w	($FFFFF710).w,d0
00008E88 4440                       		neg.w	d0
00008E8A 323C 0008                  		move.w	#8,d1
00008E8E                            
00008E8E                            Deform_MZ_4:				; XREF: Deform_MZ
00008E8E 32C0                       		move.w	d0,(a1)+
00008E90 51C9 FFFC                  		dbf	d1,Deform_MZ_4
00008E94 3038 F708                  		move.w	($FFFFF708).w,d0
00008E98 4440                       		neg.w	d0
00008E9A 323C 000F                  		move.w	#$F,d1
00008E9E                            
00008E9E                            Deform_MZ_5:				; XREF: Deform_MZ
00008E9E 32C0                       		move.w	d0,(a1)+
00008EA0 51C9 FFFC                  		dbf	d1,Deform_MZ_5
00008EA4 45F8 A800                  		lea	($FFFFA800).w,a2
00008EA8 3038 F70C                  		move.w	($FFFFF70C).w,d0
00008EAC 0440 0200                  		subi.w	#$200,d0
00008EB0 3400                       		move.w	d0,d2
00008EB2 0C40 0100                  		cmpi.w	#$100,d0
00008EB6 6500                       		bcs.s	Deform_MZ_6
00008EB8 303C 0100                  		move.w	#$100,d0
00008EBC                            
00008EBC                            Deform_MZ_6:				; XREF: Deform_MZ
00008EBC 0240 01F0                  		andi.w	#$1F0,d0
00008EC0 E648                       		lsr.w	#3,d0
00008EC2 45F2 0000                  		lea	(a2,d0.w),a2
00008EC6 6000 0000                  		bra.w	Deform_All
00008ECA                            ; ===========================================================================
00008ECA                            
00008ECA                            Deform_SLZ:
00008ECA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00008ECE 48C5                       		ext.l	d5
00008ED0 EF85                       		asl.l	#7,d5
00008ED2 6100 0000                  		bsr.w	ScrollBlock2
00008ED6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008EDC 43F8 A800                  		lea	($FFFFA800).w,a1
00008EE0 3438 F700                  		move.w	($FFFFF700).w,d2
00008EE4 4442                       		neg.w	d2
00008EE6 3002                       		move.w	d2,d0
00008EE8 E640                       		asr.w	#3,d0
00008EEA 9042                       		sub.w	d2,d0
00008EEC 48C0                       		ext.l	d0
00008EEE E980                       		asl.l	#4,d0
00008EF0 81FC 001C                  		divs.w	#$1C,d0
00008EF4 48C0                       		ext.l	d0
00008EF6 E980                       		asl.l	#4,d0
00008EF8 E180                       		asl.l	#8,d0
00008EFA 7600                       		moveq	#0,d3
00008EFC 3602                       		move.w	d2,d3
00008EFE 323C 001B                  		move.w	#$1B,d1
00008F02                            
00008F02                            Deform_SLZ_1:				; XREF: Deform_MZ
00008F02 32C3                       		move.w	d3,(a1)+
00008F04 4843                       		swap	d3
00008F06 D680                       		add.l	d0,d3
00008F08 4843                       		swap	d3
00008F0A 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
00008F0E 3002                       		move.w	d2,d0
00008F10 E640                       		asr.w	#3,d0
00008F12 3200                       		move.w	d0,d1
00008F14 E241                       		asr.w	#1,d1
00008F16 D041                       		add.w	d1,d0
00008F18 323C 0004                  		move.w	#4,d1
00008F1C                            
00008F1C                            Deform_SLZ_2:				; XREF: Deform_MZ
00008F1C 32C0                       		move.w	d0,(a1)+
00008F1E 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
00008F22 3002                       		move.w	d2,d0
00008F24 E440                       		asr.w	#2,d0
00008F26 323C 0004                  		move.w	#4,d1
00008F2A                            
00008F2A                            Deform_SLZ_3:				; XREF: Deform_MZ
00008F2A 32C0                       		move.w	d0,(a1)+
00008F2C 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
00008F30 3002                       		move.w	d2,d0
00008F32 E240                       		asr.w	#1,d0
00008F34 323C 001D                  		move.w	#$1D,d1
00008F38                            
00008F38                            Deform_SLZ_4:				; XREF: Deform_MZ
00008F38 32C0                       		move.w	d0,(a1)+
00008F3A 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
00008F3E 45F8 A800                  		lea	($FFFFA800).w,a2
00008F42 3038 F70C                  		move.w	($FFFFF70C).w,d0
00008F46 3400                       		move.w	d0,d2
00008F48 0440 00C0                  		subi.w	#$C0,d0	; 'À'
00008F4C 0240 03F0                  		andi.w	#$3F0,d0
00008F50 E648                       		lsr.w	#3,d0
00008F52 45F2 0000                  		lea	(a2,d0.w),a2
00008F56                            
00008F56                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
00008F56 43F8 CC00                  		lea	($FFFFCC00).w,a1
00008F5A 323C 000E                  		move.w	#$E,d1
00008F5E 3038 F700                  		move.w	($FFFFF700).w,d0
00008F62 4440                       		neg.w	d0
00008F64 4840                       		swap	d0
00008F66 0242 000F                  		andi.w	#$F,d2
00008F6A D442                       		add.w	d2,d2
00008F6C 301A                       		move.w	(a2)+,d0
00008F6E 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
00008F72                            ; End of function Deform_MZ
00008F72                            
00008F72                            ; ===========================================================================
00008F72                            
00008F72                            Deform_All_1:				; XREF: Deform_All
00008F72 301A                       		move.w	(a2)+,d0
00008F74                            
00008F74                            Deform_All_2:
00008F74 22C0                       		move.l	d0,(a1)+
00008F76 22C0                       		move.l	d0,(a1)+
00008F78 22C0                       		move.l	d0,(a1)+
00008F7A 22C0                       		move.l	d0,(a1)+
00008F7C 22C0                       		move.l	d0,(a1)+
00008F7E 22C0                       		move.l	d0,(a1)+
00008F80 22C0                       		move.l	d0,(a1)+
00008F82 22C0                       		move.l	d0,(a1)+
00008F84 22C0                       		move.l	d0,(a1)+
00008F86 22C0                       		move.l	d0,(a1)+
00008F88 22C0                       		move.l	d0,(a1)+
00008F8A 22C0                       		move.l	d0,(a1)+
00008F8C 22C0                       		move.l	d0,(a1)+
00008F8E 22C0                       		move.l	d0,(a1)+
00008F90 22C0                       		move.l	d0,(a1)+
00008F92 22C0                       		move.l	d0,(a1)+
00008F94 51C9 FFDC                  		dbf	d1,Deform_All_1
00008F98 4E75                       		rts	
00008F9A                            
00008F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F9A                            
00008F9A                            
00008F9A                            Deform_SYZ:
00008F9A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00008F9E 48C5                       		ext.l	d5
00008FA0 E985                       		asl.l	#4,d5
00008FA2 2205                       		move.l	d5,d1
00008FA4 E385                       		asl.l	#1,d5
00008FA6 DA81                       		add.l	d1,d5
00008FA8 6100 0000                  		bsr.w	ScrollBlock2
00008FAC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00008FB2 43F8 A800                  		lea	($FFFFA800).w,a1
00008FB6 3438 F700                  		move.w	($FFFFF700).w,d2
00008FBA 4442                       		neg.w	d2
00008FBC 3002                       		move.w	d2,d0
00008FBE E640                       		asr.w	#3,d0
00008FC0 9042                       		sub.w	d2,d0
00008FC2 48C0                       		ext.l	d0
00008FC4 E780                       		asl.l	#3,d0
00008FC6 81FC 0008                  		divs.w	#8,d0
00008FCA 48C0                       		ext.l	d0
00008FCC E980                       		asl.l	#4,d0
00008FCE E180                       		asl.l	#8,d0
00008FD0 7600                       		moveq	#0,d3
00008FD2 3602                       		move.w	d2,d3
00008FD4 E243                       		asr.w	#1,d3
00008FD6 323C 0007                  		move.w	#7,d1
00008FDA                            
00008FDA                            Deform_SYZ_1:				; XREF: Deform_SYZ
00008FDA 32C3                       		move.w	d3,(a1)+
00008FDC 4843                       		swap	d3
00008FDE D680                       		add.l	d0,d3
00008FE0 4843                       		swap	d3
00008FE2 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
00008FE6 3002                       		move.w	d2,d0
00008FE8 E640                       		asr.w	#3,d0
00008FEA 323C 0004                  		move.w	#4,d1
00008FEE                            
00008FEE                            Deform_SYZ_2:				; XREF: Deform_SYZ
00008FEE 32C0                       		move.w	d0,(a1)+
00008FF0 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
00008FF4 3002                       		move.w	d2,d0
00008FF6 E440                       		asr.w	#2,d0
00008FF8 323C 0005                  		move.w	#5,d1
00008FFC                            
00008FFC                            Deform_SYZ_3:				; XREF: Deform_SYZ
00008FFC 32C0                       		move.w	d0,(a1)+
00008FFE 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
00009002 3002                       		move.w	d2,d0
00009004 3202                       		move.w	d2,d1
00009006 E241                       		asr.w	#1,d1
00009008 9041                       		sub.w	d1,d0
0000900A 48C0                       		ext.l	d0
0000900C E980                       		asl.l	#4,d0
0000900E 81FC 000E                  		divs.w	#$E,d0
00009012 48C0                       		ext.l	d0
00009014 E980                       		asl.l	#4,d0
00009016 E180                       		asl.l	#8,d0
00009018 7600                       		moveq	#0,d3
0000901A 3602                       		move.w	d2,d3
0000901C E243                       		asr.w	#1,d3
0000901E 323C 000D                  		move.w	#$D,d1
00009022                            
00009022                            Deform_SYZ_4:				; XREF: Deform_SYZ
00009022 32C3                       		move.w	d3,(a1)+
00009024 4843                       		swap	d3
00009026 D680                       		add.l	d0,d3
00009028 4843                       		swap	d3
0000902A 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
0000902E 45F8 A800                  		lea	($FFFFA800).w,a2
00009032 3038 F70C                  		move.w	($FFFFF70C).w,d0
00009036 3400                       		move.w	d0,d2
00009038 0240 01F0                  		andi.w	#$1F0,d0
0000903C E648                       		lsr.w	#3,d0
0000903E 45F2 0000                  		lea	(a2,d0.w),a2
00009042 6000 FF12                  		bra.w	Deform_All
00009046                            ; End of function Deform_SYZ
00009046                            
00009046                            
00009046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009046                            
00009046                            
00009046                            Deform_SBZ:
00009046 4A38 FE11                  		tst.b	($FFFFFE11).w
0000904A 6600 0000                  		bne.w	Deform_SBZ_Act2
0000904E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00009052 48C4                       		ext.l	d4
00009054 EF84                       		asl.l	#7,d4
00009056 7C02                       		moveq	#2,d6
00009058 6100 0000                  		bsr.w	ScrollBlock4
0000905C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00009060 48C4                       		ext.l	d4
00009062 ED84                       		asl.l	#6,d4
00009064 7C06                       		moveq	#6,d6
00009066 6100 0000                  		bsr.w	ScrollBlock6
0000906A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000906E 48C4                       		ext.l	d4
00009070 EB84                       		asl.l	#5,d4
00009072 2204                       		move.l	d4,d1
00009074 E384                       		asl.l	#1,d4
00009076 D881                       		add.l	d1,d4
00009078 7C04                       		moveq	#4,d6
0000907A 6100 0000                  		bsr.w	ScrollBlock5
0000907E 7800                       		moveq	#0,d4
00009080 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00009084 48C5                       		ext.l	d5
00009086 EB85                       		asl.l	#5,d5
00009088 6100 0000                  		bsr.w	ScrollBlock1_2
0000908C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00009090 31C0 F714                  		move.w	d0,($FFFFF714).w
00009094 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00009098 31C0 F618                  		move.w	d0,($FFFFF618).w
0000909C 1038 F756                  		move.b	($FFFFF756).w,d0
000090A0 8038 F75A                  		or.b	($FFFFF75A).w,d0
000090A4 8138 F758                  		or.b	d0,($FFFFF758).w
000090A8 4238 F756                  		clr.b	($FFFFF756).w
000090AC 4238 F75A                  		clr.b	($FFFFF75A).w
000090B0 43F8 A800                  		lea	($FFFFA800).w,a1
000090B4 3438 F700                  		move.w	($FFFFF700).w,d2
000090B8 4442                       		neg.w	d2
000090BA E442                       		asr.w	#2,d2
000090BC 3002                       		move.w	d2,d0
000090BE E240                       		asr.w	#1,d0
000090C0 9042                       		sub.w	d2,d0
000090C2 48C0                       		ext.l	d0
000090C4 E780                       		asl.l	#3,d0
000090C6 81FC 0004                  		divs.w	#4,d0
000090CA 48C0                       		ext.l	d0
000090CC E980                       		asl.l	#4,d0
000090CE E180                       		asl.l	#8,d0
000090D0 7600                       		moveq	#0,d3
000090D2 3602                       		move.w	d2,d3
000090D4 323C 0003                  		move.w	#3,d1
000090D8                            
000090D8                            Deform_SBZ_1:				; XREF: Deform_SBZ
000090D8 32C3                       		move.w	d3,(a1)+
000090DA 4843                       		swap	d3
000090DC D680                       		add.l	d0,d3
000090DE 4843                       		swap	d3
000090E0 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
000090E4 3038 F718                  		move.w	($FFFFF718).w,d0
000090E8 4440                       		neg.w	d0
000090EA 323C 0009                  		move.w	#9,d1
000090EE                            
000090EE                            Deform_SBZ_2:				; XREF: Deform_SBZ
000090EE 32C0                       		move.w	d0,(a1)+
000090F0 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
000090F4 3038 F710                  		move.w	($FFFFF710).w,d0
000090F8 4440                       		neg.w	d0
000090FA 323C 0006                  		move.w	#6,d1
000090FE                            
000090FE                            Deform_SBZ_3:				; XREF: Deform_SBZ
000090FE 32C0                       		move.w	d0,(a1)+
00009100 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
00009104 3038 F708                  		move.w	($FFFFF708).w,d0
00009108 4440                       		neg.w	d0
0000910A 323C 000A                  		move.w	#$A,d1
0000910E                            
0000910E                            Deform_SBZ_4:				; XREF: Deform_SBZ
0000910E 32C0                       		move.w	d0,(a1)+
00009110 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
00009114 45F8 A800                  		lea	($FFFFA800).w,a2
00009118 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000911C 3400                       		move.w	d0,d2
0000911E 0240 01F0                  		andi.w	#$1F0,d0
00009122 E648                       		lsr.w	#3,d0
00009124 45F2 0000                  		lea	(a2,d0.w),a2
00009128 6000 FE2C                  		bra.w	Deform_All
0000912C                            ; ===========================================================================
0000912C                            
0000912C                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
0000912C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00009130 48C4                       		ext.l	d4
00009132 ED84                       		asl.l	#6,d4
00009134 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00009138 48C5                       		ext.l	d5
0000913A EB85                       		asl.l	#5,d5
0000913C 6100 0000                  		bsr.w	ScrollBlock1
00009140 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00009146 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000914A 323C 00DF                  		move.w	#$DF,d1	; 'ß'
0000914E 3038 F700                  		move.w	($FFFFF700).w,d0
00009152 4440                       		neg.w	d0
00009154 4840                       		swap	d0
00009156 3038 F708                  		move.w	($FFFFF708).w,d0
0000915A 4440                       		neg.w	d0
0000915C                            
0000915C                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
0000915C 22C0                       		move.l	d0,(a1)+
0000915E 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
00009162 4E75                       		rts	
00009164                            ; End of function Deform_SBZ
00009164                            
00009164                            ; ---------------------------------------------------------------------------
00009164                            ; Subroutine to	scroll the level horizontally as Sonic moves
00009164                            ; ---------------------------------------------------------------------------
00009164                            
00009164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009164                            
00009164                            
00009164                            ScrollHoriz:				; XREF: DeformBgLayer
00009164 3838 F700                  		move.w	($FFFFF700).w,d4
00009168 6100                       		bsr.s	ScrollHoriz2
0000916A 3038 F700                  		move.w	($FFFFF700).w,d0
0000916E 0240 0010                  		andi.w	#$10,d0
00009172 1238 F74A                  		move.b	($FFFFF74A).w,d1
00009176 B300                       		eor.b	d1,d0
00009178 6600                       		bne.s	locret_65B0
0000917A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00009180 3038 F700                  		move.w	($FFFFF700).w,d0
00009184 9044                       		sub.w	d4,d0
00009186 6A00                       		bpl.s	loc_65AA
00009188 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000918E 4E75                       		rts	
00009190                            ; ===========================================================================
00009190                            
00009190                            loc_65AA:
00009190 08F8 0003 F754             		bset	#3,($FFFFF754).w
00009196                            
00009196                            locret_65B0:
00009196 4E75                       		rts	
00009198                            ; End of function ScrollHoriz
00009198                            
00009198                            
00009198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009198                            
00009198                            
00009198                            ScrollHoriz2:				; XREF: ScrollHoriz
00009198 3038 D008                  		move.w	($FFFFD008).w,d0
0000919C 9078 F700                  		sub.w	($FFFFF700).w,d0
000091A0 0440 0090                  		subi.w	#$90,d0
000091A4 6B00                       		bmi.s	loc_65F6				; cs to mi (for negative)
000091A6 0440 0010                  		subi.w	#$10,d0
000091AA 6A00                       		bpl.s	loc_65CC				; cc to pl (for negative)
000091AC 4278 F73A                  		clr.w	($FFFFF73A).w
000091B0 4E75                       		rts
000091B2                            ; ===========================================================================
000091B2                            
000091B2                            loc_65CC:
000091B2 0C40 0010                  		cmpi.w	#$10,d0
000091B6 6500                       		bcs.s	loc_65D6
000091B8 303C 0010                  		move.w	#$10,d0
000091BC                            
000091BC                            loc_65D6:
000091BC D078 F700                  		add.w	($FFFFF700).w,d0
000091C0 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000091C4 6D00                       		blt.s	loc_65E4
000091C6 3038 F72A                  		move.w	($FFFFF72A).w,d0
000091CA                            
000091CA                            loc_65E4:
000091CA 3200                       		move.w	d0,d1
000091CC 9278 F700                  		sub.w	($FFFFF700).w,d1
000091D0 E141                       		asl.w	#8,d1
000091D2 31C0 F700                  		move.w	d0,($FFFFF700).w
000091D6 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000091DA 4E75                       		rts	
000091DC                            ; ===========================================================================
000091DC                            
000091DC                            loc_65F6:
000091DC 0C40 FFF0                  		cmpi.w	#$FFF0,d0				; has the screen moved more than 10 pixels left?
000091E0 6400                       		bcc.s	Left_NoMax				; if not, branch
000091E2 303C FFF0                  		move.w	#$FFF0,d0				; set the maximum move distance to 10 pixels left
000091E6                            
000091E6                            Left_NoMax:
000091E6 D078 F700                  		add.w	($FFFFF700).w,d0
000091EA B078 F728                  		cmp.w	($FFFFF728).w,d0
000091EE 6EDA                       		bgt.s	loc_65E4
000091F0 3038 F728                  		move.w	($FFFFF728).w,d0
000091F4 60D4                       		bra.s	loc_65E4
000091F6                            ; End of function ScrollHoriz2
000091F6                            
000091F6                            ; ===========================================================================
000091F6 4A40                       		tst.w	d0
000091F8 6A00                       		bpl.s	loc_6610
000091FA 303C FFFE                  		move.w	#-2,d0
000091FE 60DC                       		bra.s	loc_65F6
00009200                            ; ===========================================================================
00009200                            
00009200                            loc_6610:
00009200 303C 0002                  		move.w	#2,d0
00009204 60AC                       		bra.s	loc_65CC
00009206                            
00009206                            ; ---------------------------------------------------------------------------
00009206                            ; Subroutine to	scroll the level vertically as Sonic moves
00009206                            ; ---------------------------------------------------------------------------
00009206                            
00009206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009206                            
00009206                            
00009206                            ScrollVertical:				; XREF: DeformBgLayer
00009206 7200                       		moveq	#0,d1
00009208 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000920C 9078 F704                  		sub.w	($FFFFF704).w,d0
00009210 0838 0002 D022             		btst	#2,($FFFFD022).w
00009216 6700                       		beq.s	loc_662A
00009218 5B40                       		subq.w	#5,d0
0000921A                            
0000921A                            loc_662A:
0000921A 0838 0001 D022             		btst	#1,($FFFFD022).w
00009220 6700                       		beq.s	loc_664A
00009222 0640 0020                  		addi.w	#$20,d0
00009226 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000922A 6500                       		bcs.s	loc_6696
0000922C 0440 0040                  		subi.w	#$40,d0
00009230 6400                       		bcc.s	loc_6696
00009232 4A38 F75C                  		tst.b	($FFFFF75C).w
00009236 6600                       		bne.s	loc_66A8
00009238 6000                       		bra.s	loc_6656
0000923A                            ; ===========================================================================
0000923A                            
0000923A                            loc_664A:
0000923A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000923E 6600                       		bne.s	loc_665C
00009240 4A38 F75C                  		tst.b	($FFFFF75C).w
00009244 6600                       		bne.s	loc_66A8
00009246                            
00009246                            loc_6656:
00009246 4278 F73C                  		clr.w	($FFFFF73C).w
0000924A 4E75                       		rts	
0000924C                            ; ===========================================================================
0000924C                            
0000924C                            loc_665C:
0000924C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00009252 6600                       		bne.s	loc_6684
00009254 3238 D014                  		move.w	($FFFFD014).w,d1
00009258 6A00                       		bpl.s	loc_666C
0000925A 4441                       		neg.w	d1
0000925C                            
0000925C                            loc_666C:
0000925C 0C41 0800                  		cmpi.w	#$800,d1
00009260 6400                       		bcc.s	loc_6696
00009262 323C 0600                  		move.w	#$600,d1
00009266 0C40 0006                  		cmpi.w	#6,d0
0000926A 6E00                       		bgt.s	loc_66F6
0000926C 0C40 FFFA                  		cmpi.w	#-6,d0
00009270 6D00                       		blt.s	loc_66C0
00009272 6000                       		bra.s	loc_66AE
00009274                            ; ===========================================================================
00009274                            
00009274                            loc_6684:
00009274 323C 0200                  		move.w	#$200,d1
00009278 0C40 0002                  		cmpi.w	#2,d0
0000927C 6E00                       		bgt.s	loc_66F6
0000927E 0C40 FFFE                  		cmpi.w	#-2,d0
00009282 6D00                       		blt.s	loc_66C0
00009284 6000                       		bra.s	loc_66AE
00009286                            ; ===========================================================================
00009286                            
00009286                            loc_6696:
00009286 323C 1000                  		move.w	#$1000,d1
0000928A 0C40 0010                  		cmpi.w	#$10,d0
0000928E 6E00                       		bgt.s	loc_66F6
00009290 0C40 FFF0                  		cmpi.w	#-$10,d0
00009294 6D00                       		blt.s	loc_66C0
00009296 6000                       		bra.s	loc_66AE
00009298                            ; ===========================================================================
00009298                            
00009298                            loc_66A8:
00009298 7000                       		moveq	#0,d0
0000929A 11C0 F75C                  		move.b	d0,($FFFFF75C).w
0000929E                            
0000929E                            loc_66AE:
0000929E 7200                       		moveq	#0,d1
000092A0 3200                       		move.w	d0,d1
000092A2 D278 F704                  		add.w	($FFFFF704).w,d1
000092A6 4A40                       		tst.w	d0
000092A8 6A00 0000                  		bpl.w	loc_6700
000092AC 6000 0000                  		bra.w	loc_66CC
000092B0                            ; ===========================================================================
000092B0                            
000092B0                            loc_66C0:
000092B0 4441                       		neg.w	d1
000092B2 48C1                       		ext.l	d1
000092B4 E181                       		asl.l	#8,d1
000092B6 D2B8 F704                  		add.l	($FFFFF704).w,d1
000092BA 4841                       		swap	d1
000092BC                            
000092BC                            loc_66CC:
000092BC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000092C0 6E00                       		bgt.s	loc_6724
000092C2 0C41 FF00                  		cmpi.w	#-$100,d1
000092C6 6E00                       		bgt.s	loc_66F0
000092C8 0241 07FF                  		andi.w	#$7FF,d1
000092CC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000092D2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000092D8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000092DE 6000                       		bra.s	loc_6724
000092E0                            ; ===========================================================================
000092E0                            
000092E0                            loc_66F0:
000092E0 3238 F72C                  		move.w	($FFFFF72C).w,d1
000092E4 6000                       		bra.s	loc_6724
000092E6                            ; ===========================================================================
000092E6                            
000092E6                            loc_66F6:
000092E6 48C1                       		ext.l	d1
000092E8 E181                       		asl.l	#8,d1
000092EA D2B8 F704                  		add.l	($FFFFF704).w,d1
000092EE 4841                       		swap	d1
000092F0                            
000092F0                            loc_6700:
000092F0 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000092F4 6D00                       		blt.s	loc_6724
000092F6 0441 0800                  		subi.w	#$800,d1
000092FA 6500                       		bcs.s	loc_6720
000092FC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00009302 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00009308 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000930E 6000                       		bra.s	loc_6724
00009310                            ; ===========================================================================
00009310                            
00009310                            loc_6720:
00009310 3238 F72E                  		move.w	($FFFFF72E).w,d1
00009314                            
00009314                            loc_6724:
00009314 3838 F704                  		move.w	($FFFFF704).w,d4
00009318 4841                       		swap	d1
0000931A 2601                       		move.l	d1,d3
0000931C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00009320 E09B                       		ror.l	#8,d3
00009322 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00009326 21C1 F704                  		move.l	d1,($FFFFF704).w
0000932A 3038 F704                  		move.w	($FFFFF704).w,d0
0000932E 0240 0010                  		andi.w	#$10,d0
00009332 1238 F74B                  		move.b	($FFFFF74B).w,d1
00009336 B300                       		eor.b	d1,d0
00009338 6600                       		bne.s	locret_6766
0000933A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00009340 3038 F704                  		move.w	($FFFFF704).w,d0
00009344 9044                       		sub.w	d4,d0
00009346 6A00                       		bpl.s	loc_6760
00009348 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000934E 4E75                       		rts	
00009350                            ; ===========================================================================
00009350                            
00009350                            loc_6760:
00009350 08F8 0001 F754             		bset	#1,($FFFFF754).w
00009356                            
00009356                            locret_6766:
00009356 4E75                       		rts	
00009358                            ; End of function ScrollVertical
00009358                            
00009358                            
00009358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009358                            
00009358                            
00009358                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
00009358 2438 F708                  		move.l	($FFFFF708).w,d2
0000935C 2002                       		move.l	d2,d0
0000935E D084                       		add.l	d4,d0
00009360 21C0 F708                  		move.l	d0,($FFFFF708).w
00009364 2200                       		move.l	d0,d1
00009366 4841                       		swap	d1
00009368 0241 0010                  		andi.w	#$10,d1
0000936C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00009370 B701                       		eor.b	d3,d1
00009372 6600                       		bne.s	ScrollBlock1_2
00009374 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000937A 9082                       		sub.l	d2,d0
0000937C 6A00                       		bpl.s	ScrollBlock1_1
0000937E 08F8 0002 F756             		bset	#2,($FFFFF756).w
00009384 6000                       		bra.s	ScrollBlock1_2
00009386                            ; ===========================================================================
00009386                            
00009386                            ScrollBlock1_1:				; XREF: ScrollBlock1
00009386 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000938C                            
0000938C                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
0000938C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00009390 2003                       		move.l	d3,d0
00009392 D085                       		add.l	d5,d0
00009394 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00009398 2200                       		move.l	d0,d1
0000939A 4841                       		swap	d1
0000939C 0241 0010                  		andi.w	#$10,d1
000093A0 1438 F74D                  		move.b	($FFFFF74D).w,d2
000093A4 B501                       		eor.b	d2,d1
000093A6 6600                       		bne.s	ScrollBlock1_End
000093A8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000093AE 9083                       		sub.l	d3,d0
000093B0 6A00                       		bpl.s	ScrollBlock1_3
000093B2 08F8 0000 F756             		bset	#0,($FFFFF756).w
000093B8 4E75                       		rts	
000093BA                            ; ===========================================================================
000093BA                            
000093BA                            ScrollBlock1_3:				; XREF: ScrollBlock1
000093BA 08F8 0001 F756             		bset	#1,($FFFFF756).w
000093C0                            
000093C0                            ScrollBlock1_End:			; XREF: ScrollBlock1
000093C0 4E75                       		rts	
000093C2                            ; End of function ScrollBlock1
000093C2                            
000093C2                            
000093C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093C2                            
000093C2                            
000093C2                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
000093C2 2638 F70C                  		move.l	($FFFFF70C).w,d3
000093C6 2003                       		move.l	d3,d0
000093C8 D085                       		add.l	d5,d0
000093CA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000093CE 2200                       		move.l	d0,d1
000093D0 4841                       		swap	d1
000093D2 0241 0010                  		andi.w	#$10,d1
000093D6 1438 F74D                  		move.b	($FFFFF74D).w,d2
000093DA B501                       		eor.b	d2,d1
000093DC 6600                       		bne.s	ScrollBlock2_End
000093DE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000093E4 9083                       		sub.l	d3,d0
000093E6 6A00                       		bpl.s	ScrollBlock2_1
000093E8 08F8 0004 F756             		bset	#4,($FFFFF756).w
000093EE 4E75                       		rts	
000093F0                            ; ===========================================================================
000093F0                            
000093F0                            ScrollBlock2_1:				; XREF: ScrollBlock2
000093F0 08F8 0005 F756             		bset	#5,($FFFFF756).w
000093F6                            
000093F6                            ScrollBlock2_End:			; XREF: ScrollBlock2
000093F6 4E75                       		rts	
000093F8                            ; End of function ScrollBlock2
000093F8                            
000093F8                            
000093F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093F8                            
000093F8                            
000093F8                            ScrollBlock3:				; XREF: Deform_MZ
000093F8 3638 F70C                  		move.w	($FFFFF70C).w,d3
000093FC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00009400 3200                       		move.w	d0,d1
00009402 0241 0010                  		andi.w	#$10,d1
00009406 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000940A B501                       		eor.b	d2,d1
0000940C 6600                       		bne.s	ScrollBlock3_End
0000940E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00009414 9043                       		sub.w	d3,d0
00009416 6A00                       		bpl.s	ScrollBlock3_1
00009418 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000941E 4E75                       		rts	
00009420                            ; ===========================================================================
00009420                            
00009420                            ScrollBlock3_1:				; XREF: ScrollBlock3
00009420 08F8 0001 F756             		bset	#1,($FFFFF756).w
00009426                            
00009426                            ScrollBlock3_End:			; XREF: ScrollBlock3
00009426 4E75                       		rts	
00009428                            ; End of function ScrollBlock3
00009428                            
00009428                            
00009428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009428                            
00009428                            
00009428                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
00009428 2438 F708                  		move.l	($FFFFF708).w,d2
0000942C 2002                       		move.l	d2,d0
0000942E D084                       		add.l	d4,d0
00009430 21C0 F708                  		move.l	d0,($FFFFF708).w
00009434 2200                       		move.l	d0,d1
00009436 4841                       		swap	d1
00009438 0241 0010                  		andi.w	#$10,d1
0000943C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00009440 B701                       		eor.b	d3,d1
00009442 6600                       		bne.s	ScrollBlock4_End
00009444 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000944A 9082                       		sub.l	d2,d0
0000944C 6A00                       		bpl.s	ScrollBlock4_1
0000944E 0DF8 F756                  		bset	d6,($FFFFF756).w
00009452 6000                       		bra.s	ScrollBlock4_End
00009454                            ; ===========================================================================
00009454                            
00009454                            ScrollBlock4_1:				; XREF: ScrollBlock4
00009454 5206                       		addq.b	#1,d6
00009456 0DF8 F756                  		bset	d6,($FFFFF756).w
0000945A                            
0000945A                            ScrollBlock4_End:			; XREF: ScrollBlock4
0000945A 4E75                       		rts	
0000945C                            ; End of function ScrollBlock4
0000945C                            
0000945C                            
0000945C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000945C                            
0000945C                            
0000945C                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
0000945C 2438 F710                  		move.l	($FFFFF710).w,d2
00009460 2002                       		move.l	d2,d0
00009462 D084                       		add.l	d4,d0
00009464 21C0 F710                  		move.l	d0,($FFFFF710).w
00009468 2200                       		move.l	d0,d1
0000946A 4841                       		swap	d1
0000946C 0241 0010                  		andi.w	#$10,d1
00009470 1638 F74E                  		move.b	($FFFFF74E).w,d3
00009474 B701                       		eor.b	d3,d1
00009476 6600                       		bne.s	ScrollBlock5_End
00009478 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000947E 9082                       		sub.l	d2,d0
00009480 6A00                       		bpl.s	ScrollBlock5_1
00009482 0DF8 F758                  		bset	d6,($FFFFF758).w
00009486 6000                       		bra.s	ScrollBlock5_End
00009488                            ; ===========================================================================
00009488                            
00009488                            ScrollBlock5_1:				; XREF: ScrollBlock5
00009488 5206                       		addq.b	#1,d6
0000948A 0DF8 F758                  		bset	d6,($FFFFF758).w
0000948E                            
0000948E                            ScrollBlock5_End:			; XREF: ScrollBlock5
0000948E 4E75                       		rts	
00009490                            ; End of function ScrollBlock5
00009490                            
00009490                            
00009490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009490                            
00009490                            
00009490                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
00009490 2438 F718                  		move.l	($FFFFF718).w,d2
00009494 2002                       		move.l	d2,d0
00009496 D084                       		add.l	d4,d0
00009498 21C0 F718                  		move.l	d0,($FFFFF718).w
0000949C 2200                       		move.l	d0,d1
0000949E 4841                       		swap	d1
000094A0 0241 0010                  		andi.w	#$10,d1
000094A4 1638 F750                  		move.b	($FFFFF750).w,d3
000094A8 B701                       		eor.b	d3,d1
000094AA 6600                       		bne.s	ScrollBlock6_End
000094AC 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
000094B2 9082                       		sub.l	d2,d0
000094B4 6A00                       		bpl.s	ScrollBlock6_1
000094B6 0DF8 F75A                  		bset	d6,($FFFFF75A).w
000094BA 6000                       		bra.s	ScrollBlock6_End
000094BC                            ; ===========================================================================
000094BC                            
000094BC                            ScrollBlock6_1:				; XREF: ScrollBlock6
000094BC 5206                       		addq.b	#1,d6
000094BE 0DF8 F75A                  		bset	d6,($FFFFF75A).w
000094C2                            
000094C2                            ScrollBlock6_End:			; XREF: ScrollBlock6
000094C2 4E75                       		rts	
000094C4                            ; End of function ScrollBlock6
000094C4                            
000094C4                            
000094C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094C4                            
000094C4                            
000094C4                            sub_6886:		
000094C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000094CA 4DF9 00C0 0000             		lea	($C00000).l,a6
000094D0 45F8 F756                  		lea	($FFFFF756).w,a2
000094D4 47F8 F708                  		lea	($FFFFF708).w,a3
000094D8 49F8 A440                  		lea	($FFFFA440).w,a4
000094DC 343C 6000                  		move.w	#$6000,d2
000094E0 6100 0000                  		bsr.w	sub_6D0A
000094E4 45F8 F758                  		lea	($FFFFF758).w,a2
000094E8 47F8 F710                  		lea	($FFFFF710).w,a3
000094EC 6000 0000                  		bra.w	sub_6DA6
000094F0                            ; End of function sub_6886
000094F0                            
000094F0                            ; ---------------------------------------------------------------------------
000094F0                            ; Subroutine to	display	correct	tiles as you move
000094F0                            ; ---------------------------------------------------------------------------
000094F0                            
000094F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094F0                            
000094F0                            
000094F0                            LoadTilesAsYouMove:			; XREF: Demo_Time
000094F0 4BF9 00C0 0004             		lea	($C00004).l,a5
000094F6 4DF9 00C0 0000             		lea	($C00000).l,a6
000094FC 45F8 FF32                  		lea	($FFFFFF32).w,a2
00009500 47F8 FF18                  		lea	($FFFFFF18).w,a3
00009504 49F8 A440                  		lea	($FFFFA440).w,a4
00009508 343C 6000                  		move.w	#$6000,d2
0000950C 6100 0000                  		bsr.w	sub_6D0A
00009510 45F8 FF34                  		lea	($FFFFFF34).w,a2
00009514 47F8 FF20                  		lea	($FFFFFF20).w,a3
00009518 6100 0000                  		bsr.w	sub_6DA6
0000951C 45F8 FF36                  		lea	($FFFFFF36).w,a2
00009520 47F8 FF28                  		lea	($FFFFFF28).w,a3
00009524 6100 0000                  		bsr.w	sub_6EA4
00009528 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000952C 47F8 FF10                  		lea	($FFFFFF10).w,a3
00009530 49F8 A400                  		lea	($FFFFA400).w,a4
00009534 343C 4000                  		move.w	#$4000,d2
00009538 4A38 F745                  		tst.b	($FFFFF745).w
0000953C 6700                       		beq.s	Draw_FG
0000953E 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
00009544 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
00009546 7C0F                       		moveq	#$F,d6				;
00009548                            
00009548                            Draw_All:
00009548 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
0000954C 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
0000954E 3204                       		move.w	d4,d1
00009550 6100 0000                  		bsr.w	Calc_VRAM_Pos
00009554 3801                       		move.w	d1,d4
00009556 7AF0                       		moveq	#-$10,d5
00009558 6100 0000                  		bsr.w	DrawTiles_LR
0000955C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00009560 0644 0010                  		addi.w	#$10,d4
00009564 51CE FFE2                  		dbf	d6,Draw_All
00009568 4E75                       		rts	
0000956A                            
0000956A                            Draw_FG:
0000956A 4A12                       		tst.b	(a2)
0000956C 6700                       		beq.s	locret_6D08
0000956E 0892 0000                  		bclr	#0,(a2)
00009572 6700                       		beq.s	loc_6CBE
00009574 78F0                       		moveq	#-$10,d4
00009576 7AF0                       		moveq	#-$10,d5
00009578 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000957C 78F0                       		moveq	#-$10,d4
0000957E 7AF0                       		moveq	#-$10,d5
00009580 6100 0000                  		bsr.w	DrawTiles_LR
00009584                            
00009584                            loc_6CBE:
00009584 0892 0001                  		bclr	#1,(a2)
00009588 6700                       		beq.s	loc_6CD8
0000958A 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000958E 7AF0                       		moveq	#-$10,d5
00009590 6100 0000                  		bsr.w	Calc_VRAM_Pos
00009594 383C 00E0                  		move.w	#$E0,d4	; 'à'
00009598 7AF0                       		moveq	#-$10,d5
0000959A 6100 0000                  		bsr.w	DrawTiles_LR
0000959E                            
0000959E                            loc_6CD8:
0000959E 0892 0002                  		bclr	#2,(a2)
000095A2 6700                       		beq.s	loc_6CEE
000095A4 78F0                       		moveq	#-$10,d4
000095A6 7AF0                       		moveq	#-$10,d5
000095A8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000095AC 78F0                       		moveq	#-$10,d4
000095AE 7AF0                       		moveq	#-$10,d5
000095B0 6100 0000                  		bsr.w	DrawTiles_TB
000095B4                            
000095B4                            loc_6CEE:
000095B4 0892 0003                  		bclr	#3,(a2)
000095B8 6700                       		beq.s	locret_6D08
000095BA 78F0                       		moveq	#-$10,d4
000095BC 3A3C 0140                  		move.w	#$140,d5
000095C0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000095C4 78F0                       		moveq	#-$10,d4
000095C6 3A3C 0140                  		move.w	#$140,d5
000095CA 6100 0000                  		bsr.w	DrawTiles_TB
000095CE                            
000095CE                            locret_6D08:
000095CE 4E75                       		rts	
000095D0                            
000095D0                            ; End of function LoadTilesAsYouMove
000095D0                            
000095D0                            
000095D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095D0                            
000095D0                            
000095D0                            sub_6D0A:
000095D0 4A12                       		tst.b	(a2)
000095D2 6700 0000                  		beq.w	locret_6DA4
000095D6 0892 0000                  		bclr	#0,(a2)
000095DA 6700                       		beq.s	loc_6D26
000095DC 78F0                       		moveq	#-$10,d4
000095DE 7AF0                       		moveq	#-$10,d5
000095E0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000095E4 78F0                       		moveq	#-$10,d4
000095E6 7AF0                       		moveq	#-$10,d5
000095E8 6100 0000                  		bsr.w	DrawTiles_LR
000095EC                            
000095EC                            loc_6D26:
000095EC 0892 0001                  		bclr	#1,(a2)
000095F0 6700                       		beq.s	loc_6D40
000095F2 383C 00E0                  		move.w	#$E0,d4	; 'à'
000095F6 7AF0                       		moveq	#-$10,d5
000095F8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000095FC 383C 00E0                  		move.w	#$E0,d4	; 'à'
00009600 7AF0                       		moveq	#-$10,d5
00009602 6100 0000                  		bsr.w	DrawTiles_LR
00009606                            
00009606                            loc_6D40:
00009606 0892 0002                  		bclr	#2,(a2)
0000960A 6700                       		beq.s	loc_6D56
0000960C 78F0                       		moveq	#-$10,d4
0000960E 7AF0                       		moveq	#-$10,d5
00009610 6100 0000                  		bsr.w	Calc_VRAM_Pos
00009614 78F0                       		moveq	#-$10,d4
00009616 7AF0                       		moveq	#-$10,d5
00009618 6100 0000                  		bsr.w	DrawTiles_TB
0000961C                            
0000961C                            loc_6D56:
0000961C 0892 0003                  		bclr	#3,(a2)
00009620 6700                       		beq.s	loc_6D70
00009622 78F0                       		moveq	#-$10,d4
00009624 3A3C 0140                  		move.w	#$140,d5
00009628 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000962C 78F0                       		moveq	#-$10,d4
0000962E 3A3C 0140                  		move.w	#$140,d5
00009632 6100 0000                  		bsr.w	DrawTiles_TB
00009636                            
00009636                            loc_6D70:
00009636 0892 0004                  		bclr	#4,(a2)
0000963A 6700                       		beq.s	loc_6D88
0000963C 78F0                       		moveq	#-$10,d4
0000963E 7A00                       		moveq	#0,d5
00009640 6100 0000                  		bsr.w	loc_7176
00009644 78F0                       		moveq	#-$10,d4
00009646 7A00                       		moveq	#0,d5
00009648 7C1F                       		moveq	#$1F,d6
0000964A 6100 0000                  		bsr.w	DrawTiles_LR3
0000964E                            
0000964E                            loc_6D88:
0000964E 0892 0005                  		bclr	#5,(a2)
00009652 6700                       		beq.s	locret_6DA4
00009654 383C 00E0                  		move.w	#$E0,d4	; 'à'
00009658 7A00                       		moveq	#0,d5
0000965A 6100 0000                  		bsr.w	loc_7176
0000965E 383C 00E0                  		move.w	#$E0,d4	; 'à'
00009662 7A00                       		moveq	#0,d5
00009664 7C1F                       		moveq	#$1F,d6
00009666 6100 0000                  		bsr.w	DrawTiles_LR3
0000966A                            
0000966A                            locret_6DA4:
0000966A 4E75                       		rts	
0000966C                            ; End of function sub_6D0A
0000966C                            
0000966C                            
0000966C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000966C                            
0000966C                            
0000966C                            sub_6DA6:
0000966C 4A12                       		tst.b	(a2)
0000966E 6700 0000                  		beq.w	locret_6DF2
00009672 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
00009678 6700 0000                  		beq.w	loc_6E16
0000967C 0892 0000                  		bclr	#0,(a2)
00009680 6700                       		beq.s	loc_6DD2
00009682 383C 0070                  		move.w	#$70,d4	; 'p'
00009686 7AF0                       		moveq	#-$10,d5
00009688 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000968C 383C 0070                  		move.w	#$70,d4	; 'p'
00009690 7AF0                       		moveq	#-$10,d5
00009692 7C02                       		moveq	#2,d6
00009694 6100 0000                  		bsr.w	DrawTiles_TB2
00009698                            
00009698                            loc_6DD2:
00009698 0892 0001                  		bclr	#1,(a2)
0000969C 6700                       		beq.s	locret_6DF2
0000969E 383C 0070                  		move.w	#$70,d4	; 'p'
000096A2 3A3C 0140                  		move.w	#$140,d5
000096A6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000096AA 383C 0070                  		move.w	#$70,d4	; 'p'
000096AE 3A3C 0140                  		move.w	#$140,d5
000096B2 7C02                       		moveq	#2,d6
000096B4 6100 0000                  		bsr.w	DrawTiles_TB2
000096B8                            
000096B8                            locret_6DF2:
000096B8 4E75                       		rts	
000096BA                            ; ===========================================================================
000096BA 00                         unk_6DF4:	dc.b   0 ;	 
000096BB 00                         unk_6DF5:	dc.b   0 ;	 
000096BC 00                         		dc.b   0 ;  
000096BD 00                         		dc.b   0 ;  
000096BE 00                         		dc.b   0 ;  
000096BF 06                         		dc.b   6 ;  
000096C0 06                         		dc.b   6 ;  
000096C1 06                         		dc.b   6 ;  
000096C2 06                         		dc.b   6 ;  
000096C3 06                         		dc.b   6 ;  
000096C4 06                         		dc.b   6 ;  
000096C5 06                         		dc.b   6 ;  
000096C6 06                         		dc.b   6 ;  
000096C7 06                         		dc.b   6 ;  
000096C8 06                         		dc.b   6 ;  
000096C9 04                         		dc.b   4 ;  
000096CA 04                         		dc.b   4 ;  
000096CB 04                         		dc.b   4 ;  
000096CC 04                         		dc.b   4 ;  
000096CD 04                         		dc.b   4 ;  
000096CE 04                         		dc.b   4 ;  
000096CF 04                         		dc.b   4 ;  
000096D0 02                         		dc.b   2 ;  
000096D1 02                         		dc.b   2 ;  
000096D2 02                         		dc.b   2 ;  
000096D3 02                         		dc.b   2 ;  
000096D4 02                         		dc.b   2 ;  
000096D5 02                         		dc.b   2 ;  
000096D6 02                         		dc.b   2 ;  
000096D7 02                         		dc.b   2 ;  
000096D8 02                         		dc.b   2 ;  
000096D9 02                         		dc.b   2 ;  
000096DA 02                         		dc.b   2 ;  
000096DB 00                         		dc.b   0 ;  
000096DC                            ; ===========================================================================
000096DC                            
000096DC                            loc_6E16:
000096DC 78F0                       		moveq	#-$10,d4
000096DE 0892 0000                  		bclr	#0,(a2)
000096E2 6600                       		bne.s	loc_6E28
000096E4 0892 0001                  		bclr	#1,(a2)
000096E8 6700                       		beq.s	loc_6E72
000096EA 383C 00E0                  		move.w	#$E0,d4	; 'à'
000096EE                            
000096EE                            loc_6E28:
000096EE 41F9 0000 96BB             		lea	(unk_6DF5).l,a0
000096F4 3038 F70C                  		move.w	($FFFFF70C).w,d0
000096F8 D044                       		add.w	d4,d0
000096FA 0240 01F0                  		andi.w	#$1F0,d0
000096FE E848                       		lsr.w	#4,d0
00009700 1030 0000                  		move.b	(a0,d0.w),d0
00009704 47F9 0000 0000             		lea	(unk_6FE4).l,a3
0000970A 3673 0000                  		movea.w	(a3,d0.w),a3
0000970E 6700                       		beq.s	loc_6E5E
00009710 7AF0                       		moveq	#-$10,d5
00009712 48E7 0C00                  		movem.l	d4-d5,-(sp)
00009716 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000971A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000971E 6100 0000                  		bsr.w	DrawTiles_LR
00009722 6000                       		bra.s	loc_6E72
00009724                            ; ===========================================================================
00009724                            
00009724                            loc_6E5E:
00009724 7A00                       		moveq	#0,d5
00009726 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000972A 6100 0000                  		bsr.w	loc_7176
0000972E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00009732 7C1F                       		moveq	#$1F,d6
00009734 6100 0000                  		bsr.w	DrawTiles_LR3
00009738                            
00009738                            loc_6E72:
00009738 4A12                       		tst.b	(a2)
0000973A 6600                       		bne.s	loc_6E78
0000973C 4E75                       		rts	
0000973E                            ; ===========================================================================
0000973E                            
0000973E                            loc_6E78:
0000973E 78F0                       		moveq	#-$10,d4
00009740 7AF0                       		moveq	#-$10,d5
00009742 1012                       		move.b	(a2),d0
00009744 0200 00A8                  		andi.b	#-$58,d0
00009748 6700                       		beq.s	loc_6E8C
0000974A E208                       		lsr.b	#1,d0
0000974C 1480                       		move.b	d0,(a2)
0000974E 3A3C 0140                  		move.w	#$140,d5
00009752                            
00009752                            loc_6E8C:
00009752 41F9 0000 96BA             		lea	(unk_6DF4).l,a0
00009758 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000975C 0240 01F0                  		andi.w	#$1F0,d0
00009760 E848                       		lsr.w	#4,d0
00009762 41F0 0000                  		lea	(a0,d0.w),a0
00009766 6000 0000                  		bra.w	loc_6FEC
0000976A                            ; End of function sub_6DA6
0000976A                            
0000976A                            
0000976A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000976A                            
0000976A                            
0000976A                            sub_6EA4:
0000976A 4A12                       		tst.b	(a2)
0000976C 6700 0000                  		beq.w	locret_6EF0
00009770 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00009776 6700 0000                  		beq.w	loc_6F54
0000977A 0892 0000                  		bclr	#0,(a2)
0000977E 6700                       		beq.s	loc_6ED0_2
00009780 383C 0040                  		move.w	#$40,d4	; '@'
00009784 7AF0                       		moveq	#-$10,d5
00009786 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000978A 383C 0040                  		move.w	#$40,d4	; '@'
0000978E 7AF0                       		moveq	#-$10,d5
00009790 7C02                       		moveq	#2,d6
00009792 6100 0000                  		bsr.w	DrawTiles_TB2
00009796                            
00009796                            loc_6ED0_2:
00009796 0892 0001                  		bclr	#1,(a2)
0000979A 6700                       		beq.s	locret_6EF0
0000979C 383C 0040                  		move.w	#$40,d4	; '@'
000097A0 3A3C 0140                  		move.w	#$140,d5
000097A4 6100 0000                  		bsr.w	Calc_VRAM_Pos
000097A8 383C 0040                  		move.w	#$40,d4	; '@'
000097AC 3A3C 0140                  		move.w	#$140,d5
000097B0 7C02                       		moveq	#2,d6
000097B2 6100 0000                  		bsr.w	DrawTiles_TB2
000097B6                            
000097B6                            locret_6EF0:
000097B6 4E75                       		rts	
000097B8                            ; ===========================================================================
000097B8 00                         unk_6EF2:	dc.b   0 ;	 
000097B9 00                         unk_6EF3:	dc.b   0 ;	 
000097BA 00                         		dc.b   0 ;  
000097BB 00                         		dc.b   0 ;  
000097BC 00                         		dc.b   0 ;  
000097BD 00                         		dc.b   0 ;  
000097BE 06                         		dc.b   6 ;  
000097BF 06                         		dc.b   6 ;  
000097C0 04                         		dc.b   4 ;  
000097C1 04                         		dc.b   4 ;  
000097C2 04                         		dc.b   4 ;  
000097C3 04                         		dc.b   4 ;  
000097C4 04                         		dc.b   4 ;  
000097C5 04                         		dc.b   4 ;  
000097C6 04                         		dc.b   4 ;  
000097C7 04                         		dc.b   4 ;  
000097C8 04                         		dc.b   4 ;  
000097C9 02                         		dc.b   2 ;  
000097CA 02                         		dc.b   2 ;  
000097CB 02                         		dc.b   2 ;  
000097CC 02                         		dc.b   2 ;  
000097CD 02                         		dc.b   2 ;  
000097CE 02                         		dc.b   2 ;  
000097CF 02                         		dc.b   2 ;  
000097D0 02                         		dc.b   2 ;  
000097D1 02                         		dc.b   2 ;  
000097D2 02                         		dc.b   2 ;  
000097D3 02                         		dc.b   2 ;  
000097D4 02                         		dc.b   2 ;  
000097D5 02                         		dc.b   2 ;  
000097D6 02                         		dc.b   2 ;  
000097D7 02                         		dc.b   2 ;  
000097D8 02                         		dc.b   2 ;  
000097D9 02                         		dc.b   2 ;  
000097DA 02                         		dc.b   2 ;  
000097DB 02                         		dc.b   2 ;  
000097DC 02                         		dc.b   2 ;  
000097DD 02                         		dc.b   2 ;  
000097DE 02                         		dc.b   2 ;  
000097DF 02                         		dc.b   2 ;  
000097E0 02                         		dc.b   2 ;  
000097E1 02                         		dc.b   2 ;  
000097E2 02                         		dc.b   2 ;  
000097E3 02                         		dc.b   2 ;  
000097E4 02                         		dc.b   2 ;  
000097E5 02                         		dc.b   2 ;  
000097E6 02                         		dc.b   2 ;  
000097E7 02                         		dc.b   2 ;  
000097E8 02                         		dc.b   2 ;  
000097E9 02                         		dc.b   2 ;  
000097EA 02                         		dc.b   2 ;  
000097EB 02                         		dc.b   2 ;  
000097EC 02                         		dc.b   2 ;  
000097ED 02                         		dc.b   2 ;  
000097EE 02                         		dc.b   2 ;  
000097EF 02                         		dc.b   2 ;  
000097F0 02                         		dc.b   2 ;  
000097F1 02                         		dc.b   2 ;  
000097F2 02                         		dc.b   2 ;  
000097F3 02                         		dc.b   2 ;  
000097F4 02                         		dc.b   2 ;  
000097F5 02                         		dc.b   2 ;  
000097F6 02                         		dc.b   2 ;  
000097F7 02                         		dc.b   2 ;  
000097F8 02                         		dc.b   2 ;  
000097F9 02                         		dc.b   2 ;  
000097FA 02                         		dc.b   2 ;  
000097FB 02                         		dc.b   2 ;  
000097FC 02                         		dc.b   2 ;  
000097FD 02                         		dc.b   2 ;  
000097FE 02                         		dc.b   2 ;  
000097FF 02                         		dc.b   2 ;  
00009800 02                         		dc.b   2 ;  
00009801 02                         		dc.b   2 ;  
00009802 02                         		dc.b   2 ;  
00009803 02                         		dc.b   2 ;  
00009804 02                         		dc.b   2 ;  
00009805 02                         		dc.b   2 ;  
00009806 02                         		dc.b   2 ;  
00009807 02                         		dc.b   2 ;  
00009808 02                         		dc.b   2 ;  
00009809 02                         		dc.b   2 ;  
0000980A 02                         		dc.b   2 ;  
0000980B 02                         		dc.b   2 ;  
0000980C 02                         		dc.b   2 ;  
0000980D 02                         		dc.b   2 ;  
0000980E 02                         		dc.b   2 ;  
0000980F 02                         		dc.b   2 ;  
00009810 02                         		dc.b   2 ;  
00009811 02                         		dc.b   2 ;  
00009812 02                         		dc.b   2 ;  
00009813 02                         		dc.b   2 ;  
00009814 02                         		dc.b   2 ;  
00009815 02                         		dc.b   2 ;  
00009816 02                         		dc.b   2 ;  
00009817 02                         		dc.b   2 ;  
00009818 02                         		dc.b   2 ;  
00009819 00                         		dc.b   0 ;  
0000981A                            ; ===========================================================================
0000981A                            
0000981A                            loc_6F54:
0000981A 78F0                       		moveq	#-$10,d4
0000981C 0892 0000                  		bclr	#0,(a2)
00009820 6600                       		bne.s	loc_6F66
00009822 0892 0001                  		bclr	#1,(a2)
00009826 6700                       		beq.s	loc_6FAE
00009828 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000982C                            
0000982C                            loc_6F66:
0000982C 41F9 0000 97B9             		lea	(unk_6EF3).l,a0
00009832 3038 F70C                  		move.w	($FFFFF70C).w,d0
00009836 0440 0200                  		subi.w	#$200,d0
0000983A D044                       		add.w	d4,d0
0000983C 0240 07F0                  		andi.w	#$7F0,d0
00009840 E848                       		lsr.w	#4,d0
00009842 1030 0000                  		move.b	(a0,d0.w),d0
00009846 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
0000984A 6700                       		beq.s	loc_6F9A
0000984C 7AF0                       		moveq	#-$10,d5
0000984E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00009852 6100 0000                  		bsr.w	Calc_VRAM_Pos
00009856 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000985A 6100 0000                  		bsr.w	DrawTiles_LR
0000985E 6000                       		bra.s	loc_6FAE
00009860                            ; ===========================================================================
00009860                            
00009860                            loc_6F9A:
00009860 7A00                       		moveq	#0,d5
00009862 48E7 0C00                  		movem.l	d4-d5,-(sp)
00009866 6100 0000                  		bsr.w	loc_7176
0000986A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000986E 7C1F                       		moveq	#$1F,d6
00009870 6100 0000                  		bsr.w	DrawTiles_LR3
00009874                            
00009874                            loc_6FAE:
00009874 4A12                       		tst.b	(a2)
00009876 6600                       		bne.s	loc_6FB4
00009878 4E75                       		rts	
0000987A                            ; ===========================================================================
0000987A                            
0000987A                            loc_6FB4:
0000987A 78F0                       		moveq	#-$10,d4
0000987C 7AF0                       		moveq	#-$10,d5
0000987E 1012                       		move.b	(a2),d0
00009880 0200 00A8                  		andi.b	#-$58,d0
00009884 6700                       		beq.s	loc_6FC8
00009886 E208                       		lsr.b	#1,d0
00009888 1480                       		move.b	d0,(a2)
0000988A 3A3C 0140                  		move.w	#$140,d5
0000988E                            
0000988E                            loc_6FC8:
0000988E 41F9 0000 97B8             		lea	(unk_6EF2).l,a0
00009894 3038 F70C                  		move.w	($FFFFF70C).w,d0
00009898 0440 0200                  		subi.w	#$200,d0
0000989C 0240 07F0                  		andi.w	#$7F0,d0
000098A0 E848                       		lsr.w	#4,d0
000098A2 41F0 0000                  		lea	(a0,d0.w),a0
000098A6 6000 0000                  		bra.w	loc_6FEC
000098AA                            ; ===========================================================================
000098AA FF                         unk_6FE4:	dc.b $FF ;  
000098AB 18                         		dc.b $18 ;  
000098AC FF                         		dc.b $FF ;  
000098AD 18                         		dc.b $18 ;  
000098AE FF                         		dc.b $FF ;  
000098AF 20                         		dc.b $20 ;  
000098B0 FF                         		dc.b $FF ;  
000098B1 28                         		dc.b $28 ; (
000098B2                            ; ===========================================================================
000098B2                            
000098B2                            loc_6FEC:
000098B2 7C0F                       		moveq	#$F,d6
000098B4 2E3C 0080 0000             		move.l	#$800000,d7
000098BA                            
000098BA                            loc_6FF4:
000098BA 7000                       		moveq	#0,d0
000098BC 1018                       		move.b	(a0)+,d0
000098BE 0112                       		btst	d0,(a2)
000098C0 6700                       		beq.s	loc_701C
000098C2 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
000098C6 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
000098CA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000098CE 6100 0000                  		bsr.w	sub_712A
000098D2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000098D6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000098DA 6100 0000                  		bsr.w	sub_70AC
000098DE 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
000098E2                            
000098E2                            loc_701C:
000098E2 0644 0010                  		addi.w	#$10,d4
000098E6 51CE FFD2                  		dbf	d6,loc_6FF4
000098EA 4212                       		clr.b	(a2)
000098EC 4E75                       		rts	
000098EE                            ; End of function sub_6EA4
000098EE                            
000098EE                            
000098EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000098EE                            
000098EE                            
000098EE                            DrawTiles_LR:
000098EE 7C15                       		moveq	#$15,d6
000098F0                            ; End of function DrawTiles_LR
000098F0                            
000098F0                            
000098F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000098F0                            
000098F0                            
000098F0                            DrawTiles_LR2:
000098F0 2E3C 0080 0000             		move.l	#$800000,d7
000098F6 2200                       		move.l	d0,d1
000098F8                            
000098F8                            loc_7032:
000098F8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000098FC 6100 0000                  		bsr.w	sub_712A
00009900 2001                       		move.l	d1,d0
00009902 6100 0000                  		bsr.w	sub_70AC
00009906 5801                       		addq.b	#4,d1
00009908 0201 007F                  		andi.b	#$7F,d1	; '?'
0000990C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00009910 0645 0010                  		addi.w	#$10,d5
00009914 51CE FFE2                  		dbf	d6,loc_7032
00009918 4E75                       		rts	
0000991A                            ; End of function DrawTiles_LR2
0000991A                            
0000991A                            
0000991A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000991A                            
0000991A                            
0000991A                            DrawTiles_LR3:
0000991A 2E3C 0080 0000             		move.l	#$800000,d7
00009920 2200                       		move.l	d0,d1
00009922                            
00009922                            loc_705C:
00009922 48E7 0C00                  		movem.l	d4-d5,-(sp)
00009926 6100 0000                  		bsr.w	loc_712C
0000992A 2001                       		move.l	d1,d0
0000992C 6100 0000                  		bsr.w	sub_70AC
00009930 5801                       		addq.b	#4,d1
00009932 0201 007F                  		andi.b	#$7F,d1	; '?'
00009936 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000993A 0645 0010                  		addi.w	#$10,d5
0000993E 51CE FFE2                  		dbf	d6,loc_705C
00009942 4E75                       		rts	
00009944                            ; End of function DrawTiles_LR3
00009944                            
00009944                            
00009944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009944                            
00009944                            
00009944                            DrawTiles_TB:
00009944 7C0F                       		moveq	#$F,d6
00009946                            ; End of function DrawTiles_TB
00009946                            
00009946                            
00009946                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009946                            
00009946                            
00009946                            DrawTiles_TB2:
00009946 2E3C 0080 0000             		move.l	#$800000,d7
0000994C 2200                       		move.l	d0,d1
0000994E                            
0000994E                            loc_7088:
0000994E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00009952 6100 0000                  		bsr.w	sub_712A
00009956 2001                       		move.l	d1,d0
00009958 6100 0000                  		bsr.w	sub_70AC
0000995C 0641 0100                  		addi.w	#$100,d1
00009960 0241 0FFF                  		andi.w	#$FFF,d1
00009964 4CDF 0030                  		movem.l	(sp)+,d4-d5
00009968 0644 0010                  		addi.w	#$10,d4
0000996C 51CE FFE0                  		dbf	d6,loc_7088
00009970 4E75                       		rts	
00009972                            ; End of function DrawTiles_TB2
00009972                            
00009972                            
00009972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009972                            
00009972                            
00009972                            sub_70AC:
00009972 8042                       		or.w	d2,d0
00009974 4840                       		swap	d0
00009976 0810 0004                  		btst	#4,(a0)
0000997A 6600                       		bne.s	loc_70E8
0000997C 0810 0003                  		btst	#3,(a0)
00009980 6600                       		bne.s	loc_70C8
00009982 2A80                       		move.l	d0,(a5)
00009984 2C99                       		move.l	(a1)+,(a6)
00009986 D087                       		add.l	d7,d0
00009988 2A80                       		move.l	d0,(a5)
0000998A 2C99                       		move.l	(a1)+,(a6)
0000998C 4E75                       		rts	
0000998E                            ; ===========================================================================
0000998E                            
0000998E                            loc_70C8:
0000998E 2A80                       		move.l	d0,(a5)
00009990 2819                       		move.l	(a1)+,d4
00009992 0A84 0800 0800             		eori.l	#$8000800,d4
00009998 4844                       		swap	d4
0000999A 2C84                       		move.l	d4,(a6)
0000999C D087                       		add.l	d7,d0
0000999E 2A80                       		move.l	d0,(a5)
000099A0 2819                       		move.l	(a1)+,d4
000099A2 0A84 0800 0800             		eori.l	#$8000800,d4
000099A8 4844                       		swap	d4
000099AA 2C84                       		move.l	d4,(a6)
000099AC 4E75                       		rts	
000099AE                            ; ===========================================================================
000099AE                            
000099AE                            loc_70E8:
000099AE 0810 0003                  		btst	#3,(a0)
000099B2 6600                       		bne.s	loc_710A
000099B4 2A80                       		move.l	d0,(a5)
000099B6 2A19                       		move.l	(a1)+,d5
000099B8 2819                       		move.l	(a1)+,d4
000099BA 0A84 1000 1000             		eori.l	#$10001000,d4
000099C0 2C84                       		move.l	d4,(a6)
000099C2 D087                       		add.l	d7,d0
000099C4 2A80                       		move.l	d0,(a5)
000099C6 0A85 1000 1000             		eori.l	#$10001000,d5
000099CC 2C85                       		move.l	d5,(a6)
000099CE 4E75                       		rts	
000099D0                            ; ===========================================================================
000099D0                            
000099D0                            loc_710A:
000099D0 2A80                       		move.l	d0,(a5)
000099D2 2A19                       		move.l	(a1)+,d5
000099D4 2819                       		move.l	(a1)+,d4
000099D6 0A84 1800 1800             		eori.l	#$18001800,d4
000099DC 4844                       		swap	d4
000099DE 2C84                       		move.l	d4,(a6)
000099E0 D087                       		add.l	d7,d0
000099E2 2A80                       		move.l	d0,(a5)
000099E4 0A85 1800 1800             		eori.l	#$18001800,d5
000099EA 4845                       		swap	d5
000099EC 2C85                       		move.l	d5,(a6)
000099EE 4E75                       		rts	
000099F0                            ; End of function sub_70AC
000099F0                            
000099F0                            
000099F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099F0                            
000099F0                            
000099F0                            sub_712A:
000099F0 DA53                       		add.w	(a3),d5
000099F2                            
000099F2                            loc_712C:
000099F2 D86B 0004                  		add.w	4(a3),d4
000099F6 43F8 B000                  		lea	($FFFFB000).w,a1
000099FA 3604                       		move.w	d4,d3
000099FC E24B                       		lsr.w	#1,d3
000099FE 0243 0380                  		andi.w	#$380,d3
00009A02 E64D                       		lsr.w	#3,d5
00009A04 3005                       		move.w	d5,d0
00009A06 EA48                       		lsr.w	#5,d0
00009A08 0240 007F                  		andi.w	#$7F,d0	; '?'
00009A0C D043                       		add.w	d3,d0
00009A0E 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00009A12 6700                       		beq.s	@ghz		; if yes, branch
00009A14 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00009A1A 6700                       		beq.s	@ghz		; if yes, branch
00009A1C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w ; are we in the ending sequence?
00009A22 6700                       		beq.s	@LZ		; if yes, branch
00009A24 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; are we in the ending sequence?
00009A2A 6700                       		beq.s	@MZ		; if yes, branch
00009A2C 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; are we in the ending sequence?
00009A32 6700                       		beq.s	@SLZ		; if yes, branch
00009A34 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; are we in the ending sequence?
00009A3A 6700                       		beq.s	@SYZ		; if yes, branch
00009A3C 76FF                       		moveq	#-1,d3		; load chunks from RAM
00009A3E 6100                       		bsr.s	LocateBlock
00009A40 6000                       		bra.s	@continue
00009A42                            
00009A42                            @ghz:
00009A42 7600                       		moveq	#0,d3
00009A44 6100                       		bsr.s	LocateBlock
00009A46 0683 0000 0000             		add.l	#Blk256_GHZ,d3
00009A4C 4EF9 0000 0000             		jmp @continue
00009A52                            @LZ:
00009A52 7600                       		moveq	#0,d3
00009A54 6100                       		bsr.s	LocateBlock
00009A56 0683 0000 0000             		add.l	#Blk256_LZ,d3
00009A5C 4EF9 0000 0000             		jmp @continue
00009A62                            @MZ:
00009A62 7600                       		moveq	#0,d3
00009A64 6100                       		bsr.s	LocateBlock
00009A66 0683 0000 0000             		add.l	#Blk256_MZ,d3
00009A6C 4EF9 0000 0000             		jmp @continue
00009A72                            @SLZ:
00009A72 7600                       		moveq	#0,d3
00009A74 6100                       		bsr.s	LocateBlock
00009A76 0683 0000 0000             		add.l	#Blk256_SLZ,d3
00009A7C 4EF9 0000 0000             		jmp @continue
00009A82                            @SYZ:
00009A82 7600                       		moveq	#0,d3
00009A84 6100                       		bsr.s	LocateBlock
00009A86 0683 0000 0000             		add.l	#Blk256_SYZ,d3
00009A8C 4EF9 0000 0000             		jmp @continue
00009A92                            
00009A92                            @continue:
00009A92 2043                       		movea.l	d3,a0
00009A94 3610                       		move.w	(a0),d3
00009A96 0243 03FF                  		andi.w	#$3FF,d3
00009A9A E74B                       		lsl.w	#3,d3
00009A9C D2C3                       		adda.w	d3,a1
00009A9E 4E75                       		rts	
00009AA0                            ; ---------------------------------------------------------------------------
00009AA0                            
00009AA0                            LocateBlock:
00009AA0 1634 0000                  		move.b	(a4,d0.w),d3	; load chunk ID in d3
00009AA4 6700                       		beq.s	LocateBlock_EmptyChunk
00009AA6 5303                       		subq.b	#1,d3
00009AA8 0243 007F                  		andi.w	#$7F,d3	; '?'
00009AAC EE5B                       		ror.w	#7,d3
00009AAE D844                       		add.w	d4,d4
00009AB0 0244 01E0                  		andi.w	#$1E0,d4
00009AB4 0245 001E                  		andi.w	#$1E,d5
00009AB8 D644                       		add.w	d4,d3
00009ABA D645                       		add.w	d5,d3
00009ABC 4E75                       		rts
00009ABE                            ; ---------------------------------------------------------------------------
00009ABE                            
00009ABE                            LocateBlock_EmptyChunk:
00009ABE 584F                       		addq.w	#4,sp	; pop a stack frame to leave a1 pointing at the first tile
00009AC0 4E75                       		rts
00009AC2                            ; End of function sub_712A
00009AC2                            
00009AC2                            
00009AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AC2                            
00009AC2                            
00009AC2                            Calc_VRAM_Pos:
00009AC2 DA53                       		add.w	(a3),d5
00009AC4                            
00009AC4                            loc_7176:
00009AC4 D86B 0004                  		add.w	4(a3),d4
00009AC8 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00009ACC 0245 01F0                  		andi.w	#$1F0,d5
00009AD0 E94C                       		lsl.w	#4,d4
00009AD2 E44D                       		lsr.w	#2,d5
00009AD4 D845                       		add.w	d5,d4
00009AD6 7003                       		moveq	#3,d0
00009AD8 4840                       		swap	d0
00009ADA 3004                       		move.w	d4,d0
00009ADC 4E75                       		rts	
00009ADE                            ; End of function Calc_VRAM_Pos
00009ADE                            
00009ADE                            ; ===========================================================================
00009ADE D86B 0004                  		add.w	4(a3),d4
00009AE2 DA53                       		add.w	(a3),d5
00009AE4 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00009AE8 0245 01F0                  		andi.w	#$1F0,d5
00009AEC E94C                       		lsl.w	#4,d4
00009AEE E44D                       		lsr.w	#2,d5
00009AF0 D845                       		add.w	d5,d4
00009AF2 7002                       		moveq	#2,d0
00009AF4 4840                       		swap	d0
00009AF6 3004                       		move.w	d4,d0
00009AF8 4E75                       		rts	
00009AFA                            
00009AFA                            ; ---------------------------------------------------------------------------
00009AFA                            ; Subroutine to	load tiles as soon as the level	appears
00009AFA                            ; ---------------------------------------------------------------------------
00009AFA                            
00009AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AFA                            
00009AFA                            
00009AFA                            LoadTilesFromStart:
00009AFA 4BF9 00C0 0004             		lea	($C00004).l,a5
00009B00 4DF9 00C0 0000             		lea	($C00000).l,a6
00009B06 47F8 F700                  		lea	($FFFFF700).w,a3
00009B0A 49F8 A400                  		lea	($FFFFA400).w,a4
00009B0E 343C 4000                  		move.w	#$4000,d2
00009B12 6100                       		bsr.s	LoadTilesFromStart2
00009B14 47F8 F708                  		lea	($FFFFF708).w,a3
00009B18 49F8 A440                  		lea	($FFFFA440).w,a4
00009B1C 343C 6000                  		move.w	#$6000,d2
00009B20 4A38 FE10                  		tst.b	($FFFFFE10).w
00009B24 6700 0000                  		beq.w	loc_7220
00009B28 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00009B2E 6700 0000                  		beq.w	loc_725A
00009B32 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
00009B38 6700 0000                  		beq.w	loc_7288
00009B3C 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
00009B42 6700 0000                  		beq.w	loc_7220
00009B46                            ; End of function LoadTilesFromStart
00009B46                            
00009B46                            
00009B46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B46                            
00009B46                            
00009B46                            LoadTilesFromStart2:
00009B46 78F0                       		moveq	#-$10,d4
00009B48 7C0F                       		moveq	#$F,d6
00009B4A                            
00009B4A                            loc_71FC:
00009B4A 48E7 0E00                  		movem.l	d4-d6,-(sp)
00009B4E 7A00                       		moveq	#0,d5
00009B50 3204                       		move.w	d4,d1
00009B52 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00009B56 3801                       		move.w	d1,d4
00009B58 7A00                       		moveq	#0,d5
00009B5A 7C1F                       		moveq	#$1F,d6
00009B5C 6100 FD92                  		bsr.w	DrawTiles_LR2
00009B60 4CDF 0070                  		movem.l	(sp)+,d4-d6
00009B64 0644 0010                  		addi.w	#$10,d4
00009B68 51CE FFE0                  		dbf	d6,loc_71FC
00009B6C 4E75                       		rts	
00009B6E                            ; End of function LoadTilesFromStart2
00009B6E                            
00009B6E                            ; ===========================================================================
00009B6E                            
00009B6E                            loc_7220:
00009B6E 7800                       		moveq	#0,d4
00009B70 7C0F                       		moveq	#$F,d6
00009B72                            
00009B72                            loc_7224:
00009B72 48E7 0E00                  		movem.l	d4-d6,-(sp)
00009B76 41F9 0000 0000             		lea	(unk_724A).l,a0
00009B7C 3038 F70C                  		move.w	($FFFFF70C).w,d0
00009B80 D044                       		add.w	d4,d0
00009B82 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
00009B86 6100 0000                  		bsr.w	sub_72BA
00009B8A 4CDF 0070                  		movem.l	(sp)+,d4-d6
00009B8E 0644 0010                  		addi.w	#$10,d4
00009B92 51CE FFDE                  		dbf	d6,loc_7224
00009B96 4E75                       		rts	
00009B98                            ; ===========================================================================
00009B98 00                         unk_724A:	dc.b   0 ;	 
00009B99 00                         		dc.b   0 ;  
00009B9A 00                         		dc.b   0 ;  
00009B9B 00                         		dc.b   0 ;  
00009B9C 06                         		dc.b   6 ;  
00009B9D 06                         		dc.b   6 ;  
00009B9E 06                         		dc.b   6 ;  
00009B9F 04                         		dc.b   4 ;  
00009BA0 04                         		dc.b   4 ;  
00009BA1 04                         		dc.b   4 ;  
00009BA2 00                         		dc.b   0 ;  
00009BA3 00                         		dc.b   0 ;  
00009BA4 00                         		dc.b   0 ;  
00009BA5 00                         		dc.b   0 ;  
00009BA6 00                         		dc.b   0 ;  
00009BA7 00                         		dc.b   0 ;  
00009BA8                            ; ===========================================================================
00009BA8                            
00009BA8                            loc_725A:
00009BA8 78F0                       		moveq	#-$10,d4
00009BAA 7C0F                       		moveq	#$F,d6
00009BAC                            
00009BAC                            loc_725E:
00009BAC 48E7 0E00                  		movem.l	d4-d6,-(sp)
00009BB0 41F9 0000 97B9             		lea	(unk_6EF3).l,a0
00009BB6 3038 F70C                  		move.w	($FFFFF70C).w,d0
00009BBA 0440 0200                  		subi.w	#$200,d0
00009BBE D044                       		add.w	d4,d0
00009BC0 0240 07F0                  		andi.w	#$7F0,d0
00009BC4 6100 0000                  		bsr.w	sub_72BA
00009BC8 4CDF 0070                  		movem.l	(sp)+,d4-d6
00009BCC 0644 0010                  		addi.w	#$10,d4
00009BD0 51CE FFDA                  		dbf	d6,loc_725E
00009BD4 4E75                       		rts	
00009BD6                            ; ===========================================================================
00009BD6                            
00009BD6                            loc_7288:
00009BD6 78F0                       		moveq	#-$10,d4
00009BD8 7C0F                       		moveq	#$F,d6
00009BDA                            
00009BDA                            loc_728C:
00009BDA 48E7 0E00                  		movem.l	d4-d6,-(sp)
00009BDE 41F9 0000 96BB             		lea	(unk_6DF5).l,a0
00009BE4 3038 F70C                  		move.w	($FFFFF70C).w,d0
00009BE8 D044                       		add.w	d4,d0
00009BEA 0240 01F0                  		andi.w	#$1F0,d0
00009BEE 6100 0000                  		bsr.w	sub_72BA
00009BF2 4CDF 0070                  		movem.l	(sp)+,d4-d6
00009BF6 0644 0010                  		addi.w	#$10,d4
00009BFA 51CE FFDE                  		dbf	d6,loc_728C
00009BFE 4E75                       		rts	
00009C00                            ; ===========================================================================
00009C00 F7                         unk_72B2:	dc.b $F7 ; ÷
00009C01 08                         		dc.b   8 ;  
00009C02 F7                         		dc.b $F7 ; ÷
00009C03 08                         		dc.b   8 ;  
00009C04 F7                         		dc.b $F7 ; ÷
00009C05 10                         		dc.b $10 ;  
00009C06 F7                         		dc.b $F7 ; ÷
00009C07 18                         		dc.b $18 ;  
00009C08                            
00009C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C08                            
00009C08                            
00009C08                            sub_72BA:
00009C08 E848                       		lsr.w	#4,d0
00009C0A 1030 0000                  		move.b	(a0,d0.w),d0
00009C0E 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
00009C12 6700                       		beq.s	loc_72DA
00009C14 7AF0                       		moveq	#-$10,d5
00009C16 48E7 0C00                  		movem.l	d4-d5,-(sp)
00009C1A 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
00009C1E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00009C22 6100 FCCA                  		bsr.w	DrawTiles_LR
00009C26 6000                       		bra.s	locret_72EE
00009C28                            ; ===========================================================================
00009C28                            
00009C28                            loc_72DA:
00009C28 7A00                       		moveq	#0,d5
00009C2A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00009C2E 6100 FE94                  		bsr.w	loc_7176
00009C32 4CDF 0030                  		movem.l	(sp)+,d4-d5
00009C36 7C1F                       		moveq	#$1F,d6
00009C38 6100 FCE0                  		bsr.w	DrawTiles_LR3
00009C3C                            
00009C3C                            locret_72EE:
00009C3C 4E75                       		rts	
00009C3E                            ; End of function sub_72BA
00009C3E                            
00009C3E                            LoadZoneTiles:
00009C3E 7000                       		moveq	#0,d0			; Clear d0
00009C40 1038 FE10                  		move.b	($FFFFFE10).w,d0		; Load number of current zone to d0
00009C44 E948                       		lsl.w	#4,d0			; Multiply by $10, converting the zone ID into an offset
00009C46 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2	; Load LevelHeaders's address into a2
00009C4C 45F2 0000                  		lea	(a2,d0.w),a2		; Offset LevelHeaders by the zone-offset, and load the resultant address to a2
00009C50 201A                       		move.l	(a2)+,d0		; Move the first longword of data that a2 points to to d0, this contains the zone's first PLC ID and its art's address.
00009C52                            						; The auto increment is pointless as a2 is overwritten later, and nothing reads from a2 before then
00009C52 0280 00FF FFFF             		andi.l	#$FFFFFF,d0    		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
00009C58 2040                       		movea.l	d0,a0			; Load the address of the zone's art into a0 (source)
00009C5A 43F9 00FF 0000             		lea	($FF0000).l,a1		; Load v_256x256/StartOfRAM (in this context, an art buffer) into a1 (destination)
00009C60 4EB8 1374                  		jsr		CompDec			; Decompress a0 to a1 (Kosinski compression)
00009C64                            
00009C64 3609                       		move.w	a1,d3			; Move a word of a1 to d3, note that a1 doesn't exactly contain the address of v_256x256/StartOfRAM anymore, after KosDec, a1 now contains v_256x256/StartOfRAM + the size of the file decompressed to it, d3 now contains the length of the file that was decompressed
00009C66 3E03                       		move.w	d3,d7			; Move d3 to d7, for use in seperate calculations
00009C68                            
00009C68 0243 0FFF                  		andi.w	#$FFF,d3		; Remove the high nibble of the high byte of the length of decompressed file, this nibble is how many $1000 bytes the decompressed art is
00009C6C E24B                       		lsr.w	#1,d3			; Half the value of 'length of decompressed file', d3 becomes the 'DMA transfer length'
00009C6E                            
00009C6E E95F                       		rol.w	#4,d7			; Rotate (left) length of decompressed file by one nibble
00009C70 0247 000F                  		andi.w	#$F,d7			; Only keep the low nibble of low byte (the same one filtered out of d3 above), this nibble is how many $1000 bytes the decompressed art is
00009C74                            
00009C74                            @loop:
00009C74 3407                       		move.w	d7,d2			; Move d7 to d2, note that the ahead dbf removes 1 byte from d7 each time it loops, meaning that the following calculations will have different results each time
00009C76 EF4A                       		lsl.w	#7,d2
00009C78 EB4A                       		lsl.w	#5,d2			; Shift (left) d2 by $C, making it high nibble of the high byte, d2 is now the size of the decompressed file rounded down to the nearest $1000 bytes, d2 becomes the 'destination address'
00009C7A                            
00009C7A 223C 00FF FFFF             		move.l	#$FFFFFF,d1		; Fill d1 with $FF
00009C80 3202                       		move.w	d2,d1			; Move d2 to d1, overwriting the last word of $FF's with d2, this turns d1 into 'StartOfRAM'+'However many $1000 bytes the decompressed art is', d1 becomes the 'source address'
00009C82                            
00009C82 4EB9 0000 11B2             		jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
00009C88 3F07                       		move.w	d7,-(sp)		; Store d7 in the Stack
00009C8A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00009C90 6100 9A72                  		bsr.w	DelayProgram
00009C94 4EB8 140E                  		jsr		RunPLC_RAM
00009C98 3E1F                       		move.w	(sp)+,d7		; Restore d7 from the Stack
00009C9A 363C 0800                  		move.w	#$800,d3		; Force the DMA transfer length to be $1000/2 (the first cycle is dynamic because the art's DMA'd backwards)
00009C9E 51CF FFD4                  		dbf	d7,@loop		; Loop for each $1000 bytes the decompressed art is
00009CA2                            
00009CA2 4E75                       		rts
00009CA4                            ; End of function LoadZoneTiles
00009CA4                            
00009CA4                            ; ---------------------------------------------------------------------------
00009CA4                            ; Main Load Block loading subroutine
00009CA4                            ; ---------------------------------------------------------------------------
00009CA4                            
00009CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CA4                            
00009CA4                            
00009CA4                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00009CA4 7000                       		moveq	#0,d0
00009CA6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00009CAA E948                       		lsl.w	#4,d0
00009CAC 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00009CB2 45F2 0000                  		lea	(a2,d0.w),a2
00009CB6 2F0A                       		move.l	a2,-(sp)
00009CB8 588A                       		addq.l	#4,a2
00009CBA 205A                       		movea.l	(a2)+,a0
00009CBC 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00009CC0 303C 0000                  		move.w	#0,d0
00009CC4 4EB8 1540                  		jsr		EniDec
00009CC8 205A                       		movea.l	(a2)+,a0
00009CCA 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
00009CCE 6700                       		beq.s	@no_dec		; if yes, branch
00009CD0 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
00009CD6 6700                       		beq.s	@no_dec		; if yes, branch
00009CD8 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w ; are we in the ending sequence?
00009CDE 6700                       		beq.s	@no_dec		; if yes, branch
00009CE0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; are we in the ending sequence?
00009CE6 6700                       		beq.s	@no_dec		; if yes, branch
00009CE8 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; are we in the ending sequence?
00009CEE 6700                       		beq.s	@no_dec		; if yes, branch
00009CF0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; are we in the ending sequence?
00009CF6 6700                       		beq.s	@no_dec		; if yes, branch
00009CF8 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00009CFE 4EB8 16BE                  		jsr	KosDec
00009D02                            
00009D02                            @no_dec:
00009D02 6100 0000                  		bsr.w	LevelLayoutLoad
00009D06 301A                       		move.w	(a2)+,d0
00009D08 3012                       		move.w	(a2),d0
00009D0A 0240 00FF                  		andi.w	#$FF,d0
00009D0E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00009D14 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00009D16 700C                       		moveq	#$C,d0		; use SB3 pallet
00009D18                            
00009D18                            MLB_ChkSBZPal:
00009D18 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00009D1E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00009D20 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00009D26 6600                       		bne.s	MLB_NormalPal	; if not, branch
00009D28                            
00009D28                            MLB_UsePal0E:
00009D28 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00009D2A                            
00009D2A                            MLB_NormalPal:
00009D2A 6100 8944                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00009D2E 245F                       		movea.l	(sp)+,a2
00009D30 584A                       		addq.w	#4,a2
00009D32 7000                       		moveq	#0,d0
00009D34 1012                       		move.b	(a2),d0
00009D36 6700                       		beq.s	locret_6D10
00009D38 4EB8 13A2                  		jsr		LoadPLC		; load pattern load cues
00009D3C                            
00009D3C                            locret_6D10:
00009D3C 4E75                       		rts	
00009D3E                            ; End of function MainLoadBlockLoad
00009D3E                            
00009D3E                            ; ---------------------------------------------------------------------------
00009D3E                            ; Level	layout loading subroutine
00009D3E                            ; ---------------------------------------------------------------------------
00009D3E                            
00009D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D3E                            
00009D3E                            
00009D3E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00009D3E 47F8 A400                  		lea	($FFFFA400).w,a3
00009D42 323C 01FF                  		move.w	#$1FF,d1
00009D46 7000                       		moveq	#0,d0
00009D48                            
00009D48                            LevLoad_ClrRam:
00009D48 26C0                       		move.l	d0,(a3)+
00009D4A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00009D4E                            
00009D4E 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00009D52 7200                       		moveq	#0,d1
00009D54 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00009D58 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00009D5C 7202                       		moveq	#2,d1
00009D5E                            ; End of function LevelLayoutLoad
00009D5E                            
00009D5E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00009D5E                            
00009D5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D5E                            
00009D5E                            
00009D5E                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00009D5E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00009D62 ED08                       		lsl.b	#6,d0
00009D64 EA48                       		lsr.w	#5,d0
00009D66 3400                       		move.w	d0,d2
00009D68 D040                       		add.w	d0,d0
00009D6A D042                       		add.w	d2,d0
00009D6C D041                       		add.w	d1,d0
00009D6E 43F9 0000 0000             		lea	(Level_Index).l,a1
00009D74 3031 0000                  		move.w	(a1,d0.w),d0
00009D78 43F1 0000                  		lea	(a1,d0.w),a1
00009D7C 7200                       		moveq	#0,d1
00009D7E 3401                       		move.w	d1,d2
00009D80 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00009D82 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00009D84                            
00009D84                            LevLoad_NumRows:
00009D84 3001                       		move.w	d1,d0
00009D86 204B                       		movea.l	a3,a0
00009D88                            
00009D88                            LevLoad_Row:
00009D88 10D9                       		move.b	(a1)+,(a0)+
00009D8A 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00009D8E 47EB 0080                  		lea	$80(a3),a3	; do next row
00009D92 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00009D96 4E75                       		rts	
00009D98                            ; End of function LevelLayoutLoad2
00009D98                            
00009D98                            ; ---------------------------------------------------------------------------
00009D98                            ; Dynamic screen resize	loading	subroutine
00009D98                            ; ---------------------------------------------------------------------------
00009D98                            
00009D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D98                            
00009D98                            
00009D98                            DynScrResizeLoad:			; XREF: DeformBgLayer
00009D98 7000                       		moveq	#0,d0
00009D9A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00009D9E D040                       		add.w	d0,d0
00009DA0 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00009DA4 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00009DA8 7202                       		moveq	#2,d1
00009DAA 3038 F726                  		move.w	($FFFFF726).w,d0
00009DAE 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00009DB2 6700                       		beq.s	locret_6DAA
00009DB4 6400                       		bcc.s	loc_6DAC
00009DB6 4441                       		neg.w	d1
00009DB8 3038 F704                  		move.w	($FFFFF704).w,d0
00009DBC B078 F726                  		cmp.w	($FFFFF726).w,d0
00009DC0 6300                       		bls.s	loc_6DA0
00009DC2 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00009DC6 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00009DCC                            
00009DCC                            loc_6DA0:
00009DCC D378 F72E                  		add.w	d1,($FFFFF72E).w
00009DD0 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00009DD6                            
00009DD6                            locret_6DAA:
00009DD6 4E75                       		rts	
00009DD8                            ; ===========================================================================
00009DD8                            
00009DD8                            loc_6DAC:				; XREF: DynScrResizeLoad
00009DD8 3038 F704                  		move.w	($FFFFF704).w,d0
00009DDC 5040                       		addq.w	#8,d0
00009DDE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00009DE2 6500                       		bcs.s	loc_6DC4
00009DE4 0838 0001 D022             		btst	#1,($FFFFD022).w
00009DEA 6700                       		beq.s	loc_6DC4
00009DEC D241                       		add.w	d1,d1
00009DEE D241                       		add.w	d1,d1
00009DF0                            
00009DF0                            loc_6DC4:
00009DF0 D378 F72E                  		add.w	d1,($FFFFF72E).w
00009DF4 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00009DFA 4E75                       		rts	
00009DFC                            ; End of function DynScrResizeLoad
00009DFC                            
00009DFC                            ; ===========================================================================
00009DFC                            ; ---------------------------------------------------------------------------
00009DFC                            ; Offset index for dynamic screen resizing
00009DFC                            ; ---------------------------------------------------------------------------
00009DFC 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00009E00 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00009E04 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00009E08 0000                       		dc.w Resize_Ending-Resize_Index
00009E0A                            ; ===========================================================================
00009E0A                            ; ---------------------------------------------------------------------------
00009E0A                            ; Green	Hill Zone dynamic screen resizing
00009E0A                            ; ---------------------------------------------------------------------------
00009E0A                            
00009E0A                            Resize_GHZ:				; XREF: Resize_Index
00009E0A 7000                       		moveq	#0,d0
00009E0C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00009E10 D040                       		add.w	d0,d0
00009E12 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00009E16 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00009E1A                            ; ===========================================================================
00009E1A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00009E1C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00009E1E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00009E20                            ; ===========================================================================
00009E20                            
00009E20                            Resize_GHZ1:
00009E20 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00009E26 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00009E2C 6500                       		bcs.s	locret_6E08	; if not, branch
00009E2E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00009E34                            
00009E34                            locret_6E08:
00009E34 4E75                       		rts	
00009E36                            ; ===========================================================================
00009E36                            
00009E36                            Resize_GHZ2:
00009E36 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00009E3C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00009E42 6500                       		bcs.s	locret_6E3A
00009E44 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00009E4A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00009E50 6500                       		bcs.s	locret_6E3A
00009E52 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00009E58 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00009E5E 6500                       		bcs.s	locret_6E3A
00009E60 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00009E66                            
00009E66                            locret_6E3A:
00009E66 4E75                       		rts	
00009E68                            ; ===========================================================================
00009E68                            
00009E68                            Resize_GHZ3:
00009E68 7000                       		moveq	#0,d0
00009E6A 1038 F742                  		move.b	($FFFFF742).w,d0
00009E6E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00009E72 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00009E76                            ; ===========================================================================
00009E76 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00009E78 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00009E7A 0000                       		dc.w Resize_GHZ3end-off_6E4A
00009E7C                            ; ===========================================================================
00009E7C                            
00009E7C                            Resize_GHZ3main:
00009E7C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00009E82 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00009E88 6500                       		bcs.s	locret_6E96
00009E8A 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00009E90 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00009E96 6500                       		bcs.s	locret_6E96
00009E98 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00009E9E 6500                       		bcs.s	loc_6E98
00009EA0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00009EA6 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00009EAC 6400                       		bcc.s	loc_6E8E
00009EAE 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00009EB4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00009EBA                            
00009EBA                            loc_6E8E:
00009EBA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00009EC0 6400                       		bcc.s	loc_6E98
00009EC2                            
00009EC2                            locret_6E96:
00009EC2 4E75                       		rts	
00009EC4                            ; ===========================================================================
00009EC4                            
00009EC4                            loc_6E98:
00009EC4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00009ECA 5438 F742                  		addq.b	#2,($FFFFF742).w
00009ECE 4E75                       		rts	
00009ED0                            ; ===========================================================================
00009ED0                            
00009ED0                            Resize_GHZ3boss:
00009ED0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00009ED6 6400                       		bcc.s	loc_6EB0
00009ED8 5538 F742                  		subq.b	#2,($FFFFF742).w
00009EDC                            
00009EDC                            loc_6EB0:
00009EDC 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00009EE2 6500                       		bcs.s	locret_6EE8
00009EE4 6100 0000                  		bsr.w	SingleObjLoad
00009EE8 6600                       		bne.s	loc_6ED0
00009EEA 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00009EEE 337C 2A60 0008             		move.w	#$2A60,8(a1)
00009EF4 337C 0280 000C             		move.w	#$280,$C(a1)
00009EFA                            
00009EFA                            loc_6ED0:
00009EFA 303C 008C                  		move.w	#$8C,d0
00009EFE 4EB9 0000 1108             		jsr		(PlaySound).l	; play boss music
00009F04 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009F0A 5438 F742                  		addq.b	#2,($FFFFF742).w
00009F0E 7011                       		moveq	#$11,d0
00009F10 4EB8 13A2                  		jsr		LoadPLC		; load boss patterns
00009F14                            ; ===========================================================================
00009F14                            
00009F14                            locret_6EE8:
00009F14 4E75                       		rts	
00009F16                            ; ===========================================================================
00009F16                            
00009F16                            Resize_GHZ3end:
00009F16 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00009F1C 4E75                       		rts	
00009F1E                            ; ===========================================================================
00009F1E                            ; ---------------------------------------------------------------------------
00009F1E                            ; Labyrinth Zone dynamic screen	resizing
00009F1E                            ; ---------------------------------------------------------------------------
00009F1E                            
00009F1E                            Resize_LZ:				; XREF: Resize_Index
00009F1E 7000                       		moveq	#0,d0
00009F20 1038 FE11                  		move.b	($FFFFFE11).w,d0
00009F24 D040                       		add.w	d0,d0
00009F26 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00009F2A 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00009F2E                            ; ===========================================================================
00009F2E 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00009F30 0000                       		dc.w Resize_LZ12-Resize_LZx
00009F32 0000                       		dc.w Resize_LZ3-Resize_LZx
00009F34 0000                       		dc.w Resize_SBZ3-Resize_LZx
00009F36                            ; ===========================================================================
00009F36                            
00009F36                            Resize_LZ12:
00009F36 4E75                       		rts	
00009F38                            ; ===========================================================================
00009F38                            
00009F38                            Resize_LZ3:
00009F38 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00009F3C 6700                       		beq.s	loc_6F28	; if not, branch
00009F3E 43F8 A506                  		lea	($FFFFA506).w,a1
00009F42 0C11 0007                  		cmpi.b	#7,(a1)
00009F46 6700                       		beq.s	loc_6F28
00009F48 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00009F4C 303C 00B7                  		move.w	#$B7,d0
00009F50 4EB9 0000 110E             		jsr		(PlaySound_Special).l ; play rumbling sound
00009F56                            
00009F56                            loc_6F28:
00009F56 4A38 F742                  		tst.b	($FFFFF742).w
00009F5A 6600                       		bne.s	locret_6F64
00009F5C 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00009F62 6500                       		bcs.s	locret_6F62
00009F64 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00009F6A 6400                       		bcc.s	locret_6F62
00009F6C 6100 0000                  		bsr.w	SingleObjLoad
00009F70 6600                       		bne.s	loc_6F4A
00009F72 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00009F76                            
00009F76                            loc_6F4A:
00009F76 303C 008C                  		move.w	#$8C,d0
00009F7A 4EB9 0000 1108             		jsr		(PlaySound).l	; play boss music
00009F80 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00009F86 5438 F742                  		addq.b	#2,($FFFFF742).w
00009F8A 7011                       		moveq	#$11,d0
00009F8C 4EF8 13A2                  		jmp		LoadPLC		; load boss patterns
00009F90                            ; ===========================================================================
00009F90                            
00009F90                            locret_6F62:
00009F90 4E75                       		rts	
00009F92                            ; ===========================================================================
00009F92                            
00009F92                            locret_6F64:
00009F92 4E75                       		rts	
00009F94                            ; ===========================================================================
00009F94                            
00009F94                            Resize_SBZ3:
00009F94 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00009F9A 6500                       		bcs.s	locret_6F8C
00009F9C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00009FA2 6400                       		bcc.s	locret_6F8C	; if not, branch
00009FA4 4238 FE30                  		clr.b	($FFFFFE30).w
00009FA8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00009FAE 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00009FB4 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00009FBA                            
00009FBA                            locret_6F8C:
00009FBA 4E75                       		rts	
00009FBC                            ; ===========================================================================
00009FBC                            ; ---------------------------------------------------------------------------
00009FBC                            ; Marble Zone dynamic screen resizing
00009FBC                            ; ---------------------------------------------------------------------------
00009FBC                            
00009FBC                            Resize_MZ:				; XREF: Resize_Index
00009FBC 7000                       		moveq	#0,d0
00009FBE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00009FC2 D040                       		add.w	d0,d0
00009FC4 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00009FC8 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00009FCC                            ; ===========================================================================
00009FCC 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00009FCE 0000                       		dc.w Resize_MZ2-Resize_MZx
00009FD0 0000                       		dc.w Resize_MZ3-Resize_MZx
00009FD2                            ; ===========================================================================
00009FD2                            
00009FD2                            Resize_MZ1:
00009FD2 7000                       		moveq	#0,d0
00009FD4 1038 F742                  		move.b	($FFFFF742).w,d0
00009FD8 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00009FDC 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00009FE0                            ; ===========================================================================
00009FE0 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00009FE2 0000                       		dc.w loc_6FEA-off_6FB2
00009FE4 0000                       		dc.w loc_702E-off_6FB2
00009FE6 0000                       		dc.w loc_7050-off_6FB2
00009FE8                            ; ===========================================================================
00009FE8                            
00009FE8                            loc_6FBA:
00009FE8 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00009FEE 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00009FF4 6500                       		bcs.s	locret_6FE8
00009FF6 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00009FFC 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000A002 6500                       		bcs.s	locret_6FE8
0000A004 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000A00A 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000A010 6500                       		bcs.s	locret_6FE8
0000A012 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A016                            
0000A016                            locret_6FE8:
0000A016 4E75                       		rts	
0000A018                            ; ===========================================================================
0000A018                            
0000A018                            loc_6FEA:
0000A018 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000A01E 6400                       		bcc.s	loc_6FF8
0000A020 5538 F742                  		subq.b	#2,($FFFFF742).w
0000A024 4E75                       		rts	
0000A026                            ; ===========================================================================
0000A026                            
0000A026                            loc_6FF8:
0000A026 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000A02C 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000A032 6400                       		bcc.s	locret_702C
0000A034 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000A03A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000A040 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000A046 6400                       		bcc.s	locret_702C
0000A048 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000A04E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000A054 6500                       		bcs.s	locret_702C
0000A056 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A05A                            
0000A05A                            locret_702C:
0000A05A 4E75                       		rts	
0000A05C                            ; ===========================================================================
0000A05C                            
0000A05C                            loc_702E:
0000A05C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000A062 6400                       		bcc.s	loc_703C
0000A064 5538 F742                  		subq.b	#2,($FFFFF742).w
0000A068 4E75                       		rts	
0000A06A                            ; ===========================================================================
0000A06A                            
0000A06A                            loc_703C:
0000A06A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000A070 6500                       		bcs.s	locret_704E
0000A072 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000A078 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A07C                            
0000A07C                            locret_704E:
0000A07C 4E75                       		rts	
0000A07E                            ; ===========================================================================
0000A07E                            
0000A07E                            loc_7050:
0000A07E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000A084 6500                       		bcs.s	locret_7072
0000A086 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000A08C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000A092 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000A098 6500                       		bcs.s	locret_7072
0000A09A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000A0A0                            
0000A0A0                            locret_7072:
0000A0A0 4E75                       		rts	
0000A0A2                            ; ===========================================================================
0000A0A2                            
0000A0A2                            Resize_MZ2:
0000A0A2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000A0A8 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000A0AE 6500                       		bcs.s	locret_7088
0000A0B0 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000A0B6                            
0000A0B6                            locret_7088:
0000A0B6 4E75                       		rts	
0000A0B8                            ; ===========================================================================
0000A0B8                            
0000A0B8                            Resize_MZ3:
0000A0B8 7000                       		moveq	#0,d0
0000A0BA 1038 F742                  		move.b	($FFFFF742).w,d0
0000A0BE 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000A0C2 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000A0C6                            ; ===========================================================================
0000A0C6 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000A0C8 0000                       		dc.w Resize_MZ3end-off_7098
0000A0CA                            ; ===========================================================================
0000A0CA                            
0000A0CA                            Resize_MZ3boss:
0000A0CA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000A0D0 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000A0D6 6500                       		bcs.s	locret_70E8
0000A0D8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000A0DE 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000A0E4 6500                       		bcs.s	locret_70E8
0000A0E6 6100 0000                  		bsr.w	SingleObjLoad
0000A0EA 6600                       		bne.s	loc_70D0
0000A0EC 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000A0F0 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000A0F6 337C 022C 000C             		move.w	#$22C,$C(a1)
0000A0FC                            
0000A0FC                            loc_70D0:
0000A0FC 303C 008C                  		move.w	#$8C,d0
0000A100 4EB9 0000 1108             		jsr		(PlaySound).l	; play boss music
0000A106 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000A10C 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A110 7011                       		moveq	#$11,d0
0000A112 4EF8 13A2                  		jmp		LoadPLC		; load boss patterns
0000A116                            ; ===========================================================================
0000A116                            
0000A116                            locret_70E8:
0000A116 4E75                       		rts	
0000A118                            ; ===========================================================================
0000A118                            
0000A118                            Resize_MZ3end:
0000A118 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000A11E 4E75                       		rts	
0000A120                            ; ===========================================================================
0000A120                            ; ---------------------------------------------------------------------------
0000A120                            ; Star Light Zone dynamic screen resizing
0000A120                            ; ---------------------------------------------------------------------------
0000A120                            
0000A120                            Resize_SLZ:				; XREF: Resize_Index
0000A120 7000                       		moveq	#0,d0
0000A122 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A126 D040                       		add.w	d0,d0
0000A128 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000A12C 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000A130                            ; ===========================================================================
0000A130 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000A132 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000A134 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000A136                            ; ===========================================================================
0000A136                            
0000A136                            Resize_SLZ12:
0000A136 4E75                       		rts	
0000A138                            ; ===========================================================================
0000A138                            
0000A138                            Resize_SLZ3:
0000A138 7000                       		moveq	#0,d0
0000A13A 1038 F742                  		move.b	($FFFFF742).w,d0
0000A13E 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000A142 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000A146                            ; ===========================================================================
0000A146 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000A148 0000                       		dc.w Resize_SLZ3boss-off_7118
0000A14A 0000                       		dc.w Resize_SLZ3end-off_7118
0000A14C                            ; ===========================================================================
0000A14C                            
0000A14C                            Resize_SLZ3main:
0000A14C 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000A152 6500                       		bcs.s	locret_7130
0000A154 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000A15A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A15E                            
0000A15E                            locret_7130:
0000A15E 4E75                       		rts	
0000A160                            ; ===========================================================================
0000A160                            
0000A160                            Resize_SLZ3boss:
0000A160 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000A166 6500                       		bcs.s	locret_715C
0000A168 6100 0000                  		bsr.w	SingleObjLoad
0000A16C 6600                       		bne.s	loc_7144
0000A16E 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000A172                            
0000A172                            loc_7144:
0000A172 303C 008C                  		move.w	#$8C,d0
0000A176 4EB9 0000 1108             		jsr		(PlaySound).l	; play boss music
0000A17C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000A182 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A186 7011                       		moveq	#$11,d0
0000A188 4EF8 13A2                  		jmp		LoadPLC		; load boss patterns
0000A18C                            ; ===========================================================================
0000A18C                            
0000A18C                            locret_715C:
0000A18C 4E75                       		rts	
0000A18E                            ; ===========================================================================
0000A18E                            
0000A18E                            Resize_SLZ3end:
0000A18E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000A194 4E75                       		rts
0000A196 4E75                       		rts
0000A198                            ; ===========================================================================
0000A198                            ; ---------------------------------------------------------------------------
0000A198                            ; Spring Yard Zone dynamic screen resizing
0000A198                            ; ---------------------------------------------------------------------------
0000A198                            
0000A198                            Resize_SYZ:				; XREF: Resize_Index
0000A198 7000                       		moveq	#0,d0
0000A19A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A19E D040                       		add.w	d0,d0
0000A1A0 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000A1A4 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000A1A8                            ; ===========================================================================
0000A1A8 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000A1AA 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000A1AC 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000A1AE                            ; ===========================================================================
0000A1AE                            
0000A1AE                            Resize_SYZ1:
0000A1AE 4E75                       		rts	
0000A1B0                            ; ===========================================================================
0000A1B0                            
0000A1B0                            Resize_SYZ2:
0000A1B0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000A1B6 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000A1BC 6500                       		bcs.s	locret_71A2
0000A1BE 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000A1C4 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000A1CA 6500                       		bcs.s	locret_71A2
0000A1CC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000A1D2                            
0000A1D2                            locret_71A2:
0000A1D2 4E75                       		rts	
0000A1D4                            ; ===========================================================================
0000A1D4                            
0000A1D4                            Resize_SYZ3:
0000A1D4 7000                       		moveq	#0,d0
0000A1D6 1038 F742                  		move.b	($FFFFF742).w,d0
0000A1DA 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000A1DE 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000A1E2                            ; ===========================================================================
0000A1E2 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000A1E4 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000A1E6 0000                       		dc.w Resize_SYZ3end-off_71B2
0000A1E8                            ; ===========================================================================
0000A1E8                            
0000A1E8                            Resize_SYZ3main:
0000A1E8 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000A1EE 6500                       		bcs.s	locret_71CE
0000A1F0 6100 0000                  		bsr.w	SingleObjLoad
0000A1F4 6600                       		bne.s	locret_71CE
0000A1F6 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000A1FA 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A1FE                            
0000A1FE                            locret_71CE:
0000A1FE 4E75                       		rts	
0000A200                            ; ===========================================================================
0000A200                            
0000A200                            Resize_SYZ3boss:
0000A200 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000A206 6500                       		bcs.s	locret_7200
0000A208 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000A20E 6100 0000                  		bsr.w	SingleObjLoad
0000A212 6600                       		bne.s	loc_71EC
0000A214 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000A218 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A21C                            
0000A21C                            loc_71EC:
0000A21C 303C 008C                  		move.w	#$8C,d0
0000A220 4EB9 0000 1108             		jsr		(PlaySound).l	; play boss music
0000A226 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000A22C 7011                       		moveq	#$11,d0
0000A22E 4EF8 13A2                  		jmp		LoadPLC		; load boss patterns
0000A232                            ; ===========================================================================
0000A232                            
0000A232                            locret_7200:
0000A232 4E75                       		rts	
0000A234                            ; ===========================================================================
0000A234                            
0000A234                            Resize_SYZ3end:
0000A234 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000A23A 4E75                       		rts	
0000A23C                            ; ===========================================================================
0000A23C                            ; ---------------------------------------------------------------------------
0000A23C                            ; Scrap	Brain Zone dynamic screen resizing
0000A23C                            ; ---------------------------------------------------------------------------
0000A23C                            
0000A23C                            Resize_SBZ:				; XREF: Resize_Index
0000A23C 7000                       		moveq	#0,d0
0000A23E 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A242 D040                       		add.w	d0,d0
0000A244 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000A248 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000A24C                            ; ===========================================================================
0000A24C 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000A24E 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000A250 0000                       		dc.w Resize_FZ-Resize_SBZx
0000A252                            ; ===========================================================================
0000A252                            
0000A252                            Resize_SBZ1:
0000A252 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000A258 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000A25E 6500                       		bcs.s	locret_7242
0000A260 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000A266 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000A26C 6500                       		bcs.s	locret_7242
0000A26E 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000A274                            
0000A274                            locret_7242:
0000A274 4E75                       		rts	
0000A276                            ; ===========================================================================
0000A276                            
0000A276                            Resize_SBZ2:
0000A276 7000                       		moveq	#0,d0
0000A278 1038 F742                  		move.b	($FFFFF742).w,d0
0000A27C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000A280 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000A284                            ; ===========================================================================
0000A284 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000A286 0000                       		dc.w Resize_SBZ2boss-off_7252
0000A288 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000A28A 0000                       		dc.w Resize_SBZ2end-off_7252
0000A28C                            ; ===========================================================================
0000A28C                            
0000A28C                            Resize_SBZ2main:
0000A28C 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000A292 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000A298 6500                       		bcs.s	locret_727A
0000A29A 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000A2A0 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000A2A6 6500                       		bcs.s	locret_727A
0000A2A8 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A2AC                            
0000A2AC                            locret_727A:
0000A2AC 4E75                       		rts	
0000A2AE                            ; ===========================================================================
0000A2AE                            
0000A2AE                            Resize_SBZ2boss:
0000A2AE 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000A2B4 6500                       		bcs.s	locret_7298
0000A2B6 6100 0000                  		bsr.w	SingleObjLoad
0000A2BA 6600                       		bne.s	locret_7298
0000A2BC 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000A2C0 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A2C4 701E                       		moveq	#$1E,d0
0000A2C6 4EF8 13A2                  		jmp		LoadPLC		; load SBZ2 Eggman patterns
0000A2CA                            ; ===========================================================================
0000A2CA                            
0000A2CA                            locret_7298:
0000A2CA 4E75                       		rts	
0000A2CC                            ; ===========================================================================
0000A2CC                            
0000A2CC                            Resize_SBZ2boss2:
0000A2CC 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000A2D2 6500                       		bcs.s	loc_72B6
0000A2D4 6100 0000                  		bsr.w	SingleObjLoad
0000A2D8 6600                       		bne.s	loc_72B0
0000A2DA 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000A2DE 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A2E2                            
0000A2E2                            loc_72B0:
0000A2E2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000A2E8                            
0000A2E8                            loc_72B6:
0000A2E8 6000                       		bra.s	loc_72C2
0000A2EA                            ; ===========================================================================
0000A2EA                            
0000A2EA                            Resize_SBZ2end:
0000A2EA 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000A2F0 6500                       		bcs.s	loc_72C2
0000A2F2 4E75                       		rts	
0000A2F4                            ; ===========================================================================
0000A2F4                            
0000A2F4                            loc_72C2:
0000A2F4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000A2FA 4E75                       		rts	
0000A2FC                            ; ===========================================================================
0000A2FC                            
0000A2FC                            Resize_FZ:
0000A2FC 7000                       		moveq	#0,d0
0000A2FE 1038 F742                  		move.b	($FFFFF742).w,d0
0000A302 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000A306 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000A30A                            ; ===========================================================================
0000A30A 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000A30E 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000A312 0000                       		dc.w Resize_FZend2-off_72D8
0000A314                            ; ===========================================================================
0000A314                            
0000A314                            Resize_FZmain:
0000A314 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000A31A 6500                       		bcs.s	loc_72F4
0000A31C 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A320 701F                       		moveq	#$1F,d0
0000A322 4EB8 13A2                  		jsr		LoadPLC		; load FZ boss patterns
0000A326                            
0000A326                            loc_72F4:
0000A326 60CC                       		bra.s	loc_72C2
0000A328                            ; ===========================================================================
0000A328                            
0000A328                            Resize_FZboss:
0000A328 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000A32E 6500                       		bcs.s	loc_7312
0000A330 6100 0000                  		bsr.w	SingleObjLoad
0000A334 6600                       		bne.s	loc_7312
0000A336 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000A33A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A33E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000A344                            
0000A344                            loc_7312:
0000A344 60AE                       		bra.s	loc_72C2
0000A346                            ; ===========================================================================
0000A346                            
0000A346                            Resize_FZend:
0000A346 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000A34C 6500                       		bcs.s	loc_7320
0000A34E 5438 F742                  		addq.b	#2,($FFFFF742).w
0000A352                            
0000A352                            loc_7320:
0000A352 60A0                       		bra.s	loc_72C2
0000A354                            ; ===========================================================================
0000A354                            
0000A354                            locret_7322:
0000A354 4E75                       		rts	
0000A356                            ; ===========================================================================
0000A356                            
0000A356                            Resize_FZend2:
0000A356 609C                       		bra.s	loc_72C2
0000A358                            ; ===========================================================================
0000A358                            ; ---------------------------------------------------------------------------
0000A358                            ; Ending sequence dynamic screen resizing (empty)
0000A358                            ; ---------------------------------------------------------------------------
0000A358                            
0000A358                            Resize_Ending:				; XREF: Resize_Index
0000A358 4E75                       		rts	
0000A35A                            ; ===========================================================================
0000A35A                            ; ---------------------------------------------------------------------------
0000A35A                            ; Object 11 - GHZ bridge
0000A35A                            ; ---------------------------------------------------------------------------
0000A35A                            
0000A35A                            Obj11:					; XREF: Obj_Index
0000A35A 7000                       		moveq	#0,d0
0000A35C 1028 0024                  		move.b	$24(a0),d0
0000A360 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000A364 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000A368                            ; ===========================================================================
0000A368 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000A36C 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
0000A370 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000A374                            ; ===========================================================================
0000A374                            
0000A374                            Obj11_Main:				; XREF: Obj11_Index
0000A374 5428 0024                  		addq.b	#2,$24(a0)
0000A378 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
0000A380 317C 438E 0002             		move.w	#$438E,2(a0)
0000A386 117C 0004 0001             		move.b	#4,1(a0)
0000A38C 117C 0003 0018             		move.b	#3,$18(a0)
0000A392 117C 0080 0019             		move.b	#$80,$19(a0)
0000A398 3428 000C                  		move.w	$C(a0),d2
0000A39C 3628 0008                  		move.w	8(a0),d3
0000A3A0 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000A3A2 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000A3A6 7200                       		moveq	#0,d1
0000A3A8 1212                       		move.b	(a2),d1		; copy a2 to d1
0000A3AA 14FC 0000                  		move.b	#0,(a2)+
0000A3AE 3001                       		move.w	d1,d0
0000A3B0 E248                       		lsr.w	#1,d0
0000A3B2 E948                       		lsl.w	#4,d0
0000A3B4 9640                       		sub.w	d0,d3
0000A3B6 5501                       		subq.b	#2,d1
0000A3B8 6500                       		bcs.s	Obj11_Action
0000A3BA                            
0000A3BA                            Obj11_MakeBdg:
0000A3BA 6100 0000                  		bsr.w	SingleObjLoad
0000A3BE 6600                       		bne.s	Obj11_Action
0000A3C0 5228 0028                  		addq.b	#1,$28(a0)
0000A3C4 B668 0008                  		cmp.w	8(a0),d3
0000A3C8 6600                       		bne.s	loc_73B8
0000A3CA 0643 0010                  		addi.w	#$10,d3
0000A3CE 3142 000C                  		move.w	d2,$C(a0)
0000A3D2 3142 003C                  		move.w	d2,$3C(a0)
0000A3D6 3A08                       		move.w	a0,d5
0000A3D8 0445 D000                  		subi.w	#-$3000,d5
0000A3DC EC4D                       		lsr.w	#6,d5
0000A3DE 0245 007F                  		andi.w	#$7F,d5
0000A3E2 14C5                       		move.b	d5,(a2)+
0000A3E4 5228 0028                  		addq.b	#1,$28(a0)
0000A3E8                            
0000A3E8                            loc_73B8:				; XREF: ROM:00007398j
0000A3E8 3A09                       		move.w	a1,d5
0000A3EA 0445 D000                  		subi.w	#-$3000,d5
0000A3EE EC4D                       		lsr.w	#6,d5
0000A3F0 0245 007F                  		andi.w	#$7F,d5
0000A3F4 14C5                       		move.b	d5,(a2)+
0000A3F6 137C 000A 0024             		move.b	#$A,$24(a1)
0000A3FC 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000A3FE 3342 000C                  		move.w	d2,$C(a1)
0000A402 3342 003C                  		move.w	d2,$3C(a1)
0000A406 3343 0008                  		move.w	d3,8(a1)
0000A40A 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
0000A412 337C 438E 0002             		move.w	#$438E,2(a1)
0000A418 137C 0004 0001             		move.b	#4,1(a1)
0000A41E 137C 0003 0018             		move.b	#3,$18(a1)
0000A424 137C 0008 0019             		move.b	#8,$19(a1)
0000A42A 0643 0010                  		addi.w	#$10,d3
0000A42E 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
0000A432                            
0000A432                            Obj11_Action:				; XREF: Obj11_Index
0000A432 6100                       		bsr.s	Obj11_Solid
0000A434 4A28 003E                  		tst.b	$3E(a0)
0000A438 6700                       		beq.s	Obj11_Display
0000A43A 5928 003E                  		subq.b	#4,$3E(a0)
0000A43E 6100 0000                  		bsr.w	Obj11_Bend
0000A442                            
0000A442                            Obj11_Display:
0000A442 6100 0000                  		bsr.w	DisplaySprite
0000A446 6000 0000                  		bra.w	Obj11_ChkDel
0000A44A                            
0000A44A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A44A                            
0000A44A                            
0000A44A                            Obj11_Solid:				; XREF: Obj11_Action
0000A44A 7200                       		moveq	#0,d1
0000A44C 1228 0028                  		move.b	$28(a0),d1
0000A450 E749                       		lsl.w	#3,d1
0000A452 3401                       		move.w	d1,d2
0000A454 5041                       		addq.w	#8,d1
0000A456 D442                       		add.w	d2,d2
0000A458 43F8 D000                  		lea	($FFFFD000).w,a1
0000A45C 4A69 0012                  		tst.w	$12(a1)
0000A460 6B00 0000                  		bmi.w	locret_751E
0000A464 3029 0008                  		move.w	8(a1),d0
0000A468 9068 0008                  		sub.w	8(a0),d0
0000A46C D041                       		add.w	d1,d0
0000A46E 6B00 0000                  		bmi.w	locret_751E
0000A472 B042                       		cmp.w	d2,d0
0000A474 6400 0000                  		bcc.w	locret_751E
0000A478 6000                       		bra.s	Platform2
0000A47A                            ; End of function Obj11_Solid
0000A47A                            
0000A47A                            ; ---------------------------------------------------------------------------
0000A47A                            ; Platform subroutine
0000A47A                            ; ---------------------------------------------------------------------------
0000A47A                            
0000A47A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A47A                            
0000A47A                            
0000A47A                            PlatformObject:
0000A47A 43F8 D000                  		lea	($FFFFD000).w,a1
0000A47E 4A69 0012                  		tst.w	$12(a1)
0000A482 6B00 0000                  		bmi.w	locret_751E
0000A486 3029 0008                  		move.w	8(a1),d0
0000A48A 9068 0008                  		sub.w	8(a0),d0
0000A48E D041                       		add.w	d1,d0
0000A490 6B00 0000                  		bmi.w	locret_751E
0000A494 D241                       		add.w	d1,d1
0000A496 B041                       		cmp.w	d1,d0
0000A498 6400 0000                  		bcc.w	locret_751E
0000A49C                            
0000A49C                            Platform2:
0000A49C 3028 000C                  		move.w	$C(a0),d0
0000A4A0 5140                       		subq.w	#8,d0
0000A4A2                            
0000A4A2                            Platform3:
0000A4A2 3429 000C                  		move.w	$C(a1),d2
0000A4A6 1229 0016                  		move.b	$16(a1),d1
0000A4AA 4881                       		ext.w	d1
0000A4AC D242                       		add.w	d2,d1
0000A4AE 5841                       		addq.w	#4,d1
0000A4B0 9041                       		sub.w	d1,d0
0000A4B2 6200 0000                  		bhi.w	locret_751E
0000A4B6 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A4BA 6500 0000                  		bcs.w	locret_751E
0000A4BE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A4C2 6B00 0000                  		bmi.w	locret_751E
0000A4C6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000A4CC 6400 0000                  		bcc.w	locret_751E
0000A4D0 D440                       		add.w	d0,d2
0000A4D2 5642                       		addq.w	#3,d2
0000A4D4 3342 000C                  		move.w	d2,$C(a1)
0000A4D8 5428 0024                  		addq.b	#2,$24(a0)
0000A4DC                            
0000A4DC                            loc_74AE:
0000A4DC 0829 0003 0022             		btst	#3,$22(a1)
0000A4E2 6700                       		beq.s	loc_74DC
0000A4E4 7000                       		moveq	#0,d0
0000A4E6 1029 003D                  		move.b	$3D(a1),d0
0000A4EA ED48                       		lsl.w	#6,d0
0000A4EC 0680 00FF D000             		addi.l	#$FFD000,d0
0000A4F2 2440                       		movea.l	d0,a2
0000A4F4 08AA 0003 0022             		bclr	#3,$22(a2)
0000A4FA 422A 0025                  		clr.b	$25(a2)
0000A4FE 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
0000A504 6600                       		bne.s	loc_74DC
0000A506 552A 0024                  		subq.b	#2,$24(a2)
0000A50A                            
0000A50A                            loc_74DC:
0000A50A 3008                       		move.w	a0,d0
0000A50C 0440 D000                  		subi.w	#-$3000,d0
0000A510 EC48                       		lsr.w	#6,d0
0000A512 0240 007F                  		andi.w	#$7F,d0
0000A516 1340 003D                  		move.b	d0,$3D(a1)
0000A51A 137C 0000 0026             		move.b	#0,$26(a1)
0000A520 337C 0000 0012             		move.w	#0,$12(a1)
0000A526 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000A52C 0829 0001 0022             		btst	#1,$22(a1)
0000A532 6700                       		beq.s	loc_7512
0000A534 2F08                       		move.l	a0,-(sp)
0000A536 2049                       		movea.l	a1,a0
0000A538 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000A53E 205F                       		movea.l	(sp)+,a0
0000A540                            
0000A540                            loc_7512:
0000A540 08E9 0003 0022             		bset	#3,$22(a1)
0000A546 08E8 0003 0022             		bset	#3,$22(a0)
0000A54C                            
0000A54C                            locret_751E:
0000A54C 4E75                       		rts	
0000A54E                            ; End of function PlatformObject
0000A54E                            
0000A54E                            ; ---------------------------------------------------------------------------
0000A54E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000A54E                            ; ---------------------------------------------------------------------------
0000A54E                            
0000A54E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A54E                            
0000A54E                            
0000A54E                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000A54E 43F8 D000                  		lea	($FFFFD000).w,a1
0000A552 4A69 0012                  		tst.w	$12(a1)
0000A556 6B00 FFF4                  		bmi.w	locret_751E
0000A55A 3029 0008                  		move.w	8(a1),d0
0000A55E 9068 0008                  		sub.w	8(a0),d0
0000A562 D041                       		add.w	d1,d0
0000A564 6BE6                       		bmi.s	locret_751E
0000A566 D241                       		add.w	d1,d1
0000A568 B041                       		cmp.w	d1,d0
0000A56A 64E0                       		bcc.s	locret_751E
0000A56C 0828 0000 0001             		btst	#0,1(a0)
0000A572 6700                       		beq.s	loc_754A
0000A574 4640                       		not.w	d0
0000A576 D041                       		add.w	d1,d0
0000A578                            
0000A578                            loc_754A:
0000A578 E248                       		lsr.w	#1,d0
0000A57A 7600                       		moveq	#0,d3
0000A57C 1632 0000                  		move.b	(a2,d0.w),d3
0000A580 3028 000C                  		move.w	$C(a0),d0
0000A584 9043                       		sub.w	d3,d0
0000A586 6000 FF1A                  		bra.w	Platform3
0000A58A                            ; End of function SlopeObject
0000A58A                            
0000A58A                            
0000A58A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A58A                            
0000A58A                            
0000A58A                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000A58A 43F8 D000                  		lea	($FFFFD000).w,a1
0000A58E 4A69 0012                  		tst.w	$12(a1)
0000A592 6B00 FFB8                  		bmi.w	locret_751E
0000A596 3029 0008                  		move.w	8(a1),d0
0000A59A 9068 0008                  		sub.w	8(a0),d0
0000A59E D041                       		add.w	d1,d0
0000A5A0 6B00 FFAA                  		bmi.w	locret_751E
0000A5A4 D241                       		add.w	d1,d1
0000A5A6 B041                       		cmp.w	d1,d0
0000A5A8 6400 FFA2                  		bcc.w	locret_751E
0000A5AC 3028 000C                  		move.w	$C(a0),d0
0000A5B0 9043                       		sub.w	d3,d0
0000A5B2 6000 FEEE                  		bra.w	Platform3
0000A5B6                            ; End of function Obj15_Solid
0000A5B6                            
0000A5B6                            ; ===========================================================================
0000A5B6                            
0000A5B6                            Obj11_Action2:				; XREF: Obj11_Index
0000A5B6 6100                       		bsr.s	Obj11_WalkOff
0000A5B8 6100 0000                  		bsr.w	DisplaySprite
0000A5BC 6000 0000                  		bra.w	Obj11_ChkDel
0000A5C0                            
0000A5C0                            ; ---------------------------------------------------------------------------
0000A5C0                            ; Subroutine allowing Sonic to walk off a bridge
0000A5C0                            ; ---------------------------------------------------------------------------
0000A5C0                            
0000A5C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A5C0                            
0000A5C0                            
0000A5C0                            Obj11_WalkOff:				; XREF: Obj11_Action2
0000A5C0 7200                       		moveq	#0,d1
0000A5C2 1228 0028                  		move.b	$28(a0),d1
0000A5C6 E749                       		lsl.w	#3,d1
0000A5C8 3401                       		move.w	d1,d2
0000A5CA 5041                       		addq.w	#8,d1
0000A5CC 6100                       		bsr.s	ExitPlatform2
0000A5CE 6400                       		bcc.s	locret_75BE
0000A5D0 E848                       		lsr.w	#4,d0
0000A5D2 1140 003F                  		move.b	d0,$3F(a0)
0000A5D6 1028 003E                  		move.b	$3E(a0),d0
0000A5DA 0C00 0040                  		cmpi.b	#$40,d0
0000A5DE 6700                       		beq.s	loc_75B6
0000A5E0 5828 003E                  		addq.b	#4,$3E(a0)
0000A5E4                            
0000A5E4                            loc_75B6:
0000A5E4 6100 0000                  		bsr.w	Obj11_Bend
0000A5E8 6100 0000                  		bsr.w	Obj11_MoveSonic
0000A5EC                            
0000A5EC                            locret_75BE:
0000A5EC 4E75                       		rts	
0000A5EE                            ; End of function Obj11_WalkOff
0000A5EE                            
0000A5EE                            ; ---------------------------------------------------------------------------
0000A5EE                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000A5EE                            ; ---------------------------------------------------------------------------
0000A5EE                            
0000A5EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A5EE                            
0000A5EE                            
0000A5EE                            ExitPlatform:
0000A5EE 3401                       		move.w	d1,d2
0000A5F0                            
0000A5F0                            ExitPlatform2:
0000A5F0 D442                       		add.w	d2,d2
0000A5F2 43F8 D000                  		lea	($FFFFD000).w,a1
0000A5F6 0829 0001 0022             		btst	#1,$22(a1)
0000A5FC 6600                       		bne.s	loc_75E0
0000A5FE 3029 0008                  		move.w	8(a1),d0
0000A602 9068 0008                  		sub.w	8(a0),d0
0000A606 D041                       		add.w	d1,d0
0000A608 6B00                       		bmi.s	loc_75E0
0000A60A B042                       		cmp.w	d2,d0
0000A60C 6500                       		bcs.s	locret_75F2
0000A60E                            
0000A60E                            loc_75E0:
0000A60E 08A9 0003 0022             		bclr	#3,$22(a1)
0000A614 117C 0002 0024             		move.b	#2,$24(a0)
0000A61A 08A8 0003 0022             		bclr	#3,$22(a0)
0000A620                            
0000A620                            locret_75F2:
0000A620 4E75                       		rts	
0000A622                            ; End of function ExitPlatform
0000A622                            
0000A622                            
0000A622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A622                            
0000A622                            
0000A622                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
0000A622 7000                       		moveq	#0,d0
0000A624 1028 003F                  		move.b	$3F(a0),d0
0000A628 1030 0029                  		move.b	$29(a0,d0.w),d0
0000A62C ED48                       		lsl.w	#6,d0
0000A62E 0680 00FF D000             		addi.l	#$FFD000,d0
0000A634 2440                       		movea.l	d0,a2
0000A636 43F8 D000                  		lea	($FFFFD000).w,a1
0000A63A 302A 000C                  		move.w	$C(a2),d0
0000A63E 5140                       		subq.w	#8,d0
0000A640 7200                       		moveq	#0,d1
0000A642 1229 0016                  		move.b	$16(a1),d1
0000A646 9041                       		sub.w	d1,d0
0000A648 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000A64C 4E75                       		rts	
0000A64E                            ; End of function Obj11_MoveSonic
0000A64E                            
0000A64E                            
0000A64E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A64E                            
0000A64E                            
0000A64E                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000A64E 1028 003E                  		move.b	$3E(a0),d0
0000A652 6100 90E2                  		bsr.w	CalcSine
0000A656 3800                       		move.w	d0,d4
0000A658 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000A65E 7000                       		moveq	#0,d0
0000A660 1028 0028                  		move.b	$28(a0),d0
0000A664 E948                       		lsl.w	#4,d0
0000A666 7600                       		moveq	#0,d3
0000A668 1628 003F                  		move.b	$3F(a0),d3
0000A66C 3403                       		move.w	d3,d2
0000A66E D640                       		add.w	d0,d3
0000A670 7A00                       		moveq	#0,d5
0000A672 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000A678 1A35 3000                  		move.b	(a5,d3.w),d5
0000A67C 0243 000F                  		andi.w	#$F,d3
0000A680 E94B                       		lsl.w	#4,d3
0000A682 47F4 3000                  		lea	(a4,d3.w),a3
0000A686 45E8 0029                  		lea	$29(a0),a2
0000A68A                            
0000A68A                            loc_765C:
0000A68A 7000                       		moveq	#0,d0
0000A68C 101A                       		move.b	(a2)+,d0
0000A68E ED48                       		lsl.w	#6,d0
0000A690 0680 00FF D000             		addi.l	#$FFD000,d0
0000A696 2240                       		movea.l	d0,a1
0000A698 7000                       		moveq	#0,d0
0000A69A 101B                       		move.b	(a3)+,d0
0000A69C 5240                       		addq.w	#1,d0
0000A69E C0C5                       		mulu.w	d5,d0
0000A6A0 C0C4                       		mulu.w	d4,d0
0000A6A2 4840                       		swap	d0
0000A6A4 D069 003C                  		add.w	$3C(a1),d0
0000A6A8 3340 000C                  		move.w	d0,$C(a1)
0000A6AC 51CA FFDC                  		dbf	d2,loc_765C
0000A6B0 7000                       		moveq	#0,d0
0000A6B2 1028 0028                  		move.b	$28(a0),d0
0000A6B6 7600                       		moveq	#0,d3
0000A6B8 1628 003F                  		move.b	$3F(a0),d3
0000A6BC 5203                       		addq.b	#1,d3
0000A6BE 9600                       		sub.b	d0,d3
0000A6C0 4403                       		neg.b	d3
0000A6C2 6B00                       		bmi.s	locret_76CA
0000A6C4 3403                       		move.w	d3,d2
0000A6C6 E94B                       		lsl.w	#4,d3
0000A6C8 47F4 3000                  		lea	(a4,d3.w),a3
0000A6CC D6C2                       		adda.w	d2,a3
0000A6CE 5342                       		subq.w	#1,d2
0000A6D0 6500                       		bcs.s	locret_76CA
0000A6D2                            
0000A6D2                            loc_76A4:
0000A6D2 7000                       		moveq	#0,d0
0000A6D4 101A                       		move.b	(a2)+,d0
0000A6D6 ED48                       		lsl.w	#6,d0
0000A6D8 0680 00FF D000             		addi.l	#$FFD000,d0
0000A6DE 2240                       		movea.l	d0,a1
0000A6E0 7000                       		moveq	#0,d0
0000A6E2 1023                       		move.b	-(a3),d0
0000A6E4 5240                       		addq.w	#1,d0
0000A6E6 C0C5                       		mulu.w	d5,d0
0000A6E8 C0C4                       		mulu.w	d4,d0
0000A6EA 4840                       		swap	d0
0000A6EC D069 003C                  		add.w	$3C(a1),d0
0000A6F0 3340 000C                  		move.w	d0,$C(a1)
0000A6F4 51CA FFDC                  		dbf	d2,loc_76A4
0000A6F8                            
0000A6F8                            locret_76CA:
0000A6F8 4E75                       		rts	
0000A6FA                            ; End of function Obj11_Bend
0000A6FA                            
0000A6FA                            ; ===========================================================================
0000A6FA                            ; ---------------------------------------------------------------------------
0000A6FA                            ; GHZ bridge-bending data
0000A6FA                            ; (Defines how the bridge bends	when Sonic walks across	it)
0000A6FA                            ; ---------------------------------------------------------------------------
0000A6FA                            Obj11_BendData:	incbin	misc\ghzbend1.bin
0000A80A                            		even
0000A80A                            Obj11_BendData2:incbin	misc\ghzbend2.bin
0000A90A                            		even
0000A90A                            
0000A90A                            ; ===========================================================================
0000A90A                            
0000A90A                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
0000A90A 3028 0008                  		move.w	8(a0),d0
0000A90E 0240 FF80                  		andi.w	#$FF80,d0
0000A912 3238 F700                  		move.w	($FFFFF700).w,d1
0000A916 0441 0080                  		subi.w	#$80,d1
0000A91A 0241 FF80                  		andi.w	#$FF80,d1
0000A91E 9041                       		sub.w	d1,d0
0000A920 0C40 0280                  		cmpi.w	#$280,d0
0000A924 6200 0000                  		bhi.w	Obj11_DelAll
0000A928 4E75                       		rts	
0000A92A                            ; ===========================================================================
0000A92A                            
0000A92A                            Obj11_DelAll:				; XREF: Obj11_ChkDel
0000A92A 7400                       		moveq	#0,d2
0000A92C 45E8 0028                  		lea	$28(a0),a2	; load bridge length
0000A930 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000A932 5302                       		subq.b	#1,d2		; subtract 1
0000A934 6500                       		bcs.s	Obj11_Delete
0000A936                            
0000A936                            Obj11_DelLoop:
0000A936 7000                       		moveq	#0,d0
0000A938 101A                       		move.b	(a2)+,d0
0000A93A ED48                       		lsl.w	#6,d0
0000A93C 0680 00FF D000             		addi.l	#$FFD000,d0
0000A942 2240                       		movea.l	d0,a1
0000A944 B048                       		cmp.w	a0,d0
0000A946 6700                       		beq.s	loc_791E
0000A948 6100 0000                  		bsr.w	DeleteObject2
0000A94C                            
0000A94C                            loc_791E:
0000A94C 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
0000A950                            
0000A950                            Obj11_Delete:
0000A950 6100 0000                  		bsr.w	DeleteObject
0000A954 4E75                       		rts	
0000A956                            ; ===========================================================================
0000A956                            
0000A956                            Obj11_Delete2:				; XREF: Obj11_Index
0000A956 6100 0000                  		bsr.w	DeleteObject
0000A95A 4E75                       		rts	
0000A95C                            ; ===========================================================================
0000A95C                            
0000A95C                            Obj11_Display2:				; XREF: Obj11_Index
0000A95C 6100 0000                  		bsr.w	DisplaySprite
0000A960 4E75                       		rts	
0000A962                            ; ===========================================================================
0000A962                            ; ---------------------------------------------------------------------------
0000A962                            ; Sprite mappings - GHZ	bridge
0000A962                            ; ---------------------------------------------------------------------------
0000A962                            Map_obj11:
0000A962                            	include "_maps\obj11.asm"
0000A962                            ; ---------------------------------------------------------------------------
0000A962                            ; Sprite mappings - GHZ	bridge
0000A962                            ; ---------------------------------------------------------------------------
0000A962 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000A966 0000                       		dc.w byte_794B-Map_obj11
0000A968 01                         byte_793A:	dc.b 1
0000A969 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A96E 02                         byte_7940:	dc.b 2
0000A96F F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000A974 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000A979 01                         byte_794B:	dc.b 1
0000A97A FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000A980 00                         		even
0000A980 00                         		even
0000A980                            
0000A980                            ; ===========================================================================
0000A980                            ; ---------------------------------------------------------------------------
0000A980                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000A980                            ;	    - spiked ball on a chain (SBZ)
0000A980                            ; ---------------------------------------------------------------------------
0000A980                            
0000A980                            Obj15:					; XREF: Obj_Index
0000A980 7000                       		moveq	#0,d0
0000A982 1028 0024                  		move.b	$24(a0),d0
0000A986 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000A98A 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000A98E                            ; ===========================================================================
0000A98E 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000A992 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000A996 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000A99A 0000                       		dc.w Obj15_Action-Obj15_Index
0000A99C                            ; ===========================================================================
0000A99C                            
0000A99C                            Obj15_Main:				; XREF: Obj15_Index
0000A99C 5428 0024                  		addq.b	#2,$24(a0)
0000A9A0 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000A9A8 317C 4380 0002             		move.w	#$4380,2(a0)
0000A9AE 117C 0004 0001             		move.b	#4,1(a0)
0000A9B4 117C 0003 0018             		move.b	#3,$18(a0)
0000A9BA 117C 0018 0019             		move.b	#$18,$19(a0)
0000A9C0 117C 0008 0016             		move.b	#8,$16(a0)
0000A9C6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000A9CC 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000A9D2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000A9D8 6600                       		bne.s	Obj15_NotSLZ
0000A9DA 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000A9E2 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000A9E8 117C 0020 0019             		move.b	#$20,$19(a0)
0000A9EE 117C 0010 0016             		move.b	#$10,$16(a0)
0000A9F4 117C 0099 0020             		move.b	#$99,$20(a0)
0000A9FA                            
0000A9FA                            Obj15_NotSLZ:
0000A9FA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000AA00 6600                       		bne.s	Obj15_SetLength
0000AA02 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000AA0A 317C 0391 0002             		move.w	#$391,2(a0)
0000AA10 117C 0018 0019             		move.b	#$18,$19(a0)
0000AA16 117C 0018 0016             		move.b	#$18,$16(a0)
0000AA1C 117C 0086 0020             		move.b	#$86,$20(a0)
0000AA22 117C 000C 0024             		move.b	#$C,$24(a0)
0000AA28                            
0000AA28                            Obj15_SetLength:
0000AA28 1810                       		move.b	0(a0),d4
0000AA2A 7200                       		moveq	#0,d1
0000AA2C 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
0000AA30 1212                       		move.b	(a2),d1		; move a2 to d1
0000AA32 3F01                       		move.w	d1,-(sp)
0000AA34 0241 000F                  		andi.w	#$F,d1
0000AA38 14FC 0000                  		move.b	#0,(a2)+
0000AA3C 3601                       		move.w	d1,d3
0000AA3E E94B                       		lsl.w	#4,d3
0000AA40 5003                       		addq.b	#8,d3
0000AA42 1143 003C                  		move.b	d3,$3C(a0)
0000AA46 5103                       		subq.b	#8,d3
0000AA48 4A28 001A                  		tst.b	$1A(a0)
0000AA4C 6700                       		beq.s	Obj15_MakeChain
0000AA4E 5003                       		addq.b	#8,d3
0000AA50 5341                       		subq.w	#1,d1
0000AA52                            
0000AA52                            Obj15_MakeChain:
0000AA52 6100 0000                  		bsr.w	SingleObjLoad
0000AA56 6600                       		bne.s	loc_7A92
0000AA58 5228 0028                  		addq.b	#1,$28(a0)
0000AA5C 3A09                       		move.w	a1,d5
0000AA5E 0445 D000                  		subi.w	#-$3000,d5
0000AA62 EC4D                       		lsr.w	#6,d5
0000AA64 0245 007F                  		andi.w	#$7F,d5
0000AA68 14C5                       		move.b	d5,(a2)+
0000AA6A 137C 000A 0024             		move.b	#$A,$24(a1)
0000AA70 1284                       		move.b	d4,0(a1)	; load swinging	object
0000AA72 2368 0004 0004             		move.l	4(a0),4(a1)
0000AA78 3368 0002 0002             		move.w	2(a0),2(a1)
0000AA7E 08A9 0006 0002             		bclr	#6,2(a1)
0000AA84 137C 0004 0001             		move.b	#4,1(a1)
0000AA8A 137C 0004 0018             		move.b	#4,$18(a1)
0000AA90 137C 0008 0019             		move.b	#8,$19(a1)
0000AA96 137C 0001 001A             		move.b	#1,$1A(a1)
0000AA9C 1343 003C                  		move.b	d3,$3C(a1)
0000AAA0 0403 0010                  		subi.b	#$10,d3
0000AAA4 6400                       		bcc.s	loc_7A8E
0000AAA6 137C 0002 001A             		move.b	#2,$1A(a1)
0000AAAC 137C 0003 0018             		move.b	#3,$18(a1)
0000AAB2 08E9 0006 0002             		bset	#6,2(a1)
0000AAB8                            
0000AAB8                            loc_7A8E:
0000AAB8 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000AABC                            
0000AABC                            loc_7A92:
0000AABC 3A08                       		move.w	a0,d5
0000AABE 0445 D000                  		subi.w	#-$3000,d5
0000AAC2 EC4D                       		lsr.w	#6,d5
0000AAC4 0245 007F                  		andi.w	#$7F,d5
0000AAC8 14C5                       		move.b	d5,(a2)+
0000AACA 317C 4080 0026             		move.w	#$4080,$26(a0)
0000AAD0 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000AAD6 321F                       		move.w	(sp)+,d1
0000AAD8 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000AADC 6700                       		beq.s	loc_7AD4	; if not, branch
0000AADE 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000AAE6 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000AAEC 117C 0001 001A             		move.b	#1,$1A(a0)
0000AAF2 117C 0002 0018             		move.b	#2,$18(a0)
0000AAF8 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000AAFE                            
0000AAFE                            loc_7AD4:
0000AAFE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000AB04 6700                       		beq.s	Obj15_Action	; if yes, branch
0000AB06                            
0000AB06                            Obj15_SetSolid:				; XREF: Obj15_Index
0000AB06 7200                       		moveq	#0,d1
0000AB08 1228 0019                  		move.b	$19(a0),d1
0000AB0C 7600                       		moveq	#0,d3
0000AB0E 1628 0016                  		move.b	$16(a0),d3
0000AB12 6100 FA76                  		bsr.w	Obj15_Solid
0000AB16                            
0000AB16                            Obj15_Action:				; XREF: Obj15_Index
0000AB16 6100 0000                  		bsr.w	Obj15_Move
0000AB1A 6100 0000                  		bsr.w	DisplaySprite
0000AB1E 6000 0000                  		bra.w	Obj15_ChkDel
0000AB22                            ; ===========================================================================
0000AB22                            
0000AB22                            Obj15_Action2:				; XREF: Obj15_Index
0000AB22 7200                       		moveq	#0,d1
0000AB24 1228 0019                  		move.b	$19(a0),d1
0000AB28 6100 FAC4                  		bsr.w	ExitPlatform
0000AB2C 3F28 0008                  		move.w	8(a0),-(sp)
0000AB30 6100 0000                  		bsr.w	Obj15_Move
0000AB34 341F                       		move.w	(sp)+,d2
0000AB36 7600                       		moveq	#0,d3
0000AB38 1628 0016                  		move.b	$16(a0),d3
0000AB3C 5203                       		addq.b	#1,d3
0000AB3E 6100 0000                  		bsr.w	MvSonicOnPtfm
0000AB42 6100 0000                  		bsr.w	DisplaySprite
0000AB46 6000 0000                  		bra.w	Obj15_ChkDel
0000AB4A                            
0000AB4A 4E75                       		rts
0000AB4C                            
0000AB4C                            ; ---------------------------------------------------------------------------
0000AB4C                            ; Subroutine to	change Sonic's position with a platform
0000AB4C                            ; ---------------------------------------------------------------------------
0000AB4C                            
0000AB4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB4C                            
0000AB4C                            
0000AB4C                            MvSonicOnPtfm:
0000AB4C 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB50 3028 000C                  		move.w	$C(a0),d0
0000AB54 9043                       		sub.w	d3,d0
0000AB56 6000                       		bra.s	MvSonic2
0000AB58                            ; End of function MvSonicOnPtfm
0000AB58                            
0000AB58                            ; ---------------------------------------------------------------------------
0000AB58                            ; Subroutine to	change Sonic's position with a platform
0000AB58                            ; ---------------------------------------------------------------------------
0000AB58                            
0000AB58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB58                            
0000AB58                            
0000AB58                            MvSonicOnPtfm2:
0000AB58 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB5C 3028 000C                  		move.w	$C(a0),d0
0000AB60 0440 0009                  		subi.w	#9,d0
0000AB64                            
0000AB64                            MvSonic2:
0000AB64 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AB68 6B00                       		bmi.s	locret_7B62
0000AB6A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AB70 6400                       		bcc.s	locret_7B62
0000AB72 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AB76 6600                       		bne.s	locret_7B62
0000AB78 7200                       		moveq	#0,d1
0000AB7A 1229 0016                  		move.b	$16(a1),d1
0000AB7E 9041                       		sub.w	d1,d0
0000AB80 3340 000C                  		move.w	d0,$C(a1)
0000AB84 9468 0008                  		sub.w	8(a0),d2
0000AB88 9569 0008                  		sub.w	d2,8(a1)
0000AB8C                            
0000AB8C                            locret_7B62:
0000AB8C 4E75                       		rts	
0000AB8E                            ; End of function MvSonicOnPtfm2
0000AB8E                            
0000AB8E                            
0000AB8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB8E                            
0000AB8E                            
0000AB8E                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000AB8E 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000AB92 323C 0080                  		move.w	#$80,d1
0000AB96 0828 0000 0022             		btst	#0,$22(a0)
0000AB9C 6700                       		beq.s	loc_7B78
0000AB9E 4440                       		neg.w	d0
0000ABA0 D041                       		add.w	d1,d0
0000ABA2                            
0000ABA2                            loc_7B78:
0000ABA2 6000                       		bra.s	Obj15_Move2
0000ABA4                            ; End of function Obj15_Move
0000ABA4                            
0000ABA4                            
0000ABA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ABA4                            
0000ABA4                            
0000ABA4                            Obj48_Move:				; XREF: Obj48_Display2
0000ABA4 4A28 003D                  		tst.b	$3D(a0)
0000ABA8 6600                       		bne.s	loc_7B9C
0000ABAA 3028 003E                  		move.w	$3E(a0),d0
0000ABAE 5040                       		addq.w	#8,d0
0000ABB0 3140 003E                  		move.w	d0,$3E(a0)
0000ABB4 D168 0026                  		add.w	d0,$26(a0)
0000ABB8 0C40 0200                  		cmpi.w	#$200,d0
0000ABBC 6600                       		bne.s	loc_7BB6
0000ABBE 117C 0001 003D             		move.b	#1,$3D(a0)
0000ABC4 6000                       		bra.s	loc_7BB6
0000ABC6                            ; ===========================================================================
0000ABC6                            
0000ABC6                            loc_7B9C:
0000ABC6 3028 003E                  		move.w	$3E(a0),d0
0000ABCA 5140                       		subq.w	#8,d0
0000ABCC 3140 003E                  		move.w	d0,$3E(a0)
0000ABD0 D168 0026                  		add.w	d0,$26(a0)
0000ABD4 0C40 FE00                  		cmpi.w	#-$200,d0
0000ABD8 6600                       		bne.s	loc_7BB6
0000ABDA 117C 0000 003D             		move.b	#0,$3D(a0)
0000ABE0                            
0000ABE0                            loc_7BB6:
0000ABE0 1028 0026                  		move.b	$26(a0),d0
0000ABE4                            ; End of function Obj48_Move
0000ABE4                            
0000ABE4                            
0000ABE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ABE4                            
0000ABE4                            
0000ABE4                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000ABE4 6100 8B50                  		bsr.w	CalcSine
0000ABE8 3428 0038                  		move.w	$38(a0),d2
0000ABEC 3628 003A                  		move.w	$3A(a0),d3
0000ABF0 45E8 0028                  		lea	$28(a0),a2
0000ABF4 7C00                       		moveq	#0,d6
0000ABF6 1C1A                       		move.b	(a2)+,d6
0000ABF8                            
0000ABF8                            loc_7BCE:
0000ABF8 7800                       		moveq	#0,d4
0000ABFA 181A                       		move.b	(a2)+,d4
0000ABFC ED4C                       		lsl.w	#6,d4
0000ABFE 0684 00FF D000             		addi.l	#$FFD000,d4
0000AC04 2244                       		movea.l	d4,a1
0000AC06 7800                       		moveq	#0,d4
0000AC08 1829 003C                  		move.b	$3C(a1),d4
0000AC0C 2A04                       		move.l	d4,d5
0000AC0E C9C0                       		muls.w	d0,d4
0000AC10 E084                       		asr.l	#8,d4
0000AC12 CBC1                       		muls.w	d1,d5
0000AC14 E085                       		asr.l	#8,d5
0000AC16 D842                       		add.w	d2,d4
0000AC18 DA43                       		add.w	d3,d5
0000AC1A 3344 000C                  		move.w	d4,$C(a1)
0000AC1E 3345 0008                  		move.w	d5,8(a1)
0000AC22 51CE FFD4                  		dbf	d6,loc_7BCE
0000AC26 4E75                       		rts	
0000AC28                            ; End of function Obj15_Move2
0000AC28                            
0000AC28                            ; ===========================================================================
0000AC28                            
0000AC28                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000AC28 3028 003A                  		move.w	$3A(a0),d0
0000AC2C 0240 FF80                  		andi.w	#$FF80,d0
0000AC30 3238 F700                  		move.w	($FFFFF700).w,d1
0000AC34 0441 0080                  		subi.w	#$80,d1
0000AC38 0241 FF80                  		andi.w	#$FF80,d1
0000AC3C 9041                       		sub.w	d1,d0
0000AC3E 0C40 0280                  		cmpi.w	#$280,d0
0000AC42 6200 0000                  		bhi.w	Obj15_DelAll
0000AC46 4E75                       		rts	
0000AC48                            ; ===========================================================================
0000AC48                            
0000AC48                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000AC48 7400                       		moveq	#0,d2
0000AC4A 45E8 0028                  		lea	$28(a0),a2
0000AC4E 141A                       		move.b	(a2)+,d2
0000AC50                            
0000AC50                            Obj15_DelLoop:
0000AC50 7000                       		moveq	#0,d0
0000AC52 101A                       		move.b	(a2)+,d0
0000AC54 ED48                       		lsl.w	#6,d0
0000AC56 0680 00FF D000             		addi.l	#$FFD000,d0
0000AC5C 2240                       		movea.l	d0,a1
0000AC5E 6100 0000                  		bsr.w	DeleteObject2
0000AC62 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000AC66 4E75                       		rts	
0000AC68                            ; ===========================================================================
0000AC68                            
0000AC68                            Obj15_Delete:				; XREF: Obj15_Index
0000AC68 6100 0000                  		bsr.w	DeleteObject
0000AC6C 4E75                       		rts	
0000AC6E                            ; ===========================================================================
0000AC6E                            
0000AC6E                            Obj15_Display:				; XREF: Obj15_Index
0000AC6E 6000 0000                  		bra.w	DisplaySprite
0000AC72                            ; ===========================================================================
0000AC72                            ; ---------------------------------------------------------------------------
0000AC72                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000AC72                            ; ---------------------------------------------------------------------------
0000AC72                            Map_obj15:
0000AC72                            	include "_maps\obj15ghz.asm"
0000AC72                            ; ---------------------------------------------------------------------------
0000AC72                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000AC72                            ; ---------------------------------------------------------------------------
0000AC72 0000                       		dc.w byte_7C4E-Map_obj15
0000AC74 0000                       		dc.w byte_7C59-Map_obj15
0000AC76 0000                       		dc.w byte_7C5F-Map_obj15
0000AC78 02                         byte_7C4E:	dc.b 2
0000AC79 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000AC7E F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000AC83 01                         byte_7C59:	dc.b 1
0000AC84 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AC89 01                         byte_7C5F:	dc.b 1
0000AC8A F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AC90 00                         		even
0000AC90 00                         		even
0000AC90                            
0000AC90                            ; ---------------------------------------------------------------------------
0000AC90                            ; Sprite mappings - SLZ	swinging platforms
0000AC90                            ; ---------------------------------------------------------------------------
0000AC90                            Map_obj15a:
0000AC90                            	include "_maps\obj15slz.asm"
0000AC90                            ; ---------------------------------------------------------------------------
0000AC90                            ; Sprite mappings - SLZ	swinging platforms
0000AC90                            ; ---------------------------------------------------------------------------
0000AC90 0000                       		dc.w byte_7C6C-Map_obj15a
0000AC92 0000                       		dc.w byte_7C95-Map_obj15a
0000AC94 0000                       		dc.w byte_7C9B-Map_obj15a
0000AC96 08                         byte_7C6C:	dc.b 8
0000AC97 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000AC9C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000ACA1 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000ACA6 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000ACAB 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000ACB0 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000ACB5 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000ACBA 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000ACBF 01                         byte_7C95:	dc.b 1
0000ACC0 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000ACC5 01                         byte_7C9B:	dc.b 1
0000ACC6 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000ACCC 00                         		even
0000ACCC 00                         		even
0000ACCC                            
0000ACCC                            ; ===========================================================================
0000ACCC                            ; ---------------------------------------------------------------------------
0000ACCC                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000ACCC                            ; ---------------------------------------------------------------------------
0000ACCC                            
0000ACCC                            Obj17:					; XREF: Obj_Index
0000ACCC 7000                       		moveq	#0,d0
0000ACCE 1028 0024                  		move.b	$24(a0),d0
0000ACD2 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000ACD6 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000ACDA                            ; ===========================================================================
0000ACDA 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000ACDC 0000                       		dc.w Obj17_Action-Obj17_Index
0000ACDE 0000                       		dc.w Obj17_Action-Obj17_Index
0000ACE0 0000                       		dc.w Obj17_Delete-Obj17_Index
0000ACE2 0000                       		dc.w Obj17_Display-Obj17_Index
0000ACE4                            ; ===========================================================================
0000ACE4                            
0000ACE4                            Obj17_Main:				; XREF: Obj17_Index
0000ACE4 5428 0024                  		addq.b	#2,$24(a0)
0000ACE8 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000ACF0 317C 4398 0002             		move.w	#$4398,2(a0)
0000ACF6 117C 0007 0022             		move.b	#7,$22(a0)
0000ACFC 117C 0004 0001             		move.b	#4,1(a0)
0000AD02 117C 0003 0018             		move.b	#3,$18(a0)
0000AD08 117C 0008 0019             		move.b	#8,$19(a0)
0000AD0E 3428 000C                  		move.w	$C(a0),d2
0000AD12 3628 0008                  		move.w	8(a0),d3
0000AD16 1810                       		move.b	0(a0),d4
0000AD18 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000AD1C 7200                       		moveq	#0,d1
0000AD1E 1212                       		move.b	(a2),d1		; move a2 to d1
0000AD20 14FC 0000                  		move.b	#0,(a2)+
0000AD24 3001                       		move.w	d1,d0
0000AD26 E248                       		lsr.w	#1,d0
0000AD28 E948                       		lsl.w	#4,d0
0000AD2A 9640                       		sub.w	d0,d3
0000AD2C 5501                       		subq.b	#2,d1
0000AD2E 6500                       		bcs.s	Obj17_Action
0000AD30 7C00                       		moveq	#0,d6
0000AD32                            
0000AD32                            Obj17_MakeHelix:
0000AD32 6100 0000                  		bsr.w	SingleObjLoad
0000AD36 6600                       		bne.s	Obj17_Action
0000AD38 5228 0028                  		addq.b	#1,$28(a0)
0000AD3C 3A09                       		move.w	a1,d5
0000AD3E 0445 D000                  		subi.w	#$D000,d5
0000AD42 EC4D                       		lsr.w	#6,d5
0000AD44 0245 007F                  		andi.w	#$7F,d5
0000AD48 14C5                       		move.b	d5,(a2)+
0000AD4A 137C 0008 0024             		move.b	#8,$24(a1)
0000AD50 1284                       		move.b	d4,0(a1)
0000AD52 3342 000C                  		move.w	d2,$C(a1)
0000AD56 3343 0008                  		move.w	d3,8(a1)
0000AD5A 2368 0004 0004             		move.l	4(a0),4(a1)
0000AD60 337C 4398 0002             		move.w	#$4398,2(a1)
0000AD66 137C 0004 0001             		move.b	#4,1(a1)
0000AD6C 137C 0003 0018             		move.b	#3,$18(a1)
0000AD72 137C 0008 0019             		move.b	#8,$19(a1)
0000AD78 1346 003E                  		move.b	d6,$3E(a1)
0000AD7C 5206                       		addq.b	#1,d6
0000AD7E 0206 0007                  		andi.b	#7,d6
0000AD82 0643 0010                  		addi.w	#$10,d3
0000AD86 B668 0008                  		cmp.w	8(a0),d3
0000AD8A 6600                       		bne.s	loc_7D78
0000AD8C 1146 003E                  		move.b	d6,$3E(a0)
0000AD90 5206                       		addq.b	#1,d6
0000AD92 0206 0007                  		andi.b	#7,d6
0000AD96 0643 0010                  		addi.w	#$10,d3
0000AD9A 5228 0028                  		addq.b	#1,$28(a0)
0000AD9E                            
0000AD9E                            loc_7D78:
0000AD9E 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000ADA2                            
0000ADA2                            Obj17_Action:				; XREF: Obj17_Index
0000ADA2 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000ADA6 6100 0000                  		bsr.w	DisplaySprite
0000ADAA 6000 0000                  		bra.w	Obj17_ChkDel
0000ADAE                            
0000ADAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADAE                            
0000ADAE                            
0000ADAE                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000ADAE 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000ADB2 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000ADB8 D028 003E                  		add.b	$3E(a0),d0
0000ADBC 0200 0007                  		andi.b	#7,d0
0000ADC0 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000ADC4 6600                       		bne.s	locret_7DA6
0000ADC6 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000ADCC                            
0000ADCC                            locret_7DA6:
0000ADCC 4E75                       		rts	
0000ADCE                            ; End of function Obj17_RotateSpikes
0000ADCE                            
0000ADCE                            ; ===========================================================================
0000ADCE                            
0000ADCE                            Obj17_ChkDel:				; XREF: Obj17_Action
0000ADCE 3028 0008                  		move.w	8(a0),d0
0000ADD2 0240 FF80                  		andi.w	#$FF80,d0
0000ADD6 3238 F700                  		move.w	($FFFFF700).w,d1
0000ADDA 0441 0080                  		subi.w	#$80,d1
0000ADDE 0241 FF80                  		andi.w	#$FF80,d1
0000ADE2 9041                       		sub.w	d1,d0
0000ADE4 0C40 0280                  		cmpi.w	#$280,d0
0000ADE8 6200 0000                  		bhi.w	Obj17_DelAll
0000ADEC 4E75                       		rts	
0000ADEE                            ; ===========================================================================
0000ADEE                            
0000ADEE                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000ADEE 7400                       		moveq	#0,d2
0000ADF0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000ADF4 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000ADF6 5502                       		subq.b	#2,d2
0000ADF8 6500                       		bcs.s	Obj17_Delete
0000ADFA                            
0000ADFA                            Obj17_DelLoop:
0000ADFA 7000                       		moveq	#0,d0
0000ADFC 101A                       		move.b	(a2)+,d0
0000ADFE ED48                       		lsl.w	#6,d0
0000AE00 0680 00FF D000             		addi.l	#$FFD000,d0
0000AE06 2240                       		movea.l	d0,a1
0000AE08 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000AE0C 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000AE10                            
0000AE10                            Obj17_Delete:				; XREF: Obj17_Index
0000AE10 6100 0000                  		bsr.w	DeleteObject
0000AE14 4E75                       		rts	
0000AE16                            ; ===========================================================================
0000AE16                            
0000AE16                            Obj17_Display:				; XREF: Obj17_Index
0000AE16 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000AE1A 6000 0000                  		bra.w	DisplaySprite
0000AE1E                            ; ===========================================================================
0000AE1E                            ; ---------------------------------------------------------------------------
0000AE1E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000AE1E                            ; ---------------------------------------------------------------------------
0000AE1E                            Map_obj17:
0000AE1E                            	include "_maps\obj17.asm"
0000AE1E                            ; ---------------------------------------------------------------------------
0000AE1E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000AE1E                            ; ---------------------------------------------------------------------------
0000AE1E 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000AE22 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000AE26 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000AE2A 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000AE2E 01                         byte_7E08:	dc.b 1
0000AE2F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000AE34 01                         byte_7E0E:	dc.b 1
0000AE35 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000AE3A 01                         byte_7E14:	dc.b 1
0000AE3B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000AE40 01                         byte_7E1A:	dc.b 1
0000AE41 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000AE46 01                         byte_7E20:	dc.b 1
0000AE47 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000AE4C 01                         byte_7E26:	dc.b 1
0000AE4D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000AE52 01                         byte_7E2C:	dc.b 1
0000AE53 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000AE58                            		even
0000AE58                            		even
0000AE58                            
0000AE58                            ; ===========================================================================
0000AE58                            ; ---------------------------------------------------------------------------
0000AE58                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000AE58                            ; ---------------------------------------------------------------------------
0000AE58                            
0000AE58                            Obj18:					; XREF: Obj_Index
0000AE58 7000                       		moveq	#0,d0
0000AE5A 1028 0024                  		move.b	$24(a0),d0
0000AE5E 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000AE62 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000AE66                            ; ===========================================================================
0000AE66 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000AE68 0000                       		dc.w Obj18_Solid-Obj18_Index
0000AE6A 0000                       		dc.w Obj18_Action2-Obj18_Index
0000AE6C 0000                       		dc.w Obj18_Delete-Obj18_Index
0000AE6E 0000                       		dc.w Obj18_Action-Obj18_Index
0000AE70                            ; ===========================================================================
0000AE70                            
0000AE70                            Obj18_Main:				; XREF: Obj18_Index
0000AE70 5428 0024                  		addq.b	#2,$24(a0)
0000AE74 317C 4000 0002             		move.w	#$4000,2(a0)
0000AE7A 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000AE82 117C 0020 0019             		move.b	#$20,$19(a0)
0000AE88 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000AE8E 6600                       		bne.s	Obj18_NotSYZ
0000AE90 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000AE98 117C 0020 0019             		move.b	#$20,$19(a0)
0000AE9E                            
0000AE9E                            Obj18_NotSYZ:
0000AE9E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000AEA4 6600                       		bne.s	Obj18_NotSLZ
0000AEA6 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000AEAE 117C 0020 0019             		move.b	#$20,$19(a0)
0000AEB4 317C 4000 0002             		move.w	#$4000,2(a0)
0000AEBA 117C 0003 0028             		move.b	#3,$28(a0)
0000AEC0                            
0000AEC0                            Obj18_NotSLZ:
0000AEC0 117C 0004 0001             		move.b	#4,1(a0)
0000AEC6 117C 0004 0018             		move.b	#4,$18(a0)
0000AECC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000AED2 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000AED8 3168 0008 0032             		move.w	8(a0),$32(a0)
0000AEDE 317C 0080 0026             		move.w	#$80,$26(a0)
0000AEE4 7200                       		moveq	#0,d1
0000AEE6 1028 0028                  		move.b	$28(a0),d0
0000AEEA 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000AEEE 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000AEF0 5201                       		addq.b	#1,d1		; use frame #1
0000AEF2 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000AEF8                            
0000AEF8                            Obj18_SetFrame:
0000AEF8 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000AEFC                            
0000AEFC                            Obj18_Solid:				; XREF: Obj18_Index
0000AEFC 4A28 0038                  		tst.b	$38(a0)
0000AF00 6700                       		beq.s	loc_7EE0
0000AF02 5928 0038                  		subq.b	#4,$38(a0)
0000AF06                            
0000AF06                            loc_7EE0:
0000AF06 7200                       		moveq	#0,d1
0000AF08 1228 0019                  		move.b	$19(a0),d1
0000AF0C 6100 F56C                  		bsr.w	PlatformObject
0000AF10                            
0000AF10                            Obj18_Action:				; XREF: Obj18_Index
0000AF10 6100 0000                  		bsr.w	Obj18_Move
0000AF14 6100 0000                  		bsr.w	Obj18_Nudge
0000AF18 6100 0000                  		bsr.w	DisplaySprite
0000AF1C 6000 0000                  		bra.w	Obj18_ChkDel
0000AF20                            ; ===========================================================================
0000AF20                            
0000AF20                            Obj18_Action2:				; XREF: Obj18_Index
0000AF20 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000AF26 6700                       		beq.s	loc_7F06
0000AF28 5828 0038                  		addq.b	#4,$38(a0)
0000AF2C                            
0000AF2C                            loc_7F06:
0000AF2C 7200                       		moveq	#0,d1
0000AF2E 1228 0019                  		move.b	$19(a0),d1
0000AF32 6100 F6BA                  		bsr.w	ExitPlatform
0000AF36 3F28 0008                  		move.w	8(a0),-(sp)
0000AF3A 6100 0000                  		bsr.w	Obj18_Move
0000AF3E 6100 0000                  		bsr.w	Obj18_Nudge
0000AF42 341F                       		move.w	(sp)+,d2
0000AF44 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000AF48 6100 0000                  		bsr.w	DisplaySprite
0000AF4C 6000 0000                  		bra.w	Obj18_ChkDel
0000AF50                            
0000AF50 4E75                       		rts
0000AF52                            
0000AF52                            ; ---------------------------------------------------------------------------
0000AF52                            ; Subroutine to	move platform slightly when you	stand on it
0000AF52                            ; ---------------------------------------------------------------------------
0000AF52                            
0000AF52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF52                            
0000AF52                            
0000AF52                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000AF52 1028 0038                  		move.b	$38(a0),d0
0000AF56 6100 87DE                  		bsr.w	CalcSine
0000AF5A 323C 0400                  		move.w	#$400,d1
0000AF5E C1C1                       		muls.w	d1,d0
0000AF60 4840                       		swap	d0
0000AF62 D068 002C                  		add.w	$2C(a0),d0
0000AF66 3140 000C                  		move.w	d0,$C(a0)
0000AF6A 4E75                       		rts	
0000AF6C                            ; End of function Obj18_Nudge
0000AF6C                            
0000AF6C                            ; ---------------------------------------------------------------------------
0000AF6C                            ; Subroutine to	move platforms
0000AF6C                            ; ---------------------------------------------------------------------------
0000AF6C                            
0000AF6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF6C                            
0000AF6C                            
0000AF6C                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000AF6C 7000                       		moveq	#0,d0
0000AF6E 1028 0028                  		move.b	$28(a0),d0
0000AF72 0240 000F                  		andi.w	#$F,d0
0000AF76 D040                       		add.w	d0,d0
0000AF78 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000AF7C 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000AF80                            ; End of function Obj18_Move
0000AF80                            
0000AF80                            ; ===========================================================================
0000AF80 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000AF84 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000AF88 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000AF8C 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000AF90 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000AF94 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000AF98 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000AF9A                            ; ===========================================================================
0000AF9A                            
0000AF9A                            Obj18_Type00:
0000AF9A 4E75                       		rts			; platform 00 doesn't move
0000AF9C                            ; ===========================================================================
0000AF9C                            
0000AF9C                            Obj18_Type05:
0000AF9C 3028 0032                  		move.w	$32(a0),d0
0000AFA0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000AFA4 4401                       		neg.b	d1		; reverse platform-motion
0000AFA6 0601 0040                  		addi.b	#$40,d1
0000AFAA 6000                       		bra.s	Obj18_01_Move
0000AFAC                            ; ===========================================================================
0000AFAC                            
0000AFAC                            Obj18_Type01:
0000AFAC 3028 0032                  		move.w	$32(a0),d0
0000AFB0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000AFB4 0401 0040                  		subi.b	#$40,d1
0000AFB8                            
0000AFB8                            Obj18_01_Move:
0000AFB8 4881                       		ext.w	d1
0000AFBA D041                       		add.w	d1,d0
0000AFBC 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000AFC0 6000 0000                  		bra.w	Obj18_ChgMotion
0000AFC4                            ; ===========================================================================
0000AFC4                            
0000AFC4                            Obj18_Type0C:
0000AFC4 3028 0034                  		move.w	$34(a0),d0
0000AFC8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000AFCC 4401                       		neg.b	d1		; reverse platform-motion
0000AFCE 0601 0030                  		addi.b	#$30,d1
0000AFD2 6000                       		bra.s	Obj18_02_Move
0000AFD4                            ; ===========================================================================
0000AFD4                            
0000AFD4                            Obj18_Type0B:
0000AFD4 3028 0034                  		move.w	$34(a0),d0
0000AFD8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000AFDC 0401 0030                  		subi.b	#$30,d1
0000AFE0 6000                       		bra.s	Obj18_02_Move
0000AFE2                            ; ===========================================================================
0000AFE2                            
0000AFE2                            Obj18_Type06:
0000AFE2 3028 0034                  		move.w	$34(a0),d0
0000AFE6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000AFEA 4401                       		neg.b	d1		; reverse platform-motion
0000AFEC 0601 0040                  		addi.b	#$40,d1
0000AFF0 6000                       		bra.s	Obj18_02_Move
0000AFF2                            ; ===========================================================================
0000AFF2                            
0000AFF2                            Obj18_Type02:
0000AFF2 3028 0034                  		move.w	$34(a0),d0
0000AFF6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000AFFA 0401 0040                  		subi.b	#$40,d1
0000AFFE                            
0000AFFE                            Obj18_02_Move:
0000AFFE 4881                       		ext.w	d1
0000B000 D041                       		add.w	d1,d0
0000B002 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000B006 6000 0000                  		bra.w	Obj18_ChgMotion
0000B00A                            ; ===========================================================================
0000B00A                            
0000B00A                            Obj18_Type03:
0000B00A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000B00E 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000B010 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000B016 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000B018 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000B01E                            
0000B01E                            Obj18_03_NoMove:
0000B01E 4E75                       		rts	
0000B020                            ; ===========================================================================
0000B020                            
0000B020                            Obj18_03_Wait:
0000B020 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000B024 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000B026 317C 0020 003A             		move.w	#32,$3A(a0)
0000B02C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000B030 4E75                       		rts	
0000B032                            ; ===========================================================================
0000B032                            
0000B032                            Obj18_Type04:
0000B032 4A68 003A                  		tst.w	$3A(a0)
0000B036 6700                       		beq.s	loc_8048
0000B038 5368 003A                  		subq.w	#1,$3A(a0)
0000B03C 6600                       		bne.s	loc_8048
0000B03E 0828 0003 0022             		btst	#3,$22(a0)
0000B044 6700                       		beq.s	loc_8042
0000B046 08E9 0001 0022             		bset	#1,$22(a1)
0000B04C 08A9 0003 0022             		bclr	#3,$22(a1)
0000B052 137C 0002 0024             		move.b	#2,$24(a1)
0000B058 08A8 0003 0022             		bclr	#3,$22(a0)
0000B05E 4228 0025                  		clr.b	$25(a0)
0000B062 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000B068                            
0000B068                            loc_8042:
0000B068 117C 0008 0024             		move.b	#8,$24(a0)
0000B06E                            
0000B06E                            loc_8048:
0000B06E 2628 002C                  		move.l	$2C(a0),d3
0000B072 3028 0012                  		move.w	$12(a0),d0
0000B076 48C0                       		ext.l	d0
0000B078 E180                       		asl.l	#8,d0
0000B07A D680                       		add.l	d0,d3
0000B07C 2143 002C                  		move.l	d3,$2C(a0)
0000B080 0668 0038 0012             		addi.w	#$38,$12(a0)
0000B086 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000B08A 0640 00E0                  		addi.w	#$E0,d0
0000B08E B068 002C                  		cmp.w	$2C(a0),d0
0000B092 6400                       		bcc.s	locret_8074
0000B094 117C 0006 0024             		move.b	#6,$24(a0)
0000B09A                            
0000B09A                            locret_8074:
0000B09A 4E75                       		rts	
0000B09C                            ; ===========================================================================
0000B09C                            
0000B09C                            Obj18_Type07:
0000B09C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000B0A0 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000B0A2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000B0A6 7000                       		moveq	#0,d0
0000B0A8 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000B0AC E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000B0AE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000B0B2 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000B0B4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000B0BA                            
0000B0BA                            Obj18_07_NoMove:
0000B0BA 4E75                       		rts	
0000B0BC                            ; ===========================================================================
0000B0BC                            
0000B0BC                            Obj18_07_Wait:
0000B0BC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000B0C0 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000B0C2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000B0C6 4E75                       		rts	
0000B0C8                            ; ===========================================================================
0000B0C8                            
0000B0C8                            Obj18_Type08:
0000B0C8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000B0CC 3028 0034                  		move.w	$34(a0),d0
0000B0D0 0440 0200                  		subi.w	#$200,d0
0000B0D4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000B0D8 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000B0DA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000B0DE                            
0000B0DE                            Obj18_08_NoStop:
0000B0DE 4E75                       		rts	
0000B0E0                            ; ===========================================================================
0000B0E0                            
0000B0E0                            Obj18_Type0A:
0000B0E0 3028 0034                  		move.w	$34(a0),d0
0000B0E4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000B0E8 0401 0040                  		subi.b	#$40,d1
0000B0EC 4881                       		ext.w	d1
0000B0EE E241                       		asr.w	#1,d1
0000B0F0 D041                       		add.w	d1,d0
0000B0F2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000B0F6                            
0000B0F6                            Obj18_ChgMotion:
0000B0F6 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000B0FC 4E75                       		rts	
0000B0FE                            ; ===========================================================================
0000B0FE                            
0000B0FE                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000B0FE 3028 0032                  		move.w	$32(a0),d0
0000B102 0240 FF80                  		andi.w	#$FF80,d0
0000B106 3238 F700                  		move.w	($FFFFF700).w,d1
0000B10A 0441 0080                  		subi.w	#$80,d1
0000B10E 0241 FF80                  		andi.w	#$FF80,d1
0000B112 9041                       		sub.w	d1,d0
0000B114 0C40 0280                  		cmpi.w	#$280,d0
0000B118 6200                       		bhi.s	Obj18_Delete
0000B11A 4E75                       		rts	
0000B11C                            ; ===========================================================================
0000B11C                            
0000B11C                            Obj18_Delete:				; XREF: Obj18_Index
0000B11C 6000 0000                  		bra.w	DeleteObject
0000B120                            ; ===========================================================================
0000B120                            ; ---------------------------------------------------------------------------
0000B120                            ; Sprite mappings - unused
0000B120                            ; ---------------------------------------------------------------------------
0000B120                            Map_obj18x:
0000B120                            	include "_maps\obj18x.asm"
0000B120                            ; ---------------------------------------------------------------------------
0000B120                            ; Sprite mappings - unused
0000B120                            ; ---------------------------------------------------------------------------
0000B120 0000                       		dc.w byte_80FE-Map_obj18x
0000B122 0000                       		dc.w byte_8109-Map_obj18x
0000B124 02                         byte_80FE:	dc.b 2
0000B125 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000B12A F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000B12F 0A                         byte_8109:	dc.b $A
0000B130 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000B135 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000B13A 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000B13F 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000B144 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000B149 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000B14E 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000B153 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000B158 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000B15D 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000B162                            		even
0000B162                            		even
0000B162                            
0000B162                            ; ---------------------------------------------------------------------------
0000B162                            ; Sprite mappings - GHZ	platforms
0000B162                            ; ---------------------------------------------------------------------------
0000B162                            Map_obj18:
0000B162                            	include "_maps\obj18ghz.asm"
0000B162                            ; ---------------------------------------------------------------------------
0000B162                            ; Sprite mappings - GHZ	platforms
0000B162                            ; ---------------------------------------------------------------------------
0000B162 0000                       		dc.w byte_8140-Map_obj18
0000B164 0000                       		dc.w byte_8155-Map_obj18
0000B166 04                         byte_8140:	dc.b 4
0000B167 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000B16C F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000B171 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000B176 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000B17B 0A                         byte_8155:	dc.b $A
0000B17C F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000B181 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000B186 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000B18B 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000B190 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000B195 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000B19A 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000B19F 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000B1A4 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000B1A9 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000B1AE                            		even
0000B1AE                            		even
0000B1AE                            
0000B1AE                            ; ---------------------------------------------------------------------------
0000B1AE                            ; Sprite mappings - SYZ	platforms
0000B1AE                            ; ---------------------------------------------------------------------------
0000B1AE                            Map_obj18a:
0000B1AE                            	include "_maps\obj18syz.asm"
0000B1AE                            ; ---------------------------------------------------------------------------
0000B1AE                            ; Sprite mappings - SYZ	platforms
0000B1AE                            ; ---------------------------------------------------------------------------
0000B1AE 0000                       		dc.w byte_818A-Map_obj18a
0000B1B0 03                         byte_818A:	dc.b 3
0000B1B1 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000B1B6 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000B1BB F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000B1C0                            		even
0000B1C0                            		even
0000B1C0                            
0000B1C0                            ; ---------------------------------------------------------------------------
0000B1C0                            ; Sprite mappings - SLZ	platforms
0000B1C0                            ; ---------------------------------------------------------------------------
0000B1C0                            Map_obj18b:
0000B1C0                            	include "_maps\obj18slz.asm"
0000B1C0                            ; ---------------------------------------------------------------------------
0000B1C0                            ; Sprite mappings - SLZ	platforms
0000B1C0                            ; ---------------------------------------------------------------------------
0000B1C0 0000                       		dc.w byte_819C-Map_obj18b
0000B1C2 02                         byte_819C:	dc.b 2
0000B1C3 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000B1C8 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000B1CE 00                         		even
0000B1CE 00                         		even
0000B1CE                            
0000B1CE                            ; ===========================================================================
0000B1CE                            ; ---------------------------------------------------------------------------
0000B1CE                            ; Object 19 - blank
0000B1CE                            ; ---------------------------------------------------------------------------
0000B1CE                            
0000B1CE                            Obj19:					; XREF: Obj_Index
0000B1CE 4E75                       		rts	
0000B1D0                            ; ===========================================================================
0000B1D0                            ; ---------------------------------------------------------------------------
0000B1D0                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000B1D0                            ; ---------------------------------------------------------------------------
0000B1D0                            Map_obj48:
0000B1D0                            	include "_maps\obj48.asm"
0000B1D0                            ; ---------------------------------------------------------------------------
0000B1D0                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000B1D0                            ; ---------------------------------------------------------------------------
0000B1D0 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000B1D4 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000B1D8 06                         byte_81B2:	dc.b 6
0000B1D9 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000B1DE F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000B1E3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000B1E8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000B1ED 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000B1F2 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000B1F7 04                         byte_81D1:	dc.b 4
0000B1F8 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000B1FD E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000B202 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000B207 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000B20C 04                         byte_81E6:	dc.b 4
0000B20D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000B212 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000B217 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000B21C 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000B221 04                         byte_81FB:	dc.b 4
0000B222 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000B227 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000B22C 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000B231 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000B236                            		even
0000B236                            		even
0000B236                            
0000B236                            ; ===========================================================================
0000B236                            ; ---------------------------------------------------------------------------
0000B236                            ; Object 1A - GHZ collapsing ledge
0000B236                            ; ---------------------------------------------------------------------------
0000B236                            
0000B236                            Obj1A:					; XREF: Obj_Index
0000B236 7000                       		moveq	#0,d0
0000B238 1028 0024                  		move.b	$24(a0),d0
0000B23C 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000B240 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000B244                            ; ===========================================================================
0000B244 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000B248 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000B24C 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000B250                            ; ===========================================================================
0000B250                            
0000B250                            Obj1A_Main:				; XREF: Obj1A_Index
0000B250 5428 0024                  		addq.b	#2,$24(a0)
0000B254 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000B25C 317C 4000 0002             		move.w	#$4000,2(a0)
0000B262 0028 0004 0001             		ori.b	#4,1(a0)
0000B268 117C 0004 0018             		move.b	#4,$18(a0)
0000B26E 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000B274 117C 0064 0019             		move.b	#$64,$19(a0)
0000B27A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000B280 117C 0038 0016             		move.b	#$38,$16(a0)
0000B286 08E8 0004 0001             		bset	#4,1(a0)
0000B28C                            
0000B28C                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000B28C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000B290 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000B292 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000B296 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000B29A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000B29E                            
0000B29E                            Obj1A_Slope:
0000B29E 323C 0030                  		move.w	#$30,d1
0000B2A2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000B2A8 6100 F2A4                  		bsr.w	SlopeObject
0000B2AC 6000 0000                  		bra.w	MarkObjGone
0000B2B0                            ; ===========================================================================
0000B2B0                            
0000B2B0                            Obj1A_Touch:				; XREF: Obj1A_Index
0000B2B0 4A28 0038                  		tst.b	$38(a0)
0000B2B4 6700 0000                  		beq.w	loc_847A
0000B2B8 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000B2BE 5328 0038                  		subq.b	#1,$38(a0)
0000B2C2                            
0000B2C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2C2                            
0000B2C2                            
0000B2C2                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000B2C2 323C 0030                  		move.w	#$30,d1
0000B2C6 6100 F326                  		bsr.w	ExitPlatform
0000B2CA 323C 0030                  		move.w	#$30,d1
0000B2CE 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000B2D4 3428 0008                  		move.w	8(a0),d2
0000B2D8 6100 0000                  		bsr.w	SlopeObject2
0000B2DC 6000 0000                  		bra.w	MarkObjGone
0000B2E0                            ; End of function Obj1A_WalkOff
0000B2E0                            
0000B2E0                            ; ===========================================================================
0000B2E0                            
0000B2E0                            Obj1A_Display:				; XREF: Obj1A_Index
0000B2E0 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000B2E4 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000B2E6 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000B2EA 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000B2EE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000B2F2 6000 0000                  		bra.w	DisplaySprite
0000B2F6                            ; ===========================================================================
0000B2F6                            
0000B2F6                            loc_82D0:				; XREF: Obj1A_Display
0000B2F6 5328 0038                  		subq.b	#1,$38(a0)
0000B2FA 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000B2FE 43F8 D000                  		lea	($FFFFD000).w,a1
0000B302 0829 0003 0022             		btst	#3,$22(a1)
0000B308 6700                       		beq.s	loc_82FC
0000B30A 4A28 0038                  		tst.b	$38(a0)
0000B30E 6600                       		bne.s	locret_8308
0000B310 08A9 0003 0022             		bclr	#3,$22(a1)
0000B316 08A9 0005 0022             		bclr	#5,$22(a1)
0000B31C 137C 0001 001D             		move.b	#1,$1D(a1)
0000B322                            
0000B322                            loc_82FC:
0000B322 117C 0000 003A             		move.b	#0,$3A(a0)
0000B328 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000B32E                            
0000B32E                            locret_8308:
0000B32E 4E75                       		rts	
0000B330                            ; ===========================================================================
0000B330                            
0000B330                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000B330 6100 0000                  		bsr.w	ObjectFall
0000B334 6100 0000                  		bsr.w	DisplaySprite
0000B338 4A28 0001                  		tst.b	1(a0)
0000B33C 6A00                       		bpl.s	Obj1A_Delete
0000B33E 4E75                       		rts	
0000B340                            ; ===========================================================================
0000B340                            
0000B340                            Obj1A_Delete:				; XREF: Obj1A_Index
0000B340 6100 0000                  		bsr.w	DeleteObject
0000B344 4E75                       		rts	
0000B346                            ; ===========================================================================
0000B346                            ; ---------------------------------------------------------------------------
0000B346                            ; Object 53 - collapsing floors	(GHZ, MZ, SLZ, SBZ)
0000B346                            ; ---------------------------------------------------------------------------
0000B346                            
0000B346                            Obj53:					; XREF: Obj_Index
0000B346 7000                       		moveq	#0,d0
0000B348 1028 0024                  		move.b	$24(a0),d0
0000B34C 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000B350 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000B354                            ; ===========================================================================
0000B354 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000B358 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000B35C 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000B360                            ; ===========================================================================
0000B360                            
0000B360                            Obj53_Main:				; XREF: Obj53_Index
0000B360 5428 0024                  		addq.b	#2,$24(a0)
0000B364 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000B36C 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000B372 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000B378 6600                       		bne.s	Obj53_NotSLZ
0000B37A 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000B380 5428 001A                  		addq.b	#2,$1A(a0)
0000B384                            
0000B384                            Obj53_NotSLZ:
0000B384 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000B38A 6600                       		bne.s	Obj53_NotSBZ
0000B38C 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000B392                            
0000B392                            Obj53_NotSBZ:
0000B392 0C38 0000 FE10             		cmpi.b	#0,($FFFFFE10).w ; check if level is GHZ
0000B398 6600                       		bne.s	Obj53_NotGHZ
0000B39A 317C 409F 0002             		move.w	#$409F,2(a0)	; GHZ specific code
0000B3A0                            
0000B3A0                            Obj53_NotGHZ:
0000B3A0 0028 0004 0001             		ori.b	#4,1(a0)
0000B3A6 117C 0004 0018             		move.b	#4,$18(a0)
0000B3AC 117C 0007 0038             		move.b	#7,$38(a0)
0000B3B2 117C 0044 0019             		move.b	#$44,$19(a0)
0000B3B8                            
0000B3B8                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000B3B8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000B3BC 6700                       		beq.s	Obj53_Solid	; if not, branch
0000B3BE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000B3C2 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000B3C6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000B3CA                            
0000B3CA                            Obj53_Solid:
0000B3CA 323C 0020                  		move.w	#$20,d1
0000B3CE 6100 F0AA                  		bsr.w	PlatformObject
0000B3D2 4A28 0028                  		tst.b	$28(a0)
0000B3D6 6A00                       		bpl.s	Obj53_MarkAsGone
0000B3D8 0829 0003 0022             		btst	#3,$22(a1)
0000B3DE 6700                       		beq.s	Obj53_MarkAsGone
0000B3E0 08A8 0000 0001             		bclr	#0,1(a0)
0000B3E6 3029 0008                  		move.w	8(a1),d0
0000B3EA 9068 0008                  		sub.w	8(a0),d0
0000B3EE 6400                       		bcc.s	Obj53_MarkAsGone
0000B3F0 08E8 0000 0001             		bset	#0,1(a0)
0000B3F6                            
0000B3F6                            Obj53_MarkAsGone:
0000B3F6 6000 0000                  		bra.w	MarkObjGone
0000B3FA                            ; ===========================================================================
0000B3FA                            
0000B3FA                            Obj53_Touch:				; XREF: Obj53_Index
0000B3FA 4A28 0038                  		tst.b	$38(a0)
0000B3FE 6700 0000                  		beq.w	loc_8458
0000B402 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000B408 5328 0038                  		subq.b	#1,$38(a0)
0000B40C                            
0000B40C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B40C                            
0000B40C                            
0000B40C                            Obj53_WalkOff:				; XREF: Obj53_Index
0000B40C 323C 0020                  		move.w	#$20,d1
0000B410 6100 F1DC                  		bsr.w	ExitPlatform
0000B414 3428 0008                  		move.w	8(a0),d2
0000B418 6100 F73E                  		bsr.w	MvSonicOnPtfm2
0000B41C 6000 0000                  		bra.w	MarkObjGone
0000B420                            ; End of function Obj53_WalkOff
0000B420                            
0000B420                            ; ===========================================================================
0000B420                            
0000B420                            Obj53_Display:				; XREF: Obj53_Index
0000B420 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000B424 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000B426 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000B42A 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000B42E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000B432 6000 0000                  		bra.w	DisplaySprite
0000B436                            ; ===========================================================================
0000B436                            
0000B436                            loc_8402:
0000B436 5328 0038                  		subq.b	#1,$38(a0)
0000B43A 6100 FFD0                  		bsr.w	Obj53_WalkOff
0000B43E 43F8 D000                  		lea	($FFFFD000).w,a1
0000B442 0829 0003 0022             		btst	#3,$22(a1)
0000B448 6700                       		beq.s	loc_842E
0000B44A 4A28 0038                  		tst.b	$38(a0)
0000B44E 6600                       		bne.s	locret_843A
0000B450 08A9 0003 0022             		bclr	#3,$22(a1)
0000B456 08A9 0005 0022             		bclr	#5,$22(a1)
0000B45C 137C 0001 001D             		move.b	#1,$1D(a1)
0000B462                            
0000B462                            loc_842E:
0000B462 117C 0000 003A             		move.b	#0,$3A(a0)
0000B468 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000B46E                            
0000B46E                            locret_843A:
0000B46E 4E75                       		rts	
0000B470                            ; ===========================================================================
0000B470                            
0000B470                            Obj53_TimeZero:				; XREF: Obj53_Display
0000B470 6100 0000                  		bsr.w	ObjectFall
0000B474 6100 0000                  		bsr.w	DisplaySprite
0000B478 4A28 0001                  		tst.b	1(a0)
0000B47C 6A00                       		bpl.s	Obj53_Delete
0000B47E 4E75                       		rts	
0000B480                            ; ===========================================================================
0000B480                            
0000B480                            Obj53_Delete:				; XREF: Obj53_Index
0000B480 6100 0000                  		bsr.w	DeleteObject
0000B484 4E75                       		rts	
0000B486                            ; ===========================================================================
0000B486                            
0000B486                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000B486 117C 0000 003A             		move.b	#0,$3A(a0)
0000B48C                            
0000B48C                            loc_8458:				; XREF: Obj53_Touch
0000B48C 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000B492 0828 0000 0028             		btst	#0,$28(a0)
0000B498 6700                       		beq.s	loc_846C
0000B49A 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0000B4A0                            
0000B4A0                            loc_846C:
0000B4A0 7207                       		moveq	#7,d1
0000B4A2 5228 001A                  		addq.b	#1,$1A(a0)
0000B4A6 6000                       		bra.s	loc_8486
0000B4A8                            ; ===========================================================================
0000B4A8                            
0000B4A8                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
0000B4A8 117C 0000 003A             		move.b	#0,$3A(a0)
0000B4AE                            
0000B4AE                            loc_847A:				; XREF: Obj1A_Touch
0000B4AE 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000B4B4 7218                       		moveq	#$18,d1
0000B4B6 5428 001A                  		addq.b	#2,$1A(a0)
0000B4BA                            
0000B4BA                            loc_8486:				; XREF: Obj53_Collapse
0000B4BA 7000                       		moveq	#0,d0
0000B4BC 1028 001A                  		move.b	$1A(a0),d0
0000B4C0 D040                       		add.w	d0,d0
0000B4C2 2668 0004                  		movea.l	4(a0),a3
0000B4C6 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000B4CA 524B                       		addq.w	#1,a3
0000B4CC 08E8 0005 0001             		bset	#5,1(a0)
0000B4D2 1810                       		move.b	0(a0),d4
0000B4D4 1A28 0001                  		move.b	1(a0),d5
0000B4D8 2248                       		movea.l	a0,a1
0000B4DA 6000                       		bra.s	loc_84B2
0000B4DC                            ; ===========================================================================
0000B4DC                            
0000B4DC                            loc_84AA:
0000B4DC 6100 0000                  		bsr.w	SingleObjLoad
0000B4E0 6600                       		bne.s	loc_84F2
0000B4E2 5A4B                       		addq.w	#5,a3
0000B4E4                            
0000B4E4                            loc_84B2:
0000B4E4 137C 0006 0024             		move.b	#6,$24(a1)
0000B4EA 1284                       		move.b	d4,0(a1)
0000B4EC 234B 0004                  		move.l	a3,4(a1)
0000B4F0 1345 0001                  		move.b	d5,1(a1)
0000B4F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000B4FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B500 3368 0002 0002             		move.w	2(a0),2(a1)
0000B506 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000B50C 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000B512 135C 0038                  		move.b	(a4)+,$38(a1)
0000B516 B3C8                       		cmpa.l	a0,a1
0000B518 6400                       		bcc.s	loc_84EE
0000B51A 6100 0000                  		bsr.w	DisplaySprite2
0000B51E                            
0000B51E                            loc_84EE:
0000B51E 51C9 FFBC                  		dbf	d1,loc_84AA
0000B522                            
0000B522                            loc_84F2:
0000B522 6100 0000                  		bsr.w	DisplaySprite
0000B526 303C 00B9                  		move.w	#$B9,d0
0000B52A 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play collapsing	sound
0000B530                            ; ===========================================================================
0000B530                            ; ---------------------------------------------------------------------------
0000B530                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000B530                            ; ---------------------------------------------------------------------------
0000B530 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000B540 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000B54A 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000B552 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000B55A                            
0000B55A                            ; ---------------------------------------------------------------------------
0000B55A                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000B55A                            ; ---------------------------------------------------------------------------
0000B55A                            
0000B55A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B55A                            
0000B55A                            
0000B55A                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0000B55A 43F8 D000                  		lea	($FFFFD000).w,a1
0000B55E 0829 0003 0022             		btst	#3,$22(a1)
0000B564 6700                       		beq.s	locret_856E
0000B566 3029 0008                  		move.w	8(a1),d0
0000B56A 9068 0008                  		sub.w	8(a0),d0
0000B56E D041                       		add.w	d1,d0
0000B570 E248                       		lsr.w	#1,d0
0000B572 0828 0000 0001             		btst	#0,1(a0)
0000B578 6700                       		beq.s	loc_854E
0000B57A 4640                       		not.w	d0
0000B57C D041                       		add.w	d1,d0
0000B57E                            
0000B57E                            loc_854E:
0000B57E 7200                       		moveq	#0,d1
0000B580 1232 0000                  		move.b	(a2,d0.w),d1
0000B584 3028 000C                  		move.w	$C(a0),d0
0000B588 9041                       		sub.w	d1,d0
0000B58A 7200                       		moveq	#0,d1
0000B58C 1229 0016                  		move.b	$16(a1),d1
0000B590 9041                       		sub.w	d1,d0
0000B592 3340 000C                  		move.w	d0,$C(a1)
0000B596 9468 0008                  		sub.w	8(a0),d2
0000B59A 9569 0008                  		sub.w	d2,8(a1)
0000B59E                            
0000B59E                            locret_856E:
0000B59E 4E75                       		rts	
0000B5A0                            ; End of function SlopeObject2
0000B5A0                            
0000B5A0                            ; ===========================================================================
0000B5A0                            ; ---------------------------------------------------------------------------
0000B5A0                            ; Collision data for GHZ collapsing ledge
0000B5A0                            ; ---------------------------------------------------------------------------
0000B5A0                            Obj1A_SlopeData:
0000B5A0                            		incbin	misc\ghzledge.bin
0000B5D0                            		even
0000B5D0                            
0000B5D0                            ; ---------------------------------------------------------------------------
0000B5D0                            ; Sprite mappings - GHZ	collapsing ledge
0000B5D0                            ; ---------------------------------------------------------------------------
0000B5D0                            Map_obj1A:
0000B5D0                            	include "_maps\obj1A.asm"
0000B5D0                            ; ---------------------------------------------------------------------------
0000B5D0                            ; Sprite mappings - GHZ	collapsing ledge
0000B5D0                            ; ---------------------------------------------------------------------------
0000B5D0 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000B5D4 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000B5D8 10                         byte_85A8:	dc.b $10
0000B5D9 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000B5DE D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000B5E3 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000B5E8 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000B5ED D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000B5F2 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000B5F7 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000B5FC F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000B601 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000B606 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000B60B 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000B610 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000B615 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000B61A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000B61F 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000B624 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000B629 10                         byte_85F9:	dc.b $10
0000B62A C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000B62F D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000B634 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000B639 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000B63E D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000B643 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000B648 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000B64D F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000B652 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000B657 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000B65C 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000B661 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000B666 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000B66B 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000B670 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000B675 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000B67A 19                         byte_864A:	dc.b $19
0000B67B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000B680 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000B685 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000B68A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000B68F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000B694 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000B699 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000B69E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000B6A3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000B6A8 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000B6AD F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000B6B2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000B6B7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000B6BC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000B6C1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000B6C6 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000B6CB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000B6D0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000B6D5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000B6DA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000B6DF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000B6E4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000B6E9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000B6EE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000B6F3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000B6F8 19                         byte_86C8:	dc.b $19
0000B6F9 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000B6FE C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000B703 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000B708 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000B70D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000B712 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000B717 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000B71C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000B721 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000B726 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000B72B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000B730 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000B735 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000B73A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000B73F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000B744 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000B749 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000B74E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000B753 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000B758 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000B75D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000B762 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000B767 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000B76C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000B771 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000B776                            		even
0000B776                            		even
0000B776                            
0000B776                            ; ---------------------------------------------------------------------------
0000B776                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000B776                            ; ---------------------------------------------------------------------------
0000B776                            Map_obj53:
0000B776                            	include "_maps\obj53.asm"
0000B776                            ; ---------------------------------------------------------------------------
0000B776                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000B776                            ; ---------------------------------------------------------------------------
0000B776 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0000B77A 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000B77E 04                         byte_874E:	dc.b 4
0000B77F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000B784 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000B789 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000B78E 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000B793 08                         byte_8763:	dc.b 8
0000B794 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000B799 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000B79E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000B7A3 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000B7A8 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000B7AD 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000B7B2 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000B7B7 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000B7BC 04                         byte_878C:	dc.b 4
0000B7BD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000B7C2 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000B7C7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000B7CC 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000B7D1 08                         byte_87A1:	dc.b 8
0000B7D2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000B7D7 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000B7DC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000B7E1 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000B7E6 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000B7EB 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000B7F0 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000B7F5 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000B7FA                            		even
0000B7FA                            		even
0000B7FA                            
0000B7FA                            ; ===========================================================================
0000B7FA                            ; ---------------------------------------------------------------------------
0000B7FA                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000B7FA                            ; ---------------------------------------------------------------------------
0000B7FA                            
0000B7FA                            Obj1C:					; XREF: Obj_Index
0000B7FA 7000                       		moveq	#0,d0
0000B7FC 1028 0024                  		move.b	$24(a0),d0
0000B800 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000B804 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000B808                            ; ===========================================================================
0000B808 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000B80A 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000B80C                            ; ===========================================================================
0000B80C                            
0000B80C                            Obj1C_Main:				; XREF: Obj1C_Index
0000B80C 5428 0024                  		addq.b	#2,$24(a0)
0000B810 7000                       		moveq	#0,d0
0000B812 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000B816 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000B81A 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000B81E 2159 0004                  		move.l	(a1)+,4(a0)
0000B822 3159 0002                  		move.w	(a1)+,2(a0)
0000B826 0028 0004 0001             		ori.b	#4,1(a0)
0000B82C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B830 1159 0019                  		move.b	(a1)+,$19(a0)
0000B834 1159 0018                  		move.b	(a1)+,$18(a0)
0000B838 1159 0020                  		move.b	(a1)+,$20(a0)
0000B83C                            
0000B83C                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000B83C 3028 0008                  		move.w	8(a0),d0
0000B840 0240 FF80                  		andi.w	#$FF80,d0
0000B844 3238 F700                  		move.w	($FFFFF700).w,d1
0000B848 0441 0080                  		subi.w	#$80,d1
0000B84C 0241 FF80                  		andi.w	#$FF80,d1
0000B850 9041                       		sub.w	d1,d0
0000B852 0C40 0280                  		cmpi.w	#$280,d0
0000B856 6200 0000                  		bhi.w	DeleteObject
0000B85A 6000 0000                  		bra.w	DisplaySprite
0000B85E                            ; ===========================================================================
0000B85E                            ; ---------------------------------------------------------------------------
0000B85E                            ; Variables for	object $1C are stored in an array
0000B85E                            ; ---------------------------------------------------------------------------
0000B85E 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000B862 44D8                       		dc.w $44D8		; VRAM setting
0000B864 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000B868 0000 0000                  		dc.l Map_obj1C
0000B86C 44D8                       		dc.w $44D8
0000B86E 0008 0200                  		dc.b 0,	8, 2, 0
0000B872 0000 0000                  		dc.l Map_obj1C
0000B876 44D8                       		dc.w $44D8
0000B878 0008 0200                  		dc.b 0,	8, 2, 0
0000B87C 0000 A962                  		dc.l Map_obj11
0000B880 438E                       		dc.w $438E
0000B882 0110 0100                  		dc.b 1,	$10, 1,	0
0000B886                            ; ---------------------------------------------------------------------------
0000B886                            ; Sprite mappings - SLZ	lava thrower
0000B886                            ; ---------------------------------------------------------------------------
0000B886                            Map_obj1C:
0000B886                            	include "_maps\obj1C.asm"
0000B886                            ; ---------------------------------------------------------------------------
0000B886                            ; Sprite mappings - SLZ	lava thrower
0000B886                            ; ---------------------------------------------------------------------------
0000B886 0000                       		dc.w byte_8858-Map_obj1C
0000B888 01                         byte_8858:	dc.b 1
0000B889 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000B88E                            		even
0000B88E                            		even
0000B88E                            
0000B88E                            ; ===========================================================================
0000B88E                            ; ---------------------------------------------------------------------------
0000B88E                            ; Object 1D - switch that activates when Sonic touches it
0000B88E                            ; (this	is not used anywhere in	the game)
0000B88E                            ; ---------------------------------------------------------------------------
0000B88E                            
0000B88E                            Obj1D:					; XREF: Obj_Index
0000B88E 7000                       		moveq	#0,d0
0000B890 1028 0024                  		move.b	$24(a0),d0
0000B894 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000B898 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000B89C                            ; ===========================================================================
0000B89C 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000B89E 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000B8A0 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000B8A2                            ; ===========================================================================
0000B8A2                            
0000B8A2                            Obj1D_Main:				; XREF: Obj1D_Index
0000B8A2 5428 0024                  		addq.b	#2,$24(a0)
0000B8A6 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000B8AE 317C 4000 0002             		move.w	#$4000,2(a0)
0000B8B4 117C 0004 0001             		move.b	#4,1(a0)
0000B8BA 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000B8C0 117C 0010 0019             		move.b	#$10,$19(a0)
0000B8C6 117C 0005 0018             		move.b	#5,$18(a0)
0000B8CC                            
0000B8CC                            Obj1D_Action:				; XREF: Obj1D_Index
0000B8CC 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000B8D2 323C 0010                  		move.w	#$10,d1
0000B8D6 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000B8DA 6700                       		beq.s	Obj1D_ChkDel
0000B8DC 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000B8E0 7001                       		moveq	#1,d0
0000B8E2 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000B8E6                            
0000B8E6                            Obj1D_ChkDel:
0000B8E6 6100 0000                  		bsr.w	DisplaySprite
0000B8EA 3028 0008                  		move.w	8(a0),d0
0000B8EE 0240 FF80                  		andi.w	#$FF80,d0
0000B8F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8F6 0441 0080                  		subi.w	#$80,d1
0000B8FA 0241 FF80                  		andi.w	#$FF80,d1
0000B8FE 9041                       		sub.w	d1,d0
0000B900 0C40 0280                  		cmpi.w	#$280,d0
0000B904 6200 0000                  		bhi.w	Obj1D_Delete
0000B908 4E75                       		rts	
0000B90A                            ; ===========================================================================
0000B90A                            
0000B90A                            Obj1D_Delete:				; XREF: Obj1D_Index
0000B90A 6100 0000                  		bsr.w	DeleteObject
0000B90E 4E75                       		rts	
0000B910                            ; ---------------------------------------------------------------------------
0000B910                            ; Subroutine to	check if Sonic touches the object
0000B910                            ; ---------------------------------------------------------------------------
0000B910                            
0000B910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B910                            
0000B910                            
0000B910                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000B910 43F8 D000                  		lea	($FFFFD000).w,a1
0000B914 3029 0008                  		move.w	8(a1),d0
0000B918 9068 0008                  		sub.w	8(a0),d0
0000B91C D041                       		add.w	d1,d0
0000B91E 6B00                       		bmi.s	loc_8918
0000B920 D241                       		add.w	d1,d1
0000B922 B041                       		cmp.w	d1,d0
0000B924 6400                       		bcc.s	loc_8918
0000B926 3429 000C                  		move.w	$C(a1),d2
0000B92A 1229 0016                  		move.b	$16(a1),d1
0000B92E 4881                       		ext.w	d1
0000B930 D242                       		add.w	d2,d1
0000B932 3028 000C                  		move.w	$C(a0),d0
0000B936 0440 0010                  		subi.w	#$10,d0
0000B93A 9041                       		sub.w	d1,d0
0000B93C 6200                       		bhi.s	loc_8918
0000B93E 0C40 FFF0                  		cmpi.w	#-$10,d0
0000B942 6500                       		bcs.s	loc_8918
0000B944 70FF                       		moveq	#-1,d0
0000B946 4E75                       		rts	
0000B948                            ; ===========================================================================
0000B948                            
0000B948                            loc_8918:
0000B948 7000                       		moveq	#0,d0
0000B94A 4E75                       		rts	
0000B94C                            ; End of function Obj1D_ChkTouch
0000B94C                            
0000B94C                            ; ===========================================================================
0000B94C                            ; ---------------------------------------------------------------------------
0000B94C                            ; Sprite mappings - object 1D
0000B94C                            ; ---------------------------------------------------------------------------
0000B94C                            Map_obj1D:
0000B94C                            	include "_maps\obj1D.asm"
0000B94C                            ; ---------------------------------------------------------------------------
0000B94C                            ; Sprite mappings - object 1D
0000B94C                            ; ---------------------------------------------------------------------------
0000B94C 0000                       		dc.w byte_891E-Map_obj1D
0000B94E 04                         byte_891E:	dc.b 4
0000B94F E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000B954 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000B959 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000B95E 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000B964 00                         		even
0000B964 00                         		even
0000B964                            
0000B964                            ; ===========================================================================
0000B964                            ; ---------------------------------------------------------------------------
0000B964                            ; Object 2A - doors (SBZ)
0000B964                            ; ---------------------------------------------------------------------------
0000B964                            
0000B964                            Obj2A:					; XREF: Obj_Index
0000B964 7000                       		moveq	#0,d0
0000B966 1028 0024                  		move.b	$24(a0),d0
0000B96A 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000B96E 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000B972                            ; ===========================================================================
0000B972 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000B974 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000B976                            ; ===========================================================================
0000B976                            
0000B976                            Obj2A_Main:				; XREF: Obj2A_Index
0000B976 5428 0024                  		addq.b	#2,$24(a0)
0000B97A 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000B982 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000B988 0028 0004 0001             		ori.b	#4,1(a0)
0000B98E 117C 0008 0019             		move.b	#8,$19(a0)
0000B994 117C 0004 0018             		move.b	#4,$18(a0)
0000B99A                            
0000B99A                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000B99A 323C 0040                  		move.w	#$40,d1
0000B99E 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000B9A2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B9A6 D041                       		add.w	d1,d0
0000B9A8 B068 0008                  		cmp.w	8(a0),d0
0000B9AC 6500                       		bcs.s	Obj2A_Animate
0000B9AE 9041                       		sub.w	d1,d0
0000B9B0 9041                       		sub.w	d1,d0
0000B9B2 B068 0008                  		cmp.w	8(a0),d0
0000B9B6 6400                       		bcc.s	Obj2A_Animate
0000B9B8 D041                       		add.w	d1,d0
0000B9BA B068 0008                  		cmp.w	8(a0),d0
0000B9BE 6400                       		bcc.s	loc_899A
0000B9C0 0828 0000 0022             		btst	#0,$22(a0)
0000B9C6 6600                       		bne.s	Obj2A_Animate
0000B9C8 6000                       		bra.s	Obj2A_Open
0000B9CA                            ; ===========================================================================
0000B9CA                            
0000B9CA                            loc_899A:				; XREF: Obj2A_OpenShut
0000B9CA 0828 0000 0022             		btst	#0,$22(a0)
0000B9D0 6700                       		beq.s	Obj2A_Animate
0000B9D2                            
0000B9D2                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000B9D2 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000B9D8                            
0000B9D8                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000B9D8 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000B9DE 6100 0000                  		bsr.w	AnimateSprite
0000B9E2 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000B9E6 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000B9E8 323C 0011                  		move.w	#$11,d1
0000B9EC 343C 0020                  		move.w	#$20,d2
0000B9F0 3602                       		move.w	d2,d3
0000B9F2 5243                       		addq.w	#1,d3
0000B9F4 3828 0008                  		move.w	8(a0),d4
0000B9F8 6100 0000                  		bsr.w	SolidObject
0000B9FC                            
0000B9FC                            Obj2A_MarkAsUsed:
0000B9FC 6000 0000                  		bra.w	MarkObjGone
0000BA00                            ; ===========================================================================
0000BA00                            Ani_obj2A:
0000BA00                            	include "_anim\obj2A.asm"
0000BA00                            ; ---------------------------------------------------------------------------
0000BA00                            ; Animation script - doors (SBZ)
0000BA00                            ; ---------------------------------------------------------------------------
0000BA00 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000BA02 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000BA04 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000BA10 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000BA1C                            		even
0000BA1C                            		even
0000BA1C                            
0000BA1C                            ; ---------------------------------------------------------------------------
0000BA1C                            ; Sprite mappings - doors (SBZ)
0000BA1C                            ; ---------------------------------------------------------------------------
0000BA1C                            Map_obj2A:
0000BA1C                            	include "_maps\obj2A.asm"
0000BA1C                            ; ---------------------------------------------------------------------------
0000BA1C                            ; Sprite mappings - doors (SBZ)
0000BA1C                            ; ---------------------------------------------------------------------------
0000BA1C 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000BA20 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000BA24 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000BA28 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000BA2C 0000                       		dc.w byte_8A56-Map_obj2A
0000BA2E 02                         byte_89FE:	dc.b 2
0000BA2F E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000BA34 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000BA39 02                         byte_8A09:	dc.b 2
0000BA3A DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000BA3F 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000BA44 02                         byte_8A14:	dc.b 2
0000BA45 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
0000BA4A 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000BA4F 02                         byte_8A1F:	dc.b 2
0000BA50 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000BA55 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
0000BA5A 02                         byte_8A2A:	dc.b 2
0000BA5B D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000BA60 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000BA65 02                         byte_8A35:	dc.b 2
0000BA66 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000BA6B 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000BA70 02                         byte_8A40:	dc.b 2
0000BA71 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000BA76 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000BA7B 02                         byte_8A4B:	dc.b 2
0000BA7C C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000BA81 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000BA86 02                         byte_8A56:	dc.b 2
0000BA87 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0000BA8C 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000BA92 00                         		even
0000BA92 00                         		even
0000BA92                            
0000BA92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA92                            
0000BA92                            
0000BA92                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000BA92 6100 0000                  		bsr.w	Obj44_SolidWall2
0000BA96 6700                       		beq.s	loc_8AA8
0000BA98 6B00 0000                  		bmi.w	loc_8AC4
0000BA9C 7200                       		moveq	#0,d1
0000BA9E 4A40                       		tst.w	d0
0000BAA0 6700 0000                  		beq.w	loc_8A92
0000BAA4 6B00                       		bmi.s	loc_8A7C
0000BAA6 4A69 0010                  		tst.w	$10(a1)
0000BAAA 6B00                       		bmi.s	loc_8A92
0000BAAC 123C 0008                  		move.b	#btnR,d1
0000BAB0 6000                       		bra.s	loc_8A82
0000BAB2                            ; ===========================================================================
0000BAB2                            
0000BAB2                            loc_8A7C:
0000BAB2 4A69 0010                  		tst.w	$10(a1)
0000BAB6 6A00                       		bpl.s	loc_8A92
0000BAB8 123C 0004                  		move.b	#btnL,d1
0000BABC                            
0000BABC                            loc_8A82:
0000BABC 9169 0008                  		sub.w	d0,8(a1)
0000BAC0 337C 0000 0014             		move.w	#0,$14(a1)
0000BAC6 337C 0000 0010             		move.w	#0,$10(a1)
0000BACC                            
0000BACC                            loc_8A92:
0000BACC 0829 0001 0022             		btst	#1,$22(a1)
0000BAD2 6600                       		bne.s	loc_8AB6
0000BAD4 08E9 0005 0022             		bset	#5,$22(a1)
0000BADA 08E8 0005 0022             		bset	#5,$22(a0)
0000BAE0 4E75                       		rts	
0000BAE2                            ; ===========================================================================
0000BAE2                            
0000BAE2                            loc_8AA8:
0000BAE2 0828 0005 0022             		btst	#5,$22(a0)
0000BAE8 6700                       		beq.s	locret_8AC2
0000BAEA 337C 0001 001C             		move.w	#1,$1C(a1)
0000BAF0 0C38 0003 FFF6             		cmpi.b	#$03, ($FFFFFFF6).w ; if player flag set?
0000BAF6 6600                       		bne.s	locret_8AC2
0000BAF8 6000                       		bra.s	loc_8AB6pushclear
0000BAFA                            		
0000BAFA                            
0000BAFA                            loc_8AB6:
0000BAFA 2F08                       		move.l	a0,-(sp)
0000BAFC 2049                       		movea.l	a1,a0
0000BAFE 4EB9 0000 0000             		jsr	WallJump
0000BB04 205F                       		movea.l	(sp)+,a0
0000BB06                            
0000BB06                            loc_8AB6pushclear:
0000BB06 08A8 0005 0022             		bclr	#5,$22(a0)
0000BB0C 08A9 0005 0022             		bclr	#5,$22(a1)
0000BB12                            
0000BB12                            locret_8AC2:
0000BB12 4E75                       		rts	
0000BB14                            ; ===========================================================================
0000BB14                            
0000BB14                            loc_8AC4:
0000BB14 4A69 0012                  		tst.w	$12(a1)
0000BB18 6A00                       		bpl.s	locret_8AD8
0000BB1A 4A43                       		tst.w	d3
0000BB1C 6A00                       		bpl.s	locret_8AD8
0000BB1E 9769 000C                  		sub.w	d3,$C(a1)
0000BB22 337C 0000 0012             		move.w	#0,$12(a1)
0000BB28                            
0000BB28                            locret_8AD8:
0000BB28 4E75                       		rts	
0000BB2A                            ; End of function Obj44_SolidWall
0000BB2A                            
0000BB2A                            
0000BB2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB2A                            
0000BB2A                            
0000BB2A                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000BB2A 43F8 D000                  		lea	($FFFFD000).w,a1
0000BB2E 3029 0008                  		move.w	8(a1),d0
0000BB32 9068 0008                  		sub.w	8(a0),d0
0000BB36 D041                       		add.w	d1,d0
0000BB38 6B00                       		bmi.s	loc_8B48
0000BB3A 3601                       		move.w	d1,d3
0000BB3C D643                       		add.w	d3,d3
0000BB3E B043                       		cmp.w	d3,d0
0000BB40 6200                       		bhi.s	loc_8B48
0000BB42 1629 0016                  		move.b	$16(a1),d3
0000BB46 4883                       		ext.w	d3
0000BB48 D443                       		add.w	d3,d2
0000BB4A 3629 000C                  		move.w	$C(a1),d3
0000BB4E 9668 000C                  		sub.w	$C(a0),d3
0000BB52 D642                       		add.w	d2,d3
0000BB54 6B00                       		bmi.s	loc_8B48
0000BB56 3802                       		move.w	d2,d4
0000BB58 D844                       		add.w	d4,d4
0000BB5A B644                       		cmp.w	d4,d3
0000BB5C 6400                       		bcc.s	loc_8B48
0000BB5E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000BB62 6B00                       		bmi.s	loc_8B48
0000BB64 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BB6A 6400                       		bcc.s	loc_8B48
0000BB6C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BB70 6600                       		bne.s	loc_8B48
0000BB72 3A00                       		move.w	d0,d5
0000BB74 B240                       		cmp.w	d0,d1
0000BB76 6400                       		bcc.s	loc_8B30
0000BB78 D241                       		add.w	d1,d1
0000BB7A 9041                       		sub.w	d1,d0
0000BB7C 3A00                       		move.w	d0,d5
0000BB7E 4445                       		neg.w	d5
0000BB80                            
0000BB80                            loc_8B30:
0000BB80 3203                       		move.w	d3,d1
0000BB82 B443                       		cmp.w	d3,d2
0000BB84 6400                       		bcc.s	loc_8B3C
0000BB86 9644                       		sub.w	d4,d3
0000BB88 3203                       		move.w	d3,d1
0000BB8A 4441                       		neg.w	d1
0000BB8C                            
0000BB8C                            loc_8B3C:
0000BB8C BA41                       		cmp.w	d1,d5
0000BB8E 6200                       		bhi.s	loc_8B44
0000BB90 7801                       		moveq	#1,d4
0000BB92 4E75                       		rts	
0000BB94                            ; ===========================================================================
0000BB94                            
0000BB94                            loc_8B44:
0000BB94 78FF                       		moveq	#-1,d4
0000BB96 4E75                       		rts	
0000BB98                            ; ===========================================================================
0000BB98                            
0000BB98                            loc_8B48:
0000BB98 7800                       		moveq	#0,d4
0000BB9A 4E75                       		rts	
0000BB9C                            ; End of function Obj44_SolidWall2
0000BB9C                            
0000BB9C                            ; ===========================================================================
0000BB9C                            ; ---------------------------------------------------------------------------
0000BB9C                            ; Object 1E - Ball Hog enemy (SBZ)
0000BB9C                            ; ---------------------------------------------------------------------------
0000BB9C                            
0000BB9C                            Obj1E:					; XREF: Obj_Index
0000BB9C 7000                       		moveq	#0,d0
0000BB9E 1028 0024                  		move.b	$24(a0),d0
0000BBA2 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000BBA6 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000BBAA                            ; ===========================================================================
0000BBAA 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000BBAC 0000                       		dc.w Obj1E_Action-Obj1E_Index
0000BBAE                            ; ===========================================================================
0000BBAE                            
0000BBAE                            Obj1E_Main:				; XREF: Obj1E_Index
0000BBAE 117C 0013 0016             		move.b	#$13,$16(a0)
0000BBB4 117C 0008 0017             		move.b	#8,$17(a0)
0000BBBA 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000BBC2 317C 2302 0002             		move.w	#$2302,2(a0)
0000BBC8 117C 0004 0001             		move.b	#4,1(a0)
0000BBCE 117C 0004 0018             		move.b	#4,$18(a0)
0000BBD4 117C 0005 0020             		move.b	#5,$20(a0)
0000BBDA 117C 000C 0019             		move.b	#$C,$19(a0)
0000BBE0 6100 0000                  		bsr.w	ObjectFall
0000BBE4 4EB9 0000 0000             		jsr	ObjHitFloor
0000BBEA 4A41                       		tst.w	d1
0000BBEC 6A00                       		bpl.s	locret_8BAC
0000BBEE D368 000C                  		add.w	d1,$C(a0)
0000BBF2 317C 0000 0012             		move.w	#0,$12(a0)
0000BBF8 5428 0024                  		addq.b	#2,$24(a0)
0000BBFC                            
0000BBFC                            locret_8BAC:
0000BBFC 4E75                       		rts	
0000BBFE                            ; ===========================================================================
0000BBFE                            
0000BBFE                            Obj1E_Action:				; XREF: Obj1E_Index
0000BBFE 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000BC04 6100 0000                  		bsr.w	AnimateSprite
0000BC08 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000BC0E 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000BC10 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000BC14 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000BC16 6000                       		bra.s	Obj1E_MarkAsGone
0000BC18                            ; ===========================================================================
0000BC18                            
0000BC18                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000BC18 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000BC1C                            
0000BC1C                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000BC1C 6000 0000                  		bra.w	MarkObjGone
0000BC20                            ; ===========================================================================
0000BC20                            
0000BC20                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000BC20 117C 0001 0032             		move.b	#1,$32(a0)
0000BC26 6100 0000                  		bsr.w	SingleObjLoad
0000BC2A 6600                       		bne.s	loc_8C1A
0000BC2C 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000BC30 3368 0008 0008             		move.w	8(a0),8(a1)
0000BC36 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BC3C 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000BC42 337C 0000 0012             		move.w	#0,$12(a1)
0000BC48 70FC                       		moveq	#-4,d0
0000BC4A 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000BC50 6700                       		beq.s	loc_8C0A	; if not, branch
0000BC52 4440                       		neg.w	d0
0000BC54 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000BC58                            
0000BC58                            loc_8C0A:
0000BC58 D169 0008                  		add.w	d0,8(a1)
0000BC5C 0669 000C 000C             		addi.w	#$C,$C(a1)
0000BC62 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000BC68                            
0000BC68                            loc_8C1A:
0000BC68 60B2                       		bra.s	Obj1E_MarkAsGone
0000BC6A                            ; ===========================================================================
0000BC6A                            ; ---------------------------------------------------------------------------
0000BC6A                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000BC6A                            ; ---------------------------------------------------------------------------
0000BC6A                            
0000BC6A                            Obj20:					; XREF: Obj_Index
0000BC6A 7000                       		moveq	#0,d0
0000BC6C 1028 0024                  		move.b	$24(a0),d0
0000BC70 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000BC74 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000BC78                            ; ===========================================================================
0000BC78 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000BC7A 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000BC7C                            ; ===========================================================================
0000BC7C                            
0000BC7C                            Obj20_Main:				; XREF: Obj20_Index
0000BC7C 5428 0024                  		addq.b	#2,$24(a0)
0000BC80 117C 0007 0016             		move.b	#7,$16(a0)
0000BC86 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000BC8E 317C 2302 0002             		move.w	#$2302,2(a0)
0000BC94 117C 0004 0001             		move.b	#4,1(a0)
0000BC9A 117C 0003 0018             		move.b	#3,$18(a0)
0000BCA0 117C 0087 0020             		move.b	#$87,$20(a0)
0000BCA6 117C 0008 0019             		move.b	#8,$19(a0)
0000BCAC 7000                       		moveq	#0,d0
0000BCAE 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000BCB2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000BCB6 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000BCBA 117C 0004 001A             		move.b	#4,$1A(a0)
0000BCC0                            
0000BCC0                            Obj20_Bounce:				; XREF: Obj20_Index
0000BCC0 4EB9 0000 0000             		jsr	ObjectFall
0000BCC6 4A68 0012                  		tst.w	$12(a0)
0000BCCA 6B00                       		bmi.s	Obj20_ChkExplode
0000BCCC 4EB9 0000 0000             		jsr	ObjHitFloor
0000BCD2 4A41                       		tst.w	d1
0000BCD4 6A00                       		bpl.s	Obj20_ChkExplode
0000BCD6 D368 000C                  		add.w	d1,$C(a0)
0000BCDA 317C FD00 0012             		move.w	#-$300,$12(a0)
0000BCE0 4A03                       		tst.b	d3
0000BCE2 6700                       		beq.s	Obj20_ChkExplode
0000BCE4 6B00                       		bmi.s	loc_8CA4
0000BCE6 4A68 0010                  		tst.w	$10(a0)
0000BCEA 6A00                       		bpl.s	Obj20_ChkExplode
0000BCEC 4468 0010                  		neg.w	$10(a0)
0000BCF0 6000                       		bra.s	Obj20_ChkExplode
0000BCF2                            ; ===========================================================================
0000BCF2                            
0000BCF2                            loc_8CA4:				; XREF: Obj20_Bounce
0000BCF2 4A68 0010                  		tst.w	$10(a0)
0000BCF6 6B00                       		bmi.s	Obj20_ChkExplode
0000BCF8 4468 0010                  		neg.w	$10(a0)
0000BCFC                            
0000BCFC                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000BCFC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000BD00 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000BD02 10BC 0024                  		move.b	#$24,0(a0)
0000BD06 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000BD0A 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000BD10 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000BD14                            ; ===========================================================================
0000BD14                            
0000BD14                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000BD14 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000BD18 6A00                       		bpl.s	Obj20_Display
0000BD1A 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000BD20 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000BD26                            
0000BD26                            Obj20_Display:
0000BD26 6100 0000                  		bsr.w	DisplaySprite
0000BD2A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000BD2E 0640 00E0                  		addi.w	#$E0,d0
0000BD32 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000BD36 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000BD3A 4E75                       		rts	
0000BD3C                            ; ===========================================================================
0000BD3C                            ; ---------------------------------------------------------------------------
0000BD3C                            ; Object 24 - explosion	from a destroyed monitor
0000BD3C                            ; ---------------------------------------------------------------------------
0000BD3C                            
0000BD3C                            Obj24:					; XREF: Obj_Index
0000BD3C 7000                       		moveq	#0,d0
0000BD3E 1028 0024                  		move.b	$24(a0),d0
0000BD42 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000BD46 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000BD4A                            ; ===========================================================================
0000BD4A 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000BD4C 0000                       		dc.w Obj24_Animate-Obj24_Index
0000BD4E                            ; ===========================================================================
0000BD4E                            
0000BD4E                            Obj24_Main:				; XREF: Obj24_Index
0000BD4E 5428 0024                  		addq.b	#2,$24(a0)
0000BD52 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000BD5A 317C 041C 0002             		move.w	#$41C,2(a0)
0000BD60 117C 0004 0001             		move.b	#4,1(a0)
0000BD66 117C 0001 0018             		move.b	#1,$18(a0)
0000BD6C 117C 0000 0020             		move.b	#0,$20(a0)
0000BD72 117C 000C 0019             		move.b	#$C,$19(a0)
0000BD78 117C 0009 001E             		move.b	#9,$1E(a0)
0000BD7E 117C 0000 001A             		move.b	#0,$1A(a0)
0000BD84 303C 00A5                  		move.w	#$A5,d0
0000BD88 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play explosion sound
0000BD8E                            
0000BD8E                            Obj24_Animate:				; XREF: Obj24_Index
0000BD8E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000BD92 6A00                       		bpl.s	Obj24_Display
0000BD94 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000BD9A 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000BD9E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000BDA4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000BDA8                            
0000BDA8                            Obj24_Display:
0000BDA8 6000 0000                  		bra.w	DisplaySprite
0000BDAC                            ; ===========================================================================
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC                            ; Object 27 - explosion	from a destroyed enemy
0000BDAC                            ; ---------------------------------------------------------------------------
0000BDAC                            
0000BDAC                            Obj27:					; XREF: Obj_Index
0000BDAC 7000                       		moveq	#0,d0
0000BDAE 1028 0024                  		move.b	$24(a0),d0
0000BDB2 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000BDB6 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000BDBA                            ; ===========================================================================
0000BDBA 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000BDBC 0000                       		dc.w Obj27_Main-Obj27_Index
0000BDBE 0000                       		dc.w Obj27_Animate-Obj27_Index
0000BDC0                            ; ===========================================================================
0000BDC0                            
0000BDC0                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000BDC0 5428 0024                  		addq.b	#2,$24(a0)
0000BDC4 6100 0000                  		bsr.w	SingleObjLoad
0000BDC8 6600                       		bne.s	Obj27_Main
0000BDCA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000BDCE 3368 0008 0008             		move.w	8(a0),8(a1)
0000BDD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BDDA 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000BDE0                            
0000BDE0                            Obj27_Main:				; XREF: Obj27_Index
0000BDE0 5428 0024                  		addq.b	#2,$24(a0)
0000BDE4 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000BDEC 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000BDF2 117C 0004 0001             		move.b	#4,1(a0)
0000BDF8 117C 0001 0018             		move.b	#1,$18(a0)
0000BDFE 117C 0000 0020             		move.b	#0,$20(a0)
0000BE04 117C 000C 0019             		move.b	#$C,$19(a0)
0000BE0A 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000BE10 117C 0000 001A             		move.b	#0,$1A(a0)
0000BE16 303C 00C1                  		move.w	#$C1,d0
0000BE1A 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000BE20                            
0000BE20                            Obj27_Animate:				; XREF: Obj27_Index
0000BE20 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000BE24 6A00                       		bpl.s	Obj27_Display
0000BE26 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000BE2C 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000BE30 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000BE36 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000BE3A                            
0000BE3A                            Obj27_Display:
0000BE3A 6000 0000                  		bra.w	DisplaySprite
0000BE3E                            ; ===========================================================================
0000BE3E                            ; ---------------------------------------------------------------------------
0000BE3E                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000BE3E                            ; ---------------------------------------------------------------------------
0000BE3E                            
0000BE3E                            Obj3F:					; XREF: Obj_Index
0000BE3E 7000                       		moveq	#0,d0
0000BE40 1028 0024                  		move.b	$24(a0),d0
0000BE44 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000BE48 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000BE4C                            ; ===========================================================================
0000BE4C 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000BE4E FFD4                       		dc.w Obj27_Animate-Obj3F_Index
0000BE50                            ; ===========================================================================
0000BE50                            
0000BE50                            Obj3F_Main:				; XREF: Obj3F_Index
0000BE50 5428 0024                  		addq.b	#2,$24(a0)
0000BE54 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000BE5C 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000BE62 117C 0004 0001             		move.b	#4,1(a0)
0000BE68 117C 0001 0018             		move.b	#1,$18(a0)
0000BE6E 117C 0000 0020             		move.b	#0,$20(a0)
0000BE74 117C 000C 0019             		move.b	#$C,$19(a0)
0000BE7A 117C 0007 001E             		move.b	#7,$1E(a0)
0000BE80 117C 0000 001A             		move.b	#0,$1A(a0)
0000BE86 303C 00C4                  		move.w	#$C4,d0
0000BE8A 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
0000BE90                            ; ===========================================================================
0000BE90                            Ani_obj1E:
0000BE90                            	include "_anim\obj1E.asm"
0000BE90                            ; ---------------------------------------------------------------------------
0000BE90                            ; Animation script - doors (SBZ)
0000BE90                            ; ---------------------------------------------------------------------------
0000BE90 0000                       		dc.w byte_8E4A-Ani_obj1E
0000BE92 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000BEAA 00                         		even
0000BEAA 00                         		even
0000BEAA                            
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            Map_obj1E:
0000BEAA                            	include "_maps\obj1E.asm"
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
0000BEAE 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000BEB2 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000BEB6 02                         byte_8E6E:	dc.b 2
0000BEB7 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000BEBC FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000BEC1 02                         byte_8E79:	dc.b 2
0000BEC2 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000BEC7 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000BECC 02                         byte_8E84:	dc.b 2
0000BECD F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000BED2 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000BED7 02                         byte_8E8F:	dc.b 2
0000BED8 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000BEDD F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000BEE2 01                         byte_8E9A:	dc.b 1
0000BEE3 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000BEE8 01                         byte_8EA0:	dc.b 1
0000BEE9 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000BEEE                            		even
0000BEEE                            		even
0000BEEE                            
0000BEEE                            ; ---------------------------------------------------------------------------
0000BEEE                            ; Sprite mappings - explosion
0000BEEE                            ; ---------------------------------------------------------------------------
0000BEEE                            Map_obj24:
0000BEEE                            	include "_maps\obj24.asm"
0000BEEE                            ; ---------------------------------------------------------------------------
0000BEEE                            ; Sprite mappings - explosion
0000BEEE                            ; ---------------------------------------------------------------------------
0000BEEE 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000BEF2 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000BEF6 01                         byte_8EAE:	dc.b 1
0000BEF7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000BEFC 01                         byte_8EB4:	dc.b 1
0000BEFD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000BF02 01                         byte_8EBA:	dc.b 1
0000BF03 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000BF08 01                         byte_8EC0:	dc.b 1
0000BF09 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000BF0E                            		even
0000BF0E                            		even
0000BF0E                            
0000BF0E                            ; ---------------------------------------------------------------------------
0000BF0E                            ; Sprite mappings - explosion
0000BF0E                            ; ---------------------------------------------------------------------------
0000BF0E 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000BF12 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000BF16 0000                       		dc.w byte_8EF7-Map_obj27
0000BF18 01                         byte_8ED0:	dc.b 1
0000BF19 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000BF1E 01                         byte_8ED6:	dc.b 1
0000BF1F F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000BF24 01                         byte_8EDC:	dc.b 1
0000BF25 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000BF2A 04                         byte_8EE2:	dc.b 4
0000BF2B EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000BF30 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000BF35 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000BF3A FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000BF3F 04                         byte_8EF7:	dc.b 4
0000BF40 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000BF45 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000BF4A 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000BF4F FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000BF54                            		even
0000BF54                            ; ---------------------------------------------------------------------------
0000BF54                            ; Sprite mappings - explosion from when	a boss is destroyed
0000BF54                            ; ---------------------------------------------------------------------------
0000BF54 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000BF56 0000                       		dc.w byte_8F16-Map_obj3F
0000BF58 0000                       		dc.w byte_8F1C-Map_obj3F
0000BF5A FFD6                       		dc.w byte_8EE2-Map_obj3F
0000BF5C FFEB                       		dc.w byte_8EF7-Map_obj3F
0000BF5E 01                         byte_8F16:	dc.b 1
0000BF5F F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000BF64 01                         byte_8F1C:	dc.b 1
0000BF65 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000BF6A                            		even
0000BF6A                            ; ===========================================================================
0000BF6A                            ; ---------------------------------------------------------------------------
0000BF6A                            ; Object 28 - animals
0000BF6A                            ; ---------------------------------------------------------------------------
0000BF6A                            
0000BF6A                            Obj28:					; XREF: Obj_Index
0000BF6A 7000                       		moveq	#0,d0
0000BF6C 1028 0024                  		move.b	$24(a0),d0
0000BF70 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000BF74 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000BF78                            ; ===========================================================================
0000BF78 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000BF7C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000BF80 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000BF84 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000BF88 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000BF8C 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000BF90 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000BF94 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000BF98 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000BF9C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000BFA0 0000                       		dc.w loc_92D6-Obj28_Index
0000BFA2                            
0000BFA2 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000BFAE                            
0000BFAE FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000BFB2 0000 0000                  		dc.l Map_obj28
0000BFB6 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000BFBA 0000 0000                  		dc.l Map_obj28a		; mappings address
0000BFBE FE80 FD00                  		dc.w $FE80, $FD00
0000BFC2 0000 0000                  		dc.l Map_obj28
0000BFC6 FEC0 FE80                  		dc.w $FEC0, $FE80
0000BFCA 0000 0000                  		dc.l Map_obj28a
0000BFCE FE40 FD00                  		dc.w $FE40, $FD00
0000BFD2 0000 0000                  		dc.l Map_obj28b
0000BFD6 FD00 FC00                  		dc.w $FD00, $FC00
0000BFDA 0000 0000                  		dc.l Map_obj28a
0000BFDE FD80 FC80                  		dc.w $FD80, $FC80
0000BFE2 0000 0000                  		dc.l Map_obj28b
0000BFE6                            
0000BFE6 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000BFF6 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000C006 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000C012                            
0000C012 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000C026 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000C03A 0000 0000                  		dc.l Map_obj28b
0000C03E                            
0000C03E 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000C050 0565 05B3                  		dc.w $565, $5B3
0000C054                            ; ===========================================================================
0000C054                            
0000C054                            Obj28_Ending:				; XREF: Obj28_Index
0000C054 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000C058 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000C05C 7000                       		moveq	#0,d0
0000C05E 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000C062 D040                       		add.w	d0,d0		; multiply d0 by 2
0000C064 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000C068 0440 0014                  		subi.w	#$14,d0
0000C06C 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000C072 D040                       		add.w	d0,d0
0000C074 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000C07A 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000C07E 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000C084 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000C08A 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000C090 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000C096 117C 000C 0016             		move.b	#$C,$16(a0)
0000C09C 117C 0004 0001             		move.b	#4,1(a0)
0000C0A2 08E8 0000 0001             		bset	#0,1(a0)
0000C0A8 117C 0006 0018             		move.b	#6,$18(a0)
0000C0AE 117C 0008 0019             		move.b	#8,$19(a0)
0000C0B4 117C 0007 001E             		move.b	#7,$1E(a0)
0000C0BA 6000 0000                  		bra.w	DisplaySprite
0000C0BE                            ; ===========================================================================
0000C0BE                            
0000C0BE                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000C0BE 5428 0024                  		addq.b	#2,$24(a0)
0000C0C2 4EB8 3710                  		jsr	RandomNumber
0000C0C6 0240 0001                  		andi.w	#1,d0
0000C0CA 7200                       		moveq	#0,d1
0000C0CC 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000C0D0 D241                       		add.w	d1,d1
0000C0D2 D240                       		add.w	d0,d1
0000C0D4 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000C0D8 1031 1000                  		move.b	(a1,d1.w),d0
0000C0DC 1140 0030                  		move.b	d0,$30(a0)
0000C0E0 E748                       		lsl.w	#3,d0
0000C0E2 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000C0E6 D2C0                       		adda.w	d0,a1
0000C0E8 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000C0EC 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000C0F0 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000C0F4 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000C0FA 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000C100 6700                       		beq.s	loc_90C0	; if yes, branch
0000C102 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000C108                            
0000C108                            loc_90C0:
0000C108 117C 000C 0016             		move.b	#$C,$16(a0)
0000C10E 117C 0004 0001             		move.b	#4,1(a0)
0000C114 08E8 0000 0001             		bset	#0,1(a0)
0000C11A 117C 0006 0018             		move.b	#6,$18(a0)
0000C120 117C 0008 0019             		move.b	#8,$19(a0)
0000C126 117C 0007 001E             		move.b	#7,$1E(a0)
0000C12C 117C 0002 001A             		move.b	#2,$1A(a0)
0000C132 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C138 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000C13C 6600                       		bne.s	loc_911C
0000C13E 6100 0000                  		bsr.w	SingleObjLoad
0000C142 6600                       		bne.s	Obj28_Display
0000C144                            ;		move.b	#$29,0(a1)	; load points object
0000C144 3368 0008 0008             		move.w	8(a0),8(a1)
0000C14A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C150 3028 003E                  		move.w	$3E(a0),d0
0000C154 E248                       		lsr.w	#1,d0
0000C156 1340 001A                  		move.b	d0,$1A(a1)
0000C15A                            
0000C15A                            Obj28_Display:
0000C15A 6000 0000                  		bra.w	DisplaySprite
0000C15E                            ; ===========================================================================
0000C15E                            
0000C15E                            loc_911C:
0000C15E 117C 0012 0024             		move.b	#$12,$24(a0)
0000C164 4268 0010                  		clr.w	$10(a0)
0000C168 6000 0000                  		bra.w	DisplaySprite
0000C16C                            ; ===========================================================================
0000C16C                            
0000C16C                            loc_912A:				; XREF: Obj28_Index
0000C16C 4A28 0001                  		tst.b	1(a0)
0000C170 6A00 0000                  		bpl.w	DeleteObject
0000C174 6100 0000                  		bsr.w	ObjectFall
0000C178 4A68 0012                  		tst.w	$12(a0)
0000C17C 6B00                       		bmi.s	loc_9180
0000C17E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C184 4A41                       		tst.w	d1
0000C186 6A00                       		bpl.s	loc_9180
0000C188 D368 000C                  		add.w	d1,$C(a0)
0000C18C 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000C192 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C198 117C 0001 001A             		move.b	#1,$1A(a0)
0000C19E 1028 0030                  		move.b	$30(a0),d0
0000C1A2 D000                       		add.b	d0,d0
0000C1A4 5800                       		addq.b	#4,d0
0000C1A6 1140 0024                  		move.b	d0,$24(a0)
0000C1AA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000C1AE 6700                       		beq.s	loc_9180
0000C1B0 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000C1B6 6700                       		beq.s	loc_9180
0000C1B8 4468 0010                  		neg.w	$10(a0)
0000C1BC 0868 0000 0001             		bchg	#0,1(a0)
0000C1C2                            
0000C1C2                            loc_9180:
0000C1C2 6000 0000                  		bra.w	DisplaySprite
0000C1C6                            ; ===========================================================================
0000C1C6                            
0000C1C6                            loc_9184:				; XREF: Obj28_Index
0000C1C6 6100 0000                  		bsr.w	ObjectFall
0000C1CA 117C 0001 001A             		move.b	#1,$1A(a0)
0000C1D0 4A68 0012                  		tst.w	$12(a0)
0000C1D4 6B00                       		bmi.s	loc_91AE
0000C1D6 117C 0000 001A             		move.b	#0,$1A(a0)
0000C1DC 4EB9 0000 0000             		jsr	ObjHitFloor
0000C1E2 4A41                       		tst.w	d1
0000C1E4 6A00                       		bpl.s	loc_91AE
0000C1E6 D368 000C                  		add.w	d1,$C(a0)
0000C1EA 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C1F0                            
0000C1F0                            loc_91AE:
0000C1F0 4A28 0028                  		tst.b	$28(a0)
0000C1F4 6600                       		bne.s	loc_9224
0000C1F6 4A28 0001                  		tst.b	1(a0)
0000C1FA 6A00 0000                  		bpl.w	DeleteObject
0000C1FE 6000 0000                  		bra.w	DisplaySprite
0000C202                            ; ===========================================================================
0000C202                            
0000C202                            loc_91C0:				; XREF: Obj28_Index
0000C202 6100 0000                  		bsr.w	SpeedToPos
0000C206 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C20C 4A68 0012                  		tst.w	$12(a0)
0000C210 6B00                       		bmi.s	loc_91FC
0000C212 4EB9 0000 0000             		jsr	ObjHitFloor
0000C218 4A41                       		tst.w	d1
0000C21A 6A00                       		bpl.s	loc_91FC
0000C21C D368 000C                  		add.w	d1,$C(a0)
0000C220 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C226 4A28 0028                  		tst.b	$28(a0)
0000C22A 6700                       		beq.s	loc_91FC
0000C22C 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000C232 6700                       		beq.s	loc_91FC
0000C234 4468 0010                  		neg.w	$10(a0)
0000C238 0868 0000 0001             		bchg	#0,1(a0)
0000C23E                            
0000C23E                            loc_91FC:
0000C23E 5328 001E                  		subq.b	#1,$1E(a0)
0000C242 6A00                       		bpl.s	loc_9212
0000C244 117C 0001 001E             		move.b	#1,$1E(a0)
0000C24A 5228 001A                  		addq.b	#1,$1A(a0)
0000C24E 0228 0001 001A             		andi.b	#1,$1A(a0)
0000C254                            
0000C254                            loc_9212:
0000C254 4A28 0028                  		tst.b	$28(a0)
0000C258 6600                       		bne.s	loc_9224
0000C25A 4A28 0001                  		tst.b	1(a0)
0000C25E 6A00 0000                  		bpl.w	DeleteObject
0000C262 6000 0000                  		bra.w	DisplaySprite
0000C266                            ; ===========================================================================
0000C266                            
0000C266                            loc_9224:				; XREF: Obj28_Index
0000C266 3028 0008                  		move.w	8(a0),d0
0000C26A 9078 D008                  		sub.w	($FFFFD008).w,d0
0000C26E 6500                       		bcs.s	loc_923C
0000C270 0440 0180                  		subi.w	#$180,d0
0000C274 6A00                       		bpl.s	loc_923C
0000C276 4A28 0001                  		tst.b	1(a0)
0000C27A 6A00 0000                  		bpl.w	DeleteObject
0000C27E                            
0000C27E                            loc_923C:
0000C27E 6000 0000                  		bra.w	DisplaySprite
0000C282                            ; ===========================================================================
0000C282                            
0000C282                            loc_9240:				; XREF: Obj28_Index
0000C282 4A28 0001                  		tst.b	1(a0)
0000C286 6A00 0000                  		bpl.w	DeleteObject
0000C28A 5368 0036                  		subq.w	#1,$36(a0)
0000C28E 6600 0000                  		bne.w	loc_925C
0000C292 117C 0002 0024             		move.b	#2,$24(a0)
0000C298 117C 0003 0018             		move.b	#3,$18(a0)
0000C29E                            
0000C29E                            loc_925C:
0000C29E 6000 0000                  		bra.w	DisplaySprite
0000C2A2                            ; ===========================================================================
0000C2A2                            
0000C2A2                            loc_9260:				; XREF: Obj28_Index
0000C2A2 6100 0000                  		bsr.w	sub_9404
0000C2A6 6400                       		bcc.s	loc_927C
0000C2A8 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000C2AE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C2B4 117C 000E 0024             		move.b	#$E,$24(a0)
0000C2BA 6000 FF46                  		bra.w	loc_91C0
0000C2BE                            ; ===========================================================================
0000C2BE                            
0000C2BE                            loc_927C:
0000C2BE 6000 FFA6                  		bra.w	loc_9224
0000C2C2                            ; ===========================================================================
0000C2C2                            
0000C2C2                            loc_9280:				; XREF: Obj28_Index
0000C2C2 6100 0000                  		bsr.w	sub_9404
0000C2C6 6A00                       		bpl.s	loc_92B6
0000C2C8 4268 0010                  		clr.w	$10(a0)
0000C2CC 4268 0032                  		clr.w	$32(a0)
0000C2D0 6100 0000                  		bsr.w	SpeedToPos
0000C2D4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C2DA 6100 0000                  		bsr.w	loc_93C4
0000C2DE 6100 0000                  		bsr.w	loc_93EC
0000C2E2 5328 001E                  		subq.b	#1,$1E(a0)
0000C2E6 6A00                       		bpl.s	loc_92B6
0000C2E8 117C 0001 001E             		move.b	#1,$1E(a0)
0000C2EE 5228 001A                  		addq.b	#1,$1A(a0)
0000C2F2 0228 0001 001A             		andi.b	#1,$1A(a0)
0000C2F8                            
0000C2F8                            loc_92B6:
0000C2F8 6000 FF6C                  		bra.w	loc_9224
0000C2FC                            ; ===========================================================================
0000C2FC                            
0000C2FC                            loc_92BA:				; XREF: Obj28_Index
0000C2FC 6100 0000                  		bsr.w	sub_9404
0000C300 6A00                       		bpl.s	loc_9310
0000C302 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000C308 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C30E 117C 0004 0024             		move.b	#4,$24(a0)
0000C314 6000 FEB0                  		bra.w	loc_9184
0000C318                            ; ===========================================================================
0000C318                            
0000C318                            loc_92D6:				; XREF: Obj28_Index
0000C318 6100 0000                  		bsr.w	ObjectFall
0000C31C 117C 0001 001A             		move.b	#1,$1A(a0)
0000C322 4A68 0012                  		tst.w	$12(a0)
0000C326 6B00                       		bmi.s	loc_9310
0000C328 117C 0000 001A             		move.b	#0,$1A(a0)
0000C32E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C334 4A41                       		tst.w	d1
0000C336 6A00                       		bpl.s	loc_9310
0000C338 4628 0029                  		not.b	$29(a0)
0000C33C 6600                       		bne.s	loc_9306
0000C33E 4468 0010                  		neg.w	$10(a0)
0000C342 0868 0000 0001             		bchg	#0,1(a0)
0000C348                            
0000C348                            loc_9306:
0000C348 D368 000C                  		add.w	d1,$C(a0)
0000C34C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C352                            
0000C352                            loc_9310:
0000C352 6000 FF12                  		bra.w	loc_9224
0000C356                            ; ===========================================================================
0000C356                            
0000C356                            loc_9314:				; XREF: Obj28_Index
0000C356 6100 0000                  		bsr.w	sub_9404
0000C35A 6A00                       		bpl.s	loc_932E
0000C35C 4268 0010                  		clr.w	$10(a0)
0000C360 4268 0032                  		clr.w	$32(a0)
0000C364 6100 0000                  		bsr.w	ObjectFall
0000C368 6100 0000                  		bsr.w	loc_93C4
0000C36C 6100 0000                  		bsr.w	loc_93EC
0000C370                            
0000C370                            loc_932E:
0000C370 6000 FEF4                  		bra.w	loc_9224
0000C374                            ; ===========================================================================
0000C374                            
0000C374                            loc_9332:				; XREF: Obj28_Index
0000C374 6100 0000                  		bsr.w	sub_9404
0000C378 6A00                       		bpl.s	loc_936C
0000C37A 6100 0000                  		bsr.w	ObjectFall
0000C37E 117C 0001 001A             		move.b	#1,$1A(a0)
0000C384 4A68 0012                  		tst.w	$12(a0)
0000C388 6B00                       		bmi.s	loc_936C
0000C38A 117C 0000 001A             		move.b	#0,$1A(a0)
0000C390 4EB9 0000 0000             		jsr	ObjHitFloor
0000C396 4A41                       		tst.w	d1
0000C398 6A00                       		bpl.s	loc_936C
0000C39A 4468 0010                  		neg.w	$10(a0)
0000C39E 0868 0000 0001             		bchg	#0,1(a0)
0000C3A4 D368 000C                  		add.w	d1,$C(a0)
0000C3A8 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C3AE                            
0000C3AE                            loc_936C:
0000C3AE 6000 FEB6                  		bra.w	loc_9224
0000C3B2                            ; ===========================================================================
0000C3B2                            
0000C3B2                            loc_9370:				; XREF: Obj28_Index
0000C3B2 6100 0000                  		bsr.w	sub_9404
0000C3B6 6A00                       		bpl.s	loc_93C0
0000C3B8 6100 0000                  		bsr.w	SpeedToPos
0000C3BC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C3C2 4A68 0012                  		tst.w	$12(a0)
0000C3C6 6B00                       		bmi.s	loc_93AA
0000C3C8 4EB9 0000 0000             		jsr	ObjHitFloor
0000C3CE 4A41                       		tst.w	d1
0000C3D0 6A00                       		bpl.s	loc_93AA
0000C3D2 4628 0029                  		not.b	$29(a0)
0000C3D6 6600                       		bne.s	loc_93A0
0000C3D8 4468 0010                  		neg.w	$10(a0)
0000C3DC 0868 0000 0001             		bchg	#0,1(a0)
0000C3E2                            
0000C3E2                            loc_93A0:
0000C3E2 D368 000C                  		add.w	d1,$C(a0)
0000C3E6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C3EC                            
0000C3EC                            loc_93AA:
0000C3EC 5328 001E                  		subq.b	#1,$1E(a0)
0000C3F0 6A00                       		bpl.s	loc_93C0
0000C3F2 117C 0001 001E             		move.b	#1,$1E(a0)
0000C3F8 5228 001A                  		addq.b	#1,$1A(a0)
0000C3FC 0228 0001 001A             		andi.b	#1,$1A(a0)
0000C402                            
0000C402                            loc_93C0:
0000C402 6000 FE62                  		bra.w	loc_9224
0000C406                            ; ===========================================================================
0000C406                            
0000C406                            loc_93C4:
0000C406 117C 0001 001A             		move.b	#1,$1A(a0)
0000C40C 4A68 0012                  		tst.w	$12(a0)
0000C410 6B00                       		bmi.s	locret_93EA
0000C412 117C 0000 001A             		move.b	#0,$1A(a0)
0000C418 4EB9 0000 0000             		jsr	ObjHitFloor
0000C41E 4A41                       		tst.w	d1
0000C420 6A00                       		bpl.s	locret_93EA
0000C422 D368 000C                  		add.w	d1,$C(a0)
0000C426 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000C42C                            
0000C42C                            locret_93EA:
0000C42C 4E75                       		rts	
0000C42E                            ; ===========================================================================
0000C42E                            
0000C42E                            loc_93EC:
0000C42E 08E8 0000 0001             		bset	#0,1(a0)
0000C434 3028 0008                  		move.w	8(a0),d0
0000C438 9078 D008                  		sub.w	($FFFFD008).w,d0
0000C43C 6400                       		bcc.s	locret_9402
0000C43E 08A8 0000 0001             		bclr	#0,1(a0)
0000C444                            
0000C444                            locret_9402:
0000C444 4E75                       		rts	
0000C446                            
0000C446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C446                            
0000C446                            
0000C446                            sub_9404:
0000C446 3038 D008                  		move.w	($FFFFD008).w,d0
0000C44A 9068 0008                  		sub.w	8(a0),d0
0000C44E 0440 00B8                  		subi.w	#$B8,d0
0000C452 4E75                       		rts	
0000C454                            ; End of function sub_9404
0000C454                            
0000C454                            ; ===========================================================================
0000C454                            ; ---------------------------------------------------------------------------
0000C454                            ; Object 29 - points that appear when you destroy something
0000C454                            ; ---------------------------------------------------------------------------
0000C454                            ;
0000C454                            ;Obj29:					; XREF: Obj_Index
0000C454                            ;		moveq	#0,d0
0000C454                            ;		move.b	$24(a0),d0
0000C454                            ;		move.w	Obj29_Index(pc,d0.w),d1
0000C454                            ;		jsr	Obj29_Index(pc,d1.w)
0000C454                            ;		bra.w	DisplaySprite
0000C454                            ; ===========================================================================
0000C454                            ;Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000C454                            ;		dc.w Obj29_Slower-Obj29_Index
0000C454                            ; ===========================================================================
0000C454                            ;
0000C454                            ;Obj29_Main:				; XREF: Obj29_Index
0000C454                            ;		addq.b	#2,$24(a0)
0000C454                            ;		move.l	#Map_obj29,4(a0)
0000C454                            ;		move.w	#$2797,2(a0)
0000C454                            ;		move.b	#4,1(a0)
0000C454                            ;		move.b	#1,$18(a0)
0000C454                            ;		move.b	#8,$19(a0)
0000C454                            ;		move.w	#-$300,$12(a0)	; move object upwards
0000C454                            ;
0000C454                            ;Obj29_Slower:				; XREF: Obj29_Index
0000C454                            ;		tst.w	$12(a0)		; is object moving?
0000C454                            ;		bpl.w	DeleteObject	; if not, branch
0000C454                            ;		bsr.w	SpeedToPos
0000C454                            ;		addi.w	#$18,$12(a0)	; reduce object	speed
0000C454                            ;		rts	
0000C454                            ; ===========================================================================
0000C454                            ; ---------------------------------------------------------------------------
0000C454                            ; Sprite mappings - animals
0000C454                            ; ---------------------------------------------------------------------------
0000C454                            Map_obj28:
0000C454                            	include "_maps\obj28.asm"
0000C454                            ; ---------------------------------------------------------------------------
0000C454                            ; Sprite mappings - animals
0000C454                            ; ---------------------------------------------------------------------------
0000C454 0000                       		dc.w byte_9472-Map_obj28
0000C456 0000                       		dc.w byte_9478-Map_obj28
0000C458 0000                       		dc.w byte_946C-Map_obj28
0000C45A 01                         byte_946C:	dc.b 1
0000C45B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000C460 01                         byte_9472:	dc.b 1
0000C461 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000C466 01                         byte_9478:	dc.b 1
0000C467 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000C46C                            		even
0000C46C                            		even
0000C46C                            
0000C46C                            Map_obj28a:
0000C46C                            	include "_maps\obj28a.asm"
0000C46C                            ; ---------------------------------------------------------------------------
0000C46C                            ; Sprite mappings - animals
0000C46C                            ; ---------------------------------------------------------------------------
0000C46C 0000                       		dc.w byte_948A-Map_obj28a
0000C46E 0000                       		dc.w byte_9490-Map_obj28a
0000C470 0000                       		dc.w byte_9484-Map_obj28a
0000C472 01                         byte_9484:	dc.b 1
0000C473 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000C478 01                         byte_948A:	dc.b 1
0000C479 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000C47E 01                         byte_9490:	dc.b 1
0000C47F FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000C484                            		even
0000C484                            		even
0000C484                            
0000C484                            Map_obj28b:
0000C484                            	include "_maps\obj28b.asm"
0000C484                            ; ---------------------------------------------------------------------------
0000C484                            ; Sprite mappings - animals
0000C484                            ; ---------------------------------------------------------------------------
0000C484 0000                       		dc.w byte_94A2-Map_obj28b
0000C486 0000                       		dc.w byte_94A8-Map_obj28b
0000C488 0000                       		dc.w byte_949C-Map_obj28b
0000C48A 01                         byte_949C:	dc.b 1
0000C48B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000C490 01                         byte_94A2:	dc.b 1
0000C491 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000C496 01                         byte_94A8:	dc.b 1
0000C497 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000C49C                            		even
0000C49C                            		even
0000C49C                            
0000C49C                            ; ---------------------------------------------------------------------------
0000C49C                            ; Sprite mappings - points that	appear when you	destroy	something
0000C49C                            ; ---------------------------------------------------------------------------
0000C49C                            ;Map_obj29:
0000C49C                            ;	include "_maps\obj29.asm"
0000C49C                            ;
0000C49C                            ; ===========================================================================
0000C49C                            ; ---------------------------------------------------------------------------
0000C49C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000C49C                            ; ---------------------------------------------------------------------------
0000C49C                            
0000C49C                            Obj1F:					; XREF: Obj_Index
0000C49C 7000                       		moveq	#0,d0
0000C49E 1028 0024                  		move.b	$24(a0),d0
0000C4A2 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000C4A6 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000C4AA                            ; ===========================================================================
0000C4AA 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000C4AC 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000C4AE 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000C4B0 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000C4B2 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000C4B4                            ; ===========================================================================
0000C4B4                            
0000C4B4                            Obj1F_Main:				; XREF: Obj1F_Index
0000C4B4 117C 0010 0016             		move.b	#$10,$16(a0)
0000C4BA 117C 0008 0017             		move.b	#8,$17(a0)
0000C4C0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000C4C8 317C 0400 0002             		move.w	#$400,2(a0)
0000C4CE 117C 0004 0001             		move.b	#4,1(a0)
0000C4D4 117C 0003 0018             		move.b	#3,$18(a0)
0000C4DA 117C 0006 0020             		move.b	#6,$20(a0)
0000C4E0 117C 0015 0019             		move.b	#$15,$19(a0)
0000C4E6 6100 0000                  		bsr.w	ObjectFall
0000C4EA 4EB9 0000 0000             		jsr	ObjHitFloor
0000C4F0 4A41                       		tst.w	d1
0000C4F2 6A00                       		bpl.s	locret_955A
0000C4F4 D368 000C                  		add.w	d1,$C(a0)
0000C4F8 1143 0026                  		move.b	d3,$26(a0)
0000C4FC 317C 0000 0012             		move.w	#0,$12(a0)
0000C502 5428 0024                  		addq.b	#2,$24(a0)
0000C506                            
0000C506                            locret_955A:
0000C506 4E75                       		rts	
0000C508                            ; ===========================================================================
0000C508                            
0000C508                            Obj1F_Action:				; XREF: Obj1F_Index
0000C508 7000                       		moveq	#0,d0
0000C50A 1028 0025                  		move.b	$25(a0),d0
0000C50E 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000C512 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000C516 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000C51C 6100 0000                  		bsr.w	AnimateSprite
0000C520 6000 0000                  		bra.w	MarkObjGone
0000C524                            ; ===========================================================================
0000C524 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000C526 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000C528                            ; ===========================================================================
0000C528                            
0000C528                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000C528 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000C52C 6A00                       		bpl.s	locret_95B6
0000C52E 4A28 0001                  		tst.b	1(a0)
0000C532 6A00                       		bpl.s	Obj1F_Move
0000C534 0868 0001 0032             		bchg	#1,$32(a0)
0000C53A 6600                       		bne.s	Obj1F_MakeFire
0000C53C                            
0000C53C                            Obj1F_Move:
0000C53C 5428 0025                  		addq.b	#2,$25(a0)
0000C540 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000C546 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000C54C 6100 0000                  		bsr.w	Obj1F_SetAni
0000C550 5600                       		addq.b	#3,d0
0000C552 1140 001C                  		move.b	d0,$1C(a0)
0000C556 0868 0000 0022             		bchg	#0,$22(a0)
0000C55C 6600                       		bne.s	locret_95B6
0000C55E 4468 0010                  		neg.w	$10(a0)		; change direction
0000C562                            
0000C562                            locret_95B6:
0000C562 4E75                       		rts	
0000C564                            ; ===========================================================================
0000C564                            
0000C564                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000C564 317C 003B 0030             		move.w	#$3B,$30(a0)
0000C56A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000C570 6100 0000                  		bsr.w	SingleObjLoad
0000C574 6600                       		bne.s	Obj1F_MakeFire2
0000C576 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000C57A 137C 0006 0024             		move.b	#6,$24(a1)
0000C580 3368 0008 0008             		move.w	8(a0),8(a1)
0000C586 0469 0010 0008             		subi.w	#$10,8(a1)
0000C58C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C592 337C FF00 0010             		move.w	#-$100,$10(a1)
0000C598                            
0000C598                            Obj1F_MakeFire2:
0000C598 6100 0000                  		bsr.w	SingleObjLoad
0000C59C 6600                       		bne.s	locret_9618
0000C59E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000C5A2 137C 0006 0024             		move.b	#6,$24(a1)
0000C5A8 3368 0008 0008             		move.w	8(a0),8(a1)
0000C5AE 0669 0010 0008             		addi.w	#$10,8(a1)
0000C5B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C5BA 337C 0100 0010             		move.w	#$100,$10(a1)
0000C5C0                            
0000C5C0                            locret_9618:
0000C5C0 4E75                       		rts	
0000C5C2                            ; ===========================================================================
0000C5C2                            
0000C5C2                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000C5C2 5368 0030                  		subq.w	#1,$30(a0)
0000C5C6 6B00                       		bmi.s	loc_966E
0000C5C8 6100 0000                  		bsr.w	SpeedToPos
0000C5CC 0868 0000 0032             		bchg	#0,$32(a0)
0000C5D2 6600                       		bne.s	loc_9654
0000C5D4 3628 0008                  		move.w	8(a0),d3
0000C5D8 0643 0010                  		addi.w	#$10,d3
0000C5DC 0828 0000 0022             		btst	#0,$22(a0)
0000C5E2 6700                       		beq.s	loc_9640
0000C5E4 0443 0020                  		subi.w	#$20,d3
0000C5E8                            
0000C5E8                            loc_9640:
0000C5E8 4EB9 0000 0000             		jsr	ObjHitFloor2
0000C5EE 0C41 FFF8                  		cmpi.w	#-8,d1
0000C5F2 6D00                       		blt.s	loc_966E
0000C5F4 0C41 000C                  		cmpi.w	#$C,d1
0000C5F8 6C00                       		bge.s	loc_966E
0000C5FA 4E75                       		rts	
0000C5FC                            ; ===========================================================================
0000C5FC                            
0000C5FC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000C5FC 4EB9 0000 0000             		jsr	ObjHitFloor
0000C602 D368 000C                  		add.w	d1,$C(a0)
0000C606 1143 0026                  		move.b	d3,$26(a0)
0000C60A 6100 0000                  		bsr.w	Obj1F_SetAni
0000C60E 5600                       		addq.b	#3,d0
0000C610 1140 001C                  		move.b	d0,$1C(a0)
0000C614 4E75                       		rts	
0000C616                            ; ===========================================================================
0000C616                            
0000C616                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000C616 5528 0025                  		subq.b	#2,$25(a0)
0000C61A 317C 003B 0030             		move.w	#59,$30(a0)
0000C620 317C 0000 0010             		move.w	#0,$10(a0)
0000C626 6100 0000                  		bsr.w	Obj1F_SetAni
0000C62A 1140 001C                  		move.b	d0,$1C(a0)
0000C62E 4E75                       		rts	
0000C630                            ; ---------------------------------------------------------------------------
0000C630                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000C630                            ; ---------------------------------------------------------------------------
0000C630                            
0000C630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C630                            
0000C630                            
0000C630                            Obj1F_SetAni:				; XREF: loc_966E
0000C630 7000                       		moveq	#0,d0
0000C632 1628 0026                  		move.b	$26(a0),d3
0000C636 6B00                       		bmi.s	loc_96A4
0000C638 0C03 0006                  		cmpi.b	#6,d3
0000C63C 6500                       		bcs.s	locret_96A2
0000C63E 7001                       		moveq	#1,d0
0000C640 0828 0000 0022             		btst	#0,$22(a0)
0000C646 6600                       		bne.s	locret_96A2
0000C648 7002                       		moveq	#2,d0
0000C64A                            
0000C64A                            locret_96A2:
0000C64A 4E75                       		rts	
0000C64C                            ; ===========================================================================
0000C64C                            
0000C64C                            loc_96A4:				; XREF: Obj1F_SetAni
0000C64C 0C03 00FA                  		cmpi.b	#-6,d3
0000C650 6200                       		bhi.s	locret_96B6
0000C652 7002                       		moveq	#2,d0
0000C654 0828 0000 0022             		btst	#0,$22(a0)
0000C65A 6600                       		bne.s	locret_96B6
0000C65C 7001                       		moveq	#1,d0
0000C65E                            
0000C65E                            locret_96B6:
0000C65E 4E75                       		rts	
0000C660                            ; End of function Obj1F_SetAni
0000C660                            
0000C660                            ; ===========================================================================
0000C660                            
0000C660                            Obj1F_Delete:				; XREF: Obj1F_Index
0000C660 6100 0000                  		bsr.w	DeleteObject
0000C664 4E75                       		rts	
0000C666                            ; ===========================================================================
0000C666                            ; ---------------------------------------------------------------------------
0000C666                            ; Sub-object - missile that the	Crabmeat throws
0000C666                            ; ---------------------------------------------------------------------------
0000C666                            
0000C666                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000C666 5428 0024                  		addq.b	#2,$24(a0)
0000C66A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000C672 317C 0400 0002             		move.w	#$400,2(a0)
0000C678 117C 0004 0001             		move.b	#4,1(a0)
0000C67E 117C 0003 0018             		move.b	#3,$18(a0)
0000C684 117C 0087 0020             		move.b	#$87,$20(a0)
0000C68A 117C 0008 0019             		move.b	#8,$19(a0)
0000C690 317C FC00 0012             		move.w	#-$400,$12(a0)
0000C696 117C 0007 001C             		move.b	#7,$1C(a0)
0000C69C                            
0000C69C                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000C69C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000C6A2 6100 0000                  		bsr.w	AnimateSprite
0000C6A6 6100 0000                  		bsr.w	ObjectFall
0000C6AA 6100 0000                  		bsr.w	DisplaySprite
0000C6AE 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000C6B2 0640 00E0                  		addi.w	#$E0,d0
0000C6B6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000C6BA 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000C6BC 4E75                       		rts	
0000C6BE                            ; ===========================================================================
0000C6BE                            
0000C6BE                            Obj1F_Delete2:
0000C6BE 6000 0000                  		bra.w	DeleteObject
0000C6C2                            ; ===========================================================================
0000C6C2                            Ani_obj1F:
0000C6C2                            	include "_anim\obj1F.asm"
0000C6C2                            ; ---------------------------------------------------------------------------
0000C6C2                            ; Animation script - Crabmeat enemy
0000C6C2                            ; ---------------------------------------------------------------------------
0000C6C2 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000C6C8 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000C6CE 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000C6D2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000C6D6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000C6DA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000C6DE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000C6E4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000C6EA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000C6F0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000C6F4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000C6F8                            		even
0000C6F8                            		even
0000C6F8                            
0000C6F8                            ; ---------------------------------------------------------------------------
0000C6F8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000C6F8                            ; ---------------------------------------------------------------------------
0000C6F8                            Map_obj1F:
0000C6F8                            	include "_maps\obj1F.asm"
0000C6F8                            ; ---------------------------------------------------------------------------
0000C6F8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000C6F8                            ; ---------------------------------------------------------------------------
0000C6F8 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000C6FC 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000C700 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000C704 0000                       		dc.w byte_97D7-Map_obj1F
0000C706 04                         byte_975E:	dc.b 4
0000C707 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000C70C F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000C711 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000C716 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000C71B 04                         byte_9773:	dc.b 4
0000C71C F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000C721 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000C726 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000C72B 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000C730 04                         byte_9788:	dc.b 4
0000C731 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000C736 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000C73B FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000C740 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000C745 04                         byte_979D:	dc.b 4
0000C746 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000C74B EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000C750 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000C755 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000C75A 06                         byte_97B2:	dc.b 6
0000C75B F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000C760 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000C765 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000C76A F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000C76F 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000C774 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000C779 01                         byte_97D1:	dc.b 1
0000C77A F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000C77F 01                         byte_97D7:	dc.b 1
0000C780 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000C786 00                         		even
0000C786 00                         		even
0000C786                            
0000C786                            ; ===========================================================================
0000C786                            ; ---------------------------------------------------------------------------
0000C786                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000C786                            ; ---------------------------------------------------------------------------
0000C786                            
0000C786                            Obj22:					; XREF: Obj_Index
0000C786 7000                       		moveq	#0,d0
0000C788 1028 0024                  		move.b	$24(a0),d0
0000C78C 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000C790 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000C794                            ; ===========================================================================
0000C794 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000C796 0000                       		dc.w Obj22_Action-Obj22_Index
0000C798 0000                       		dc.w Obj22_Delete-Obj22_Index
0000C79A                            ; ===========================================================================
0000C79A                            
0000C79A                            Obj22_Main:				; XREF: Obj22_Index
0000C79A 5428 0024                  		addq.b	#2,$24(a0)
0000C79E 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000C7A6 317C 0444 0002             		move.w	#$444,2(a0)
0000C7AC 117C 0004 0001             		move.b	#4,1(a0)
0000C7B2 117C 0003 0018             		move.b	#3,$18(a0)
0000C7B8 117C 0008 0020             		move.b	#8,$20(a0)
0000C7BE 117C 0018 0019             		move.b	#$18,$19(a0)
0000C7C4                            
0000C7C4                            Obj22_Action:				; XREF: Obj22_Index
0000C7C4 7000                       		moveq	#0,d0
0000C7C6 1028 0025                  		move.b	$25(a0),d0
0000C7CA 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000C7CE 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000C7D2 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000C7D8 6100 0000                  		bsr.w	AnimateSprite
0000C7DC 6000 0000                  		bra.w	MarkObjGone
0000C7E0                            ; ===========================================================================
0000C7E0 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000C7E2 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000C7E4                            ; ===========================================================================
0000C7E4                            
0000C7E4                            Obj22_Move:				; XREF: Obj22_Index2
0000C7E4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000C7E8 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000C7EA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000C7F0 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000C7F2 5428 0025                  		addq.b	#2,$25(a0)
0000C7F6 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000C7FC 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000C802 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000C808 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000C80E 6600                       		bne.s	locret_986C	; if not, branch
0000C810 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000C814                            
0000C814                            locret_986C:
0000C814 4E75                       		rts	
0000C816                            ; ===========================================================================
0000C816                            
0000C816                            Obj22_Fire:				; XREF: Obj22_Move
0000C816 6100 0000                  		bsr.w	SingleObjLoad
0000C81A 6600                       		bne.s	locret_98D0
0000C81C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000C820 3368 0008 0008             		move.w	8(a0),8(a1)
0000C826 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C82C 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000C832 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000C838 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000C83E 303C 0018                  		move.w	#$18,d0
0000C842 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000C848 6600                       		bne.s	loc_98AA	; if not, branch
0000C84A 4440                       		neg.w	d0
0000C84C 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000C850                            
0000C850                            loc_98AA:
0000C850 D169 0008                  		add.w	d0,8(a1)
0000C854 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000C85A 337C 000E 0032             		move.w	#$E,$32(a1)
0000C860 2348 003C                  		move.l	a0,$3C(a1)
0000C864 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000C86A 317C 003B 0032             		move.w	#$3B,$32(a0)
0000C870 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000C876                            
0000C876                            locret_98D0:
0000C876 4E75                       		rts	
0000C878                            ; ===========================================================================
0000C878                            
0000C878                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000C878 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000C87C 6B00                       		bmi.s	Obj22_ChgDir
0000C87E 6100 0000                  		bsr.w	SpeedToPos
0000C882 4A28 0034                  		tst.b	$34(a0)
0000C886 6600                       		bne.s	locret_992A
0000C888 3038 D008                  		move.w	($FFFFD008).w,d0
0000C88C 9068 0008                  		sub.w	8(a0),d0
0000C890 6A00                       		bpl.s	Obj22_SetNrSonic
0000C892 4440                       		neg.w	d0
0000C894                            
0000C894                            Obj22_SetNrSonic:
0000C894 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000C898 6400                       		bcc.s	locret_992A	; if not, branch
0000C89A 4A28 0001                  		tst.b	1(a0)
0000C89E 6A00                       		bpl.s	locret_992A
0000C8A0 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000C8A6 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000C8AC 6000                       		bra.s	Obj22_Stop
0000C8AE                            ; ===========================================================================
0000C8AE                            
0000C8AE                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000C8AE 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000C8B4 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000C8BA 317C 003B 0032             		move.w	#59,$32(a0)
0000C8C0                            
0000C8C0                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000C8C0 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000C8C4 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000C8CA 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000C8D0                            
0000C8D0                            locret_992A:
0000C8D0 4E75                       		rts	
0000C8D2                            ; ===========================================================================
0000C8D2                            
0000C8D2                            Obj22_Delete:				; XREF: Obj22_Index
0000C8D2 6100 0000                  		bsr.w	DeleteObject
0000C8D6 4E75                       		rts	
0000C8D8                            ; ===========================================================================
0000C8D8                            ; ---------------------------------------------------------------------------
0000C8D8                            ; Object 23 - missile that Buzz	Bomber throws
0000C8D8                            ; ---------------------------------------------------------------------------
0000C8D8                            
0000C8D8                            Obj23:					; XREF: Obj_Index
0000C8D8 7000                       		moveq	#0,d0
0000C8DA 1028 0024                  		move.b	$24(a0),d0
0000C8DE 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000C8E2 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000C8E6                            ; ===========================================================================
0000C8E6 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000C8E8 0000                       		dc.w Obj23_Animate-Obj23_Index
0000C8EA 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000C8EC 0000                       		dc.w Obj23_Delete-Obj23_Index
0000C8EE 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000C8F0                            ; ===========================================================================
0000C8F0                            
0000C8F0                            Obj23_Main:				; XREF: Obj23_Index
0000C8F0 5368 0032                  		subq.w	#1,$32(a0)
0000C8F4 6A00                       		bpl.s	Obj23_ChkCancel
0000C8F6 5428 0024                  		addq.b	#2,$24(a0)
0000C8FA 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000C902 317C 2444 0002             		move.w	#$2444,2(a0)
0000C908 117C 0004 0001             		move.b	#4,1(a0)
0000C90E 117C 0003 0018             		move.b	#3,$18(a0)
0000C914 117C 0008 0019             		move.b	#8,$19(a0)
0000C91A 0228 0003 0022             		andi.b	#3,$22(a0)
0000C920 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000C924 6700                       		beq.s	Obj23_Animate	; if not, branch
0000C926 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000C92C 117C 0087 0020             		move.b	#$87,$20(a0)
0000C932 117C 0001 001C             		move.b	#1,$1C(a0)
0000C938 6000                       		bra.s	Obj23_Animate2
0000C93A                            ; ===========================================================================
0000C93A                            
0000C93A                            Obj23_Animate:				; XREF: Obj23_Index
0000C93A 6100                       		bsr.s	Obj23_ChkCancel
0000C93C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000C942 6100 0000                  		bsr.w	AnimateSprite
0000C946 6000 0000                  		bra.w	DisplaySprite
0000C94A                            ; ---------------------------------------------------------------------------
0000C94A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000C94A                            ; destroyed, and if it has, then cancel	the missile
0000C94A                            ; ---------------------------------------------------------------------------
0000C94A                            
0000C94A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C94A                            
0000C94A                            
0000C94A                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000C94A 2268 003C                  		movea.l	$3C(a0),a1
0000C94E 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000C952 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000C954 4E75                       		rts	
0000C956                            ; End of function Obj23_ChkCancel
0000C956                            
0000C956                            ; ===========================================================================
0000C956                            
0000C956                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000C956 0828 0007 0022             		btst	#7,$22(a0)
0000C95C 6600                       		bne.s	Obj23_Explode
0000C95E 117C 0087 0020             		move.b	#$87,$20(a0)
0000C964 117C 0001 001C             		move.b	#1,$1C(a0)
0000C96A 6100 0000                  		bsr.w	SpeedToPos
0000C96E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000C974 6100 0000                  		bsr.w	AnimateSprite
0000C978 6100 0000                  		bsr.w	DisplaySprite
0000C97C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000C980 0640 00E0                  		addi.w	#$E0,d0
0000C984 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000C988 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000C98A 4E75                       		rts	
0000C98C                            ; ===========================================================================
0000C98C                            
0000C98C                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000C98C 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000C990 117C 0000 0024             		move.b	#0,$24(a0)
0000C996 6000 F3A4                  		bra.w	Obj24
0000C99A                            ; ===========================================================================
0000C99A                            
0000C99A                            Obj23_Delete:				; XREF: Obj23_Index
0000C99A 6100 0000                  		bsr.w	DeleteObject
0000C99E 4E75                       		rts	
0000C9A0                            ; ===========================================================================
0000C9A0                            
0000C9A0                            Obj23_FromNewt:				; XREF: Obj23_Index
0000C9A0 4A28 0001                  		tst.b	1(a0)
0000C9A4 6AF4                       		bpl.s	Obj23_Delete
0000C9A6 6100 0000                  		bsr.w	SpeedToPos
0000C9AA                            
0000C9AA                            Obj23_Animate2:				; XREF: Obj23_Main
0000C9AA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000C9B0 6100 0000                  		bsr.w	AnimateSprite
0000C9B4 6100 0000                  		bsr.w	DisplaySprite
0000C9B8 4E75                       		rts	
0000C9BA                            ; ===========================================================================
0000C9BA                            Ani_obj22:
0000C9BA                            	include "_anim\obj22.asm"
0000C9BA                            ; ---------------------------------------------------------------------------
0000C9BA                            ; Animation script - Buzz Bomber enemy
0000C9BA                            ; ---------------------------------------------------------------------------
0000C9BA 0000                       		dc.w byte_9A1E-Ani_obj22
0000C9BC 0000                       		dc.w byte_9A22-Ani_obj22
0000C9BE 0000                       		dc.w byte_9A26-Ani_obj22
0000C9C0 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000C9C4 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000C9C8 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000C9CC                            		even
0000C9CC                            		even
0000C9CC                            
0000C9CC                            Ani_obj23:
0000C9CC                            	include "_anim\obj23.asm"
0000C9CC                            ; ---------------------------------------------------------------------------
0000C9CC                            ; Animation script - missile that Buzz Bomber throws
0000C9CC                            ; ---------------------------------------------------------------------------
0000C9CC 0000                       		dc.w byte_9A2E-Ani_obj23
0000C9CE 0000                       		dc.w byte_9A32-Ani_obj23
0000C9D0 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000C9D4 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000C9D8                            		even
0000C9D8                            		even
0000C9D8                            
0000C9D8                            ; ---------------------------------------------------------------------------
0000C9D8                            ; Sprite mappings - Buzz Bomber	enemy
0000C9D8                            ; ---------------------------------------------------------------------------
0000C9D8                            Map_obj22:
0000C9D8                            	include "_maps\obj22.asm"
0000C9D8                            ; ---------------------------------------------------------------------------
0000C9D8                            ; Sprite mappings - Buzz Bomber	enemy
0000C9D8                            ; ---------------------------------------------------------------------------
0000C9D8 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000C9DC 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000C9E0 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000C9E4 06                         byte_9A42:	dc.b 6
0000C9E5 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000C9EA F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000C9EF 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000C9F4 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000C9F9 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000C9FE F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000CA03 06                         byte_9A61:	dc.b 6
0000CA04 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000CA09 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000CA0E 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000CA13 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000CA18 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000CA1D F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000CA22 07                         byte_9A80:	dc.b 7
0000CA23 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000CA28 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000CA2D F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000CA32 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000CA37 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000CA3C F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000CA41 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000CA46 07                         byte_9AA4:	dc.b 7
0000CA47 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000CA4C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000CA51 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000CA56 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000CA5B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000CA60 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000CA65 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000CA6A 06                         byte_9AC8:	dc.b 6
0000CA6B F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000CA70 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000CA75 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000CA7A 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000CA7F F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000CA84 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000CA89 04                         byte_9AE7:	dc.b 4
0000CA8A F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000CA8F 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000CA94 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000CA99 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000CA9E F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000CAA3 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000CAA8                            		even
0000CAA8                            		even
0000CAA8                            
0000CAA8                            ; ---------------------------------------------------------------------------
0000CAA8                            ; Sprite mappings - missile that Buzz Bomber throws
0000CAA8                            ; ---------------------------------------------------------------------------
0000CAA8                            Map_obj23:
0000CAA8                            	include "_maps\obj23.asm"
0000CAA8                            ; ---------------------------------------------------------------------------
0000CAA8                            ; Sprite mappings - missile that Buzz Bomber throws
0000CAA8                            ; ---------------------------------------------------------------------------
0000CAA8 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000CAAC 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000CAB0 01                         byte_9B0E:	dc.b 1
0000CAB1 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000CAB6 01                         byte_9B14:	dc.b 1
0000CAB7 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000CABC 01                         byte_9B1A:	dc.b 1
0000CABD F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000CAC2 01                         byte_9B20:	dc.b 1
0000CAC3 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000CAC8                            		even
0000CAC8                            		even
0000CAC8                            
0000CAC8                            ; ===========================================================================
0000CAC8                            ; ---------------------------------------------------------------------------
0000CAC8                            ; Object 25 - rings
0000CAC8                            ; ---------------------------------------------------------------------------
0000CAC8                            
0000CAC8                            Obj25:					; XREF: Obj_Index
0000CAC8 7000                       		moveq	#0,d0
0000CACA 1028 0024                  		move.b	$24(a0),d0
0000CACE 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000CAD2 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000CAD6                            ; ===========================================================================
0000CAD6 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000CAD8 0000                       		dc.w Obj25_Animate-Obj25_Index
0000CADA 0000                       		dc.w Obj25_Collect-Obj25_Index
0000CADC 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000CADE 0000                       		dc.w Obj25_Delete-Obj25_Index
0000CAE0                            ; ---------------------------------------------------------------------------
0000CAE0                            ; Distances between rings (format: horizontal, vertical)
0000CAE0                            ; ---------------------------------------------------------------------------
0000CAE0 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000CAE2 1800                       		dc.b $18, 0		; horizontal normal
0000CAE4 2000                       		dc.b $20, 0		; horizontal wide
0000CAE6 0010                       		dc.b 0,	$10		; vertical tight
0000CAE8 0018                       		dc.b 0,	$18		; vertical normal
0000CAEA 0020                       		dc.b 0,	$20		; vertical wide
0000CAEC 1010                       		dc.b $10, $10		; diagonal
0000CAEE 1818                       		dc.b $18, $18
0000CAF0 2020                       		dc.b $20, $20
0000CAF2 F010                       		dc.b $F0, $10
0000CAF4 E818                       		dc.b $E8, $18
0000CAF6 E020                       		dc.b $E0, $20
0000CAF8 1008                       		dc.b $10, 8
0000CAFA 1810                       		dc.b $18, $10
0000CAFC F008                       		dc.b $F0, 8
0000CAFE E810                       		dc.b $E8, $10
0000CB00                            ; ===========================================================================
0000CB00                            
0000CB00                            Obj25_Main:				; XREF: Obj25_Index
0000CB00 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CB04 7000                       		moveq	#0,d0
0000CB06 1028 0023                  		move.b	$23(a0),d0
0000CB0A 45F2 0002                  		lea	2(a2,d0.w),a2
0000CB0E 1812                       		move.b	(a2),d4
0000CB10 1228 0028                  		move.b	$28(a0),d1
0000CB14 1001                       		move.b	d1,d0
0000CB16 0241 0007                  		andi.w	#7,d1
0000CB1A 0C41 0007                  		cmpi.w	#7,d1
0000CB1E 6600                       		bne.s	loc_9B80
0000CB20 7206                       		moveq	#6,d1
0000CB22                            
0000CB22                            loc_9B80:
0000CB22 4841                       		swap	d1
0000CB24 323C 0000                  		move.w	#0,d1
0000CB28 E808                       		lsr.b	#4,d0
0000CB2A D040                       		add.w	d0,d0
0000CB2C 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000CB30 4885                       		ext.w	d5
0000CB32 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000CB36 4886                       		ext.w	d6
0000CB38 2248                       		movea.l	a0,a1
0000CB3A 3428 0008                  		move.w	8(a0),d2
0000CB3E 3628 000C                  		move.w	$C(a0),d3
0000CB42 E20C                       		lsr.b	#1,d4
0000CB44 6500                       		bcs.s	loc_9C02
0000CB46 0892 0007                  		bclr	#7,(a2)
0000CB4A 6000                       		bra.s	loc_9BBA
0000CB4C                            ; ===========================================================================
0000CB4C                            
0000CB4C                            Obj25_MakeRings:
0000CB4C 4841                       		swap	d1
0000CB4E E20C                       		lsr.b	#1,d4
0000CB50 6500                       		bcs.s	loc_9C02
0000CB52 0892 0007                  		bclr	#7,(a2)
0000CB56 6100 0000                  		bsr.w	SingleObjLoad
0000CB5A 6600                       		bne.s	loc_9C0E
0000CB5C                            
0000CB5C                            loc_9BBA:				; XREF: Obj25_Main
0000CB5C 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000CB60 5429 0024                  		addq.b	#2,$24(a1)
0000CB64 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000CB68 3368 0008 0032             		move.w	8(a0),$32(a1)
0000CB6E 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000CB72 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000CB7A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000CB80 137C 0004 0001             		move.b	#4,1(a1)
0000CB86 137C 0002 0018             		move.b	#2,$18(a1)
0000CB8C 137C 0047 0020             		move.b	#$47,$20(a1)
0000CB92 137C 0008 0019             		move.b	#8,$19(a1)
0000CB98 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000CB9E 1341 0034                  		move.b	d1,$34(a1)
0000CBA2                            
0000CBA2                            loc_9C02:
0000CBA2 5241                       		addq.w	#1,d1
0000CBA4 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000CBA6 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000CBA8 4841                       		swap	d1
0000CBAA 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000CBAE                            
0000CBAE                            loc_9C0E:
0000CBAE 0812 0000                  		btst	#0,(a2)
0000CBB2 6600 0000                  		bne.w	DeleteObject
0000CBB6                            
0000CBB6                            Obj25_Animate:				; XREF: Obj25_Index
0000CBB6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000CBBC 6100 0000                  		bsr.w	DisplaySprite
0000CBC0 3028 0032                  		move.w	$32(a0),d0
0000CBC4 0240 FF80                  		andi.w	#$FF80,d0
0000CBC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000CBCC 0441 0080                  		subi.w	#$80,d1
0000CBD0 0241 FF80                  		andi.w	#$FF80,d1
0000CBD4 9041                       		sub.w	d1,d0
0000CBD6 0C40 0280                  		cmpi.w	#$280,d0
0000CBDA 6200                       		bhi.s	Obj25_Delete
0000CBDC 4E75                       		rts	
0000CBDE                            ; ===========================================================================
0000CBDE                            
0000CBDE                            Obj25_Collect:				; XREF: Obj25_Index
0000CBDE 5428 0024                  		addq.b	#2,$24(a0)
0000CBE2 117C 0000 0020             		move.b	#0,$20(a0)
0000CBE8 117C 0001 0018             		move.b	#1,$18(a0)
0000CBEE 6100 0000                  		bsr.w	CollectRing
0000CBF2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CBF6 7000                       		moveq	#0,d0
0000CBF8 1028 0023                  		move.b	$23(a0),d0
0000CBFC 1228 0034                  		move.b	$34(a0),d1
0000CC00 03F2 0002                  		bset	d1,2(a2,d0.w)
0000CC04                            
0000CC04                            Obj25_Sparkle:				; XREF: Obj25_Index
0000CC04 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000CC0A 6100 0000                  		bsr.w	AnimateSprite
0000CC0E 6000 0000                  		bra.w	DisplaySprite
0000CC12                            ; ===========================================================================
0000CC12                            
0000CC12                            Obj25_Delete:				; XREF: Obj25_Index
0000CC12 6000 0000                  		bra.w	DeleteObject
0000CC16                            
0000CC16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CC16                            
0000CC16                            
0000CC16                            CollectRing:				; XREF: Obj25_Collect
0000CC16 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000CC1A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000CC20 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000CC24 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000CC2A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000CC2C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000CC32 6700                       		beq.s	loc_9CA4
0000CC34 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000CC3A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000CC3C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000CC42 6600                       		bne.s	Obj25_PlaySnd
0000CC44                            
0000CC44                            loc_9CA4:
0000CC44 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000CC48 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000CC4C 303C 0088                  		move.w	#$88,d0		; play extra life music
0000CC50                            
0000CC50                            Obj25_PlaySnd:
0000CC50 4EF9 0000 110E             		jmp	(PlaySound_Special).l
0000CC56                            ; End of function CollectRing
0000CC56                            
0000CC56                            ; ===========================================================================
0000CC56                            ; ---------------------------------------------------------------------------
0000CC56                            ; Object 37 - rings flying out of Sonic	when he's hit
0000CC56                            ; ---------------------------------------------------------------------------
0000CC56                            
0000CC56                            Obj37:					; XREF: Obj_Index
0000CC56 7000                       		moveq	#0,d0
0000CC58 1028 0024                  		move.b	$24(a0),d0
0000CC5C 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000CC60 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000CC64                            ; ===========================================================================
0000CC64 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000CC66 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000CC68 0000                       		dc.w Obj37_Collect-Obj37_Index
0000CC6A 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000CC6C 0000                       		dc.w Obj37_Delete-Obj37_Index
0000CC6E                            ; ===========================================================================
0000CC6E                            
0000CC6E                            Obj37_CountRings:			; XREF: Obj37_Index
0000CC6E 2248                       		movea.l	a0,a1
0000CC70 7A00                       		moveq	#0,d5
0000CC72 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000CC76 7020                       		moveq	#32,d0
0000CC78 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000CC7A 6500                       		bcs.s	loc_9CDE	; if not, branch
0000CC7C 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000CC7E                            
0000CC7E                            loc_9CDE:
0000CC7E 5345                       		subq.w	#1,d5
0000CC80 383C 0288                  		move.w	#$288,d4
0000CC84 6000                       		bra.s	Obj37_MakeRings
0000CC86                            ; ===========================================================================
0000CC86                            
0000CC86                            Obj37_Loop:
0000CC86 6100 0000                  		bsr.w	SingleObjLoad
0000CC8A 6600 0000                  		bne.w	Obj37_ResetCounter
0000CC8E                            
0000CC8E                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000CC8E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000CC92 5429 0024                  		addq.b	#2,$24(a1)
0000CC96 137C 0008 0016             		move.b	#8,$16(a1)
0000CC9C 137C 0008 0017             		move.b	#8,$17(a1)
0000CCA2 3368 0008 0008             		move.w	8(a0),8(a1)
0000CCA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CCAE 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000CCB6 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000CCBC 137C 0004 0001             		move.b	#4,1(a1)
0000CCC2 137C 0003 0018             		move.b	#3,$18(a1)
0000CCC8 137C 0047 0020             		move.b	#$47,$20(a1)
0000CCCE 137C 0008 0019             		move.b	#8,$19(a1)
0000CCD4 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000CCDA 4A44                       		tst.w	d4
0000CCDC 6B00                       		bmi.s	loc_9D62
0000CCDE 3004                       		move.w	d4,d0
0000CCE0 4EB8 3736                  		jsr	CalcSine
0000CCE4 3404                       		move.w	d4,d2
0000CCE6 E04A                       		lsr.w	#8,d2
0000CCE8 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000CCEC 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000CCEE 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000CCF2 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000CCF6 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000CCF8 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000CCFA E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000CCFC                            
0000CCFC                            @skiphalvingvel:
0000CCFC E560                       		asl.w	d2,d0
0000CCFE E561                       		asl.w	d2,d1
0000CD00 3400                       		move.w	d0,d2
0000CD02 3601                       		move.w	d1,d3
0000CD04 0604 0010                  		addi.b	#$10,d4
0000CD08 6400                       		bcc.s	loc_9D62
0000CD0A 0444 0080                  		subi.w	#$80,d4
0000CD0E 6400                       		bcc.s	loc_9D62
0000CD10 383C 0288                  		move.w	#$288,d4
0000CD14                            
0000CD14                            loc_9D62:
0000CD14 3342 0010                  		move.w	d2,$10(a1)
0000CD18 3343 0012                  		move.w	d3,$12(a1)
0000CD1C 4442                       		neg.w	d2
0000CD1E 4444                       		neg.w	d4
0000CD20 51CD FF64                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000CD24                            
0000CD24                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000CD24 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000CD2A 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000CD30 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000CD36 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000CD38 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000CD3C 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)
0000CD40 303C 00C6                  		move.w	#$C6,d0
0000CD44 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000CD4A                            
0000CD4A                            Obj37_Bounce:				; XREF: Obj37_Index
0000CD4A 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000CD50 6100 0000                  		bsr.w	SpeedToPos
0000CD54 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CD5A 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000CD5E 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000CD60 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000CD64 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000CD68 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000CD6A 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000CD70                            
0000CD70                            @skipbounceslow:
0000CD70 6B00                       		bmi.s	Obj37_ChkDel
0000CD72 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CD76 D007                       		add.b	d7,d0
0000CD78 0200 0003                  		andi.b	#3,d0
0000CD7C 6600                       		bne.s	Obj37_ChkDel
0000CD7E 4EB9 0000 0000             		jsr	ObjHitFloor
0000CD84 4A41                       		tst.w	d1
0000CD86 6A00                       		bpl.s	Obj37_ChkDel
0000CD88 D368 000C                  		add.w	d1,$C(a0)
0000CD8C 3028 0012                  		move.w	$12(a0),d0
0000CD90 E440                       		asr.w	#2,d0
0000CD92 9168 0012                  		sub.w	d0,$12(a0)
0000CD96 4468 0012                  		neg.w	$12(a0)
0000CD9A                            
0000CD9A                            Obj37_ChkDel:
0000CD9A 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000CD9E 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000CDA2 0C78 FF00 F72C             		cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000CDA8 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000CDAC 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000CDB0 0640 00E0                  		addi.w	#$E0,d0
0000CDB4 B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000CDB8 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000CDBA                            ;Mercury Lost Rings Flash
0000CDBA 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000CDC0 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000CDC4 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000CDCA 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000CDCE 4E75                       		rts
0000CDD0                            ;end Lost Rings Flash
0000CDD0                            ; ===========================================================================
0000CDD0                            
0000CDD0                            Obj37_Collect:				; XREF: Obj37_Index
0000CDD0 5428 0024                  		addq.b	#2,$24(a0)
0000CDD4 117C 0000 0020             		move.b	#0,$20(a0)
0000CDDA 117C 0001 0018             		move.b	#1,$18(a0)
0000CDE0 6100 FE34                  		bsr.w	CollectRing
0000CDE4                            
0000CDE4                            Obj37_Sparkle:				; XREF: Obj37_Index
0000CDE4 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000CDEA 6100 0000                  		bsr.w	AnimateSprite
0000CDEE 6000 0000                  		bra.w	DisplaySprite
0000CDF2                            ; ===========================================================================
0000CDF2                            
0000CDF2                            Obj37_Delete:				; XREF: Obj37_Index
0000CDF2 6000 0000                  		bra.w	DeleteObject
0000CDF6                            ; ===========================================================================
0000CDF6                            ; ---------------------------------------------------------------------------
0000CDF6                            ; Object 4B - giant ring for entry to special stage
0000CDF6                            ; ---------------------------------------------------------------------------
0000CDF6                            
0000CDF6                            Obj4B:					; XREF: Obj_Index
0000CDF6 7000                       		moveq	#0,d0
0000CDF8 1028 0024                  		move.b	$24(a0),d0
0000CDFC 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000CE00 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000CE04                            ; ===========================================================================
0000CE04 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000CE06 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000CE08 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000CE0A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000CE0C                            ; ===========================================================================
0000CE0C                            
0000CE0C                            Obj4B_Main:				; XREF: Obj4B_Index
0000CE0C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000CE14 317C 2400 0002             		move.w	#$2400,2(a0)
0000CE1A 0028 0004 0001             		ori.b	#4,1(a0)
0000CE20 117C 0040 0019             		move.b	#$40,$19(a0)
0000CE26 4A28 0001                  		tst.b	1(a0)
0000CE2A 6A00                       		bpl.s	Obj4B_Animate
0000CE2C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000CE32 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000CE36 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CE3C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000CE3E 4E75                       		rts	
0000CE40                            ; ===========================================================================
0000CE40                            
0000CE40                            Obj4B_Okay:				; XREF: Obj4B_Main
0000CE40 5428 0024                  		addq.b	#2,$24(a0)
0000CE44 117C 0002 0018             		move.b	#2,$18(a0)
0000CE4A 117C 0052 0020             		move.b	#$52,$20(a0)
0000CE50 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000CE56                            
0000CE56                            Obj4B_Animate:				; XREF: Obj4B_Index
0000CE56 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000CE5C 3028 0008                  		move.w	8(a0),d0
0000CE60 0240 FF80                  		andi.w	#$FF80,d0
0000CE64 3238 F700                  		move.w	($FFFFF700).w,d1
0000CE68 0441 0080                  		subi.w	#$80,d1
0000CE6C 0241 FF80                  		andi.w	#$FF80,d1
0000CE70 9041                       		sub.w	d1,d0
0000CE72 0C40 0280                  		cmpi.w	#$280,d0
0000CE76 6200 0000                  		bhi.w	DeleteObject
0000CE7A 6000 0000                  		bra.w	DisplaySprite
0000CE7E                            ; ===========================================================================
0000CE7E                            
0000CE7E                            Obj4B_Collect:				; XREF: Obj4B_Index
0000CE7E 5528 0024                  		subq.b	#2,$24(a0)
0000CE82 117C 0000 0020             		move.b	#0,$20(a0)
0000CE88 6100 0000                  		bsr.w	SingleObjLoad
0000CE8C 6600 0000                  		bne.w	Obj4B_PlaySnd
0000CE90 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000CE94 3368 0008 0008             		move.w	8(a0),8(a1)
0000CE9A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CEA0 2348 003C                  		move.l	a0,$3C(a1)
0000CEA4 3038 D008                  		move.w	($FFFFD008).w,d0
0000CEA8 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000CEAC 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000CEAE 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000CEB4                            
0000CEB4                            Obj4B_PlaySnd:
0000CEB4 303C 00C3                  		move.w	#$C3,d0
0000CEB8 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000CEBE 6096                       		bra.s	Obj4B_Animate
0000CEC0                            ; ===========================================================================
0000CEC0                            
0000CEC0                            Obj4B_Delete:				; XREF: Obj4B_Index
0000CEC0 6000 0000                  		bra.w	DeleteObject
0000CEC4                            ; ===========================================================================
0000CEC4                            ; ---------------------------------------------------------------------------
0000CEC4                            ; Object 7C - flash effect when	you collect the	giant ring
0000CEC4                            ; ---------------------------------------------------------------------------
0000CEC4                            
0000CEC4                            Obj7C:					; XREF: Obj_Index
0000CEC4 7000                       		moveq	#0,d0
0000CEC6 1028 0024                  		move.b	$24(a0),d0
0000CECA 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000CECE 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000CED2                            ; ===========================================================================
0000CED2 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000CED4 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000CED6 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000CED8                            ; ===========================================================================
0000CED8                            
0000CED8                            Obj7C_Main:				; XREF: Obj7C_Index
0000CED8 5428 0024                  		addq.b	#2,$24(a0)
0000CEDC 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000CEE4 317C 2462 0002             		move.w	#$2462,2(a0)
0000CEEA 0028 0004 0001             		ori.b	#4,1(a0)
0000CEF0 117C 0000 0018             		move.b	#0,$18(a0)
0000CEF6 117C 0020 0019             		move.b	#$20,$19(a0)
0000CEFC 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000CF02                            
0000CF02                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000CF02 6100                       		bsr.s	Obj7C_Collect
0000CF04 3028 0008                  		move.w	8(a0),d0
0000CF08 0240 FF80                  		andi.w	#$FF80,d0
0000CF0C 3238 F700                  		move.w	($FFFFF700).w,d1
0000CF10 0441 0080                  		subi.w	#$80,d1
0000CF14 0241 FF80                  		andi.w	#$FF80,d1
0000CF18 9041                       		sub.w	d1,d0
0000CF1A 0C40 0280                  		cmpi.w	#$280,d0
0000CF1E 6200 0000                  		bhi.w	DeleteObject
0000CF22 6000 0000                  		bra.w	DisplaySprite
0000CF26                            
0000CF26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CF26                            
0000CF26                            
0000CF26                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000CF26 5328 001E                  		subq.b	#1,$1E(a0)
0000CF2A 6A00                       		bpl.s	locret_9F76
0000CF2C 117C 0001 001E             		move.b	#1,$1E(a0)
0000CF32 5228 001A                  		addq.b	#1,$1A(a0)
0000CF36 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000CF3C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000CF3E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000CF44 6600                       		bne.s	locret_9F76	; if not, branch
0000CF46 2268 003C                  		movea.l	$3C(a0),a1
0000CF4A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000CF50 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000CF56 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000CF5C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000CF60 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000CF64                            
0000CF64                            locret_9F76:
0000CF64 4E75                       		rts	
0000CF66                            ; ===========================================================================
0000CF66                            
0000CF66                            Obj7C_End:				; XREF: Obj7C_Collect
0000CF66 5428 0024                  		addq.b	#2,$24(a0)
0000CF6A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000CF70 588F                       		addq.l	#4,sp
0000CF72 4E75                       		rts	
0000CF74                            ; End of function Obj7C_Collect
0000CF74                            
0000CF74                            ; ===========================================================================
0000CF74                            
0000CF74                            Obj7C_Delete:				; XREF: Obj7C_Index
0000CF74 6000 0000                  		bra.w	DeleteObject
0000CF78                            ; ===========================================================================
0000CF78                            Ani_obj25:
0000CF78                            	include "_anim\obj25.asm"
0000CF78                            ; ---------------------------------------------------------------------------
0000CF78                            ; Animation script - ring
0000CF78                            ; ---------------------------------------------------------------------------
0000CF78 0000                       		dc.w byte_9F8C-Ani_obj25
0000CF7A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000CF80                            		even
0000CF80                            		even
0000CF80                            
0000CF80                            ; ---------------------------------------------------------------------------
0000CF80                            ; Sprite mappings - rings
0000CF80                            ; ---------------------------------------------------------------------------
0000CF80                            Map_obj25:
0000CF80                            	include "_maps\obj25.asm"
0000CF80                            ; ---------------------------------------------------------------------------
0000CF80                            ; Sprite mappings - rings
0000CF80                            ; ---------------------------------------------------------------------------
0000CF80 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000CF84 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000CF88 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000CF8C 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000CF90 01                         byte_9FA2:	dc.b 1
0000CF91 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CF96 01                         byte_9FA8:	dc.b 1
0000CF97 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000CF9C 01                         byte_9FAE:	dc.b 1
0000CF9D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000CFA2 01                         byte_9FB4:	dc.b 1
0000CFA3 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000CFA8 01                         byte_9FBA:	dc.b 1
0000CFA9 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000CFAE 01                         byte_9FC0:	dc.b 1
0000CFAF F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000CFB4 01                         byte_9FC6:	dc.b 1
0000CFB5 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000CFBA 01                         byte_9FCC:	dc.b 1
0000CFBB F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000CFC0                            		even
0000CFC0                            		even
0000CFC0                            
0000CFC0                            ; ---------------------------------------------------------------------------
0000CFC0                            ; Sprite mappings - giant ring
0000CFC0                            ; ---------------------------------------------------------------------------
0000CFC0                            Map_obj4B:
0000CFC0                            	include "_maps\obj4B.asm"
0000CFC0                            ; ---------------------------------------------------------------------------
0000CFC0                            ; Sprite mappings - giant ring
0000CFC0                            ; ---------------------------------------------------------------------------
0000CFC0 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000CFC4 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000CFC8 0A                         byte_9FDA:	dc.b $A
0000CFC9 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000CFCE E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000CFD3 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000CFD8 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000CFDD F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000CFE2 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000CFE7 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000CFEC 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000CFF1 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000CFF6 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000CFFB 08                         byte_A00D:	dc.b 8
0000CFFC E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000D001 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000D006 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000D00B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000D010 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000D015 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000D01A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000D01F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000D024 04                         byte_A036:	dc.b 4
0000D025 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000D02A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000D02F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000D034 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000D039 08                         byte_A04B:	dc.b 8
0000D03A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000D03F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000D044 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000D049 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000D04E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000D053 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000D058 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000D05D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000D062                            		even
0000D062                            		even
0000D062                            
0000D062                            ; ---------------------------------------------------------------------------
0000D062                            ; Sprite mappings - flash effect when you collect the giant ring
0000D062                            ; ---------------------------------------------------------------------------
0000D062                            Map_obj7C:
0000D062                            	include "_maps\obj7C.asm"
0000D062                            ; ---------------------------------------------------------------------------
0000D062                            ; Sprite mappings - flash effect when you collect the giant ring
0000D062                            ; ---------------------------------------------------------------------------
0000D062 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000D066 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000D06A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000D06E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000D072 02                         byte_A084:	dc.b 2
0000D073 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000D078 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000D07D 04                         byte_A08F:	dc.b 4
0000D07E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000D083 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000D088 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000D08D 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000D092 04                         byte_A0A4:	dc.b 4
0000D093 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000D098 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000D09D 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000D0A2 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000D0A7 04                         byte_A0B9:	dc.b 4
0000D0A8 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000D0AD E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000D0B2 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000D0B7 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000D0BC 04                         byte_A0CE:	dc.b 4
0000D0BD E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000D0C2 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000D0C7 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000D0CC 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000D0D1 04                         byte_A0E3:	dc.b 4
0000D0D2 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000D0D7 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000D0DC 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000D0E1 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000D0E6 02                         byte_A0F8:	dc.b 2
0000D0E7 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000D0EC 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000D0F1 04                         byte_A103:	dc.b 4
0000D0F2 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000D0F7 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000D0FC 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000D101 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000D106                            		even
0000D106                            		even
0000D106                            
0000D106                            ; ===========================================================================
0000D106                            ; ---------------------------------------------------------------------------
0000D106                            ; Object 26 - monitors
0000D106                            ; ---------------------------------------------------------------------------
0000D106                            
0000D106                            Obj26:					; XREF: Obj_Index
0000D106 7000                       		moveq	#0,d0
0000D108 1028 0024                  		move.b	$24(a0),d0
0000D10C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000D110 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000D114                            ; ===========================================================================
0000D114 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000D116 0000                       		dc.w Obj26_Solid-Obj26_Index
0000D118 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000D11A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000D11C 0000                       		dc.w Obj26_Display-Obj26_Index
0000D11E                            ; ===========================================================================
0000D11E                            
0000D11E                            Obj26_Main:				; XREF: Obj26_Index
0000D11E 5428 0024                  		addq.b	#2,$24(a0)
0000D122 117C 000E 0016             		move.b	#$E,$16(a0)
0000D128 117C 000E 0017             		move.b	#$E,$17(a0)
0000D12E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000D136 317C 0680 0002             		move.w	#$680,2(a0)
0000D13C 117C 0004 0001             		move.b	#4,1(a0)
0000D142 117C 0003 0018             		move.b	#3,$18(a0)
0000D148 117C 000F 0019             		move.b	#$F,$19(a0)
0000D14E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D152 7000                       		moveq	#0,d0
0000D154 1028 0023                  		move.b	$23(a0),d0
0000D158 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000D15E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000D164 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000D166 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000D16C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000D172 4E75                       		rts	
0000D174                            ; ===========================================================================
0000D174                            
0000D174                            Obj26_NotBroken:			; XREF: Obj26_Main
0000D174 117C 0046 0020             		move.b	#$46,$20(a0)
0000D17A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000D180                            
0000D180                            Obj26_Solid:				; XREF: Obj26_Index
0000D180 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000D184 6700                       		beq.s	loc_A1EC	; if not, branch
0000D186 5500                       		subq.b	#2,d0
0000D188 6600                       		bne.s	Obj26_Fall
0000D18A 7200                       		moveq	#0,d1
0000D18C 1228 0019                  		move.b	$19(a0),d1
0000D190 0641 000B                  		addi.w	#$B,d1
0000D194 6100 D458                  		bsr.w	ExitPlatform
0000D198 0829 0003 0022             		btst	#3,$22(a1)
0000D19E 6600 0000                  		bne.w	loc_A1BC
0000D1A2 4228 0025                  		clr.b	$25(a0)
0000D1A6 6000 0000                  		bra.w	Obj26_Animate
0000D1AA                            ; ===========================================================================
0000D1AA                            
0000D1AA                            loc_A1BC:				; XREF: Obj26_Solid
0000D1AA 363C 0010                  		move.w	#$10,d3
0000D1AE 3428 0008                  		move.w	8(a0),d2
0000D1B2 6100 D998                  		bsr.w	MvSonicOnPtfm
0000D1B6 6000 0000                  		bra.w	Obj26_Animate
0000D1BA                            ; ===========================================================================
0000D1BA                            
0000D1BA                            Obj26_Fall:				; XREF: Obj26_Solid
0000D1BA 6100 0000                  		bsr.w	ObjectFall
0000D1BE 4EB9 0000 0000             		jsr	ObjHitFloor
0000D1C4 4A41                       		tst.w	d1
0000D1C6 6A00 0000                  		bpl.w	Obj26_Animate
0000D1CA D368 000C                  		add.w	d1,$C(a0)
0000D1CE 4268 0012                  		clr.w	$12(a0)
0000D1D2 4228 0025                  		clr.b	$25(a0)
0000D1D6 6000 0000                  		bra.w	Obj26_Animate
0000D1DA                            ; ===========================================================================
0000D1DA                            
0000D1DA                            loc_A1EC:				; XREF: Obj26_Solid
0000D1DA 323C 001A                  		move.w	#$1A,d1
0000D1DE 343C 000F                  		move.w	#$F,d2
0000D1E2 6100 0000                  		bsr.w	Obj26_SolidSides
0000D1E6 6700 0000                  		beq.w	loc_A25C
0000D1EA 4A69 0012                  		tst.w	$12(a1)
0000D1EE 6B00                       		bmi.s	loc_A20A
0000D1F0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D1F6 6700                       		beq.s	loc_A25C	; if yes, branch
0000D1F8 0C29 001F 001C             		cmpi.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000D1FE 6700                       		beq.s	loc_A25C	; if yes, branch
0000D200 0C29 0024 001C             		cmpi.b	#$24,$1C(a1)	; is Sonic stomping?
0000D206 6700                       		beq.s	loc_A25C	; if yes, branch
0000D208 0C29 0025 001C             		cmpi.b	#$25,$1C(a1)	; is Sonic stomping?
0000D20E 6700                       		beq.s	loc_A25C	; if yes, branch
0000D210                            
0000D210                            loc_A20A:
0000D210 4A41                       		tst.w	d1
0000D212 6A00                       		bpl.s	loc_A220
0000D214 9769 000C                  		sub.w	d3,$C(a1)
0000D218 6100 D2C2                  		bsr.w	loc_74AE
0000D21C 117C 0002 0025             		move.b	#2,$25(a0)
0000D222 6000 0000                  		bra.w	Obj26_Animate
0000D226                            ; ===========================================================================
0000D226                            
0000D226                            loc_A220:
0000D226 4A40                       		tst.w	d0
0000D228 6700 0000                  		beq.w	loc_A246
0000D22C 6B00                       		bmi.s	loc_A230
0000D22E 4A69 0010                  		tst.w	$10(a1)
0000D232 6B00                       		bmi.s	loc_A246
0000D234 6000                       		bra.s	loc_A236
0000D236                            ; ===========================================================================
0000D236                            
0000D236                            loc_A230:
0000D236 4A69 0010                  		tst.w	$10(a1)
0000D23A 6A00                       		bpl.s	loc_A246
0000D23C                            
0000D23C                            loc_A236:
0000D23C 9169 0008                  		sub.w	d0,8(a1)
0000D240 337C 0000 0014             		move.w	#0,$14(a1)
0000D246 337C 0000 0010             		move.w	#0,$10(a1)
0000D24C                            
0000D24C                            loc_A246:
0000D24C 0829 0001 0022             		btst	#1,$22(a1)
0000D252 6600                       		bne.s	loc_A26A
0000D254 08E9 0005 0022             		bset	#5,$22(a1)
0000D25A 08E8 0005 0022             		bset	#5,$22(a0)
0000D260 6000                       		bra.s	Obj26_Animate
0000D262                            ; ===========================================================================
0000D262                            
0000D262                            loc_A25C:
0000D262 0828 0005 0022             		btst	#5,$22(a0)
0000D268 6700                       		beq.s	Obj26_Animate
0000D26A 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000D270 6700                       		beq.s	loc_A26A
0000D272 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000D278 6700                       		beq.s	loc_A26A
0000D27A 337C 0001 001C             		move.w	#1,$1C(a1)
0000D280                            
0000D280                            loc_A26A:
0000D280 08A8 0005 0022             		bclr	#5,$22(a0)
0000D286 08A9 0005 0022             		bclr	#5,$22(a1)
0000D28C                            
0000D28C                            Obj26_Animate:				; XREF: Obj26_Index
0000D28C 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000D292 6100 0000                  		bsr.w	AnimateSprite
0000D296                            
0000D296                            Obj26_Display:				; XREF: Obj26_Index
0000D296 6100 0000                  		bsr.w	DisplaySprite
0000D29A 3028 0008                  		move.w	8(a0),d0
0000D29E 0240 FF80                  		andi.w	#$FF80,d0
0000D2A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000D2A6 0441 0080                  		subi.w	#$80,d1
0000D2AA 0241 FF80                  		andi.w	#$FF80,d1
0000D2AE 9041                       		sub.w	d1,d0
0000D2B0 0C40 0280                  		cmpi.w	#$280,d0
0000D2B4 6200 0000                  		bhi.w	DeleteObject
0000D2B8 4E75                       		rts	
0000D2BA                            ; ===========================================================================
0000D2BA                            
0000D2BA                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000D2BA 5428 0024                  		addq.b	#2,$24(a0)
0000D2BE 117C 0000 0020             		move.b	#0,$20(a0)
0000D2C4 6100 0000                  		bsr.w	SingleObjLoad
0000D2C8 6600                       		bne.s	Obj26_Explode
0000D2CA 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000D2CE 3368 0008 0008             		move.w	8(a0),8(a1)
0000D2D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D2DA 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000D2E0                            
0000D2E0                            Obj26_Explode:
0000D2E0 6100 0000                  		bsr.w	SingleObjLoad
0000D2E4 6600                       		bne.s	Obj26_SetBroken
0000D2E6 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000D2EA 5429 0024                  		addq.b	#2,$24(a1)
0000D2EE 3368 0008 0008             		move.w	8(a0),8(a1)
0000D2F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D2FA                            
0000D2FA                            Obj26_SetBroken:
0000D2FA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D2FE 7000                       		moveq	#0,d0
0000D300 1028 0023                  		move.b	$23(a0),d0
0000D304 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000D30A 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000D310 6000 0000                  		bra.w	DisplaySprite
0000D314                            ; ===========================================================================
0000D314                            ; ---------------------------------------------------------------------------
0000D314                            ; Object 2E - contents of monitors
0000D314                            ; ---------------------------------------------------------------------------
0000D314                            
0000D314                            Obj2E:					; XREF: Obj_Index
0000D314 7000                       		moveq	#0,d0
0000D316 1028 0024                  		move.b	$24(a0),d0
0000D31A 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000D31E 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000D322 6000 0000                  		bra.w	DisplaySprite
0000D326                            ; ===========================================================================
0000D326 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000D328 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000D32A 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000D32C                            ; ===========================================================================
0000D32C                            
0000D32C                            Obj2E_Main:				; XREF: Obj2E_Index
0000D32C 5428 0024                  		addq.b	#2,$24(a0)
0000D330 317C 0680 0002             		move.w	#$680,2(a0)
0000D336 117C 0024 0001             		move.b	#$24,1(a0)
0000D33C 117C 0003 0018             		move.b	#3,$18(a0)
0000D342 117C 0008 0019             		move.b	#8,$19(a0)
0000D348 317C FD00 0012             		move.w	#-$300,$12(a0)
0000D34E 7000                       		moveq	#0,d0
0000D350 1028 001C                  		move.b	$1C(a0),d0
0000D354 5400                       		addq.b	#2,d0
0000D356 1140 001A                  		move.b	d0,$1A(a0)
0000D35A 227C 0000 0000             		movea.l	#Map_obj26,a1
0000D360 D000                       		add.b	d0,d0
0000D362 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000D366 5249                       		addq.w	#1,a1
0000D368 2149 0004                  		move.l	a1,4(a0)
0000D36C                            
0000D36C                            Obj2E_Move:				; XREF: Obj2E_Index
0000D36C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000D370 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000D374 6100 0000                  		bsr.w	SpeedToPos
0000D378 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000D37E 4E75                       		rts	
0000D380                            ; ===========================================================================
0000D380                            
0000D380                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000D380 5428 0024                          addq.b    #2,$24(a0)
0000D384 317C 001D 001E                     move.w    #29,$1E(a0)
0000D38A 1028 001C                          move.b    $1C(a0),d0
0000D38E 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000D392 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000D394 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000D396 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000D398 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000D39C 4EB9 0000 0000                     jsr    Touch_ChkHurt ; run the Touch_ChkHurt routine
0000D3A2 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000D3A4 4E75                               rts ; The Eggman monitor now does something!
0000D3A6                            ; ===========================================================================
0000D3A6                            
0000D3A6                            Obj2E_ChkSonic:
0000D3A6 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000D3AA 6600                       		bne.s	Obj2E_ChkShoes
0000D3AC                            
0000D3AC                            ExtraLife:
0000D3AC 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000D3B0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000D3B4 303C 0088                  		move.w	#$88,d0
0000D3B8 4EF9 0000 1108             		jmp	(PlaySound).l	; play extra life music
0000D3BE                            ; ===========================================================================
0000D3BE                            
0000D3BE                            Obj2E_ChkShoes:
0000D3BE 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000D3C2 6600                       		bne.s	Obj2E_ChkShield
0000D3C4 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000D3CA 6700 0000                  		beq 	Obj2E_NoMusic
0000D3CE 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000D3D4 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000D3DA 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000D3E0 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000D3E6 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000D3EC 303C 009F                  		move.w	#$9F,d0
0000D3F0 4EF9 0000 1108             		jmp	(PlaySound).l	; play invincibility music
0000D3F6                            		
0000D3F6                            ; ===========================================================================
0000D3F6                            
0000D3F6                            Obj2E_ChkShield:
0000D3F6 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000D3FA 6600                       		bne.s	Obj2E_ChkInvinc
0000D3FC 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000D402 6700 0000                  		beq Obj2E_NoMusic
0000D406 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000D40C 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000D412 303C 00AF                  		move.w	#$AF,d0
0000D416 4EF9 0000 1108             		jmp	(PlaySound).l	; play shield sound
0000D41C                            ; ===========================================================================
0000D41C                            
0000D41C                            Obj2E_ChkInvinc:
0000D41C 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000D420 6600                       		bne.s	Obj2E_ChkRings
0000D422 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000D428 6700 0000                  		beq Obj2E_NoMusic
0000D42C 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000D432 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000D438 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000D43E 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000D444 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000D44A 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000D450 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000D456 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000D45C 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000D462 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000D468 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000D46C 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000D46E 303C 0087                  		move.w	#$87,d0
0000D472 4EF9 0000 1108             		jmp	(PlaySound).l	; play invincibility music
0000D478                            ; ===========================================================================
0000D478                            
0000D478                            Obj2E_NoMusic:
0000D478 4E75                       		rts	
0000D47A                            ; ===========================================================================
0000D47A                            
0000D47A                            Obj2E_ChkRings:
0000D47A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000D47E 6600                       		bne.s	Obj2E_ChkS
0000D480 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000D486 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000D48C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000D492 6500                       		bcs.s	Obj2E_RingSound
0000D494 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000D49A 6700 FF10                  		beq.w	ExtraLife
0000D49E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000D4A4 6500                       		bcs.s	Obj2E_RingSound
0000D4A6 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000D4AC 6700 FEFE                  		beq.w	ExtraLife
0000D4B0                            
0000D4B0                            Obj2E_RingSound:
0000D4B0 303C 00B5                  		move.w	#$B5,d0
0000D4B4 4EF9 0000 1108             		jmp	(PlaySound).l	; play ring sound
0000D4BA                            ; ===========================================================================
0000D4BA                            
0000D4BA                            Obj2E_ChkS:
0000D4BA 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000D4BE 6600 0000                  		bne	Obj2E_ChkGoggles		; if not, branch to Goggle code	
0000D4C2 0678 0032 FE20             		addi.w	#50,($FFFFFE20).w ; add	50 rings to the	number of rings	you have
0000D4C8 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000D4CE 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000D4D4 65DA                       		bcs.s	Obj2E_RingSound
0000D4D6 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000D4DC 6700 FECE                  		beq.w	ExtraLife
0000D4E0 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000D4E6 65C8                       		bcs.s	Obj2E_RingSound
0000D4E8 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000D4EE 6700 FEBC                  		beq.w	ExtraLife
0000D4F2                            
0000D4F2                            		
0000D4F2                            Obj2E_ChkGoggles:	
0000D4F2 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain Goggles?
0000D4F6 6600 0000                  		bne	Obj2E_ChkEnd		; if not, branch to ChkEnd
0000D4FA 11FC 0001 FFA0             		move.b	#1,($FFFFFFA0).w ; move 1 to the goggle check
0000D500                            
0000D500                            Obj2E_ChkEnd:
0000D500 4E75                       		rts
0000D502                            ; ===========================================================================
0000D502                            
0000D502                            Obj2E_Delete:				; XREF: Obj2E_Index
0000D502 5368 001E                  		subq.w	#1,$1E(a0)
0000D506 6B00 0000                  		bmi.w	DeleteObject
0000D50A 4E75                       		rts	
0000D50C                            ; ---------------------------------------------------------------------------
0000D50C                            ; Subroutine to	make the sides of a monitor solid
0000D50C                            ; ---------------------------------------------------------------------------
0000D50C                            
0000D50C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D50C                            
0000D50C                            
0000D50C                            Obj26_SolidSides:			; XREF: loc_A1EC
0000D50C 43F8 D000                  		lea	($FFFFD000).w,a1
0000D510 3029 0008                  		move.w	8(a1),d0
0000D514 9068 0008                  		sub.w	8(a0),d0
0000D518 D041                       		add.w	d1,d0
0000D51A 6B00                       		bmi.s	loc_A4E6
0000D51C 3601                       		move.w	d1,d3
0000D51E D643                       		add.w	d3,d3
0000D520 B043                       		cmp.w	d3,d0
0000D522 6200                       		bhi.s	loc_A4E6
0000D524 1629 0016                  		move.b	$16(a1),d3
0000D528 4883                       		ext.w	d3
0000D52A D443                       		add.w	d3,d2
0000D52C 3629 000C                  		move.w	$C(a1),d3
0000D530 9668 000C                  		sub.w	$C(a0),d3
0000D534 D642                       		add.w	d2,d3
0000D536 6B00                       		bmi.s	loc_A4E6
0000D538 D442                       		add.w	d2,d2
0000D53A B642                       		cmp.w	d2,d3
0000D53C 6400                       		bcc.s	loc_A4E6
0000D53E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000D542 6B00                       		bmi.s	loc_A4E6
0000D544 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D54A 6400                       		bcc.s	loc_A4E6
0000D54C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000D550 6600                       		bne.s	loc_A4E6
0000D552 B240                       		cmp.w	d0,d1
0000D554 6400                       		bcc.s	loc_A4DC
0000D556 D241                       		add.w	d1,d1
0000D558 9041                       		sub.w	d1,d0
0000D55A                            
0000D55A                            loc_A4DC:
0000D55A 0C43 0010                  		cmpi.w	#$10,d3
0000D55E 6500                       		bcs.s	loc_A4EA
0000D560                            
0000D560                            loc_A4E2:
0000D560 7201                       		moveq	#1,d1
0000D562 4E75                       		rts	
0000D564                            ; ===========================================================================
0000D564                            
0000D564                            loc_A4E6:
0000D564 7200                       		moveq	#0,d1
0000D566 4E75                       		rts	
0000D568                            ; ===========================================================================
0000D568                            
0000D568                            loc_A4EA:
0000D568 7200                       		moveq	#0,d1
0000D56A 1228 0019                  		move.b	$19(a0),d1
0000D56E 5841                       		addq.w	#4,d1
0000D570 3401                       		move.w	d1,d2
0000D572 D442                       		add.w	d2,d2
0000D574 D269 0008                  		add.w	8(a1),d1
0000D578 9268 0008                  		sub.w	8(a0),d1
0000D57C 6BE2                       		bmi.s	loc_A4E2
0000D57E B242                       		cmp.w	d2,d1
0000D580 64DE                       		bcc.s	loc_A4E2
0000D582 72FF                       		moveq	#-1,d1
0000D584 4E75                       		rts	
0000D586                            ; End of function Obj26_SolidSides
0000D586                            
0000D586                            ; ===========================================================================
0000D586                            Ani_obj26:
0000D586                            	include "_anim\obj26.asm"
0000D586                            ; ---------------------------------------------------------------------------
0000D586                            ; Animation script - monitors
0000D586                            ; ---------------------------------------------------------------------------
0000D586 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000D58C 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000D592 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000D598 0000                       		dc.w byte_A582-Ani_obj26
0000D59A 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000D5A0 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000D5AC 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000D5B8 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000D5C4 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000D5D0 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000D5DC 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000D5E8 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000D5F4 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000D600 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000D608                            		even
0000D608                            		even
0000D608                            
0000D608                            ; ---------------------------------------------------------------------------
0000D608                            ; Sprite mappings - monitors
0000D608                            ; ---------------------------------------------------------------------------
0000D608                            Map_obj26:
0000D608                            	include "_maps\obj26.asm"
0000D608                            ; ================================================================================
0000D608                            ; Sprite Mappings - generated by Flex 2 Sun Apr 22 2018 00:45:43 GMT-0400 (Eastern Daylight Time)
0000D608                            ; ================================================================================
0000D608                            
0000D608                            DATAH2GM7QB991V:
0000D608 0000 0000                  	dc.w DATAH2GM7QB991V_0-DATAH2GM7QB991V, DATAH2GM7QB991V_1-DATAH2GM7QB991V
0000D60C 0000 0000                  	dc.w DATAH2GM7QB991V_2-DATAH2GM7QB991V, DATAH2GM7QB991V_3-DATAH2GM7QB991V
0000D610 0000 0000                  	dc.w DATAH2GM7QB991V_4-DATAH2GM7QB991V, DATAH2GM7QB991V_5-DATAH2GM7QB991V
0000D614 0000 0000                  	dc.w DATAH2GM7QB991V_6-DATAH2GM7QB991V, DATAH2GM7QB991V_7-DATAH2GM7QB991V
0000D618 0000 0000                  	dc.w DATAH2GM7QB991V_8-DATAH2GM7QB991V, DATAH2GM7QB991V_9-DATAH2GM7QB991V
0000D61C 0000 0000                  	dc.w DATAH2GM7QB991V_A-DATAH2GM7QB991V, DATAH2GM7QB991V_B-DATAH2GM7QB991V
0000D620 01                         DATAH2GM7QB991V_0: dc.b $1
0000D621 EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D626 02                         DATAH2GM7QB991V_1: dc.b $2
0000D627 F505 0010 F8               	dc.b $F5, $5, $0, $10, $F8
0000D62C EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D631 02                         DATAH2GM7QB991V_2: dc.b $2
0000D632 F205 0014 F8               	dc.b $F2, $5, $0, $14, $F8
0000D637 EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D63C 02                         DATAH2GM7QB991V_3: dc.b $2
0000D63D F205 0018 F8               	dc.b $F2, $5, $0, $18, $F8
0000D642 EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D647 02                         DATAH2GM7QB991V_4: dc.b $2
0000D648 F205 001C F8               	dc.b $F2, $5, $0, $1C, $F8
0000D64D EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D652 02                         DATAH2GM7QB991V_5: dc.b $2
0000D653 F205 0024 F8               	dc.b $F2, $5, $0, $24, $F8
0000D658 EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D65D 02                         DATAH2GM7QB991V_6: dc.b $2
0000D65E F205 0028 F8               	dc.b $F2, $5, $0, $28, $F8
0000D663 EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D668 02                         DATAH2GM7QB991V_7: dc.b $2
0000D669 F205 002C F8               	dc.b $F2, $5, $0, $2C, $F8
0000D66E EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D673 02                         DATAH2GM7QB991V_8: dc.b $2
0000D674 F205 2030 F8               	dc.b $F2, $5, $20, $30, $F8
0000D679 EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D67E 02                         DATAH2GM7QB991V_9: dc.b $2
0000D67F F205 0034 F8               	dc.b $F2, $5, $0, $34, $F8
0000D684 EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D689 02                         DATAH2GM7QB991V_A: dc.b $2
0000D68A F205 0020 F8               	dc.b $F2, $5, $0, $20, $F8
0000D68F EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
0000D694 01                         DATAH2GM7QB991V_B: dc.b $1
0000D695 FF0D 0038 F0               	dc.b $FF, $D, $0, $38, $F0
0000D69A                            	even
0000D69A                            	even
0000D69A                            
0000D69A                            ; ===========================================================================
0000D69A                            ; ---------------------------------------------------------------------------
0000D69A                            ; Object 0E - Sonic on the title screen
0000D69A                            ; ---------------------------------------------------------------------------
0000D69A                            
0000D69A                            Obj0E:					; XREF: Obj_Index
0000D69A 7000                       		moveq	#0,d0
0000D69C 1028 0024                  		move.b	$24(a0),d0
0000D6A0 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000D6A4 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000D6A8                            ; ===========================================================================
0000D6A8 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000D6AA 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000D6AC 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000D6AE 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000D6B0                            ; ===========================================================================
0000D6B0                            
0000D6B0                            Obj0E_Main:				; XREF: Obj0E_Index
0000D6B0 5428 0024                  		addq.b	#2,$24(a0)
0000D6B4 317C 00F0 0008             		move.w	#$F0,8(a0)
0000D6BA 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000D6C0 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000D6C8 317C 2300 0002             		move.w	#$2300,2(a0)
0000D6CE 117C 0001 0018             		move.b	#1,$18(a0)
0000D6D4 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000D6DA 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000D6E0 6100 0000                  		bsr.w	AnimateSprite
0000D6E4                            
0000D6E4                            Obj0E_Delay:				; XREF: Obj0E_Index
0000D6E4 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000D6E8 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000D6EA 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000D6EE 6000 0000                  		bra.w	DisplaySprite
0000D6F2                            ; ===========================================================================
0000D6F2                            
0000D6F2                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000D6F2 4E75                       		rts	
0000D6F4                            ; ===========================================================================
0000D6F4                            
0000D6F4                            Obj0E_Move:				; XREF: Obj0E_Index
0000D6F4 5168 000A                  		subq.w	#8,$A(a0)
0000D6F8 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000D6FE 6600                       		bne.s	Obj0E_Display
0000D700 5428 0024                  		addq.b	#2,$24(a0)
0000D704                            
0000D704                            Obj0E_Display:
0000D704 6000 0000                  		bra.w	DisplaySprite
0000D708                            ; ===========================================================================
0000D708 4E75                       		rts	
0000D70A                            ; ===========================================================================
0000D70A                            
0000D70A                            Obj0E_Animate:				; XREF: Obj0E_Index
0000D70A 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000D710 6100 0000                  		bsr.w	AnimateSprite
0000D714 6000 0000                  		bra.w	DisplaySprite
0000D718                            ; ===========================================================================
0000D718 4E75                       		rts	
0000D71A                            ; ===========================================================================
0000D71A                            ; ---------------------------------------------------------------------------
0000D71A                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000D71A                            ; ---------------------------------------------------------------------------
0000D71A                            
0000D71A                            Obj0F:					; XREF: Obj_Index
0000D71A 7000                       		moveq	#0,d0
0000D71C 1028 0024                  		move.b	$24(a0),d0
0000D720 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000D724 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000D728 6000 0000                  		bra.w	DisplaySprite
0000D72C                            ; ===========================================================================
0000D72C 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000D72E 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000D730 0000                       		dc.w locret_A6F8-Obj0F_Index
0000D732                            ; ===========================================================================
0000D732                            
0000D732                            Obj0F_Main:				; XREF: Obj0F_Index
0000D732 5428 0024                  		addq.b	#2,$24(a0)
0000D736 317C 00D0 0008             		move.w	#$D0,8(a0)
0000D73C 317C 0130 000A             		move.w	#$130,$A(a0)
0000D742 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000D74A 317C 0200 0002             		move.w	#$200,2(a0)
0000D750 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000D756 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000D758 5428 0024                  		addq.b	#2,$24(a0)
0000D75C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000D762 6600                       		bne.s	locret_A6F8	; if not, branch
0000D764 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000D76A 317C 0170 0008             		move.w	#$170,8(a0)
0000D770 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000D776                            
0000D776                            locret_A6F8:				; XREF: Obj0F_Index
0000D776 4E75                       		rts	
0000D778                            ; ===========================================================================
0000D778                            
0000D778                            Obj0F_PrsStart:
0000D778 1038 FFF6                      move.b    ($FFFFFFF6).w,d0    ; copy the current character selection to d0
0000D77C 0838 0002 F605                 btst    #2,($FFFFF605).w    ; is left pressed?
0000D782 6700                           beq.s    @chk_right        ; if not, branch
0000D784 5300                           sub.b    #1,d0    ; decrement the character selection
0000D786 0C00 00FF                      cmp.b    #$FF,d0    ; is d0 negative?
0000D78A 6E00                           bgt.s    @do_update
0000D78C 103C 0000                      move.b    #0,d0
0000D790 6000                           bra.s    @do_update
0000D792                            
0000D792                            @chk_right:
0000D792 0838 0003 F605                 btst    #3,($FFFFF605).w    ; is right pressed?
0000D798 6700                           beq.s    @end             ; if not, branch
0000D79A 5200                           add.b    #1,d0            ; increment the character selection
0000D79C 0C00 0004                      cmp.b    #4,d0
0000D7A0 6D00                           blt.s    @do_update
0000D7A2 103C 0003                      move.b    #3,d0
0000D7A6                            
0000D7A6                            @do_update:
0000D7A6 1140 001C                      move.b    d0,$1C(a0)        ; update the button's animation
0000D7AA 11C0 FFF6                      move.b    d0,($FFFFFFF6).w    ; update the character selection
0000D7AE                            @end:
0000D7AE 43F9 0000 0000                 lea    (Ani_obj0F).l,a1
0000D7B4 6000 0000                      bra.w    AnimateSprite
0000D7B8                            
0000D7B8                            ; ===========================================================================
0000D7B8                            Ani_obj0E:
0000D7B8                            	include "_anim\obj0E.asm"
0000D7B8                            ; ---------------------------------------------------------------------------
0000D7B8                            ; Animation script - Sonic on the title screen
0000D7B8                            ; ---------------------------------------------------------------------------
0000D7B8 0000                       		dc.w byte_A706-Ani_obj0E
0000D7BA 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000D7C6                            		even
0000D7C6                            		even
0000D7C6                            
0000D7C6                            Ani_obj0F:
0000D7C6                            	include "_anim\obj0F.asm"
0000D7C6                            ; ---------------------------------------------------------------------------
0000D7C6                            ; Animation script - "PRESS START" on the title screen
0000D7C6                            ; ---------------------------------------------------------------------------
0000D7C6 0000                       		dc.w Sonic_St-Ani_obj0F
0000D7C8 0000                       		dc.w Shadow_St-Ani_obj0F
0000D7CA 0000                       		dc.w Metal_St-Ani_obj0F
0000D7CC 0000                       		dc.w Mighty_St-Ani_obj0F
0000D7CE 1F04 FF                    Sonic_St:	dc.b $1F, 4, $FF
0000D7D1 1F05 FF                    Shadow_St:	dc.b $1F, 5, $FF
0000D7D4 1F06 FF                    Metal_St:	dc.b $1F, 6, $FF
0000D7D7 1F07 FF                    Mighty_St:	dc.b $1F, 7, $FF
0000D7DA                            		even
0000D7DA                            		even
0000D7DA                            
0000D7DA                            ; ---------------------------------------------------------------------------
0000D7DA                            ; Subroutine to	animate	a sprite using an animation script
0000D7DA                            ; ---------------------------------------------------------------------------
0000D7DA                            
0000D7DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7DA                            
0000D7DA                            
0000D7DA                            AnimateSprite:
0000D7DA 7000                       		moveq	#0,d0
0000D7DC 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000D7E0 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000D7E4 6700                       		beq.s	Anim_Run	; if not, branch
0000D7E6 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000D7EA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000D7F0 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000D7F6                            
0000D7F6                            Anim_Run:
0000D7F6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000D7FA 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000D7FC D040                       		add.w	d0,d0
0000D7FE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000D802 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000D806 7200                       		moveq	#0,d1
0000D808 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000D80C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000D810 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000D812                            
0000D812                            Anim_Next:
0000D812 1200                       		move.b	d0,d1
0000D814 0200 001F                  		andi.b	#$1F,d0
0000D818 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000D81C 1028 0022                  		move.b	$22(a0),d0
0000D820 E719                       		rol.b	#3,d1
0000D822 B101                       		eor.b	d0,d1
0000D824 0201 0003                  		andi.b	#3,d1
0000D828 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000D82E 8328 0001                  		or.b	d1,1(a0)
0000D832 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000D836                            
0000D836                            Anim_Wait:
0000D836 4E75                       		rts	
0000D838                            ; ===========================================================================
0000D838                            
0000D838                            Anim_End_FF:
0000D838 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000D83A 6600                       		bne.s	Anim_End_FE	; if not, branch
0000D83C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000D842 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000D846 60CA                       		bra.s	Anim_Next
0000D848                            ; ===========================================================================
0000D848                            
0000D848                            Anim_End_FE:
0000D848 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000D84A 6600                       		bne.s	Anim_End_FD	; if not, branch
0000D84C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000D850 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000D854 9200                       		sub.b	d0,d1
0000D856 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000D85A 60B6                       		bra.s	Anim_Next
0000D85C                            ; ===========================================================================
0000D85C                            
0000D85C                            Anim_End_FD:
0000D85C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000D85E 6600                       		bne.s	Anim_End_FC	; if not, branch
0000D860 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000D866                            
0000D866                            Anim_End_FC:
0000D866 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000D868 6600                       		bne.s	Anim_End_FB	; if not, branch
0000D86A 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000D86E                            
0000D86E                            Anim_End_FB:
0000D86E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000D870 6600                       		bne.s	Anim_End_FA	; if not, branch
0000D872 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000D878 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000D87C                            
0000D87C                            Anim_End_FA:
0000D87C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000D87E 6600                       		bne.s	Anim_End	; if not, branch
0000D880 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000D884                            
0000D884                            Anim_End:
0000D884 4E75                       		rts	
0000D886                            ; End of function AnimateSprite
0000D886                            
0000D886                            ; ===========================================================================
0000D886                            ; ---------------------------------------------------------------------------
0000D886                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000D886                            ; ---------------------------------------------------------------------------
0000D886                            Map_obj0F:
0000D886                            	include "_maps\obj0F.asm"
0000D886                            ; ================================================================================
0000D886                            ; Sprite Mappings - generated by Flex 2 Fri Apr 27 2018 18:04:17 GMT-0400 (Eastern Daylight Time)
0000D886                            ; ================================================================================
0000D886                            
0000D886                            DATACYMPJGUOH4H:
0000D886 0000 0000                  	dc.w $0, DATACYMPJGUOH4H_1-DATACYMPJGUOH4H
0000D88A 0000 0000                  	dc.w DATACYMPJGUOH4H_2-DATACYMPJGUOH4H, $0
0000D88E 0000 0000                  	dc.w DATACYMPJGUOH4H_4-DATACYMPJGUOH4H, DATACYMPJGUOH4H_5-DATACYMPJGUOH4H
0000D892 0000 0000                  	dc.w DATACYMPJGUOH4H_6-DATACYMPJGUOH4H, DATACYMPJGUOH4H_7-DATACYMPJGUOH4H
0000D896 06                         DATACYMPJGUOH4H_1: dc.b $6
0000D897 000C 00E7 1C               	dc.b $0, $C, $0, $E7, $1C
0000D89C 0000 00EA 3C               	dc.b $0, $0, $0, $EA, $3C
0000D8A1 0000 00EA 4C               	dc.b $0, $0, $0, $EA, $4C
0000D8A6 0000 00EB 54               	dc.b $0, $0, $0, $EB, $54
0000D8AB 0004 00EC 5C               	dc.b $0, $4, $0, $EC, $5C
0000D8B0 0000 00EB 6C               	dc.b $0, $0, $0, $EB, $6C
0000D8B5 1E                         DATACYMPJGUOH4H_2: dc.b $1E
0000D8B6 B80F 0000 80               	dc.b $B8, $F, $0, $0, $80
0000D8BB B80F 0000 80               	dc.b $B8, $F, $0, $0, $80
0000D8C0 B80F 0000 80               	dc.b $B8, $F, $0, $0, $80
0000D8C5 B80F 0000 80               	dc.b $B8, $F, $0, $0, $80
0000D8CA B80F 0000 80               	dc.b $B8, $F, $0, $0, $80
0000D8CF B80F 0000 80               	dc.b $B8, $F, $0, $0, $80
0000D8D4 B80F 0000 80               	dc.b $B8, $F, $0, $0, $80
0000D8D9 B80F 0000 80               	dc.b $B8, $F, $0, $0, $80
0000D8DE B80F 0000 80               	dc.b $B8, $F, $0, $0, $80
0000D8E3 B80F 0000 80               	dc.b $B8, $F, $0, $0, $80
0000D8E8 D80F 0000 80               	dc.b $D8, $F, $0, $0, $80
0000D8ED D80F 0000 80               	dc.b $D8, $F, $0, $0, $80
0000D8F2 D80F 0000 80               	dc.b $D8, $F, $0, $0, $80
0000D8F7 D80F 0000 80               	dc.b $D8, $F, $0, $0, $80
0000D8FC D80F 0000 80               	dc.b $D8, $F, $0, $0, $80
0000D901 D80F 0000 80               	dc.b $D8, $F, $0, $0, $80
0000D906 D80F 0000 80               	dc.b $D8, $F, $0, $0, $80
0000D90B D80F 0000 80               	dc.b $D8, $F, $0, $0, $80
0000D910 D80F 0000 80               	dc.b $D8, $F, $0, $0, $80
0000D915 D80F 0000 80               	dc.b $D8, $F, $0, $0, $80
0000D91A F80F 0000 80               	dc.b $F8, $F, $0, $0, $80
0000D91F F80F 0000 80               	dc.b $F8, $F, $0, $0, $80
0000D924 F80F 0000 80               	dc.b $F8, $F, $0, $0, $80
0000D929 F80F 0000 80               	dc.b $F8, $F, $0, $0, $80
0000D92E F80F 0000 80               	dc.b $F8, $F, $0, $0, $80
0000D933 F80F 0000 80               	dc.b $F8, $F, $0, $0, $80
0000D938 F80F 0000 80               	dc.b $F8, $F, $0, $0, $80
0000D93D F80F 0000 80               	dc.b $F8, $F, $0, $0, $80
0000D942 F80F 0000 80               	dc.b $F8, $F, $0, $0, $80
0000D947 F80F 0000 80               	dc.b $F8, $F, $0, $0, $80
0000D94C 05                         DATACYMPJGUOH4H_4: dc.b $5
0000D94D 0000 00EA 35               	dc.b $0, $0, $0, $EA, $35
0000D952 0004 00F0 3D               	dc.b $0, $4, $0, $F0, $3D
0000D957 0000 00F2 4B               	dc.b $0, $0, $0, $F2, $4B
0000D95C 0000 00F3 52               	dc.b $0, $0, $0, $F3, $52
0000D961 0000 08EE 62               	dc.b $0, $0, $8, $EE, $62
0000D966 08                         DATACYMPJGUOH4H_5: dc.b $8
0000D967 0000 00EA 31               	dc.b $0, $0, $0, $EA, $31
0000D96C 0000 00F4 39               	dc.b $0, $0, $0, $F4, $39
0000D971 0000 00EC 41               	dc.b $0, $0, $0, $EC, $41
0000D976 0000 00F5 49               	dc.b $0, $0, $0, $F5, $49
0000D97B 0000 00F0 51               	dc.b $0, $0, $0, $F0, $51
0000D980 0000 00F6 59               	dc.b $0, $0, $0, $F6, $59
0000D985 0000 00EE 28               	dc.b $0, $0, $0, $EE, $28
0000D98A 0000 08EE 62               	dc.b $0, $0, $8, $EE, $62
0000D98F 06                         DATACYMPJGUOH4H_6: dc.b $6
0000D990 0000 00F7 35               	dc.b $0, $0, $0, $F7, $35
0000D995 0000 00E9 3D               	dc.b $0, $0, $0, $E9, $3D
0000D99A 0004 00EB 45               	dc.b $0, $4, $0, $EB, $45
0000D99F 0000 00F8 55               	dc.b $0, $0, $0, $F8, $55
0000D9A4 0000 00EE 28               	dc.b $0, $0, $0, $EE, $28
0000D9A9 0000 08EE 62               	dc.b $0, $0, $8, $EE, $62
0000D9AE 07                         DATACYMPJGUOH4H_7: dc.b $7
0000D9AF 0000 00F7 33               	dc.b $0, $0, $0, $F7, $33
0000D9B4 0000 00EE 28               	dc.b $0, $0, $0, $EE, $28
0000D9B9 0000 00F2 39               	dc.b $0, $0, $0, $F2, $39
0000D9BE 0000 00F9 40               	dc.b $0, $0, $0, $F9, $40
0000D9C3 0000 00F4 48               	dc.b $0, $0, $0, $F4, $48
0000D9C8 0000 00EB 50               	dc.b $0, $0, $0, $EB, $50
0000D9CD 0000 00FA 58               	dc.b $0, $0, $0, $FA, $58
0000D9D2                            	even
0000D9D2                            	even
0000D9D2                            
0000D9D2                            ; ---------------------------------------------------------------------------
0000D9D2                            ; Sprite mappings - Sonic on the title screen
0000D9D2                            ; ---------------------------------------------------------------------------
0000D9D2                            Map_obj0E:
0000D9D2                            	include "_maps\obj0E.asm"
0000D9D2                            ; ================================================================================
0000D9D2                            ; Sprite Mappings - generated by Flex 2 Fri Dec 29 2017 20:09:55 GMT-0500 (Eastern Standard Time)
0000D9D2                            ; ================================================================================
0000D9D2                            
0000D9D2                            DATA1CYEUQGDH2I:
0000D9D2 0000 0000                  	dc.w DATA1CYEUQGDH2I_0-DATA1CYEUQGDH2I, DATA1CYEUQGDH2I_1-DATA1CYEUQGDH2I
0000D9D6 0000 0000                  	dc.w DATA1CYEUQGDH2I_2-DATA1CYEUQGDH2I, DATA1CYEUQGDH2I_3-DATA1CYEUQGDH2I
0000D9DA 0000 0000                  	dc.w DATA1CYEUQGDH2I_4-DATA1CYEUQGDH2I, DATA1CYEUQGDH2I_5-DATA1CYEUQGDH2I
0000D9DE 0000 0000                  	dc.w DATA1CYEUQGDH2I_6-DATA1CYEUQGDH2I, DATA1CYEUQGDH2I_7-DATA1CYEUQGDH2I
0000D9E2 0D                         DATA1CYEUQGDH2I_0: dc.b $D
0000D9E3 010F 0000 20               	dc.b $1, $F, $0, $0, $20
0000D9E8 0103 0010 40               	dc.b $1, $3, $0, $10, $40
0000D9ED 090E 0014 00               	dc.b $9, $E, $0, $14, $0
0000D9F2 0901 0020 48               	dc.b $9, $1, $0, $20, $48
0000D9F7 210F 0022 08               	dc.b $21, $F, $0, $22, $8
0000D9FC 210F 0032 28               	dc.b $21, $F, $0, $32, $28
0000DA01 2102 0042 48               	dc.b $21, $2, $0, $42, $48
0000DA06 3103 0045 00               	dc.b $31, $3, $0, $45, $0
0000DA0B 410E 0049 08               	dc.b $41, $E, $0, $49, $8
0000DA10 410E 0055 28               	dc.b $41, $E, $0, $55, $28
0000DA15 4900 0061 F8               	dc.b $49, $0, $0, $61, $F8
0000DA1A 5100 0062 00               	dc.b $51, $0, $0, $62, $0
0000DA1F 590D 0063 20               	dc.b $59, $D, $0, $63, $20
0000DA24 0D                         DATA1CYEUQGDH2I_1: dc.b $D
0000DA25 010F 0000 20               	dc.b $1, $F, $0, $0, $20
0000DA2A 0103 0010 40               	dc.b $1, $3, $0, $10, $40
0000DA2F 090E 0014 00               	dc.b $9, $E, $0, $14, $0
0000DA34 0901 0020 48               	dc.b $9, $1, $0, $20, $48
0000DA39 210F 0022 08               	dc.b $21, $F, $0, $22, $8
0000DA3E 210F 0032 28               	dc.b $21, $F, $0, $32, $28
0000DA43 2102 0042 48               	dc.b $21, $2, $0, $42, $48
0000DA48 3103 0045 00               	dc.b $31, $3, $0, $45, $0
0000DA4D 410E 0049 08               	dc.b $41, $E, $0, $49, $8
0000DA52 410E 0055 28               	dc.b $41, $E, $0, $55, $28
0000DA57 4900 0061 F8               	dc.b $49, $0, $0, $61, $F8
0000DA5C 5100 0062 00               	dc.b $51, $0, $0, $62, $0
0000DA61 590D 0063 20               	dc.b $59, $D, $0, $63, $20
0000DA66 0F                         DATA1CYEUQGDH2I_2: dc.b $F
0000DA67 040F 00D7 18               	dc.b $4, $F, $0, $D7, $18
0000DA6C 0407 00E7 38               	dc.b $4, $7, $0, $E7, $38
0000DA71 0C09 00EF 00               	dc.b $C, $9, $0, $EF, $0
0000DA76 0C01 00F5 48               	dc.b $C, $1, $0, $F5, $48
0000DA7B 1C07 00F7 08               	dc.b $1C, $7, $0, $F7, $8
0000DA80 240F 00FF 18               	dc.b $24, $F, $0, $FF, $18
0000DA85 240A 010F 38               	dc.b $24, $A, $1, $F, $38
0000DA8A 2C07 0118 F8               	dc.b $2C, $7, $1, $18, $F8
0000DA8F 3C06 0120 08               	dc.b $3C, $6, $1, $20, $8
0000DA94 3C06 0126 38               	dc.b $3C, $6, $1, $26, $38
0000DA99 440E 012C 18               	dc.b $44, $E, $1, $2C, $18
0000DA9E 4C04 0138 F8               	dc.b $4C, $4, $1, $38, $F8
0000DAA3 5400 013A 10               	dc.b $54, $0, $1, $3A, $10
0000DAA8 5402 013B 38               	dc.b $54, $2, $1, $3B, $38
0000DAAD 5C09 013E 20               	dc.b $5C, $9, $1, $3E, $20
0000DAB2 0F                         DATA1CYEUQGDH2I_3: dc.b $F
0000DAB3 040F 006B 18               	dc.b $4, $F, $0, $6B, $18
0000DAB8 0407 007B 38               	dc.b $4, $7, $0, $7B, $38
0000DABD 0C09 0083 00               	dc.b $C, $9, $0, $83, $0
0000DAC2 0C01 0089 48               	dc.b $C, $1, $0, $89, $48
0000DAC7 1C07 008B 08               	dc.b $1C, $7, $0, $8B, $8
0000DACC 2407 0093 F8               	dc.b $24, $7, $0, $93, $F8
0000DAD1 240F 009B 18               	dc.b $24, $F, $0, $9B, $18
0000DAD6 240A 00AB 38               	dc.b $24, $A, $0, $AB, $38
0000DADB 3C06 00B4 08               	dc.b $3C, $6, $0, $B4, $8
0000DAE0 3C06 00BA 38               	dc.b $3C, $6, $0, $BA, $38
0000DAE5 4400 00C0 00               	dc.b $44, $0, $0, $C0, $0
0000DAEA 440E 00C1 18               	dc.b $44, $E, $0, $C1, $18
0000DAEF 5400 00CD 10               	dc.b $54, $0, $0, $CD, $10
0000DAF4 5402 00CE 38               	dc.b $54, $2, $0, $CE, $38
0000DAF9 5C09 00D1 20               	dc.b $5C, $9, $0, $D1, $20
0000DAFE 0F                         DATA1CYEUQGDH2I_4: dc.b $F
0000DAFF 040F 006B 18               	dc.b $4, $F, $0, $6B, $18
0000DB04 0407 007B 38               	dc.b $4, $7, $0, $7B, $38
0000DB09 0C09 0083 00               	dc.b $C, $9, $0, $83, $0
0000DB0E 0C01 0089 48               	dc.b $C, $1, $0, $89, $48
0000DB13 1C07 008B 08               	dc.b $1C, $7, $0, $8B, $8
0000DB18 2407 0093 F8               	dc.b $24, $7, $0, $93, $F8
0000DB1D 240F 009B 18               	dc.b $24, $F, $0, $9B, $18
0000DB22 240A 00AB 38               	dc.b $24, $A, $0, $AB, $38
0000DB27 3C06 00B4 08               	dc.b $3C, $6, $0, $B4, $8
0000DB2C 3C06 00BA 38               	dc.b $3C, $6, $0, $BA, $38
0000DB31 4400 00C0 00               	dc.b $44, $0, $0, $C0, $0
0000DB36 440E 00C1 18               	dc.b $44, $E, $0, $C1, $18
0000DB3B 5400 00CD 10               	dc.b $54, $0, $0, $CD, $10
0000DB40 5402 00CE 38               	dc.b $54, $2, $0, $CE, $38
0000DB45 5C09 00D1 20               	dc.b $5C, $9, $0, $D1, $20
0000DB4A 0F                         DATA1CYEUQGDH2I_5: dc.b $F
0000DB4B 040F 00D7 18               	dc.b $4, $F, $0, $D7, $18
0000DB50 0407 00E7 38               	dc.b $4, $7, $0, $E7, $38
0000DB55 0C09 00EF 00               	dc.b $C, $9, $0, $EF, $0
0000DB5A 0C01 00F5 48               	dc.b $C, $1, $0, $F5, $48
0000DB5F 1C07 00F7 08               	dc.b $1C, $7, $0, $F7, $8
0000DB64 240F 00FF 18               	dc.b $24, $F, $0, $FF, $18
0000DB69 240A 010F 38               	dc.b $24, $A, $1, $F, $38
0000DB6E 2C07 0118 F8               	dc.b $2C, $7, $1, $18, $F8
0000DB73 3C06 0120 08               	dc.b $3C, $6, $1, $20, $8
0000DB78 3C06 0126 38               	dc.b $3C, $6, $1, $26, $38
0000DB7D 440E 012C 18               	dc.b $44, $E, $1, $2C, $18
0000DB82 4C04 0138 F8               	dc.b $4C, $4, $1, $38, $F8
0000DB87 5400 013A 10               	dc.b $54, $0, $1, $3A, $10
0000DB8C 5402 013B 38               	dc.b $54, $2, $1, $3B, $38
0000DB91 5C09 013E 20               	dc.b $5C, $9, $1, $3E, $20
0000DB96 0D                         DATA1CYEUQGDH2I_6: dc.b $D
0000DB97 010F 0000 20               	dc.b $1, $F, $0, $0, $20
0000DB9C 0103 0010 40               	dc.b $1, $3, $0, $10, $40
0000DBA1 090E 0014 00               	dc.b $9, $E, $0, $14, $0
0000DBA6 0901 0020 48               	dc.b $9, $1, $0, $20, $48
0000DBAB 210F 0022 08               	dc.b $21, $F, $0, $22, $8
0000DBB0 210F 0032 28               	dc.b $21, $F, $0, $32, $28
0000DBB5 2102 0042 48               	dc.b $21, $2, $0, $42, $48
0000DBBA 3103 0045 00               	dc.b $31, $3, $0, $45, $0
0000DBBF 410E 0049 08               	dc.b $41, $E, $0, $49, $8
0000DBC4 410E 0055 28               	dc.b $41, $E, $0, $55, $28
0000DBC9 4900 0061 F8               	dc.b $49, $0, $0, $61, $F8
0000DBCE 5100 0062 00               	dc.b $51, $0, $0, $62, $0
0000DBD3 590D 0063 20               	dc.b $59, $D, $0, $63, $20
0000DBD8 0D                         DATA1CYEUQGDH2I_7: dc.b $D
0000DBD9 010F 0000 20               	dc.b $1, $F, $0, $0, $20
0000DBDE 0103 0010 40               	dc.b $1, $3, $0, $10, $40
0000DBE3 090E 0014 00               	dc.b $9, $E, $0, $14, $0
0000DBE8 0901 0020 48               	dc.b $9, $1, $0, $20, $48
0000DBED 210F 0022 08               	dc.b $21, $F, $0, $22, $8
0000DBF2 210F 0032 28               	dc.b $21, $F, $0, $32, $28
0000DBF7 2102 0042 48               	dc.b $21, $2, $0, $42, $48
0000DBFC 3103 0045 00               	dc.b $31, $3, $0, $45, $0
0000DC01 410E 0049 08               	dc.b $41, $E, $0, $49, $8
0000DC06 410E 0055 28               	dc.b $41, $E, $0, $55, $28
0000DC0B 4900 0061 F8               	dc.b $49, $0, $0, $61, $F8
0000DC10 5100 0062 00               	dc.b $51, $0, $0, $62, $0
0000DC15 590D 0063 20               	dc.b $59, $D, $0, $63, $20
0000DC1A                            	even
0000DC1A                            	even
0000DC1A                            
0000DC1A                            ; ===========================================================================
0000DC1A                            ; ---------------------------------------------------------------------------
0000DC1A                            ; Object 2B - Chopper enemy (GHZ)
0000DC1A                            ; ---------------------------------------------------------------------------
0000DC1A                            
0000DC1A                            Obj2B:					; XREF: Obj_Index
0000DC1A 7000                       		moveq	#0,d0
0000DC1C 1028 0024                  		move.b	$24(a0),d0
0000DC20 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000DC24 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000DC28 6000 0000                  		bra.w	MarkObjGone
0000DC2C                            ; ===========================================================================
0000DC2C 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000DC2E 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000DC30                            ; ===========================================================================
0000DC30                            
0000DC30                            Obj2B_Main:				; XREF: Obj2B_Index
0000DC30 5428 0024                  		addq.b	#2,$24(a0)
0000DC34 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000DC3C 317C 047B 0002             		move.w	#$47B,2(a0)
0000DC42 117C 0004 0001             		move.b	#4,1(a0)
0000DC48 117C 0004 0018             		move.b	#4,$18(a0)
0000DC4E 117C 0009 0020             		move.b	#9,$20(a0)
0000DC54 117C 0010 0019             		move.b	#$10,$19(a0)
0000DC5A 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000DC60 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000DC66                            
0000DC66                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000DC66 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000DC6C 6100 FB6C                  		bsr.w	AnimateSprite
0000DC70 6100 0000                  		bsr.w	SpeedToPos
0000DC74 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000DC7A 3028 0030                  		move.w	$30(a0),d0
0000DC7E B068 000C                  		cmp.w	$C(a0),d0
0000DC82 6400                       		bcc.s	Obj2B_ChgAni
0000DC84 3140 000C                  		move.w	d0,$C(a0)
0000DC88 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000DC8E                            
0000DC8E                            Obj2B_ChgAni:
0000DC8E 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000DC94 0440 00C0                  		subi.w	#$C0,d0
0000DC98 B068 000C                  		cmp.w	$C(a0),d0
0000DC9C 6400                       		bcc.s	locret_ABB6
0000DC9E 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000DCA4 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000DCA8 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000DCAA 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000DCB0                            
0000DCB0                            locret_ABB6:
0000DCB0 4E75                       		rts	
0000DCB2                            ; ===========================================================================
0000DCB2                            Ani_obj2B:
0000DCB2                            	include "_anim\obj2B.asm"
0000DCB2                            ; ---------------------------------------------------------------------------
0000DCB2                            ; Animation script - Chopper enemy
0000DCB2                            ; ---------------------------------------------------------------------------
0000DCB2 0000                       		dc.w byte_ABBE-Ani_obj2B
0000DCB4 0000                       		dc.w byte_ABC2-Ani_obj2B
0000DCB6 0000                       		dc.w byte_ABC6-Ani_obj2B
0000DCB8 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000DCBC 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000DCC0 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000DCC4 00                         		even
0000DCC4 00                         		even
0000DCC4                            
0000DCC4                            ; ---------------------------------------------------------------------------
0000DCC4                            ; Sprite mappings - Chopper enemy (GHZ)
0000DCC4                            ; ---------------------------------------------------------------------------
0000DCC4                            Map_obj2B:
0000DCC4                            	include "_maps\obj2B.asm"
0000DCC4                            ; ---------------------------------------------------------------------------
0000DCC4                            ; Sprite mappings - Chopper enemy (GHZ)
0000DCC4                            ; ---------------------------------------------------------------------------
0000DCC4 0000                       		dc.w byte_ABCE-Map_obj2B
0000DCC6 0000                       		dc.w byte_ABD4-Map_obj2B
0000DCC8 01                         byte_ABCE:	dc.b 1
0000DCC9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000DCCE 01                         byte_ABD4:	dc.b 1
0000DCCF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000DCD4                            		even
0000DCD4                            		even
0000DCD4                            
0000DCD4                            ; ===========================================================================
0000DCD4                            ; ---------------------------------------------------------------------------
0000DCD4                            ; Object 2C - Jaws enemy (LZ)
0000DCD4                            ; ---------------------------------------------------------------------------
0000DCD4                            
0000DCD4                            Obj2C:					; XREF: Obj_Index
0000DCD4 7000                       		moveq	#0,d0
0000DCD6 1028 0024                  		move.b	$24(a0),d0
0000DCDA 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000DCDE 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000DCE2                            ; ===========================================================================
0000DCE2 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000DCE4 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000DCE6                            ; ===========================================================================
0000DCE6                            
0000DCE6                            Obj2C_Main:				; XREF: Obj2C_Index
0000DCE6 5428 0024                  		addq.b	#2,$24(a0)
0000DCEA 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000DCF2 317C 2486 0002             		move.w	#$2486,2(a0)
0000DCF8 0028 0004 0001             		ori.b	#4,1(a0)
0000DCFE 117C 000A 0020             		move.b	#$A,$20(a0)
0000DD04 117C 0004 0018             		move.b	#4,$18(a0)
0000DD0A 117C 0010 0019             		move.b	#$10,$19(a0)
0000DD10 7000                       		moveq	#0,d0
0000DD12 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000DD16 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000DD18 5340                       		subq.w	#1,d0
0000DD1A 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000DD1E 3140 0032                  		move.w	d0,$32(a0)
0000DD22 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000DD28 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000DD2E 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000DD30 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000DD34                            
0000DD34                            Obj2C_Turn:				; XREF: Obj2C_Index
0000DD34 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000DD38 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000DD3A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000DD40 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000DD44 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000DD4A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DD50                            
0000DD50                            Obj2C_Animate:
0000DD50 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000DD56 6100 FA82                  		bsr.w	AnimateSprite
0000DD5A 6100 0000                  		bsr.w	SpeedToPos
0000DD5E 6000 0000                  		bra.w	MarkObjGone
0000DD62                            ; ===========================================================================
0000DD62                            Ani_obj2C:
0000DD62                            	include "_anim\obj2C.asm"
0000DD62                            ; ---------------------------------------------------------------------------
0000DD62                            ; Animation script - Jaws enemy
0000DD62                            ; ---------------------------------------------------------------------------
0000DD62 0000                       		dc.w byte_AC6A-Ani_obj2C
0000DD64 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000DD6A                            		even
0000DD6A                            		even
0000DD6A                            
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A                            ; Sprite mappings - Jaws enemy (LZ)
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A                            Map_obj2C:
0000DD6A                            	include "_maps\obj2C.asm"
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A                            ; Sprite mappings - Jaws enemy (LZ)
0000DD6A                            ; ---------------------------------------------------------------------------
0000DD6A 0000                       		dc.w byte_AC78-Map_obj2C
0000DD6C 0000                       		dc.w byte_AC83-Map_obj2C
0000DD6E 0000                       		dc.w byte_AC8E-Map_obj2C
0000DD70 0000                       		dc.w byte_AC99-Map_obj2C
0000DD72 02                         byte_AC78:	dc.b 2
0000DD73 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000DD78 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000DD7D 02                         byte_AC83:	dc.b 2
0000DD7E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000DD83 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000DD88 02                         byte_AC8E:	dc.b 2
0000DD89 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000DD8E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000DD93 02                         byte_AC99:	dc.b 2
0000DD94 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000DD99 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000DD9E                            		even
0000DD9E                            		even
0000DD9E                            
0000DD9E                            ; ===========================================================================
0000DD9E                            ; ---------------------------------------------------------------------------
0000DD9E                            ; Object 2D - Burrobot enemy (LZ)
0000DD9E                            ; ---------------------------------------------------------------------------
0000DD9E                            
0000DD9E                            Obj2D:					; XREF: Obj_Index
0000DD9E 7000                       		moveq	#0,d0
0000DDA0 1028 0024                  		move.b	$24(a0),d0
0000DDA4 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000DDA8 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000DDAC                            ; ===========================================================================
0000DDAC 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000DDAE 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000DDB0                            ; ===========================================================================
0000DDB0                            
0000DDB0                            Obj2D_Main:				; XREF: Obj2D_Index
0000DDB0 5428 0024                  		addq.b	#2,$24(a0)
0000DDB4 117C 0013 0016             		move.b	#$13,$16(a0)
0000DDBA 117C 0008 0017             		move.b	#8,$17(a0)
0000DDC0 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000DDC8 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000DDCE 0028 0004 0001             		ori.b	#4,1(a0)
0000DDD4 117C 0004 0018             		move.b	#4,$18(a0)
0000DDDA 117C 0005 0020             		move.b	#5,$20(a0)
0000DDE0 117C 000C 0019             		move.b	#$C,$19(a0)
0000DDE6 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000DDEA 117C 0002 001C             		move.b	#2,$1C(a0)
0000DDF0                            
0000DDF0                            Obj2D_Action:				; XREF: Obj2D_Index
0000DDF0 7000                       		moveq	#0,d0
0000DDF2 1028 0025                  		move.b	$25(a0),d0
0000DDF6 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000DDFA 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000DDFE 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000DE04 6100 F9D4                  		bsr.w	AnimateSprite
0000DE08 6000 0000                  		bra.w	MarkObjGone
0000DE0C                            ; ===========================================================================
0000DE0C 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000DE0E 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000DE10 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000DE12 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000DE14                            ; ===========================================================================
0000DE14                            
0000DE14                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000DE14 5368 0030                  		subq.w	#1,$30(a0)
0000DE18 6A00                       		bpl.s	locret_AD42
0000DE1A 5428 0025                  		addq.b	#2,$25(a0)
0000DE1E 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000DE24 317C 0080 0010             		move.w	#$80,$10(a0)
0000DE2A 117C 0001 001C             		move.b	#1,$1C(a0)
0000DE30 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000DE36 6700                       		beq.s	locret_AD42
0000DE38 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000DE3C                            
0000DE3C                            locret_AD42:
0000DE3C 4E75                       		rts	
0000DE3E                            ; ===========================================================================
0000DE3E                            
0000DE3E                            Obj2D_Move:				; XREF: Obj2D_Index2
0000DE3E 5368 0030                  		subq.w	#1,$30(a0)
0000DE42 6B00                       		bmi.s	loc_AD84
0000DE44 6100 0000                  		bsr.w	SpeedToPos
0000DE48 0868 0000 0032             		bchg	#0,$32(a0)
0000DE4E 6600                       		bne.s	loc_AD78
0000DE50 3628 0008                  		move.w	8(a0),d3
0000DE54 0643 000C                  		addi.w	#$C,d3
0000DE58 0828 0000 0022             		btst	#0,$22(a0)
0000DE5E 6600                       		bne.s	loc_AD6A
0000DE60 0443 0018                  		subi.w	#$18,d3
0000DE64                            
0000DE64                            loc_AD6A:
0000DE64 4EB9 0000 0000             		jsr	ObjHitFloor2
0000DE6A 0C41 000C                  		cmpi.w	#$C,d1
0000DE6E 6C00                       		bge.s	loc_AD84
0000DE70 4E75                       		rts	
0000DE72                            ; ===========================================================================
0000DE72                            
0000DE72                            loc_AD78:				; XREF: Obj2D_Move
0000DE72 4EB9 0000 0000             		jsr	ObjHitFloor
0000DE78 D368 000C                  		add.w	d1,$C(a0)
0000DE7C 4E75                       		rts	
0000DE7E                            ; ===========================================================================
0000DE7E                            
0000DE7E                            loc_AD84:				; XREF: Obj2D_Move
0000DE7E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000DE84 6700                       		beq.s	loc_ADA4
0000DE86 5528 0025                  		subq.b	#2,$25(a0)
0000DE8A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000DE90 317C 0000 0010             		move.w	#0,$10(a0)
0000DE96 117C 0000 001C             		move.b	#0,$1C(a0)
0000DE9C 4E75                       		rts	
0000DE9E                            ; ===========================================================================
0000DE9E                            
0000DE9E                            loc_ADA4:
0000DE9E 5428 0025                  		addq.b	#2,$25(a0)
0000DEA2 317C FC00 0012             		move.w	#-$400,$12(a0)
0000DEA8 117C 0002 001C             		move.b	#2,$1C(a0)
0000DEAE 4E75                       		rts	
0000DEB0                            ; ===========================================================================
0000DEB0                            
0000DEB0                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000DEB0 6100 0000                  		bsr.w	SpeedToPos
0000DEB4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000DEBA 6B00                       		bmi.s	locret_ADF0
0000DEBC 117C 0003 001C             		move.b	#3,$1C(a0)
0000DEC2 4EB9 0000 0000             		jsr	ObjHitFloor
0000DEC8 4A41                       		tst.w	d1
0000DECA 6A00                       		bpl.s	locret_ADF0
0000DECC D368 000C                  		add.w	d1,$C(a0)
0000DED0 317C 0000 0012             		move.w	#0,$12(a0)
0000DED6 117C 0001 001C             		move.b	#1,$1C(a0)
0000DEDC 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000DEE2 5528 0025                  		subq.b	#2,$25(a0)
0000DEE6 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000DEEA                            
0000DEEA                            locret_ADF0:
0000DEEA 4E75                       		rts	
0000DEEC                            ; ===========================================================================
0000DEEC                            
0000DEEC                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000DEEC 343C 0060                  		move.w	#$60,d2
0000DEF0 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000DEF4 6400                       		bcc.s	locret_AE20
0000DEF6 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000DEFA 9068 000C                  		sub.w	$C(a0),d0
0000DEFE 6400                       		bcc.s	locret_AE20
0000DF00 0C40 FF80                  		cmpi.w	#-$80,d0
0000DF04 6500                       		bcs.s	locret_AE20
0000DF06 4A78 FE08                  		tst.w	($FFFFFE08).w
0000DF0A 6600                       		bne.s	locret_AE20
0000DF0C 5528 0025                  		subq.b	#2,$25(a0)
0000DF10 3141 0010                  		move.w	d1,$10(a0)
0000DF14 317C FC00 0012             		move.w	#-$400,$12(a0)
0000DF1A                            
0000DF1A                            locret_AE20:
0000DF1A 4E75                       		rts	
0000DF1C                            
0000DF1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF1C                            
0000DF1C                            
0000DF1C                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000DF1C 323C 0080                  		move.w	#$80,d1
0000DF20 08E8 0000 0022             		bset	#0,$22(a0)
0000DF26 3038 D008                  		move.w	($FFFFD008).w,d0
0000DF2A 9068 0008                  		sub.w	8(a0),d0
0000DF2E 6400                       		bcc.s	loc_AE40
0000DF30 4440                       		neg.w	d0
0000DF32 4441                       		neg.w	d1
0000DF34 08A8 0000 0022             		bclr	#0,$22(a0)
0000DF3A                            
0000DF3A                            loc_AE40:
0000DF3A B042                       		cmp.w	d2,d0
0000DF3C 4E75                       		rts	
0000DF3E                            ; End of function Obj2D_ChkSonic2
0000DF3E                            
0000DF3E                            ; ===========================================================================
0000DF3E                            Ani_obj2D:
0000DF3E                            	include "_anim\obj2D.asm"
0000DF3E                            ; ---------------------------------------------------------------------------
0000DF3E                            ; Animation script - Burrobot enemy
0000DF3E                            ; ---------------------------------------------------------------------------
0000DF3E 0000                       		dc.w byte_AE4C-Ani_obj2D
0000DF40 0000                       		dc.w byte_AE50-Ani_obj2D
0000DF42 0000                       		dc.w byte_AE54-Ani_obj2D
0000DF44 0000                       		dc.w byte_AE58-Ani_obj2D
0000DF46 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000DF4A 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000DF4E 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000DF52 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000DF56 00                         		even
0000DF56 00                         		even
0000DF56                            
0000DF56                            ; ---------------------------------------------------------------------------
0000DF56                            ; Sprite mappings - Burrobot enemy (LZ)
0000DF56                            ; ---------------------------------------------------------------------------
0000DF56                            Map_obj2D:
0000DF56                            	include "_maps\obj2D.asm"
0000DF56                            ; ---------------------------------------------------------------------------
0000DF56                            ; Sprite mappings - Burrobot enemy (LZ)
0000DF56                            ; ---------------------------------------------------------------------------
0000DF56 0000                       		dc.w byte_AE6A-Map_obj2D
0000DF58 0000                       		dc.w byte_AE75-Map_obj2D
0000DF5A 0000                       		dc.w byte_AE80-Map_obj2D
0000DF5C 0000                       		dc.w byte_AE8B-Map_obj2D
0000DF5E 0000                       		dc.w byte_AE96-Map_obj2D
0000DF60 0000                       		dc.w byte_AEA1-Map_obj2D
0000DF62 0000                       		dc.w byte_AEAC-Map_obj2D
0000DF64 02                         byte_AE6A:	dc.b 2
0000DF65 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000DF6A 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000DF6F 02                         byte_AE75:	dc.b 2
0000DF70 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000DF75 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000DF7A 02                         byte_AE80:	dc.b 2
0000DF7B E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000DF80 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000DF85 02                         byte_AE8B:	dc.b 2
0000DF86 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000DF8B 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000DF90 02                         byte_AE96:	dc.b 2
0000DF91 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000DF96 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000DF9B 02                         byte_AEA1:	dc.b 2
0000DF9C F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000DFA1 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000DFA6 02                         byte_AEAC:	dc.b 2
0000DFA7 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000DFAC 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000DFB2 00                         		even
0000DFB2 00                         		even
0000DFB2                            
0000DFB2                            ; ===========================================================================
0000DFB2                            ; ---------------------------------------------------------------------------
0000DFB2                            ; Object 2F - large moving platforms (MZ)
0000DFB2                            ; ---------------------------------------------------------------------------
0000DFB2                            
0000DFB2                            Obj2F:					; XREF: Obj_Index
0000DFB2 7000                       		moveq	#0,d0
0000DFB4 1028 0024                  		move.b	$24(a0),d0
0000DFB8 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000DFBC 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000DFC0                            ; ===========================================================================
0000DFC0 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000DFC2 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000DFC4                            
0000DFC4 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000DFC6 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000DFC8 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000DFCA 0140                       		dc.b 1,	$40
0000DFCC 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000DFCE 0220                       		dc.b 2,	$20
0000DFD0                            ; ===========================================================================
0000DFD0                            
0000DFD0                            Obj2F_Main:				; XREF: Obj2F_Index
0000DFD0 5428 0024                  		addq.b	#2,$24(a0)
0000DFD4 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000DFDC 317C C000 0002             		move.w	#$C000,2(a0)
0000DFE2 117C 0004 0001             		move.b	#4,1(a0)
0000DFE8 117C 0005 0018             		move.b	#5,$18(a0)
0000DFEE 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000DFF4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000DFFA 7000                       		moveq	#0,d0
0000DFFC 1028 0028                  		move.b	$28(a0),d0
0000E000 E448                       		lsr.w	#2,d0
0000E002 0240 001C                  		andi.w	#$1C,d0
0000E006 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000E00A 3019                       		move.w	(a1)+,d0
0000E00C 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000E010 214A 0030                  		move.l	a2,$30(a0)
0000E014 1159 001A                  		move.b	(a1)+,$1A(a0)
0000E018 1151 0019                  		move.b	(a1),$19(a0)
0000E01C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E022 117C 0040 0016             		move.b	#$40,$16(a0)
0000E028 08E8 0004 0001             		bset	#4,1(a0)
0000E02E                            
0000E02E                            Obj2F_Action:				; XREF: Obj2F_Index
0000E02E 6100 0000                  		bsr.w	Obj2F_Types
0000E032 4A28 0025                  		tst.b	$25(a0)
0000E036 6700                       		beq.s	Obj2F_Solid
0000E038 7200                       		moveq	#0,d1
0000E03A 1228 0019                  		move.b	$19(a0),d1
0000E03E 0641 000B                  		addi.w	#$B,d1
0000E042 6100 C5AA                  		bsr.w	ExitPlatform
0000E046 0829 0003 0022             		btst	#3,$22(a1)
0000E04C 6600 0000                  		bne.w	Obj2F_Slope
0000E050 4228 0025                  		clr.b	$25(a0)
0000E054 6000                       		bra.s	Obj2F_Display
0000E056                            ; ===========================================================================
0000E056                            
0000E056                            Obj2F_Slope:				; XREF: Obj2F_Action
0000E056 7200                       		moveq	#0,d1
0000E058 1228 0019                  		move.b	$19(a0),d1
0000E05C 0641 000B                  		addi.w	#$B,d1
0000E060 2468 0030                  		movea.l	$30(a0),a2
0000E064 3428 0008                  		move.w	8(a0),d2
0000E068 6100 D4F0                  		bsr.w	SlopeObject2
0000E06C 6000                       		bra.s	Obj2F_Display
0000E06E                            ; ===========================================================================
0000E06E                            
0000E06E                            Obj2F_Solid:				; XREF: Obj2F_Action
0000E06E 7200                       		moveq	#0,d1
0000E070 1228 0019                  		move.b	$19(a0),d1
0000E074 0641 000B                  		addi.w	#$B,d1
0000E078 343C 0020                  		move.w	#$20,d2
0000E07C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E082 6600                       		bne.s	loc_AF8E
0000E084 343C 0030                  		move.w	#$30,d2
0000E088                            
0000E088                            loc_AF8E:
0000E088 2468 0030                  		movea.l	$30(a0),a2
0000E08C 6100 0000                  		bsr.w	SolidObject2F
0000E090                            
0000E090                            Obj2F_Display:				; XREF: Obj2F_Action
0000E090 6100 0000                  		bsr.w	DisplaySprite
0000E094 6000 0000                  		bra.w	Obj2F_ChkDel
0000E098                            
0000E098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E098                            
0000E098                            
0000E098                            Obj2F_Types:				; XREF: Obj2F_Action
0000E098 7000                       		moveq	#0,d0
0000E09A 1028 0028                  		move.b	$28(a0),d0
0000E09E 0240 0007                  		andi.w	#7,d0
0000E0A2 D040                       		add.w	d0,d0
0000E0A4 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000E0A8 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000E0AC                            ; End of function Obj2F_Types
0000E0AC                            
0000E0AC                            ; ===========================================================================
0000E0AC 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000E0AE 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000E0B0 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000E0B2 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000E0B4 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000E0B6 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000E0B8                            ; ===========================================================================
0000E0B8                            
0000E0B8                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000E0B8 4E75                       		rts			; type 00 platform doesn't move
0000E0BA                            ; ===========================================================================
0000E0BA                            
0000E0BA                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000E0BA 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000E0BE 323C 0020                  		move.w	#$20,d1
0000E0C2 6000                       		bra.s	Obj2F_Move
0000E0C4                            ; ===========================================================================
0000E0C4                            
0000E0C4                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000E0C4 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000E0C8 323C 0030                  		move.w	#$30,d1
0000E0CC 6000                       		bra.s	Obj2F_Move
0000E0CE                            ; ===========================================================================
0000E0CE                            
0000E0CE                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000E0CE 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000E0D2 323C 0040                  		move.w	#$40,d1
0000E0D6 6000                       		bra.s	Obj2F_Move
0000E0D8                            ; ===========================================================================
0000E0D8                            
0000E0D8                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000E0D8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000E0DC 323C 0060                  		move.w	#$60,d1
0000E0E0                            
0000E0E0                            Obj2F_Move:
0000E0E0 0828 0003 0028             		btst	#3,$28(a0)
0000E0E6 6700                       		beq.s	loc_AFF2
0000E0E8 4440                       		neg.w	d0
0000E0EA D041                       		add.w	d1,d0
0000E0EC                            
0000E0EC                            loc_AFF2:
0000E0EC 3228 002C                  		move.w	$2C(a0),d1
0000E0F0 9240                       		sub.w	d0,d1
0000E0F2 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000E0F6 4E75                       		rts	
0000E0F8                            ; ===========================================================================
0000E0F8                            
0000E0F8                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000E0F8 1028 0034                  		move.b	$34(a0),d0
0000E0FC 4A28 0025                  		tst.b	$25(a0)
0000E100 6600                       		bne.s	loc_B010
0000E102 5500                       		subq.b	#2,d0
0000E104 6400                       		bcc.s	loc_B01C
0000E106 7000                       		moveq	#0,d0
0000E108 6000                       		bra.s	loc_B01C
0000E10A                            ; ===========================================================================
0000E10A                            
0000E10A                            loc_B010:
0000E10A 5800                       		addq.b	#4,d0
0000E10C 0C00 0040                  		cmpi.b	#$40,d0
0000E110 6500                       		bcs.s	loc_B01C
0000E112 103C 0040                  		move.b	#$40,d0
0000E116                            
0000E116                            loc_B01C:
0000E116 1140 0034                  		move.b	d0,$34(a0)
0000E11A 4EB9 0000 3736             		jsr	(CalcSine).l
0000E120 E848                       		lsr.w	#4,d0
0000E122 3200                       		move.w	d0,d1
0000E124 D068 002C                  		add.w	$2C(a0),d0
0000E128 3140 000C                  		move.w	d0,$C(a0)
0000E12C 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000E132 6600                       		bne.s	loc_B07A
0000E134 4A28 0035                  		tst.b	$35(a0)
0000E138 6600                       		bne.s	loc_B07A
0000E13A 117C 0001 0035             		move.b	#1,$35(a0)
0000E140 6100 0000                  		bsr.w	SingleObjLoad2
0000E144 6600                       		bne.s	loc_B07A
0000E146 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000E14A 3368 0008 0008             		move.w	8(a0),8(a1)
0000E150 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000E156 5069 002C                  		addq.w	#8,$2C(a1)
0000E15A 5769 002C                  		subq.w	#3,$2C(a1)
0000E15E 0469 0040 0008             		subi.w	#$40,8(a1)
0000E164 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000E16A 2348 0038                  		move.l	a0,$38(a1)
0000E16E 2448                       		movea.l	a0,a2
0000E170 6100                       		bsr.s	sub_B09C
0000E172                            
0000E172                            loc_B07A:
0000E172 7400                       		moveq	#0,d2
0000E174 45E8 0036                  		lea	$36(a0),a2
0000E178 141A                       		move.b	(a2)+,d2
0000E17A 5302                       		subq.b	#1,d2
0000E17C 6500                       		bcs.s	locret_B09A
0000E17E                            
0000E17E                            loc_B086:
0000E17E 7000                       		moveq	#0,d0
0000E180 101A                       		move.b	(a2)+,d0
0000E182 ED48                       		lsl.w	#6,d0
0000E184 0640 D000                  		addi.w	#-$3000,d0
0000E188 3240                       		movea.w	d0,a1
0000E18A 3341 003C                  		move.w	d1,$3C(a1)
0000E18E 51CA FFEE                  		dbf	d2,loc_B086
0000E192                            
0000E192                            locret_B09A:
0000E192 4E75                       		rts	
0000E194                            
0000E194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E194                            
0000E194                            
0000E194                            sub_B09C:
0000E194 45EA 0036                  		lea	$36(a2),a2
0000E198 7000                       		moveq	#0,d0
0000E19A 1012                       		move.b	(a2),d0
0000E19C 5212                       		addq.b	#1,(a2)
0000E19E 45F2 0001                  		lea	1(a2,d0.w),a2
0000E1A2 3009                       		move.w	a1,d0
0000E1A4 0440 D000                  		subi.w	#-$3000,d0
0000E1A8 EC48                       		lsr.w	#6,d0
0000E1AA 0240 007F                  		andi.w	#$7F,d0
0000E1AE 1480                       		move.b	d0,(a2)
0000E1B0 4E75                       		rts	
0000E1B2                            ; End of function sub_B09C
0000E1B2                            
0000E1B2                            ; ===========================================================================
0000E1B2                            
0000E1B2                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000E1B2 4A28 0035                  		tst.b	$35(a0)
0000E1B6 6700                       		beq.s	loc_B0C6
0000E1B8 4A28 0001                  		tst.b	1(a0)
0000E1BC 6A00                       		bpl.s	Obj2F_DelFlames
0000E1BE                            
0000E1BE                            loc_B0C6:
0000E1BE 3028 002A                  		move.w	$2A(a0),d0
0000E1C2 0240 FF80                  		andi.w	#$FF80,d0
0000E1C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1CA 0441 0080                  		subi.w	#$80,d1
0000E1CE 0241 FF80                  		andi.w	#$FF80,d1
0000E1D2 9041                       		sub.w	d1,d0
0000E1D4 0C40 0280                  		cmpi.w	#$280,d0
0000E1D8 6200 0000                  		bhi.w	DeleteObject
0000E1DC 4E75                       		rts	
0000E1DE                            ; ===========================================================================
0000E1DE                            
0000E1DE                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000E1DE 7400                       		moveq	#0,d2
0000E1E0                            
0000E1E0                            loc_B0E8:
0000E1E0 45E8 0036                  		lea	$36(a0),a2
0000E1E4 1412                       		move.b	(a2),d2
0000E1E6 421A                       		clr.b	(a2)+
0000E1E8 5302                       		subq.b	#1,d2
0000E1EA 6500                       		bcs.s	locret_B116
0000E1EC                            
0000E1EC                            loc_B0F4:
0000E1EC 7000                       		moveq	#0,d0
0000E1EE 1012                       		move.b	(a2),d0
0000E1F0 421A                       		clr.b	(a2)+
0000E1F2 ED48                       		lsl.w	#6,d0
0000E1F4 0640 D000                  		addi.w	#-$3000,d0
0000E1F8 3240                       		movea.w	d0,a1
0000E1FA 6100 0000                  		bsr.w	DeleteObject2
0000E1FE 51CA FFEC                  		dbf	d2,loc_B0F4
0000E202 117C 0000 0035             		move.b	#0,$35(a0)
0000E208 117C 0000 0034             		move.b	#0,$34(a0)
0000E20E                            
0000E20E                            locret_B116:
0000E20E 4E75                       		rts	
0000E210                            ; ===========================================================================
0000E210                            ; ---------------------------------------------------------------------------
0000E210                            ; Collision data for large moving platforms (MZ)
0000E210                            ; ---------------------------------------------------------------------------
0000E210                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000E25C                            		even
0000E25C                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000E288                            		even
0000E288                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000E2D4                            		even
0000E2D4                            ; ===========================================================================
0000E2D4                            ; ---------------------------------------------------------------------------
0000E2D4                            ; Object 35 - fireball that sits on the	floor (MZ)
0000E2D4                            ; (appears when	you walk on sinking platforms)
0000E2D4                            ; ---------------------------------------------------------------------------
0000E2D4                            
0000E2D4                            Obj35:					; XREF: Obj_Index
0000E2D4 7000                       		moveq	#0,d0
0000E2D6 1028 0024                  		move.b	$24(a0),d0
0000E2DA 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000E2DE 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000E2E2                            ; ===========================================================================
0000E2E2 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000E2E4 0000                       		dc.w loc_B238-Obj35_Index
0000E2E6 0000                       		dc.w Obj35_Move-Obj35_Index
0000E2E8                            ; ===========================================================================
0000E2E8                            
0000E2E8                            Obj35_Main:				; XREF: Obj35_Index
0000E2E8 5428 0024                  		addq.b	#2,$24(a0)
0000E2EC 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000E2F4 317C 0345 0002             		move.w	#$345,2(a0)
0000E2FA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000E300 117C 0004 0001             		move.b	#4,1(a0)
0000E306 117C 0001 0018             		move.b	#1,$18(a0)
0000E30C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E312 117C 0008 0019             		move.b	#8,$19(a0)
0000E318 303C 00C8                  		move.w	#$C8,d0
0000E31C 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play flame sound
0000E322 4A28 0028                  		tst.b	$28(a0)
0000E326 6700                       		beq.s	loc_B238
0000E328 5428 0024                  		addq.b	#2,$24(a0)
0000E32C 6000 0000                  		bra.w	Obj35_Move
0000E330                            ; ===========================================================================
0000E330                            
0000E330                            loc_B238:				; XREF: Obj35_Index
0000E330 2268 0030                  		movea.l	$30(a0),a1
0000E334 3228 0008                  		move.w	8(a0),d1
0000E338 9268 002A                  		sub.w	$2A(a0),d1
0000E33C 0641 000C                  		addi.w	#$C,d1
0000E340 3001                       		move.w	d1,d0
0000E342 E248                       		lsr.w	#1,d0
0000E344 1031 0000                  		move.b	(a1,d0.w),d0
0000E348 4440                       		neg.w	d0
0000E34A D068 002C                  		add.w	$2C(a0),d0
0000E34E 3400                       		move.w	d0,d2
0000E350 D068 003C                  		add.w	$3C(a0),d0
0000E354 3140 000C                  		move.w	d0,$C(a0)
0000E358 0C41 0084                  		cmpi.w	#$84,d1
0000E35C 6400                       		bcc.s	loc_B2B0
0000E35E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000E366 0C41 0080                  		cmpi.w	#$80,d1
0000E36A 6400                       		bcc.s	loc_B2B0
0000E36C 2028 0008                  		move.l	8(a0),d0
0000E370 0680 0008 0000             		addi.l	#$80000,d0
0000E376 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000E37C 6600                       		bne.s	loc_B2B0
0000E37E 6100 0000                  		bsr.w	SingleObjLoad2
0000E382 6600                       		bne.s	loc_B2B0
0000E384 12BC 0035                  		move.b	#$35,0(a1)
0000E388 3368 0008 0008             		move.w	8(a0),8(a1)
0000E38E 3342 002C                  		move.w	d2,$2C(a1)
0000E392 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000E398 137C 0001 0028             		move.b	#1,$28(a1)
0000E39E 2468 0038                  		movea.l	$38(a0),a2
0000E3A2 6100 FDF0                  		bsr.w	sub_B09C
0000E3A6                            
0000E3A6                            loc_B2B0:
0000E3A6 6000                       		bra.s	Obj35_Animate
0000E3A8                            ; ===========================================================================
0000E3A8                            
0000E3A8                            Obj35_Move:				; XREF: Obj35_Index
0000E3A8 3028 002C                  		move.w	$2C(a0),d0
0000E3AC D068 003C                  		add.w	$3C(a0),d0
0000E3B0 3140 000C                  		move.w	d0,$C(a0)
0000E3B4                            
0000E3B4                            Obj35_Animate:				; XREF: loc_B238
0000E3B4 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000E3BA 6100 F41E                  		bsr.w	AnimateSprite
0000E3BE 6000 0000                  		bra.w	DisplaySprite
0000E3C2                            ; ===========================================================================
0000E3C2                            Ani_obj35:
0000E3C2                            	include "_anim\obj35.asm"
0000E3C2                            ; ---------------------------------------------------------------------------
0000E3C2                            ; Animation script - fireball that sits on the	floor (MZ)
0000E3C2                            ; ---------------------------------------------------------------------------
0000E3C2 0000                       		dc.w byte_B2CE-Ani_obj35
0000E3C4 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000E3CA                            		even
0000E3CA                            		even
0000E3CA                            
0000E3CA                            ; ---------------------------------------------------------------------------
0000E3CA                            ; Sprite mappings - large moving platforms (MZ)
0000E3CA                            ; ---------------------------------------------------------------------------
0000E3CA                            Map_obj2F:
0000E3CA                            	include "_maps\obj2F.asm"
0000E3CA                            ; ---------------------------------------------------------------------------
0000E3CA                            ; Sprite mappings - large moving platforms (MZ)
0000E3CA                            ; ---------------------------------------------------------------------------
0000E3CA 0000                       		dc.w byte_B2DA-Map_obj2F
0000E3CC 0000                       		dc.w byte_B31C-Map_obj2F
0000E3CE 0000                       		dc.w byte_B34F-Map_obj2F
0000E3D0 0D                         byte_B2DA:	dc.b $D
0000E3D1 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000E3D6 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000E3DB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000E3E0 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000E3E5 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000E3EA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000E3EF D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000E3F4 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000E3F9 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000E3FE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000E403 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000E408 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000E40D F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000E412 0A                         byte_B31C:	dc.b $A
0000E413 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000E418 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000E41D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000E422 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000E427 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000E42C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000E431 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000E436 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000E43B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000E440 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000E445 06                         byte_B34F:	dc.b 6
0000E446 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000E44B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000E450 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000E455 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000E45A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000E45F 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000E464                            		even
0000E464                            		even
0000E464                            
0000E464                            ; ---------------------------------------------------------------------------
0000E464                            ; Sprite mappings - lava balls (MZ, SLZ)
0000E464                            ; ---------------------------------------------------------------------------
0000E464                            Map_obj14:
0000E464                            	include "_maps\obj14.asm"
0000E464                            ; ---------------------------------------------------------------------------
0000E464                            ; Sprite mappings - lava balls (MZ, SLZ)
0000E464                            ; ---------------------------------------------------------------------------
0000E464 0000                       		dc.w byte_B37A-Map_obj14
0000E466 0000                       		dc.w byte_B380-Map_obj14
0000E468 0000                       		dc.w byte_B386-Map_obj14
0000E46A 0000                       		dc.w byte_B38C-Map_obj14
0000E46C 0000                       		dc.w byte_B392-Map_obj14
0000E46E 0000                       		dc.w byte_B398-Map_obj14
0000E470 01                         byte_B37A:	dc.b 1
0000E471 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000E476 01                         byte_B380:	dc.b 1
0000E477 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000E47C 01                         byte_B386:	dc.b 1
0000E47D F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000E482 01                         byte_B38C:	dc.b 1
0000E483 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000E488 01                         byte_B392:	dc.b 1
0000E489 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000E48E 01                         byte_B398:	dc.b 1
0000E48F F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000E494                            		even
0000E494                            		even
0000E494                            
0000E494                            ; ===========================================================================
0000E494                            ; ---------------------------------------------------------------------------
0000E494                            ; Object 30 - large green glassy blocks	(MZ)
0000E494                            ; ---------------------------------------------------------------------------
0000E494                            
0000E494                            Obj30:					; XREF: Obj_Index
0000E494 7000                       		moveq	#0,d0
0000E496 1028 0024                  		move.b	$24(a0),d0
0000E49A 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000E49E 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000E4A2 3028 0008                  		move.w	8(a0),d0
0000E4A6 0240 FF80                  		andi.w	#$FF80,d0
0000E4AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E4AE 0441 0080                  		subi.w	#$80,d1
0000E4B2 0241 FF80                  		andi.w	#$FF80,d1
0000E4B6 9041                       		sub.w	d1,d0
0000E4B8 0C40 0280                  		cmpi.w	#$280,d0
0000E4BC 6200 0000                  		bhi.w	Obj30_Delete
0000E4C0 6000 0000                  		bra.w	DisplaySprite
0000E4C4                            ; ===========================================================================
0000E4C4                            
0000E4C4                            Obj30_Delete:
0000E4C4 6000 0000                  		bra.w	DeleteObject
0000E4C8                            ; ===========================================================================
0000E4C8 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000E4CA 0000                       		dc.w Obj30_Block012-Obj30_Index
0000E4CC 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000E4CE 0000                       		dc.w Obj30_Block34-Obj30_Index
0000E4D0 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000E4D2                            
0000E4D2 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000E4D5 0400 01                    		dc.b 4,	0, 1
0000E4D8 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000E4DB 0800 01                    		dc.b 8,	0, 1
0000E4DE                            ; ===========================================================================
0000E4DE                            
0000E4DE                            Obj30_Main:				; XREF: Obj30_Index
0000E4DE 45F9 0000 E4D2             		lea	(Obj30_Vars1).l,a2
0000E4E4 7201                       		moveq	#1,d1
0000E4E6 117C 0048 0016             		move.b	#$48,$16(a0)
0000E4EC 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000E4F2 6500                       		bcs.s	loc_B40C	; if yes, branch
0000E4F4 45F9 0000 E4D8             		lea	(Obj30_Vars2).l,a2
0000E4FA 7201                       		moveq	#1,d1
0000E4FC 117C 0038 0016             		move.b	#$38,$16(a0)
0000E502                            
0000E502                            loc_B40C:
0000E502 2248                       		movea.l	a0,a1
0000E504 6000                       		bra.s	Obj30_Load	; load main object
0000E506                            ; ===========================================================================
0000E506                            
0000E506                            Obj30_Loop:
0000E506 6100 0000                  		bsr.w	SingleObjLoad2
0000E50A 6600                       		bne.s	loc_B480
0000E50C                            
0000E50C                            Obj30_Load:				; XREF: Obj30_Main
0000E50C 135A 0024                  		move.b	(a2)+,$24(a1)
0000E510 12BC 0030                  		move.b	#$30,0(a1)
0000E514 3368 0008 0008             		move.w	8(a0),8(a1)
0000E51A 101A                       		move.b	(a2)+,d0
0000E51C 4880                       		ext.w	d0
0000E51E D068 000C                  		add.w	$C(a0),d0
0000E522 3340 000C                  		move.w	d0,$C(a1)
0000E526 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000E52E 337C C38E 0002             		move.w	#$C38E,2(a1)
0000E534 137C 0004 0001             		move.b	#4,1(a1)
0000E53A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000E540 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E546 137C 0020 0019             		move.b	#$20,$19(a1)
0000E54C 137C 0004 0018             		move.b	#4,$18(a1)
0000E552 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E556 2348 003C                  		move.l	a0,$3C(a1)
0000E55A 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000E55E                            
0000E55E 137C 0010 0019             		move.b	#$10,$19(a1)
0000E564 137C 0003 0018             		move.b	#3,$18(a1)
0000E56A 5029 0028                  		addq.b	#8,$28(a1)
0000E56E 0229 000F 0028             		andi.b	#$F,$28(a1)
0000E574                            
0000E574                            loc_B480:
0000E574 317C 0090 0032             		move.w	#$90,$32(a0)
0000E57A 08E8 0004 0001             		bset	#4,1(a0)
0000E580                            
0000E580                            Obj30_Block012:				; XREF: Obj30_Index
0000E580 6100 0000                  		bsr.w	Obj30_Types
0000E584 323C 002B                  		move.w	#$2B,d1
0000E588 343C 0048                  		move.w	#$48,d2
0000E58C 363C 0049                  		move.w	#$49,d3
0000E590 3828 0008                  		move.w	8(a0),d4
0000E594 6000 0000                  		bra.w	SolidObject
0000E598                            ; ===========================================================================
0000E598                            
0000E598                            Obj30_Reflect012:			; XREF: Obj30_Index
0000E598 2268 003C                  		movea.l	$3C(a0),a1
0000E59C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000E5A2 6000 0000                  		bra.w	Obj30_Types
0000E5A6                            ; ===========================================================================
0000E5A6                            
0000E5A6                            Obj30_Block34:				; XREF: Obj30_Index
0000E5A6 6100 0000                  		bsr.w	Obj30_Types
0000E5AA 323C 002B                  		move.w	#$2B,d1
0000E5AE 343C 0038                  		move.w	#$38,d2
0000E5B2 363C 0039                  		move.w	#$39,d3
0000E5B6 3828 0008                  		move.w	8(a0),d4
0000E5BA 6000 0000                  		bra.w	SolidObject
0000E5BE                            ; ===========================================================================
0000E5BE                            
0000E5BE                            Obj30_Reflect34:			; XREF: Obj30_Index
0000E5BE 2268 003C                  		movea.l	$3C(a0),a1
0000E5C2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000E5C8 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000E5CE 6000 0002                  		bra.w	*+4
0000E5D2                            
0000E5D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E5D2                            
0000E5D2                            
0000E5D2                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000E5D2 7000                       		moveq	#0,d0
0000E5D4 1028 0028                  		move.b	$28(a0),d0
0000E5D8 0240 0007                  		andi.w	#7,d0
0000E5DC D040                       		add.w	d0,d0
0000E5DE 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000E5E2 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000E5E6                            ; End of function Obj30_Types
0000E5E6                            
0000E5E6                            ; ===========================================================================
0000E5E6 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000E5E8 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000E5EA 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000E5EC 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000E5EE 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000E5F0                            ; ===========================================================================
0000E5F0                            
0000E5F0                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000E5F0 4E75                       		rts	
0000E5F2                            ; ===========================================================================
0000E5F2                            
0000E5F2                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000E5F2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E5F6 323C 0040                  		move.w	#$40,d1
0000E5FA 6000                       		bra.s	loc_B514
0000E5FC                            ; ===========================================================================
0000E5FC                            
0000E5FC                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000E5FC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E600 323C 0040                  		move.w	#$40,d1
0000E604 4440                       		neg.w	d0
0000E606 D041                       		add.w	d1,d0
0000E608                            
0000E608                            loc_B514:				; XREF: Obj30_Type01
0000E608 0828 0003 0028             		btst	#3,$28(a0)
0000E60E 6700                       		beq.s	loc_B526
0000E610 4440                       		neg.w	d0
0000E612 D041                       		add.w	d1,d0
0000E614 E208                       		lsr.b	#1,d0
0000E616 0640 0020                  		addi.w	#$20,d0
0000E61A                            
0000E61A                            loc_B526:
0000E61A 6000 0000                  		bra.w	loc_B5EE
0000E61E                            ; ===========================================================================
0000E61E                            
0000E61E                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000E61E 0828 0003 0028             		btst	#3,$28(a0)
0000E624 6700                       		beq.s	loc_B53E
0000E626 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E62A 0440 0010                  		subi.w	#$10,d0
0000E62E 6000 0000                  		bra.w	loc_B5EE
0000E632                            ; ===========================================================================
0000E632                            
0000E632                            loc_B53E:
0000E632 0828 0003 0022             		btst	#3,$22(a0)
0000E638 6600                       		bne.s	loc_B54E
0000E63A 08A8 0000 0034             		bclr	#0,$34(a0)
0000E640 6000                       		bra.s	loc_B582
0000E642                            ; ===========================================================================
0000E642                            
0000E642                            loc_B54E:
0000E642 4A28 0034                  		tst.b	$34(a0)
0000E646 6600                       		bne.s	loc_B582
0000E648 117C 0001 0034             		move.b	#1,$34(a0)
0000E64E 08E8 0000 0035             		bset	#0,$35(a0)
0000E654 6700                       		beq.s	loc_B582
0000E656 08E8 0007 0034             		bset	#7,$34(a0)
0000E65C 317C 0010 0036             		move.w	#$10,$36(a0)
0000E662 117C 000A 0038             		move.b	#$A,$38(a0)
0000E668 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000E66E 6600                       		bne.s	loc_B582
0000E670 317C 0040 0036             		move.w	#$40,$36(a0)
0000E676                            
0000E676                            loc_B582:
0000E676 4A28 0034                  		tst.b	$34(a0)
0000E67A 6A00                       		bpl.s	loc_B5AA
0000E67C 4A28 0038                  		tst.b	$38(a0)
0000E680 6700                       		beq.s	loc_B594
0000E682 5328 0038                  		subq.b	#1,$38(a0)
0000E686 6600                       		bne.s	loc_B5AA
0000E688                            
0000E688                            loc_B594:
0000E688 4A68 0032                  		tst.w	$32(a0)
0000E68C 6700                       		beq.s	loc_B5A4
0000E68E 5368 0032                  		subq.w	#1,$32(a0)
0000E692 5368 0036                  		subq.w	#1,$36(a0)
0000E696 6600                       		bne.s	loc_B5AA
0000E698                            
0000E698                            loc_B5A4:
0000E698 08A8 0007 0034             		bclr	#7,$34(a0)
0000E69E                            
0000E69E                            loc_B5AA:
0000E69E 3028 0032                  		move.w	$32(a0),d0
0000E6A2 6000                       		bra.s	loc_B5EE
0000E6A4                            ; ===========================================================================
0000E6A4                            
0000E6A4                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000E6A4 0828 0003 0028             		btst	#3,$28(a0)
0000E6AA 6700                       		beq.s	Obj30_ChkSwitch
0000E6AC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E6B0 0440 0010                  		subi.w	#$10,d0
0000E6B4 6000                       		bra.s	loc_B5EE
0000E6B6                            ; ===========================================================================
0000E6B6                            
0000E6B6                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000E6B6 4A28 0034                  		tst.b	$34(a0)
0000E6BA 6600                       		bne.s	loc_B5E0
0000E6BC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000E6C0 7000                       		moveq	#0,d0
0000E6C2 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000E6C6 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000E6C8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000E6CC 6700                       		beq.s	loc_B5EA	; if not, branch
0000E6CE 117C 0001 0034             		move.b	#1,$34(a0)
0000E6D4                            
0000E6D4                            loc_B5E0:
0000E6D4 4A68 0032                  		tst.w	$32(a0)
0000E6D8 6700                       		beq.s	loc_B5EA
0000E6DA 5568 0032                  		subq.w	#2,$32(a0)
0000E6DE                            
0000E6DE                            loc_B5EA:
0000E6DE 3028 0032                  		move.w	$32(a0),d0
0000E6E2                            
0000E6E2                            loc_B5EE:
0000E6E2 3228 0030                  		move.w	$30(a0),d1
0000E6E6 9240                       		sub.w	d0,d1
0000E6E8 3141 000C                  		move.w	d1,$C(a0)
0000E6EC 4E75                       		rts	
0000E6EE                            ; ===========================================================================
0000E6EE                            ; ---------------------------------------------------------------------------
0000E6EE                            ; Sprite mappings - large green	glassy blocks (MZ)
0000E6EE                            ; ---------------------------------------------------------------------------
0000E6EE                            Map_obj30:
0000E6EE                            	include "_maps\obj30.asm"
0000E6EE                            ; ---------------------------------------------------------------------------
0000E6EE                            ; Sprite mappings - large green	glassy blocks (MZ)
0000E6EE                            ; ---------------------------------------------------------------------------
0000E6EE 0000                       		dc.w byte_B600-Map_obj30
0000E6F0 0000                       		dc.w byte_B63D-Map_obj30
0000E6F2 0000                       		dc.w byte_B648-Map_obj30
0000E6F4 0C                         byte_B600:	dc.b $C
0000E6F5 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000E6FA B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000E6FF C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000E704 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000E709 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000E70E E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000E713 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000E718 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000E71D 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000E722 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000E727 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000E72C 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000E731 02                         byte_B63D:	dc.b 2
0000E732 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000E737 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000E73C 0A                         byte_B648:	dc.b $A
0000E73D C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000E742 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000E747 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000E74C D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000E751 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000E756 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000E75B 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000E760 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000E765 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000E76A 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000E770 00                         		even
0000E770 00                         		even
0000E770                            
0000E770                            ; ===========================================================================
0000E770                            ; ---------------------------------------------------------------------------
0000E770                            ; Object 31 - stomping metal blocks on chains (MZ)
0000E770                            ; ---------------------------------------------------------------------------
0000E770                            
0000E770                            Obj31:					; XREF: Obj_Index
0000E770 7000                       		moveq	#0,d0
0000E772 1028 0024                  		move.b	$24(a0),d0
0000E776 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000E77A 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000E77E                            ; ===========================================================================
0000E77E 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000E780 0000                       		dc.w loc_B798-Obj31_Index
0000E782 0000                       		dc.w loc_B7FE-Obj31_Index
0000E784 0000                       		dc.w Obj31_Display2-Obj31_Index
0000E786 0000                       		dc.w loc_B7E2-Obj31_Index
0000E788                            
0000E788 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000E78A 0100                       		dc.b 1,	0
0000E78C                            
0000E78C 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000E78F 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000E792 08CC 03                    		dc.b 8,	$CC, 3
0000E795 06F0 02                    		dc.b 6,	$F0, 2
0000E798                            
0000E798 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000E79C 5000 7800                  		dc.w $5000, $7800
0000E7A0 3800 5800                  		dc.w $3800, $5800
0000E7A4 B800                       		dc.w $B800
0000E7A6                            ; ===========================================================================
0000E7A6                            
0000E7A6                            Obj31_Main:				; XREF: Obj31_Index
0000E7A6 7000                       		moveq	#0,d0
0000E7A8 1028 0028                  		move.b	$28(a0),d0
0000E7AC 6A00                       		bpl.s	loc_B6CE
0000E7AE 0240 007F                  		andi.w	#$7F,d0
0000E7B2 D040                       		add.w	d0,d0
0000E7B4 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000E7B8 115A 003A                  		move.b	(a2)+,$3A(a0)
0000E7BC 101A                       		move.b	(a2)+,d0
0000E7BE 1140 0028                  		move.b	d0,$28(a0)
0000E7C2                            
0000E7C2                            loc_B6CE:
0000E7C2 0200 000F                  		andi.b	#$F,d0
0000E7C6 D040                       		add.w	d0,d0
0000E7C8 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000E7CC 4A40                       		tst.w	d0
0000E7CE 6600                       		bne.s	loc_B6E0
0000E7D0 3142 0032                  		move.w	d2,$32(a0)
0000E7D4                            
0000E7D4                            loc_B6E0:
0000E7D4 45F9 0000 E78C             		lea	(Obj31_Var).l,a2
0000E7DA 2248                       		movea.l	a0,a1
0000E7DC 7203                       		moveq	#3,d1
0000E7DE 6000                       		bra.s	Obj31_MakeStomper
0000E7E0                            ; ===========================================================================
0000E7E0                            
0000E7E0                            Obj31_Loop:
0000E7E0 6100 0000                  		bsr.w	SingleObjLoad2
0000E7E4 6600 0000                  		bne.w	Obj31_SetSize
0000E7E8                            
0000E7E8                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000E7E8 135A 0024                  		move.b	(a2)+,$24(a1)
0000E7EC 12BC 0031                  		move.b	#$31,0(a1)
0000E7F0 3368 0008 0008             		move.w	8(a0),8(a1)
0000E7F6 101A                       		move.b	(a2)+,d0
0000E7F8 4880                       		ext.w	d0
0000E7FA D068 000C                  		add.w	$C(a0),d0
0000E7FE 3340 000C                  		move.w	d0,$C(a1)
0000E802 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000E80A 337C 0300 0002             		move.w	#$300,2(a1)
0000E810 137C 0004 0001             		move.b	#4,1(a1)
0000E816 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000E81C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E822 137C 0010 0019             		move.b	#$10,$19(a1)
0000E828 3342 0034                  		move.w	d2,$34(a1)
0000E82C 137C 0004 0018             		move.b	#4,$18(a1)
0000E832 135A 001A                  		move.b	(a2)+,$1A(a1)
0000E836 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000E83C 6600                       		bne.s	loc_B76A
0000E83E 5341                       		subq.w	#1,d1
0000E840 1028 0028                  		move.b	$28(a0),d0
0000E844 0240 00F0                  		andi.w	#$F0,d0
0000E848 0C40 0020                  		cmpi.w	#$20,d0
0000E84C 679A                       		beq.s	Obj31_MakeStomper
0000E84E 137C 0038 0019             		move.b	#$38,$19(a1)
0000E854 137C 0090 0020             		move.b	#$90,$20(a1)
0000E85A 5241                       		addq.w	#1,d1
0000E85C                            
0000E85C                            loc_B76A:
0000E85C 2348 003C                  		move.l	a0,$3C(a1)
0000E860 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000E864                            
0000E864 137C 0003 0018             		move.b	#3,$18(a1)
0000E86A                            
0000E86A                            Obj31_SetSize:
0000E86A 7000                       		moveq	#0,d0
0000E86C 1028 0028                  		move.b	$28(a0),d0
0000E870 E648                       		lsr.w	#3,d0
0000E872 0200 000E                  		andi.b	#$E,d0
0000E876 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000E87A 115A 0019                  		move.b	(a2)+,$19(a0)
0000E87E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000E882 6000                       		bra.s	loc_B798
0000E884                            ; ===========================================================================
0000E884 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000E886 3009                       		dc.b $30, 9
0000E888 100A                       		dc.b $10, $A
0000E88A                            ; ===========================================================================
0000E88A                            
0000E88A                            loc_B798:				; XREF: Obj31_Index
0000E88A 6100 0000                  		bsr.w	Obj31_Types
0000E88E 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000E894 7200                       		moveq	#0,d1
0000E896 1228 0019                  		move.b	$19(a0),d1
0000E89A 0641 000B                  		addi.w	#$B,d1
0000E89E 343C 000C                  		move.w	#$C,d2
0000E8A2 363C 000D                  		move.w	#$D,d3
0000E8A6 3828 0008                  		move.w	8(a0),d4
0000E8AA 6100 0000                  		bsr.w	SolidObject
0000E8AE 0828 0003 0022             		btst	#3,$22(a0)
0000E8B4 6700                       		beq.s	Obj31_Display
0000E8B6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000E8BC 6400                       		bcc.s	Obj31_Display
0000E8BE 2448                       		movea.l	a0,a2
0000E8C0 41F8 D000                  		lea	($FFFFD000).w,a0
0000E8C4 4EB9 0000 0000             		jsr	KillSonic
0000E8CA 204A                       		movea.l	a2,a0
0000E8CC                            
0000E8CC                            Obj31_Display:
0000E8CC 6100 0000                  		bsr.w	DisplaySprite
0000E8D0 6000 0000                  		bra.w	Obj31_ChkDel
0000E8D4                            ; ===========================================================================
0000E8D4                            
0000E8D4                            loc_B7E2:				; XREF: Obj31_Index
0000E8D4 117C 0080 0016             		move.b	#$80,$16(a0)
0000E8DA 08E8 0004 0001             		bset	#4,1(a0)
0000E8E0 2268 003C                  		movea.l	$3C(a0),a1
0000E8E4 1029 0032                  		move.b	$32(a1),d0
0000E8E8 EA08                       		lsr.b	#5,d0
0000E8EA 5600                       		addq.b	#3,d0
0000E8EC 1140 001A                  		move.b	d0,$1A(a0)
0000E8F0                            
0000E8F0                            loc_B7FE:				; XREF: Obj31_Index
0000E8F0 2268 003C                  		movea.l	$3C(a0),a1
0000E8F4 7000                       		moveq	#0,d0
0000E8F6 1029 0032                  		move.b	$32(a1),d0
0000E8FA D068 0030                  		add.w	$30(a0),d0
0000E8FE 3140 000C                  		move.w	d0,$C(a0)
0000E902                            
0000E902                            Obj31_Display2:				; XREF: Obj31_Index
0000E902 6100 0000                  		bsr.w	DisplaySprite
0000E906                            
0000E906                            Obj31_ChkDel:				; XREF: Obj31_Display
0000E906 3028 0008                  		move.w	8(a0),d0
0000E90A 0240 FF80                  		andi.w	#$FF80,d0
0000E90E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E912 0441 0080                  		subi.w	#$80,d1
0000E916 0241 FF80                  		andi.w	#$FF80,d1
0000E91A 9041                       		sub.w	d1,d0
0000E91C 0C40 0280                  		cmpi.w	#$280,d0
0000E920 6200 0000                  		bhi.w	DeleteObject
0000E924 4E75                       		rts	
0000E926                            ; ===========================================================================
0000E926                            
0000E926                            Obj31_Types:				; XREF: loc_B798
0000E926 1028 0028                  		move.b	$28(a0),d0
0000E92A 0240 000F                  		andi.w	#$F,d0
0000E92E D040                       		add.w	d0,d0
0000E930 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000E934 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000E938                            ; ===========================================================================
0000E938 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000E93A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E93C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E93E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000E940 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E942 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000E944 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000E946                            ; ===========================================================================
0000E946                            
0000E946                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000E946 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000E94A 7000                       		moveq	#0,d0
0000E94C 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000E950 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000E954 6700                       		beq.s	loc_B8A8	; if not, branch
0000E956 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000E95A 6A00                       		bpl.s	loc_B872
0000E95C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000E962 6700                       		beq.s	loc_B8A0
0000E964                            
0000E964                            loc_B872:
0000E964 4A68 0032                  		tst.w	$32(a0)
0000E968 6700                       		beq.s	loc_B8A0
0000E96A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E96E 0200 000F                  		andi.b	#$F,d0
0000E972 6600                       		bne.s	loc_B892
0000E974 4A28 0001                  		tst.b	1(a0)
0000E978 6A00                       		bpl.s	loc_B892
0000E97A 303C 00C7                  		move.w	#$C7,d0
0000E97E 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000E984                            
0000E984                            loc_B892:
0000E984 0468 0080 0032             		subi.w	#$80,$32(a0)
0000E98A 6400                       		bcc.s	Obj31_Restart
0000E98C 317C 0000 0032             		move.w	#0,$32(a0)
0000E992                            
0000E992                            loc_B8A0:
0000E992 317C 0000 0012             		move.w	#0,$12(a0)
0000E998 6000                       		bra.s	Obj31_Restart
0000E99A                            ; ===========================================================================
0000E99A                            
0000E99A                            loc_B8A8:				; XREF: Obj31_Type00
0000E99A 3228 0034                  		move.w	$34(a0),d1
0000E99E B268 0032                  		cmp.w	$32(a0),d1
0000E9A2 6700                       		beq.s	Obj31_Restart
0000E9A4 3028 0012                  		move.w	$12(a0),d0
0000E9A8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000E9AE D168 0032                  		add.w	d0,$32(a0)
0000E9B2 B268 0032                  		cmp.w	$32(a0),d1
0000E9B6 6200                       		bhi.s	Obj31_Restart
0000E9B8 3141 0032                  		move.w	d1,$32(a0)
0000E9BC 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000E9C2 4A28 0001                  		tst.b	1(a0)
0000E9C6 6A00                       		bpl.s	Obj31_Restart
0000E9C8 303C 00BD                  		move.w	#$BD,d0
0000E9CC 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play stomping sound
0000E9D2                            
0000E9D2                            Obj31_Restart:
0000E9D2 7000                       		moveq	#0,d0
0000E9D4 1028 0032                  		move.b	$32(a0),d0
0000E9D8 D068 0030                  		add.w	$30(a0),d0
0000E9DC 3140 000C                  		move.w	d0,$C(a0)
0000E9E0 4E75                       		rts	
0000E9E2                            ; ===========================================================================
0000E9E2                            
0000E9E2                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000E9E2 4A68 0036                  		tst.w	$36(a0)
0000E9E6 6700                       		beq.s	loc_B938
0000E9E8 4A68 0038                  		tst.w	$38(a0)
0000E9EC 6700                       		beq.s	loc_B902
0000E9EE 5368 0038                  		subq.w	#1,$38(a0)
0000E9F2 6000                       		bra.s	loc_B97C
0000E9F4                            ; ===========================================================================
0000E9F4                            
0000E9F4                            loc_B902:
0000E9F4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E9F8 0200 000F                  		andi.b	#$F,d0
0000E9FC 6600                       		bne.s	loc_B91C
0000E9FE 4A28 0001                  		tst.b	1(a0)
0000EA02 6A00                       		bpl.s	loc_B91C
0000EA04 303C 00C7                  		move.w	#$C7,d0
0000EA08 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000EA0E                            
0000EA0E                            loc_B91C:
0000EA0E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000EA14 6400                       		bcc.s	loc_B97C
0000EA16 317C 0000 0032             		move.w	#0,$32(a0)
0000EA1C 317C 0000 0012             		move.w	#0,$12(a0)
0000EA22 317C 0000 0036             		move.w	#0,$36(a0)
0000EA28 6000                       		bra.s	loc_B97C
0000EA2A                            ; ===========================================================================
0000EA2A                            
0000EA2A                            loc_B938:				; XREF: Obj31_Type01
0000EA2A 3228 0034                  		move.w	$34(a0),d1
0000EA2E B268 0032                  		cmp.w	$32(a0),d1
0000EA32 6700                       		beq.s	loc_B97C
0000EA34 3028 0012                  		move.w	$12(a0),d0
0000EA38 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000EA3E D168 0032                  		add.w	d0,$32(a0)
0000EA42 B268 0032                  		cmp.w	$32(a0),d1
0000EA46 6200                       		bhi.s	loc_B97C
0000EA48 3141 0032                  		move.w	d1,$32(a0)
0000EA4C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000EA52 317C 0001 0036             		move.w	#1,$36(a0)
0000EA58 317C 003C 0038             		move.w	#$3C,$38(a0)
0000EA5E 4A28 0001                  		tst.b	1(a0)
0000EA62 6A00                       		bpl.s	loc_B97C
0000EA64 303C 00BD                  		move.w	#$BD,d0
0000EA68 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play stomping sound
0000EA6E                            
0000EA6E                            loc_B97C:
0000EA6E 6000 FF62                  		bra.w	Obj31_Restart
0000EA72                            ; ===========================================================================
0000EA72                            
0000EA72                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000EA72 3038 D008                  		move.w	($FFFFD008).w,d0
0000EA76 9068 0008                  		sub.w	8(a0),d0
0000EA7A 6400                       		bcc.s	loc_B98C
0000EA7C 4440                       		neg.w	d0
0000EA7E                            
0000EA7E                            loc_B98C:
0000EA7E 0C40 0090                  		cmpi.w	#$90,d0
0000EA82 6400                       		bcc.s	loc_B996
0000EA84 5228 0028                  		addq.b	#1,$28(a0)
0000EA88                            
0000EA88                            loc_B996:
0000EA88 6000 FF48                  		bra.w	Obj31_Restart
0000EA8C                            ; ===========================================================================
0000EA8C                            ; ---------------------------------------------------------------------------
0000EA8C                            ; Object 45 - spiked metal block from beta version (MZ)
0000EA8C                            ; ---------------------------------------------------------------------------
0000EA8C                            
0000EA8C                            Obj45:					; XREF: Obj_Index
0000EA8C 7000                       		moveq	#0,d0
0000EA8E 1028 0024                  		move.b	$24(a0),d0
0000EA92 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000EA96 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000EA9A                            ; ===========================================================================
0000EA9A 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000EA9C 0000                       		dc.w Obj45_Solid-Obj45_Index
0000EA9E 0000                       		dc.w loc_BA8E-Obj45_Index
0000EAA0 0000                       		dc.w Obj45_Display-Obj45_Index
0000EAA2 0000                       		dc.w loc_BA7A-Obj45_Index
0000EAA4                            
0000EAA4 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000EAA7 04E4 01                    		dc.b	4, $E4,	  1
0000EAAA 0834 03                    		dc.b	8, $34,	  3
0000EAAD 0628 02                    		dc.b	6, $28,	  2
0000EAB0                            
0000EAB0 3800                       word_B9BE:	dc.w $3800
0000EAB2 A000                       		dc.w -$6000
0000EAB4 5000                       		dc.w $5000
0000EAB6                            ; ===========================================================================
0000EAB6                            
0000EAB6                            Obj45_Main:				; XREF: Obj45_Index
0000EAB6 7000                       		moveq	#0,d0
0000EAB8 1028 0028                  		move.b	$28(a0),d0
0000EABC D040                       		add.w	d0,d0
0000EABE 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000EAC2 45F9 0000 EAA4             		lea	(Obj45_Var).l,a2
0000EAC8 2248                       		movea.l	a0,a1
0000EACA 7203                       		moveq	#3,d1
0000EACC 6000                       		bra.s	Obj45_Load
0000EACE                            ; ===========================================================================
0000EACE                            
0000EACE                            Obj45_Loop:
0000EACE 6100 0000                  		bsr.w	SingleObjLoad2
0000EAD2 6600                       		bne.s	loc_BA52
0000EAD4                            
0000EAD4                            Obj45_Load:				; XREF: Obj45_Main
0000EAD4 135A 0024                  		move.b	(a2)+,$24(a1)
0000EAD8 12BC 0045                  		move.b	#$45,0(a1)
0000EADC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EAE2 101A                       		move.b	(a2)+,d0
0000EAE4 4880                       		ext.w	d0
0000EAE6 D068 0008                  		add.w	8(a0),d0
0000EAEA 3340 0008                  		move.w	d0,8(a1)
0000EAEE 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000EAF6 337C 0300 0002             		move.w	#$300,2(a1)
0000EAFC 137C 0004 0001             		move.b	#4,1(a1)
0000EB02 3369 0008 0030             		move.w	8(a1),$30(a1)
0000EB08 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000EB0E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EB14 137C 0020 0019             		move.b	#$20,$19(a1)
0000EB1A 3342 0034                  		move.w	d2,$34(a1)
0000EB1E 137C 0004 0018             		move.b	#4,$18(a1)
0000EB24 0C12 0001                  		cmpi.b	#1,(a2)
0000EB28 6600                       		bne.s	loc_BA40
0000EB2A 137C 0091 0020             		move.b	#$91,$20(a1)
0000EB30                            
0000EB30                            loc_BA40:
0000EB30 135A 001A                  		move.b	(a2)+,$1A(a1)
0000EB34 2348 003C                  		move.l	a0,$3C(a1)
0000EB38 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000EB3C                            
0000EB3C 137C 0003 0018             		move.b	#3,$18(a1)
0000EB42                            
0000EB42                            loc_BA52:
0000EB42 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB48                            
0000EB48                            Obj45_Solid:				; XREF: Obj45_Index
0000EB48 3F28 0008                  		move.w	8(a0),-(sp)
0000EB4C 6100 0000                  		bsr.w	Obj45_Move
0000EB50 323C 0017                  		move.w	#$17,d1
0000EB54 343C 0020                  		move.w	#$20,d2
0000EB58 363C 0020                  		move.w	#$20,d3
0000EB5C 381F                       		move.w	(sp)+,d4
0000EB5E 6100 0000                  		bsr.w	SolidObject
0000EB62 6100 0000                  		bsr.w	DisplaySprite
0000EB66 6000 0000                  		bra.w	Obj45_ChkDel
0000EB6A                            ; ===========================================================================
0000EB6A                            
0000EB6A                            loc_BA7A:				; XREF: Obj45_Index
0000EB6A 2268 003C                  		movea.l	$3C(a0),a1
0000EB6E 1029 0032                  		move.b	$32(a1),d0
0000EB72 0600 0010                  		addi.b	#$10,d0
0000EB76 EA08                       		lsr.b	#5,d0
0000EB78 5600                       		addq.b	#3,d0
0000EB7A 1140 001A                  		move.b	d0,$1A(a0)
0000EB7E                            
0000EB7E                            loc_BA8E:				; XREF: Obj45_Index
0000EB7E 2268 003C                  		movea.l	$3C(a0),a1
0000EB82 7000                       		moveq	#0,d0
0000EB84 1029 0032                  		move.b	$32(a1),d0
0000EB88 4440                       		neg.w	d0
0000EB8A D068 0030                  		add.w	$30(a0),d0
0000EB8E 3140 0008                  		move.w	d0,8(a0)
0000EB92                            
0000EB92                            Obj45_Display:				; XREF: Obj45_Index
0000EB92 6100 0000                  		bsr.w	DisplaySprite
0000EB96                            
0000EB96                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000EB96 3028 003A                  		move.w	$3A(a0),d0
0000EB9A 0240 FF80                  		andi.w	#$FF80,d0
0000EB9E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBA2 0441 0080                  		subi.w	#$80,d1
0000EBA6 0241 FF80                  		andi.w	#$FF80,d1
0000EBAA 9041                       		sub.w	d1,d0
0000EBAC 0C40 0280                  		cmpi.w	#$280,d0
0000EBB0 6200 0000                  		bhi.w	DeleteObject
0000EBB4 4E75                       		rts	
0000EBB6                            
0000EBB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBB6                            
0000EBB6                            
0000EBB6                            Obj45_Move:				; XREF: Obj45_Solid
0000EBB6 7000                       		moveq	#0,d0
0000EBB8 1028 0028                  		move.b	$28(a0),d0
0000EBBC D040                       		add.w	d0,d0
0000EBBE 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000EBC2 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000EBC6                            ; End of function Obj45_Move
0000EBC6                            
0000EBC6                            ; ===========================================================================
0000EBC6 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000EBC8 0000                       		dc.w loc_BADA-off_BAD6
0000EBCA                            ; ===========================================================================
0000EBCA                            
0000EBCA                            loc_BADA:				; XREF: off_BAD6
0000EBCA 4A68 0036                  		tst.w	$36(a0)
0000EBCE 6700                       		beq.s	loc_BB08
0000EBD0 4A68 0038                  		tst.w	$38(a0)
0000EBD4 6700                       		beq.s	loc_BAEC
0000EBD6 5368 0038                  		subq.w	#1,$38(a0)
0000EBDA 6000                       		bra.s	loc_BB3C
0000EBDC                            ; ===========================================================================
0000EBDC                            
0000EBDC                            loc_BAEC:
0000EBDC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000EBE2 6400                       		bcc.s	loc_BB3C
0000EBE4 317C 0000 0032             		move.w	#0,$32(a0)
0000EBEA 317C 0000 0010             		move.w	#0,$10(a0)
0000EBF0 317C 0000 0036             		move.w	#0,$36(a0)
0000EBF6 6000                       		bra.s	loc_BB3C
0000EBF8                            ; ===========================================================================
0000EBF8                            
0000EBF8                            loc_BB08:				; XREF: loc_BADA
0000EBF8 3228 0034                  		move.w	$34(a0),d1
0000EBFC B268 0032                  		cmp.w	$32(a0),d1
0000EC00 6700                       		beq.s	loc_BB3C
0000EC02 3028 0010                  		move.w	$10(a0),d0
0000EC06 0668 0070 0010             		addi.w	#$70,$10(a0)
0000EC0C D168 0032                  		add.w	d0,$32(a0)
0000EC10 B268 0032                  		cmp.w	$32(a0),d1
0000EC14 6200                       		bhi.s	loc_BB3C
0000EC16 3141 0032                  		move.w	d1,$32(a0)
0000EC1A 317C 0000 0010             		move.w	#0,$10(a0)
0000EC20 317C 0001 0036             		move.w	#1,$36(a0)
0000EC26 317C 003C 0038             		move.w	#$3C,$38(a0)
0000EC2C                            
0000EC2C                            loc_BB3C:
0000EC2C 7000                       		moveq	#0,d0
0000EC2E 1028 0032                  		move.b	$32(a0),d0
0000EC32 4440                       		neg.w	d0
0000EC34 D068 0030                  		add.w	$30(a0),d0
0000EC38 3140 0008                  		move.w	d0,8(a0)
0000EC3C 4E75                       		rts	
0000EC3E                            ; ===========================================================================
0000EC3E                            ; ---------------------------------------------------------------------------
0000EC3E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000EC3E                            ; ---------------------------------------------------------------------------
0000EC3E                            Map_obj31:
0000EC3E                            	include "_maps\obj31.asm"
0000EC3E                            ; ---------------------------------------------------------------------------
0000EC3E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000EC3E                            ; ---------------------------------------------------------------------------
0000EC3E 0000                       		dc.w byte_BB64-Map_obj31
0000EC40 0000                       		dc.w byte_BB7E-Map_obj31
0000EC42 0000                       		dc.w byte_BB98-Map_obj31
0000EC44 0000                       		dc.w byte_BB9E-Map_obj31
0000EC46 0000                       		dc.w byte_BBA9-Map_obj31
0000EC48 0000                       		dc.w byte_BBBE-Map_obj31
0000EC4A 0000                       		dc.w byte_BBDD-Map_obj31
0000EC4C 0000                       		dc.w byte_BC06-Map_obj31
0000EC4E 0000                       		dc.w byte_BC06-Map_obj31
0000EC50 0000                       		dc.w byte_BC39-Map_obj31
0000EC52 0000                       		dc.w byte_BC53-Map_obj31
0000EC54 05                         byte_BB64:	dc.b 5
0000EC55 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000EC5A F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000EC5F EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000EC64 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000EC69 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000EC6E 05                         byte_BB7E:	dc.b 5
0000EC6F F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000EC74 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000EC79 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000EC7E F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000EC83 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000EC88 01                         byte_BB98:	dc.b 1
0000EC89 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000EC8E 02                         byte_BB9E:	dc.b 2
0000EC8F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000EC94 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000EC99 04                         byte_BBA9:	dc.b 4
0000EC9A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000EC9F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000ECA4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000ECA9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000ECAE 06                         byte_BBBE:	dc.b 6
0000ECAF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000ECB4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000ECB9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000ECBE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000ECC3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000ECC8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000ECCD 08                         byte_BBDD:	dc.b 8
0000ECCE A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000ECD3 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000ECD8 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000ECDD D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000ECE2 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000ECE7 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000ECEC 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000ECF1 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000ECF6 0A                         byte_BC06:	dc.b $A
0000ECF7 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000ECFC 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000ED01 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000ED06 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000ED0B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000ED10 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000ED15 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000ED1A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000ED1F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000ED24 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000ED29 05                         byte_BC39:	dc.b 5
0000ED2A F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000ED2F F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000ED34 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000ED39 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000ED3E EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000ED43 01                         byte_BC53:	dc.b 1
0000ED44 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000ED4A 00                         		even
0000ED4A 00                         		even
0000ED4A                            
0000ED4A                            ; ---------------------------------------------------------------------------
0000ED4A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000ED4A                            ; ---------------------------------------------------------------------------
0000ED4A                            Map_obj45:
0000ED4A                            	include "_maps\obj45.asm"
0000ED4A                            ; ---------------------------------------------------------------------------
0000ED4A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000ED4A                            ; ---------------------------------------------------------------------------
0000ED4A 0000                       		dc.w byte_BC6C-Map_obj45
0000ED4C 0000                       		dc.w byte_BC7C-Map_obj45
0000ED4E 0000                       		dc.w byte_BC8C-Map_obj45
0000ED50 0000                       		dc.w byte_BC92-Map_obj45
0000ED52 0000                       		dc.w byte_BC9D-Map_obj45
0000ED54 0000                       		dc.w byte_BCB2-Map_obj45
0000ED56 0000                       		dc.w byte_BCD1-Map_obj45
0000ED58 0000                       		dc.w byte_BCFA-Map_obj45
0000ED5A 0000                       		dc.w byte_BCFA-Map_obj45
0000ED5C 03                         byte_BC6C:	dc.b 3
0000ED5D E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000ED62 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000ED67 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000ED6C 03                         byte_BC7C:	dc.b 3
0000ED6D E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000ED72 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000ED77 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000ED7C 01                         byte_BC8C:	dc.b 1
0000ED7D F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000ED82 02                         byte_BC92:	dc.b 2
0000ED83 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000ED88 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000ED8D 04                         byte_BC9D:	dc.b 4
0000ED8E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000ED93 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000ED98 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000ED9D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EDA2 06                         byte_BCB2:	dc.b 6
0000EDA3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EDA8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EDAD F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EDB2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EDB7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000EDBC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000EDC1 08                         byte_BCD1:	dc.b 8
0000EDC2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EDC7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EDCC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EDD1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EDD6 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000EDDB F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000EDE0 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000EDE5 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000EDEA 08                         byte_BCFA:	dc.b 8
0000EDEB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000EDF0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000EDF5 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000EDFA F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000EDFF F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000EE04 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000EE09 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000EE0E F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000EE13 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000EE18 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000EE1E 00                         		even
0000EE1E 00                         		even
0000EE1E                            
0000EE1E                            ; ===========================================================================
0000EE1E                            ; ---------------------------------------------------------------------------
0000EE1E                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000EE1E                            ; ---------------------------------------------------------------------------
0000EE1E                            
0000EE1E                            Obj32:					; XREF: Obj_Index
0000EE1E 7000                       		moveq	#0,d0
0000EE20 1028 0024                  		move.b	$24(a0),d0
0000EE24 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000EE28 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000EE2C                            ; ===========================================================================
0000EE2C 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000EE2E 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000EE30                            ; ===========================================================================
0000EE30                            
0000EE30                            Obj32_Main:				; XREF: Obj32_Index
0000EE30 5428 0024                  		addq.b	#2,$24(a0)
0000EE34 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000EE3C 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000EE42 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000EE48 6700                       		beq.s	loc_BD60
0000EE4A 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000EE50                            
0000EE50                            loc_BD60:
0000EE50 117C 0004 0001             		move.b	#4,1(a0)
0000EE56 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE5C 117C 0004 0018             		move.b	#4,$18(a0)
0000EE62 5668 000C                  		addq.w	#3,$C(a0)
0000EE66                            
0000EE66                            Obj32_Pressed:				; XREF: Obj32_Index
0000EE66 4A28 0001                  		tst.b	1(a0)
0000EE6A 6A00                       		bpl.s	Obj32_Display
0000EE6C 323C 001B                  		move.w	#$1B,d1
0000EE70 343C 0005                  		move.w	#5,d2
0000EE74 363C 0005                  		move.w	#5,d3
0000EE78 3828 0008                  		move.w	8(a0),d4
0000EE7C 6100 0000                  		bsr.w	SolidObject
0000EE80 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000EE86 1028 0028                  		move.b	$28(a0),d0
0000EE8A 0240 000F                  		andi.w	#$F,d0
0000EE8E 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000EE92 47F3 0000                  		lea	(a3,d0.w),a3
0000EE96 7600                       		moveq	#0,d3
0000EE98 0828 0006 0028             		btst	#6,$28(a0)
0000EE9E 6700                       		beq.s	loc_BDB2
0000EEA0 7607                       		moveq	#7,d3
0000EEA2                            
0000EEA2                            loc_BDB2:
0000EEA2 4A28 0028                  		tst.b	$28(a0)
0000EEA6 6A00                       		bpl.s	loc_BDBE
0000EEA8 6100 0000                  		bsr.w	Obj32_MZBlock
0000EEAC 6600                       		bne.s	loc_BDC8
0000EEAE                            
0000EEAE                            loc_BDBE:
0000EEAE 4A28 0025                  		tst.b	$25(a0)
0000EEB2 6600                       		bne.s	loc_BDC8
0000EEB4 0793                       		bclr	d3,(a3)
0000EEB6 6000                       		bra.s	loc_BDDE
0000EEB8                            ; ===========================================================================
0000EEB8                            
0000EEB8                            loc_BDC8:
0000EEB8 4A13                       		tst.b	(a3)
0000EEBA 6600                       		bne.s	loc_BDD6
0000EEBC 303C 00CD                  		move.w	#$CD,d0
0000EEC0 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play switch sound
0000EEC6                            
0000EEC6                            loc_BDD6:
0000EEC6 07D3                       		bset	d3,(a3)
0000EEC8 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000EECE                            
0000EECE                            loc_BDDE:
0000EECE 0828 0005 0028             		btst	#5,$28(a0)
0000EED4 6700                       		beq.s	Obj32_Display
0000EED6 5328 001E                  		subq.b	#1,$1E(a0)
0000EEDA 6A00                       		bpl.s	Obj32_Display
0000EEDC 117C 0007 001E             		move.b	#7,$1E(a0)
0000EEE2 0868 0001 001A             		bchg	#1,$1A(a0)
0000EEE8                            
0000EEE8                            Obj32_Display:
0000EEE8 6100 0000                  		bsr.w	DisplaySprite
0000EEEC 3028 0008                  		move.w	8(a0),d0
0000EEF0 0240 FF80                  		andi.w	#$FF80,d0
0000EEF4 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEF8 0441 0080                  		subi.w	#$80,d1
0000EEFC 0241 FF80                  		andi.w	#$FF80,d1
0000EF00 9041                       		sub.w	d1,d0
0000EF02 0C40 0280                  		cmpi.w	#$280,d0
0000EF06 6200 0000                  		bhi.w	Obj32_Delete
0000EF0A 4E75                       		rts	
0000EF0C                            ; ===========================================================================
0000EF0C                            
0000EF0C                            Obj32_Delete:
0000EF0C 6100 0000                  		bsr.w	DeleteObject
0000EF10 4E75                       		rts	
0000EF12                            
0000EF12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EF12                            
0000EF12                            
0000EF12                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000EF12 3F03                       		move.w	d3,-(sp)
0000EF14 3428 0008                  		move.w	8(a0),d2
0000EF18 3628 000C                  		move.w	$C(a0),d3
0000EF1C 0442 0010                  		subi.w	#$10,d2
0000EF20 5143                       		subq.w	#8,d3
0000EF22 383C 0020                  		move.w	#$20,d4
0000EF26 3A3C 0010                  		move.w	#$10,d5
0000EF2A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000EF2E 3C3C 005F                  		move.w	#$5F,d6
0000EF32                            
0000EF32                            Obj32_MZLoop:
0000EF32 4A29 0001                  		tst.b	1(a1)
0000EF36 6A00                       		bpl.s	loc_BE4E
0000EF38 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000EF3C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000EF3E                            
0000EF3E                            loc_BE4E:
0000EF3E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000EF42 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000EF46                            
0000EF46 361F                       		move.w	(sp)+,d3
0000EF48 7000                       		moveq	#0,d0
0000EF4A                            
0000EF4A                            locret_BE5A:
0000EF4A 4E75                       		rts	
0000EF4C                            ; ===========================================================================
0000EF4C 1010                       Obj32_MZData:	dc.b $10, $10
0000EF4E                            ; ===========================================================================
0000EF4E                            
0000EF4E                            loc_BE5E:				; XREF: Obj32_MZBlock
0000EF4E 7001                       		moveq	#1,d0
0000EF50 0240 003F                  		andi.w	#$3F,d0
0000EF54 D040                       		add.w	d0,d0
0000EF56 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000EF5A 121A                       		move.b	(a2)+,d1
0000EF5C 4881                       		ext.w	d1
0000EF5E 3029 0008                  		move.w	8(a1),d0
0000EF62 9041                       		sub.w	d1,d0
0000EF64 9042                       		sub.w	d2,d0
0000EF66 6400                       		bcc.s	loc_BE80
0000EF68 D241                       		add.w	d1,d1
0000EF6A D041                       		add.w	d1,d0
0000EF6C 6500                       		bcs.s	loc_BE84
0000EF6E 60CE                       		bra.s	loc_BE4E
0000EF70                            ; ===========================================================================
0000EF70                            
0000EF70                            loc_BE80:
0000EF70 B044                       		cmp.w	d4,d0
0000EF72 62CA                       		bhi.s	loc_BE4E
0000EF74                            
0000EF74                            loc_BE84:
0000EF74 121A                       		move.b	(a2)+,d1
0000EF76 4881                       		ext.w	d1
0000EF78 3029 000C                  		move.w	$C(a1),d0
0000EF7C 9041                       		sub.w	d1,d0
0000EF7E 9043                       		sub.w	d3,d0
0000EF80 6400                       		bcc.s	loc_BE9A
0000EF82 D241                       		add.w	d1,d1
0000EF84 D041                       		add.w	d1,d0
0000EF86 6500                       		bcs.s	loc_BE9E
0000EF88 60B4                       		bra.s	loc_BE4E
0000EF8A                            ; ===========================================================================
0000EF8A                            
0000EF8A                            loc_BE9A:
0000EF8A B045                       		cmp.w	d5,d0
0000EF8C 62B0                       		bhi.s	loc_BE4E
0000EF8E                            
0000EF8E                            loc_BE9E:
0000EF8E 361F                       		move.w	(sp)+,d3
0000EF90 7001                       		moveq	#1,d0
0000EF92 4E75                       		rts	
0000EF94                            ; End of function Obj32_MZBlock
0000EF94                            
0000EF94                            ; ===========================================================================
0000EF94                            ; ---------------------------------------------------------------------------
0000EF94                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000EF94                            ; ---------------------------------------------------------------------------
0000EF94                            Map_obj32:
0000EF94                            	include "_maps\obj32.asm"
0000EF94                            ; ---------------------------------------------------------------------------
0000EF94                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000EF94                            ; ---------------------------------------------------------------------------
0000EF94 0000                       		dc.w byte_BEAC-Map_obj32
0000EF96 0000                       		dc.w byte_BEB7-Map_obj32
0000EF98 0000                       		dc.w byte_BEC2-Map_obj32
0000EF9A 0000                       		dc.w byte_BEB7-Map_obj32
0000EF9C 02                         byte_BEAC:	dc.b 2
0000EF9D F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000EFA2 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000EFA7 02                         byte_BEB7:	dc.b 2
0000EFA8 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000EFAD F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000EFB2 02                         byte_BEC2:	dc.b 2
0000EFB3 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000EFB8 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000EFBD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EFC2                            		even
0000EFC2                            		even
0000EFC2                            
0000EFC2                            ; ===========================================================================
0000EFC2                            ; ---------------------------------------------------------------------------
0000EFC2                            ; Object 33 - pushable blocks (MZ, LZ)
0000EFC2                            ; ---------------------------------------------------------------------------
0000EFC2                            
0000EFC2                            Obj33:					; XREF: Obj_Index
0000EFC2 7000                       		moveq	#0,d0
0000EFC4 1028 0024                  		move.b	$24(a0),d0
0000EFC8 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000EFCC 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000EFD0                            ; ===========================================================================
0000EFD0 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000EFD2 0000                       		dc.w loc_BF6E-Obj33_Index
0000EFD4 0000                       		dc.w loc_C02C-Obj33_Index
0000EFD6                            
0000EFD6 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000EFD8 4001                       		dc.b $40, 1
0000EFDA                            ; ===========================================================================
0000EFDA                            
0000EFDA                            Obj33_Main:				; XREF: Obj33_Index
0000EFDA 5428 0024                  		addq.b	#2,$24(a0)
0000EFDE 117C 000F 0016             		move.b	#$F,$16(a0)
0000EFE4 117C 000F 0017             		move.b	#$F,$17(a0)
0000EFEA 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000EFF2 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000EFF8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000EFFE 6600                       		bne.s	loc_BF16
0000F000 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000F006                            
0000F006                            loc_BF16:
0000F006 117C 0004 0001             		move.b	#4,1(a0)
0000F00C 117C 0003 0018             		move.b	#3,$18(a0)
0000F012 3168 0008 0034             		move.w	8(a0),$34(a0)
0000F018 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000F01E 7000                       		moveq	#0,d0
0000F020 1028 0028                  		move.b	$28(a0),d0
0000F024 D040                       		add.w	d0,d0
0000F026 0240 000E                  		andi.w	#$E,d0
0000F02A 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000F02E 115A 0019                  		move.b	(a2)+,$19(a0)
0000F032 115A 001A                  		move.b	(a2)+,$1A(a0)
0000F036 4A28 0028                  		tst.b	$28(a0)
0000F03A 6700                       		beq.s	Obj33_ChkGone
0000F03C 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000F042                            
0000F042                            Obj33_ChkGone:
0000F042 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F046 7000                       		moveq	#0,d0
0000F048 1028 0023                  		move.b	$23(a0),d0
0000F04C 6700                       		beq.s	loc_BF6E
0000F04E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F054 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000F05A 6600 0000                  		bne.w	DeleteObject
0000F05E                            
0000F05E                            loc_BF6E:				; XREF: Obj33_Index
0000F05E 4A28 0032                  		tst.b	$32(a0)
0000F062 6600 0000                  		bne.w	loc_C046
0000F066 7200                       		moveq	#0,d1
0000F068 1228 0019                  		move.b	$19(a0),d1
0000F06C 0641 000B                  		addi.w	#$B,d1
0000F070 343C 0010                  		move.w	#$10,d2
0000F074 363C 0011                  		move.w	#$11,d3
0000F078 3828 0008                  		move.w	8(a0),d4
0000F07C 6100 0000                  		bsr.w	loc_C186
0000F080 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000F086 6600                       		bne.s	loc_BFC6	; if not, branch
0000F088 08A8 0007 0028             		bclr	#7,$28(a0)
0000F08E 3028 0008                  		move.w	8(a0),d0
0000F092 0C40 0A20                  		cmpi.w	#$A20,d0
0000F096 6500                       		bcs.s	loc_BFC6
0000F098 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000F09C 6400                       		bcc.s	loc_BFC6
0000F09E 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000F0A2 0440 001C                  		subi.w	#$1C,d0
0000F0A6 3140 000C                  		move.w	d0,$C(a0)
0000F0AA 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000F0B0 08E8 0007 0028             		bset	#7,$28(a0)
0000F0B6                            
0000F0B6                            loc_BFC6:
0000F0B6 3028 0008                  		move.w	8(a0),d0
0000F0BA 0240 FF80                  		andi.w	#$FF80,d0
0000F0BE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0C2 0441 0080                  		subi.w	#$80,d1
0000F0C6 0241 FF80                  		andi.w	#$FF80,d1
0000F0CA 9041                       		sub.w	d1,d0
0000F0CC 0C40 0280                  		cmpi.w	#$280,d0
0000F0D0 6200                       		bhi.s	loc_BFE6
0000F0D2 6000 0000                  		bra.w	DisplaySprite
0000F0D6                            ; ===========================================================================
0000F0D6                            
0000F0D6                            loc_BFE6:
0000F0D6 3028 0034                  		move.w	$34(a0),d0
0000F0DA 0240 FF80                  		andi.w	#$FF80,d0
0000F0DE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0E2 0441 0080                  		subi.w	#$80,d1
0000F0E6 0241 FF80                  		andi.w	#$FF80,d1
0000F0EA 9041                       		sub.w	d1,d0
0000F0EC 0C40 0280                  		cmpi.w	#$280,d0
0000F0F0 6200                       		bhi.s	loc_C016
0000F0F2 3168 0034 0008             		move.w	$34(a0),8(a0)
0000F0F8 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000F0FE 117C 0004 0024             		move.b	#4,$24(a0)
0000F104 6000                       		bra.s	loc_C02C
0000F106                            ; ===========================================================================
0000F106                            
0000F106                            loc_C016:
0000F106 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F10A 7000                       		moveq	#0,d0
0000F10C 1028 0023                  		move.b	$23(a0),d0
0000F110 6700                       		beq.s	loc_C028
0000F112 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000F118                            
0000F118                            loc_C028:
0000F118 6000 0000                  		bra.w	DeleteObject
0000F11C                            ; ===========================================================================
0000F11C                            
0000F11C                            loc_C02C:				; XREF: Obj33_Index
0000F11C 6100 0000                  		bsr.w	ChkObjOnScreen2
0000F120 6700                       		beq.s	locret_C044
0000F122 117C 0002 0024             		move.b	#2,$24(a0)
0000F128 4228 0032                  		clr.b	$32(a0)
0000F12C 4268 0010                  		clr.w	$10(a0)
0000F130 4268 0012                  		clr.w	$12(a0)
0000F134                            
0000F134                            locret_C044:
0000F134 4E75                       		rts	
0000F136                            ; ===========================================================================
0000F136                            
0000F136                            loc_C046:				; XREF: loc_BF6E
0000F136 3F28 0008                  		move.w	8(a0),-(sp)
0000F13A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000F140 6400                       		bcc.s	loc_C056
0000F142 6100 0000                  		bsr.w	SpeedToPos
0000F146                            
0000F146                            loc_C056:
0000F146 0828 0001 0022             		btst	#1,$22(a0)
0000F14C 6700                       		beq.s	loc_C0A0
0000F14E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000F154 4EB9 0000 0000             		jsr	ObjHitFloor
0000F15A 4A41                       		tst.w	d1
0000F15C 6A00 0000                  		bpl.w	loc_C09E
0000F160 D368 000C                  		add.w	d1,$C(a0)
0000F164 4268 0012                  		clr.w	$12(a0)
0000F168 08A8 0001 0022             		bclr	#1,$22(a0)
0000F16E 3011                       		move.w	(a1),d0
0000F170 0240 03FF                  		andi.w	#$3FF,d0
0000F174 0C40 016A                  		cmpi.w	#$16A,d0
0000F178 6500                       		bcs.s	loc_C09E
0000F17A 3028 0030                  		move.w	$30(a0),d0
0000F17E E640                       		asr.w	#3,d0
0000F180 3140 0010                  		move.w	d0,$10(a0)
0000F184 117C 0001 0032             		move.b	#1,$32(a0)
0000F18A 4268 000E                  		clr.w	$E(a0)
0000F18E                            
0000F18E                            loc_C09E:
0000F18E 6000                       		bra.s	loc_C0E6
0000F190                            ; ===========================================================================
0000F190                            
0000F190                            loc_C0A0:
0000F190 4A68 0010                  		tst.w	$10(a0)
0000F194 6700 0000                  		beq.w	loc_C0D6
0000F198 6B00                       		bmi.s	loc_C0BC
0000F19A 7600                       		moveq	#0,d3
0000F19C 1628 0019                  		move.b	$19(a0),d3
0000F1A0 4EB9 0000 0000             		jsr	ObjHitWallRight
0000F1A6 4A41                       		tst.w	d1		; has block touched a wall?
0000F1A8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000F1AA 6000                       		bra.s	loc_C0E6
0000F1AC                            ; ===========================================================================
0000F1AC                            
0000F1AC                            loc_C0BC:
0000F1AC 7600                       		moveq	#0,d3
0000F1AE 1628 0019                  		move.b	$19(a0),d3
0000F1B2 4643                       		not.w	d3
0000F1B4 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000F1BA 4A41                       		tst.w	d1		; has block touched a wall?
0000F1BC 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000F1BE 6000                       		bra.s	loc_C0E6
0000F1C0                            ; ===========================================================================
0000F1C0                            
0000F1C0                            Obj33_StopPush:
0000F1C0 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000F1C4 6000                       		bra.s	loc_C0E6
0000F1C6                            ; ===========================================================================
0000F1C6                            
0000F1C6                            loc_C0D6:
0000F1C6 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000F1CE 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000F1D4 6400                       		bcc.s	loc_C104
0000F1D6                            
0000F1D6                            loc_C0E6:
0000F1D6 7200                       		moveq	#0,d1
0000F1D8 1228 0019                  		move.b	$19(a0),d1
0000F1DC 0641 000B                  		addi.w	#$B,d1
0000F1E0 343C 0010                  		move.w	#$10,d2
0000F1E4 363C 0011                  		move.w	#$11,d3
0000F1E8 381F                       		move.w	(sp)+,d4
0000F1EA 6100 0000                  		bsr.w	loc_C186
0000F1EE 6100                       		bsr.s	Obj33_ChkLava
0000F1F0 6000 FEC4                  		bra.w	loc_BFC6
0000F1F4                            ; ===========================================================================
0000F1F4                            
0000F1F4                            loc_C104:
0000F1F4 381F                       		move.w	(sp)+,d4
0000F1F6 43F8 D000                  		lea	($FFFFD000).w,a1
0000F1FA 08A9 0003 0022             		bclr	#3,$22(a1)
0000F200 08A8 0003 0022             		bclr	#3,$22(a0)
0000F206 6000 FECE                  		bra.w	loc_BFE6
0000F20A                            ; ===========================================================================
0000F20A                            
0000F20A                            Obj33_ChkLava:
0000F20A 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000F210 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000F212 343C FFE0                  		move.w	#-$20,d2
0000F216 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000F21C 6700                       		beq.s	Obj33_LoadLava
0000F21E 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000F224 6700                       		beq.s	Obj33_LoadLava
0000F226 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000F22C 6700                       		beq.s	Obj33_LoadLava
0000F22E 4E75                       		rts	
0000F230                            ; ===========================================================================
0000F230                            
0000F230                            Obj33_ChkLava2:
0000F230 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000F236 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000F238 343C 0020                  		move.w	#$20,d2
0000F23C 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000F242 6700                       		beq.s	Obj33_LoadLava
0000F244 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000F24A 6700                       		beq.s	Obj33_LoadLava
0000F24C                            
0000F24C                            Obj33_NoLava:
0000F24C 4E75                       		rts	
0000F24E                            ; ===========================================================================
0000F24E                            
0000F24E                            Obj33_LoadLava:
0000F24E 6100 0000                  		bsr.w	SingleObjLoad
0000F252 6600                       		bne.s	locret_C184
0000F254 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000F258 3368 0008 0008             		move.w	8(a0),8(a1)
0000F25E D569 0008                  		add.w	d2,8(a1)
0000F262 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F268 0669 0010 000C             		addi.w	#$10,$C(a1)
0000F26E 2348 003C                  		move.l	a0,$3C(a1)
0000F272                            
0000F272                            locret_C184:
0000F272 4E75                       		rts	
0000F274                            ; ===========================================================================
0000F274                            
0000F274                            loc_C186:				; XREF: loc_BF6E
0000F274 1028 0025                  		move.b	$25(a0),d0
0000F278 6700 0000                  		beq.w	loc_C218
0000F27C 5500                       		subq.b	#2,d0
0000F27E 6600                       		bne.s	loc_C1AA
0000F280 6100 B36C                  		bsr.w	ExitPlatform
0000F284 0829 0003 0022             		btst	#3,$22(a1)
0000F28A 6600                       		bne.s	loc_C1A4
0000F28C 4228 0025                  		clr.b	$25(a0)
0000F290 4E75                       		rts	
0000F292                            ; ===========================================================================
0000F292                            
0000F292                            loc_C1A4:
0000F292 3404                       		move.w	d4,d2
0000F294 6000 B8B6                  		bra.w	MvSonicOnPtfm
0000F298                            ; ===========================================================================
0000F298                            
0000F298                            loc_C1AA:
0000F298 5500                       		subq.b	#2,d0
0000F29A 6600                       		bne.s	loc_C1F2
0000F29C 6100 0000                  		bsr.w	SpeedToPos
0000F2A0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000F2A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000F2AC 4A41                       		tst.w	d1
0000F2AE 6A00 0000                  		bpl.w	locret_C1F0
0000F2B2 D368 000C                  		add.w	d1,$C(a0)
0000F2B6 4268 0012                  		clr.w	$12(a0)
0000F2BA 4228 0025                  		clr.b	$25(a0)
0000F2BE 3011                       		move.w	(a1),d0
0000F2C0 0240 03FF                  		andi.w	#$3FF,d0
0000F2C4 0C40 016A                  		cmpi.w	#$16A,d0
0000F2C8 6500                       		bcs.s	locret_C1F0
0000F2CA 3028 0030                  		move.w	$30(a0),d0
0000F2CE E640                       		asr.w	#3,d0
0000F2D0 3140 0010                  		move.w	d0,$10(a0)
0000F2D4 117C 0001 0032             		move.b	#1,$32(a0)
0000F2DA 4268 000E                  		clr.w	$E(a0)
0000F2DE                            
0000F2DE                            locret_C1F0:
0000F2DE 4E75                       		rts	
0000F2E0                            ; ===========================================================================
0000F2E0                            
0000F2E0                            loc_C1F2:
0000F2E0 6100 0000                  		bsr.w	SpeedToPos
0000F2E4 3028 0008                  		move.w	8(a0),d0
0000F2E8 0240 000C                  		andi.w	#$C,d0
0000F2EC 6600 0000                  		bne.w	locret_C2E4
0000F2F0 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000F2F6 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000F2FC 4268 0010                  		clr.w	$10(a0)
0000F300 5528 0025                  		subq.b	#2,$25(a0)
0000F304 4E75                       		rts	
0000F306                            ; ===========================================================================
0000F306                            
0000F306                            loc_C218:
0000F306 6100 0000                  		bsr.w	loc_FAC8
0000F30A 4A44                       		tst.w	d4
0000F30C 6700 0000                  		beq.w	locret_C2E4
0000F310 6B00 0000                  		bmi.w	locret_C2E4
0000F314 4A28 0032                  		tst.b	$32(a0)
0000F318 6700                       		beq.s	loc_C230
0000F31A 6000 0000                  		bra.w	locret_C2E4
0000F31E                            ; ===========================================================================
0000F31E                            
0000F31E                            loc_C230:
0000F31E 4A40                       		tst.w	d0
0000F320 6700 0000                  		beq.w	locret_C2E4
0000F324 6B00                       		bmi.s	loc_C268
0000F326 0829 0000 0022             		btst	#0,$22(a1)
0000F32C 6600 0000                  		bne.w	locret_C2E4
0000F330 3F00                       		move.w	d0,-(sp)
0000F332 7600                       		moveq	#0,d3
0000F334 1628 0019                  		move.b	$19(a0),d3
0000F338 4EB9 0000 0000             		jsr	ObjHitWallRight
0000F33E 301F                       		move.w	(sp)+,d0
0000F340 4A41                       		tst.w	d1
0000F342 6B00 0000                  		bmi.w	locret_C2E4
0000F346 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000F34E 7001                       		moveq	#1,d0
0000F350 323C 0040                  		move.w	#$40,d1
0000F354 6000                       		bra.s	loc_C294
0000F356                            ; ===========================================================================
0000F356                            
0000F356                            loc_C268:
0000F356 0829 0000 0022             		btst	#0,$22(a1)
0000F35C 6700                       		beq.s	locret_C2E4
0000F35E 3F00                       		move.w	d0,-(sp)
0000F360 7600                       		moveq	#0,d3
0000F362 1628 0019                  		move.b	$19(a0),d3
0000F366 4643                       		not.w	d3
0000F368 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000F36E 301F                       		move.w	(sp)+,d0
0000F370 4A41                       		tst.w	d1
0000F372 6B00                       		bmi.s	locret_C2E4
0000F374 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000F37C 70FF                       		moveq	#-1,d0
0000F37E 323C FFC0                  		move.w	#-$40,d1
0000F382                            
0000F382                            loc_C294:
0000F382 43F8 D000                  		lea	($FFFFD000).w,a1
0000F386 D169 0008                  		add.w	d0,8(a1)
0000F38A 3341 0014                  		move.w	d1,$14(a1)
0000F38E 337C 0000 0010             		move.w	#0,$10(a1)
0000F394 3F00                       		move.w	d0,-(sp)
0000F396 303C 00A7                  		move.w	#$A7,d0
0000F39A 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play pushing sound
0000F3A0 301F                       		move.w	(sp)+,d0
0000F3A2 4A28 0028                  		tst.b	$28(a0)
0000F3A6 6B00                       		bmi.s	locret_C2E4
0000F3A8 3F00                       		move.w	d0,-(sp)
0000F3AA 4EB9 0000 0000             		jsr	ObjHitFloor
0000F3B0 301F                       		move.w	(sp)+,d0
0000F3B2 0C41 0004                  		cmpi.w	#4,d1
0000F3B6 6F00                       		ble.s	loc_C2E0
0000F3B8 317C 0400 0010             		move.w	#$400,$10(a0)
0000F3BE 4A40                       		tst.w	d0
0000F3C0 6A00                       		bpl.s	loc_C2D8
0000F3C2 4468 0010                  		neg.w	$10(a0)
0000F3C6                            
0000F3C6                            loc_C2D8:
0000F3C6 117C 0006 0025             		move.b	#6,$25(a0)
0000F3CC 6000                       		bra.s	locret_C2E4
0000F3CE                            ; ===========================================================================
0000F3CE                            
0000F3CE                            loc_C2E0:
0000F3CE D368 000C                  		add.w	d1,$C(a0)
0000F3D2                            
0000F3D2                            locret_C2E4:
0000F3D2 4E75                       		rts	
0000F3D4                            ; ===========================================================================
0000F3D4                            ; ---------------------------------------------------------------------------
0000F3D4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000F3D4                            ; ---------------------------------------------------------------------------
0000F3D4                            Map_obj33:
0000F3D4                            	include "_maps\obj33.asm"
0000F3D4                            ; ---------------------------------------------------------------------------
0000F3D4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000F3D4                            ; ---------------------------------------------------------------------------
0000F3D4 0000                       		dc.w byte_C2EA-Map_obj33
0000F3D6 0000                       		dc.w byte_C2F0-Map_obj33
0000F3D8 01                         byte_C2EA:	dc.b 1
0000F3D9 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000F3DE 04                         byte_C2F0:	dc.b 4
0000F3DF F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000F3E4 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000F3E9 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000F3EE F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000F3F4 00                         		even
0000F3F4 00                         		even
0000F3F4                            
0000F3F4                            ; ===========================================================================
0000F3F4                            ; ---------------------------------------------------------------------------
0000F3F4                            ; Object 34 - zone title cards
0000F3F4                            ; ---------------------------------------------------------------------------
0000F3F4                            
0000F3F4                            Obj34:					; XREF: Obj_Index
0000F3F4 7000                       		moveq	#0,d0
0000F3F6 1028 0024                  		move.b	$24(a0),d0
0000F3FA 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000F3FE 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000F402                            ; ===========================================================================
0000F402 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000F404 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000F406 0000                       		dc.w Obj34_Wait-Obj34_Index
0000F408 0000                       		dc.w Obj34_Wait-Obj34_Index
0000F40A                            ; ===========================================================================
0000F40A                            
0000F40A                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000F40A 2248                       		movea.l	a0,a1
0000F40C 7000                       		moveq	#0,d0
0000F40E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000F412 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000F418 6600                       		bne.s	Obj34_CheckFZ
0000F41A 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000F41C                            
0000F41C                            Obj34_CheckFZ:
0000F41C 3400                       		move.w	d0,d2
0000F41E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000F424 6600                       		bne.s	Obj34_LoadConfig
0000F426 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000F428 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000F42A                            
0000F42A                            Obj34_LoadConfig:
0000F42A 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000F430 E948                       		lsl.w	#4,d0
0000F432 D6C0                       		adda.w	d0,a3
0000F434 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000F43A 7203                       		moveq	#3,d1
0000F43C                            
0000F43C                            Obj34_Loop:
0000F43C 12BC 0034                  		move.b	#$34,0(a1)
0000F440 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000F444 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000F448 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000F44C 335A 000A                  		move.w	(a2)+,$A(a1)
0000F450 135A 0024                  		move.b	(a2)+,$24(a1)
0000F454 101A                       		move.b	(a2)+,d0
0000F456 6600                       		bne.s	Obj34_ActNumber
0000F458 1002                       		move.b	d2,d0
0000F45A                            
0000F45A                            Obj34_ActNumber:
0000F45A 0C00 0007                  		cmpi.b	#7,d0
0000F45E 6600                       		bne.s	Obj34_MakeSprite
0000F460 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000F464 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000F46A 6600                       		bne.s	Obj34_MakeSprite
0000F46C 5300                       		subq.b	#1,d0
0000F46E                            
0000F46E                            Obj34_MakeSprite:
0000F46E 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000F472 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000F47A 337C 8580 0002             		move.w	#$8580,2(a1)
0000F480 137C 0078 0019             		move.b	#$78,$19(a1)
0000F486 137C 0000 0001             		move.b	#0,1(a1)
0000F48C 137C 0000 0018             		move.b	#0,$18(a1)
0000F492 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000F498 43E9 0040                  		lea	$40(a1),a1	; next object
0000F49C 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000F4A0                            
0000F4A0                            Obj34_ChkPos:				; XREF: Obj34_Index
0000F4A0 7210                       		moveq	#$10,d1		; set horizontal speed
0000F4A2 3028 0030                  		move.w	$30(a0),d0
0000F4A6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000F4AA 6700                       		beq.s	loc_C3C8	; if yes, branch
0000F4AC 6C00                       		bge.s	Obj34_Move
0000F4AE 4441                       		neg.w	d1
0000F4B0                            
0000F4B0                            Obj34_Move:
0000F4B0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F4B4                            
0000F4B4                            loc_C3C8:
0000F4B4 3028 0008                  		move.w	8(a0),d0
0000F4B8 6B00                       		bmi.s	locret_C3D8
0000F4BA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F4BE 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000F4C0 6000 0000                  		bra.w	DisplaySprite
0000F4C4                            ; ===========================================================================
0000F4C4                            
0000F4C4                            locret_C3D8:
0000F4C4 4E75                       		rts	
0000F4C6                            ; ===========================================================================
0000F4C6                            
0000F4C6                            Obj34_Wait:				; XREF: Obj34_Index
0000F4C6 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000F4CA 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000F4CC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000F4D0 6000 0000                  		bra.w	DisplaySprite
0000F4D4                            ; ===========================================================================
0000F4D4                            
0000F4D4                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000F4D4 4A28 0001                  		tst.b	1(a0)
0000F4D8 6A00                       		bpl.s	Obj34_ChangeArt
0000F4DA 7220                       		moveq	#$20,d1
0000F4DC 3028 0032                  		move.w	$32(a0),d0
0000F4E0 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000F4E4 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000F4E6 6C00                       		bge.s	Obj34_Move2
0000F4E8 4441                       		neg.w	d1
0000F4EA                            
0000F4EA                            Obj34_Move2:
0000F4EA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F4EE 3028 0008                  		move.w	8(a0),d0
0000F4F2 6B00                       		bmi.s	locret_C412
0000F4F4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F4F8 6400                       		bcc.s	locret_C412	; if yes, branch
0000F4FA 6000 0000                  		bra.w	DisplaySprite
0000F4FE                            ; ===========================================================================
0000F4FE                            
0000F4FE                            locret_C412:
0000F4FE 4E75                       		rts	
0000F500                            ; ===========================================================================
0000F500                            
0000F500                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000F500 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000F506 6600                       		bne.s	Obj34_Delete
0000F508 7002                       		moveq	#2,d0
0000F50A 4EB9 0000 13A2             		jsr	(LoadPLC).l	; load explosion patterns
0000F510 7000                       		moveq	#0,d0
0000F512 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000F516 0640 0015                  		addi.w	#$15,d0
0000F51A 4EB9 0000 13A2             		jsr	(LoadPLC).l	; load animal patterns
0000F520                            
0000F520                            Obj34_Delete:
0000F520 6000 0000                  		bra.w	DeleteObject
0000F524                            ; ===========================================================================
0000F524 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000F526 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000F528 00E4                       		dc.w $E4
0000F52A 0206                       		dc.b 2,	6
0000F52C 00EA                       		dc.w $EA
0000F52E 0207                       		dc.b 2,	7
0000F530 00E0                       		dc.w $E0
0000F532 020A                       		dc.b 2,	$A
0000F534                            ; ---------------------------------------------------------------------------
0000F534                            ; Title	card configuration data
0000F534                            ; Format:
0000F534                            ; 4 bytes per item (YYYY XXXX)
0000F534                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000F534                            ; ---------------------------------------------------------------------------
0000F534 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000F544 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000F554 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000F564 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000F574 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000F584 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000F594 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000F5A4                            ; ===========================================================================
0000F5A4                            ; ---------------------------------------------------------------------------
0000F5A4                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000F5A4                            ; ---------------------------------------------------------------------------
0000F5A4                            
0000F5A4                            Obj39:					; XREF: Obj_Index
0000F5A4 7000                       		moveq	#0,d0
0000F5A6 1028 0024                  		move.b	$24(a0),d0
0000F5AA 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000F5AE 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000F5B2                            ; ===========================================================================
0000F5B2 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000F5B4 0000                       		dc.w loc_C50C-Obj39_Index
0000F5B6 0000                       		dc.w Obj39_Wait-Obj39_Index
0000F5B8                            ; ===========================================================================
0000F5B8                            
0000F5B8                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000F5B8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000F5BC 6700                       		beq.s	Obj39_Main	; if yes, branch
0000F5BE 4E75                       		rts	
0000F5C0                            ; ===========================================================================
0000F5C0                            
0000F5C0                            Obj39_Main:
0000F5C0 5428 0024                  		addq.b	#2,$24(a0)
0000F5C4 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000F5CA 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000F5D0 6700                       		beq.s	loc_C4EC	; if not, branch
0000F5D2 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000F5D8                            
0000F5D8                            loc_C4EC:
0000F5D8 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000F5DE 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000F5E6 317C 855E 0002             		move.w	#$855E,2(a0)
0000F5EC 117C 0000 0001             		move.b	#0,1(a0)
0000F5F2 117C 0000 0018             		move.b	#0,$18(a0)
0000F5F8                            
0000F5F8                            loc_C50C:				; XREF: Obj39_Index
0000F5F8 7210                       		moveq	#$10,d1		; set horizontal speed
0000F5FA 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000F600 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000F602 6500                       		bcs.s	Obj39_Move
0000F604 4441                       		neg.w	d1
0000F606                            
0000F606                            Obj39_Move:
0000F606 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F60A 6000 0000                  		bra.w	DisplaySprite
0000F60E                            ; ===========================================================================
0000F60E                            
0000F60E                            Obj39_SetWait:				; XREF: Obj39_Main
0000F60E 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000F614 5428 0024                  		addq.b	#2,$24(a0)
0000F618 4E75                       		rts	
0000F61A                            ; ===========================================================================
0000F61A                            
0000F61A                            Obj39_Wait:				; XREF: Obj39_Index
0000F61A 1038 F605                  		move.b	($FFFFF605).w,d0
0000F61E 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000F622 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000F624 0828 0000 001A             		btst	#0,$1A(a0)
0000F62A 6600                       		bne.s	Obj39_Display
0000F62C 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000F630 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000F632 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000F636 6000 0000                  		bra.w	DisplaySprite
0000F63A                            ; ===========================================================================
0000F63A                            
0000F63A                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000F63A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000F63E 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000F640 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000F646 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000F64A 6600                       		bne.s	Obj39_Display	; if yes, branch
0000F64C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000F652 6000                       		bra.s	Obj39_Display
0000F654                            ; ===========================================================================
0000F654                            
0000F654                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000F654 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000F65A                            
0000F65A                            Obj39_Display:				; XREF: Obj39_ChgMode
0000F65A 6000 0000                  		bra.w	DisplaySprite
0000F65E                            ; ===========================================================================
0000F65E                            ; ---------------------------------------------------------------------------
0000F65E                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000F65E                            ; ---------------------------------------------------------------------------
0000F65E                            
0000F65E                            Obj3A:					; XREF: Obj_Index
0000F65E 7000                       		moveq	#0,d0
0000F660 1028 0024                  		move.b	$24(a0),d0
0000F664 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000F668 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000F66C                            ; ===========================================================================
0000F66C 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000F66E 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000F670 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000F672 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000F674 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000F676 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000F678 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000F67A 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000F67C 0000                       		dc.w loc_C766-Obj3A_Index
0000F67E                            ; ===========================================================================
0000F67E                            
0000F67E                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000F67E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000F682 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000F684 4E75                       		rts	
0000F686                            ; ===========================================================================
0000F686                            
0000F686                            Obj3A_Main:
0000F686 2248                       		movea.l	a0,a1
0000F688 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000F68E 7206                       		moveq	#6,d1
0000F690                            
0000F690                            Obj3A_Loop:
0000F690 12BC 003A                  		move.b	#$3A,0(a1)
0000F694 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000F698 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000F69C 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000F6A0 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000F6A4 135A 0024                  		move.b	(a2)+,$24(a1)
0000F6A8 101A                       		move.b	(a2)+,d0
0000F6AA 0C00 0006                  		cmpi.b	#6,d0
0000F6AE 6600                       		bne.s	loc_C5CA
0000F6B0 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000F6B4                            
0000F6B4                            loc_C5CA:
0000F6B4 1340 001A                  		move.b	d0,$1A(a1)
0000F6B8 0C38 0000 FFF6             		cmpi.b	#$00, ($FFFFFFF6).w ; is the player Sonic?
0000F6BE 6700                       		beq.s	LoadTitleCardMaps_Sonic	; if so, gtfo and load Sonic's
0000F6C0 0C38 0001 FFF6             		cmpi.b	#$01, ($FFFFFFF6).w ; is the player Shadow?
0000F6C6 6700                       		beq.s	LoadTitleCardMaps_Shadow ; if so, gtfo and load Shadow's
0000F6C8 0C38 0002 FFF6             		cmpi.b	#$02, ($FFFFFFF6).w ; is the player Metal?
0000F6CE 6700                       		beq.s	LoadTitleCardMaps_Metal	; if so, gtfo and load Metal's
0000F6D0 0C38 0003 FFF6             		cmpi.b	#$03, ($FFFFFFF6).w ; is the player Mighty?
0000F6D6 6600                       		bne.s	LoadTitleCardMaps_Sonic	; if not, gtfo and load Sonic's
0000F6D8 237C 0000 0000 0004        		move.l	#Map_obj3A_Mty,4(a1)	; Load Mighty's
0000F6E0 4EF9 0000 0000             		jmp		LoadTitleCardMaps_Cont
0000F6E6                            
0000F6E6                            LoadTitleCardMaps_Metal:
0000F6E6 237C 0000 0000 0004        		move.l	#Map_obj3A_Met,4(a1)
0000F6EE 4EF9 0000 0000             		jmp		LoadTitleCardMaps_Cont
0000F6F4                            
0000F6F4                            LoadTitleCardMaps_Shadow:
0000F6F4 237C 0000 0000 0004        		move.l	#Map_obj3A_Sh,4(a1)
0000F6FC 4EF9 0000 0000             		jmp		LoadTitleCardMaps_Cont
0000F702                            
0000F702                            LoadTitleCardMaps_Sonic:
0000F702 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000F70A                            LoadTitleCardMaps_Cont:
0000F70A 337C 8580 0002             		move.w	#$8580,2(a1)
0000F710 137C 0000 0001             		move.b	#0,1(a1)
0000F716 43E9 0040                  		lea	$40(a1),a1
0000F71A 51C9 FF74                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000F71E                            
0000F71E                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000F71E 7210                       		moveq	#$10,d1		; set horizontal speed
0000F720 3028 0030                  		move.w	$30(a0),d0
0000F724 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000F728 6700                       		beq.s	loc_C61A	; if yes, branch
0000F72A 6C00                       		bge.s	Obj3A_Move
0000F72C 4441                       		neg.w	d1
0000F72E                            
0000F72E                            Obj3A_Move:
0000F72E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F732                            
0000F732                            loc_C5FE:				; XREF: loc_C61A
0000F732 3028 0008                  		move.w	8(a0),d0
0000F736 6B00                       		bmi.s	locret_C60E
0000F738 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F73C 6400                       		bcc.s	locret_C60E	; if yes, branch
0000F73E 6000 0000                  		bra.w	DisplaySprite
0000F742                            ; ===========================================================================
0000F742                            
0000F742                            locret_C60E:
0000F742 4E75                       		rts	
0000F744                            ; ===========================================================================
0000F744                            
0000F744                            loc_C610:				; XREF: loc_C61A
0000F744 117C 000E 0024             		move.b	#$E,$24(a0)
0000F74A 6000 0000                  		bra.w	Obj3A_ChkPos2
0000F74E                            ; ===========================================================================
0000F74E                            
0000F74E                            loc_C61A:				; XREF: Obj3A_ChkPos
0000F74E 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000F754 67EE                       		beq.s	loc_C610
0000F756 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000F75C 66D4                       		bne.s	loc_C5FE
0000F75E 5428 0024                  		addq.b	#2,$24(a0)
0000F762 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F768                            
0000F768                            Obj3A_Wait:				; XREF: Obj3A_Index
0000F768 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000F76C 6600                       		bne.s	Obj3A_Display
0000F76E 5428 0024                  		addq.b	#2,$24(a0)
0000F772                            
0000F772                            Obj3A_Display:
0000F772 6000 0000                  		bra.w	DisplaySprite
0000F776                            ; ===========================================================================
0000F776                            
0000F776                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000F776 6100 0000                  		bsr.w	DisplaySprite
0000F77A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000F780 7000                       		moveq	#0,d0
0000F782 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000F786 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000F788 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000F78C 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000F792                            
0000F792                            Obj3A_RingBonus:
0000F792 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000F796 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000F798 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000F79C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000F7A2                            
0000F7A2                            Obj3A_ChkBonus:
0000F7A2 4A40                       		tst.w	d0		; is there any bonus?
0000F7A4 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000F7A6 303C 00C5                  		move.w	#$C5,d0
0000F7AA 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000F7B0 5428 0024                  		addq.b	#2,$24(a0)
0000F7B4 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000F7BA 6600                       		bne.s	Obj3A_SetDelay
0000F7BC 5828 0024                  		addq.b	#4,$24(a0)
0000F7C0                            
0000F7C0                            Obj3A_SetDelay:
0000F7C0 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F7C6                            
0000F7C6                            locret_C692:
0000F7C6 4E75                       		rts	
0000F7C8                            ; ===========================================================================
0000F7C8                            
0000F7C8                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000F7C8 4EB9 0000 0000             		jsr	AddPoints
0000F7CE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000F7D2 0200 0003                  		andi.b	#3,d0
0000F7D6 66EE                       		bne.s	locret_C692
0000F7D8 303C 00CD                  		move.w	#$CD,d0
0000F7DC 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000F7E2                            ; ===========================================================================
0000F7E2                            
0000F7E2                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000F7E2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000F7E6 0240 0007                  		andi.w	#7,d0
0000F7EA E748                       		lsl.w	#3,d0
0000F7EC 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000F7F0 0241 0003                  		andi.w	#3,d1
0000F7F4 D241                       		add.w	d1,d1
0000F7F6 D041                       		add.w	d1,d0
0000F7F8 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000F7FC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000F800 4A40                       		tst.w	d0
0000F802 6600                       		bne.s	Obj3A_ChkSS
0000F804 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000F80A 6000                       		bra.s	Obj3A_Display2
0000F80C                            ; ===========================================================================
0000F80C                            
0000F80C                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000F80C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000F810 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000F814 6700                       		beq.s	loc_C6EA	; if not, branch
0000F816 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000F81C 6000                       		bra.s	Obj3A_Display2
0000F81E                            ; ===========================================================================
0000F81E                            
0000F81E                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000F81E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000F824                            
0000F824                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000F824 6000 0000                  		bra.w	DisplaySprite
0000F828                            ; ===========================================================================
0000F828                            ; ---------------------------------------------------------------------------
0000F828                            ; Level	order array
0000F828                            ; ---------------------------------------------------------------------------
0000F828                            LevelOrder:	incbin	misc\lvl_ord.bin
0000F858                            		even
0000F858                            ; ===========================================================================
0000F858                            
0000F858                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000F858 7220                       		moveq	#$20,d1		; set horizontal speed
0000F85A 3028 0032                  		move.w	$32(a0),d0
0000F85E B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000F862 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000F864 6C00                       		bge.s	Obj3A_Move2
0000F866 4441                       		neg.w	d1
0000F868                            
0000F868                            Obj3A_Move2:
0000F868 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F86C 3028 0008                  		move.w	8(a0),d0
0000F870 6B00                       		bmi.s	locret_C748
0000F872 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F876 6400                       		bcc.s	locret_C748	; if yes, branch
0000F878 6000 0000                  		bra.w	DisplaySprite
0000F87C                            ; ===========================================================================
0000F87C                            
0000F87C                            locret_C748:
0000F87C 4E75                       		rts	
0000F87E                            ; ===========================================================================
0000F87E                            
0000F87E                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000F87E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000F884 6600 0000                  		bne.w	DeleteObject
0000F888 5428 0024                  		addq.b	#2,$24(a0)
0000F88C 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000F890 303C 008D                  		move.w	#$8D,d0
0000F894 4EF9 0000 1108             		jmp	(PlaySound).l	; play FZ music
0000F89A                            ; ===========================================================================
0000F89A                            
0000F89A                            loc_C766:				; XREF: Obj3A_Index
0000F89A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000F89E 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000F8A4 6700 0000                  		beq.w	DeleteObject
0000F8A8 4E75                       		rts	
0000F8AA                            ; ===========================================================================
0000F8AA 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000F8B0 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000F8B2 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000F8B8 0201                       		dc.b 2,	1
0000F8BA 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000F8C0 0206                       		dc.b 2,	6
0000F8C2 0520 0120 00EC             		dc.w $520, $120, $EC
0000F8C8 0202                       		dc.b 2,	2
0000F8CA 0540 0120 00FC             		dc.w $540, $120, $FC
0000F8D0 0203                       		dc.b 2,	3
0000F8D2 0560 0120 010C             		dc.w $560, $120, $10C
0000F8D8 0204                       		dc.b 2,	4
0000F8DA 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000F8E0 0205                       		dc.b 2,	5
0000F8E2                            ; ===========================================================================
0000F8E2                            ; ---------------------------------------------------------------------------
0000F8E2                            ; Object 7E - special stage results screen
0000F8E2                            ; ---------------------------------------------------------------------------
0000F8E2                            
0000F8E2                            Obj7E:					; XREF: Obj_Index
0000F8E2 7000                       		moveq	#0,d0
0000F8E4 1028 0024                  		move.b	$24(a0),d0
0000F8E8 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000F8EC 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000F8F0                            ; ===========================================================================
0000F8F0 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000F8F2 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000F8F4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F8F6 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000F8F8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F8FA 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000F8FC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F8FE 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000F900 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000F902 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000F904 0000                       		dc.w loc_C91A-Obj7E_Index
0000F906                            ; ===========================================================================
0000F906                            
0000F906                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000F906 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000F90A 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000F90C 4E75                       		rts	
0000F90E                            ; ===========================================================================
0000F90E                            
0000F90E                            Obj7E_Main:
0000F90E 2248                       		movea.l	a0,a1
0000F910 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000F916 7203                       		moveq	#3,d1
0000F918 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000F91E 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000F920 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000F922                            
0000F922                            Obj7E_Loop:
0000F922 12BC 007E                  		move.b	#$7E,0(a1)
0000F926 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000F92A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000F92E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000F932 135A 0024                  		move.b	(a2)+,$24(a1)
0000F936 135A 001A                  		move.b	(a2)+,$1A(a1)
0000F93A 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000F942 337C 8580 0002             		move.w	#$8580,2(a1)
0000F948 137C 0000 0001             		move.b	#0,1(a1)
0000F94E 43E9 0040                  		lea	$40(a1),a1
0000F952 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000F956                            
0000F956 7007                       		moveq	#7,d0
0000F958 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000F95C 6700                       		beq.s	loc_C842
0000F95E 7000                       		moveq	#0,d0
0000F960 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000F964 6600                       		bne.s	loc_C842	; if not, branch
0000F966 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000F968 317C 0018 0008             		move.w	#$18,8(a0)
0000F96E 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000F974                            
0000F974                            loc_C842:
0000F974 1140 001A                  		move.b	d0,$1A(a0)
0000F978                            
0000F978                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000F978 7210                       		moveq	#$10,d1		; set horizontal speed
0000F97A 3028 0030                  		move.w	$30(a0),d0
0000F97E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000F982 6700                       		beq.s	loc_C86C	; if yes, branch
0000F984 6C00                       		bge.s	Obj7E_Move
0000F986 4441                       		neg.w	d1
0000F988                            
0000F988                            Obj7E_Move:
0000F988 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000F98C                            
0000F98C                            loc_C85A:				; XREF: loc_C86C
0000F98C 3028 0008                  		move.w	8(a0),d0
0000F990 6B00                       		bmi.s	locret_C86A
0000F992 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000F996 6400                       		bcc.s	locret_C86A	; if yes, branch
0000F998 6000 0000                  		bra.w	DisplaySprite
0000F99C                            ; ===========================================================================
0000F99C                            
0000F99C                            locret_C86A:
0000F99C 4E75                       		rts	
0000F99E                            ; ===========================================================================
0000F99E                            
0000F99E                            loc_C86C:				; XREF: Obj7E_ChkPos
0000F99E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F9A4 66E6                       		bne.s	loc_C85A
0000F9A6 5428 0024                  		addq.b	#2,$24(a0)
0000F9AA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000F9B0 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000F9B6                            
0000F9B6                            Obj7E_Wait:				; XREF: Obj7E_Index
0000F9B6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000F9BA 6600                       		bne.s	Obj7E_Display
0000F9BC 5428 0024                  		addq.b	#2,$24(a0)
0000F9C0                            
0000F9C0                            Obj7E_Display:
0000F9C0 6000 0000                  		bra.w	DisplaySprite
0000F9C4                            ; ===========================================================================
0000F9C4                            
0000F9C4                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000F9C4 6100 0000                  		bsr.w	DisplaySprite
0000F9C8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000F9CE 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000F9D2 6700                       		beq.s	loc_C8C4	; if yes, branch
0000F9D4 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000F9DA 700A                       		moveq	#10,d0		; add 10 to score
0000F9DC 4EB9 0000 0000             		jsr	AddPoints
0000F9E2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000F9E6 0200 0003                  		andi.b	#3,d0
0000F9EA 6600                       		bne.s	locret_C8EA
0000F9EC 303C 00CD                  		move.w	#$CD,d0
0000F9F0 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000F9F6                            ; ===========================================================================
0000F9F6                            
0000F9F6                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000F9F6 303C 00C5                  		move.w	#$C5,d0
0000F9FA 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000FA00 5428 0024                  		addq.b	#2,$24(a0)
0000FA04 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000FA0A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000FA10 6500                       		bcs.s	locret_C8EA	; if not, branch
0000FA12 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000FA18 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000FA1C                            
0000FA1C                            locret_C8EA:
0000FA1C 4E75                       		rts	
0000FA1E                            ; ===========================================================================
0000FA1E                            
0000FA1E                            Obj7E_Exit:				; XREF: Obj7E_Index
0000FA1E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000FA24 6000 0000                  		bra.w	DisplaySprite
0000FA28                            ; ===========================================================================
0000FA28                            
0000FA28                            Obj7E_Continue:				; XREF: Obj7E_Index
0000FA28 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000FA2E 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000FA34 303C 00BF                  		move.w	#$BF,d0
0000FA38 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play continues music
0000FA3E 5428 0024                  		addq.b	#2,$24(a0)
0000FA42 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000FA48 6000 0000                  		bra.w	DisplaySprite
0000FA4C                            ; ===========================================================================
0000FA4C                            
0000FA4C                            loc_C91A:				; XREF: Obj7E_Index
0000FA4C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000FA50 0200 000F                  		andi.b	#$F,d0
0000FA54 6600                       		bne.s	Obj7E_Display2
0000FA56 0868 0000 001A             		bchg	#0,$1A(a0)
0000FA5C                            
0000FA5C                            Obj7E_Display2:
0000FA5C 6000 0000                  		bra.w	DisplaySprite
0000FA60                            ; ===========================================================================
0000FA60 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000FA66 0200                       		dc.b 2,	0		; rountine number, frame number
0000FA68 0320 0120 0118             		dc.w $320, $120, $118
0000FA6E 0201                       		dc.b 2,	1
0000FA70 0360 0120 0128             		dc.w $360, $120, $128
0000FA76 0202                       		dc.b 2,	2
0000FA78 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000FA7E 0203                       		dc.b 2,	3
0000FA80 03A0 0120 0138             		dc.w $3A0, $120, $138
0000FA86 0206                       		dc.b 2,	6
0000FA88                            ; ===========================================================================
0000FA88                            ; ---------------------------------------------------------------------------
0000FA88                            ; Object 7F - chaos emeralds from the special stage results screen
0000FA88                            ; ---------------------------------------------------------------------------
0000FA88                            
0000FA88                            Obj7F:					; XREF: Obj_Index
0000FA88 7000                       		moveq	#0,d0
0000FA8A 1028 0024                  		move.b	$24(a0),d0
0000FA8E 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000FA92 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000FA96                            ; ===========================================================================
0000FA96 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000FA98 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000FA9A                            
0000FA9A                            ; ---------------------------------------------------------------------------
0000FA9A                            ; X-axis positions for chaos emeralds
0000FA9A                            ; ---------------------------------------------------------------------------
0000FA9A 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000FAA6                            ; ===========================================================================
0000FAA6                            
0000FAA6                            Obj7F_Main:				; XREF: Obj7F_Index
0000FAA6 2248                       		movea.l	a0,a1
0000FAA8 45F9 0000 FA9A             		lea	(Obj7F_PosData).l,a2
0000FAAE 7400                       		moveq	#0,d2
0000FAB0 7200                       		moveq	#0,d1
0000FAB2 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000FAB6 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000FAB8 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000FABC                            
0000FABC                            Obj7F_Loop:
0000FABC 12BC 007F                  		move.b	#$7F,0(a1)
0000FAC0 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000FAC4 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000FACA 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000FACE 1633 2000                  		move.b	(a3,d2.w),d3
0000FAD2 1343 001A                  		move.b	d3,$1A(a1)
0000FAD6 1343 001C                  		move.b	d3,$1C(a1)
0000FADA 5202                       		addq.b	#1,d2
0000FADC 5429 0024                  		addq.b	#2,$24(a1)
0000FAE0 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000FAE8 337C 8541 0002             		move.w	#$8541,2(a1)
0000FAEE 137C 0000 0001             		move.b	#0,1(a1)
0000FAF4 43E9 0040                  		lea	$40(a1),a1	; next object
0000FAF8 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000FAFC                            
0000FAFC                            Obj7F_Flash:				; XREF: Obj7F_Index
0000FAFC 1028 001A                  		move.b	$1A(a0),d0
0000FB00 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000FB06 0C00 0006                  		cmpi.b	#6,d0
0000FB0A 6600                       		bne.s	Obj7F_Display
0000FB0C 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000FB12                            
0000FB12                            Obj7F_Display:
0000FB12 6000 0000                  		bra.w	DisplaySprite
0000FB16                            ; ===========================================================================
0000FB16                            ; ---------------------------------------------------------------------------
0000FB16                            ; Sprite mappings - zone title cards
0000FB16                            ; ---------------------------------------------------------------------------
0000FB16 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000FB18 0000                       		dc.w byte_CA2C-Map_obj34
0000FB1A 0000                       		dc.w byte_CA5A-Map_obj34
0000FB1C 0000                       		dc.w byte_CA7A-Map_obj34
0000FB1E 0000                       		dc.w byte_CAA8-Map_obj34
0000FB20 0000                       		dc.w byte_CADC-Map_obj34
0000FB22 0000                       		dc.w byte_CB10-Map_obj34
0000FB24 0000                       		dc.w byte_CB26-Map_obj34
0000FB26 0000                       		dc.w byte_CB31-Map_obj34
0000FB28 0000                       		dc.w byte_CB3C-Map_obj34
0000FB2A 0000                       		dc.w byte_CB47-Map_obj34
0000FB2C 0000                       		dc.w byte_CB8A-Map_obj34
0000FB2E 0D                         byte_C9FE:	dc.b $D	;  GREEN HILL | CHAOTIC MOUND
0000FB2F F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000FB34 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000FB39 F805 0000 A0               		dc.b $F8, 5, 0, 0, $A0		; A
0000FB3E F805 0032 B0               		dc.b $F8, 5, 0, $32, $B0	; O
0000FB43 F805 0042 C0               		dc.b $F8, 5, 0, $42, $C0	; T
0000FB48 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000FB4D F805 0008 D8               		dc.b $F8, 5, 0, 8, $D8		; C
0000FB52 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000FB57 F805 002A F8               		dc.b $F8, 5, 0, $2A, $F8	; M
0000FB5C F805 0032 08               		dc.b $F8, 5, 0, $32, $8	; O
0000FB61 F805 0046 18               		dc.b $F8, 5, 0, $46, $18	; U
0000FB66 F805 002E 28               		dc.b $F8, 5, 0, $2E, $28	; N
0000FB6B F805 000C 38               		dc.b $F8, 5, 0, $0C, $38	; D
0000FB70 0A                         byte_CA2C:	dc.b $A	;  LABYRINTH | DAMP RELIC
0000FB71 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000FB76 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000FB7B F805 002A A0               		dc.b $F8, 5, 0, $2A, $A0	; M
0000FB80 F805 0036 B0               		dc.b $F8, 5, 0, $36, $B0	; P
0000FB85 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000FB8A F805 003A D0               		dc.b $F8, 5, 0, $3A, $D0	; R
0000FB8F F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000FB94 F805 0026 F0               		dc.b $F8, 5, 0, $26, $F0	; L
0000FB99 F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000FB9E F805 0008 08               		dc.b $F8, 5, 0, 8, $8		; C
0000FBA3 0B                         byte_CA5A:	dc.b $B	;  MARBLE | MAGMA TOMBS
0000FBA4 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000FBA9 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000FBAE F805 0018 A0               		dc.b $F8, 5, 0, $18, $A0	; G
0000FBB3 F805 002A B0               		dc.b $F8, 5, 0, $2A, $B0	; M
0000FBB8 F805 0000 C0               		dc.b $F8, 5, 0, 0, $C0		; A
0000FBBD F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000FBC2 F805 0042 E0               		dc.b $F8, 5, 0, $42, $E0	; T
0000FBC7 F805 0032 F0               		dc.b $F8, 5, 0, $32, $F0	; O
0000FBCC F805 002A 00               		dc.b $F8, 5, 0, $2A, $0	; M
0000FBD1 F805 0004 10               		dc.b $F8, 5, 0, 4, $10		; B
0000FBD6 F805 003E 20               		dc.b $F8, 5, 0, $3E, $20	; S
0000FBDB 0C                         byte_CA7A:	dc.b $C	;  STAR LIGHT | STARRY METRO
0000FBDC F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000FBE1 F805 0042 90               		dc.b $F8, 5, 0, $42, $90	; T
0000FBE6 F805 0000 A0               		dc.b $F8, 5, 0, 0, $A0		; A
0000FBEB F805 003A B0               		dc.b $F8, 5, 0, $3A, $B0	; R
0000FBF0 F805 003A C0               		dc.b $F8, 5, 0, $3A, $C0	; R
0000FBF5 F805 004A D0               		dc.b $F8, 5, 0, $4A, $D0	; Y
0000FBFA F800 0056 E0               		dc.b $F8, 0, 0, $56, $E0	; Space
0000FBFF F805 002A F0               		dc.b $F8, 5, 0, $2A, $F0	; M
0000FC04 F805 0010 00               		dc.b $F8, 5, 0, $10, $0	; E
0000FC09 F805 0042 10               		dc.b $F8, 5, 0, $42, $10	; T
0000FC0E F805 003A 20               		dc.b $F8, 5, 0, $3A, $20	; R
0000FC13 F805 0032 30               		dc.b $F8, 5, 0, $32, $30	; O
0000FC18 0B                         byte_CAA8:	dc.b $B	;  SPRING YARD | SPRING CITY
0000FC19 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000FC1E F805 0036 90               		dc.b $F8, 5, 0, $36, $90	; P
0000FC23 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000FC28 F801 0020 B0               		dc.b $F8, 1, 0, $20, $B0	; I
0000FC2D F805 002E B8               		dc.b $F8, 5, 0, $2E, $B8	; N
0000FC32 F805 0018 C8               		dc.b $F8, 5, 0, $18, $C8	; G
0000FC37 F800 0056 D8               		dc.b $F8, 0, 0, $56, $D8	; Space
0000FC3C F805 0008 E8               		dc.b $F8, 5, 0, 8, $E8		; C
0000FC41 F801 0020 F8               		dc.b $F8, 1, 0, $20, $F8	; I
0000FC46 F805 0042 00               		dc.b $F8, 5, 0, $42, $0	; T
0000FC4B F805 004A 10               		dc.b $F8, 5, 0, $4A, $10	; Y
0000FC50 0E                         byte_CADC:	dc.b $E	;  SCRAP BRAIN | BADNIK FACTORY
0000FC51 F805 0004 80               		dc.b $F8, 5, 0, 4, $80		; B
0000FC56 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000FC5B F805 000C A0               		dc.b $F8, 5, 0, $0C, $A0	; D
0000FC60 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000FC65 F801 0020 C0               		dc.b $F8, 1, 0, $20, $C0	; I
0000FC6A F805 0022 C8               		dc.b $F8, 5, 0, $22, $C8	; K
0000FC6F F800 0056 D8               		dc.b $F8, 0, 0, $56, $D8	; Space
0000FC74 F805 0014 E8               		dc.b $F8, 5, 0, $14, $E8	; F
0000FC79 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8		; A
0000FC7E F805 0008 08               		dc.b $F8, 5, 0, 8, $8		; C
0000FC83 F805 0042 18               		dc.b $F8, 5, 0, $42, $18	; T
0000FC88 F805 0032 28               		dc.b $F8, 5, 0, $32, $28	; O
0000FC8D F805 003A 38               		dc.b $F8, 5, 0, $3A, $38	; R
0000FC92 F805 004A 48               		dc.b $F8, 5, 0, $4A, $48	; Y
0000FC97 01                         byte_CB10:	dc.b 1	;  ZONE |  
0000FC98 F800 0056 80               		dc.b $F8, 0, 0, $56, $80	; Space
0000FC9D 02                         byte_CB26:	dc.b 2			; ACT 1
0000FC9E 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000FCA3 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000FCA8 02                         byte_CB31:	dc.b 2			; ACT 2
0000FCA9 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000FCAE F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000FCB3 02                         byte_CB3C:	dc.b 2			; ACT 3
0000FCB4 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000FCB9 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000FCBE 0D                         byte_CB47:	dc.b $D			; Oval
0000FCBF E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000FCC4 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000FCC9 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000FCCE F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000FCD3 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000FCD8 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000FCDD 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000FCE2 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000FCE7 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000FCEC F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000FCF1 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000FCF6 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000FCFB 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000FD00 00                         		dc.b 0
0000FD01 0A                         byte_CB8A:	dc.b $A	;  FINAL | LAST FIGHT
0000FD02 F805 0026 80               		dc.b $F8, 5, 0, $26, $80	; L
0000FD07 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000FD0C F805 003E A0               		dc.b $F8, 5, 0, $3E, $A0	; S
0000FD11 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000FD16 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000FD1B F805 0014 D0               		dc.b $F8, 5, 0, $14, $D0	; F
0000FD20 F801 0020 E0               		dc.b $F8, 1, 0, $20, $E0	; I
0000FD25 F805 0018 E8               		dc.b $F8, 5, 0, $18, $E8	; G
0000FD2A F805 001C F8               		dc.b $F8, 5, 0, $1C, $F8	; H
0000FD2F F805 0042 08               		dc.b $F8, 5, 0, $42, $8	; T
0000FD34                            		even
0000FD34                            ; ---------------------------------------------------------------------------
0000FD34                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000FD34                            ; ---------------------------------------------------------------------------
0000FD34                            Map_obj39:
0000FD34                            	include "_maps\obj39.asm"
0000FD34                            ; ---------------------------------------------------------------------------
0000FD34                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000FD34                            ; ---------------------------------------------------------------------------
0000FD34 0000                       		dc.w byte_CBAC-Map_obj39
0000FD36 0000                       		dc.w byte_CBB7-Map_obj39
0000FD38 0000                       		dc.w byte_CBC2-Map_obj39
0000FD3A 0000                       		dc.w byte_CBCD-Map_obj39
0000FD3C 02                         byte_CBAC:	dc.b 2
0000FD3D F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000FD42 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000FD47 02                         byte_CBB7:	dc.b 2
0000FD48 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000FD4D F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000FD52 02                         byte_CBC2:	dc.b 2
0000FD53 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000FD58 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000FD5D 02                         byte_CBCD:	dc.b 2
0000FD5E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000FD63 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000FD68                            		even
0000FD68                            		even
0000FD68                            
0000FD68                            ; ---------------------------------------------------------------------------
0000FD68                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000FD68                            ; ---------------------------------------------------------------------------
0000FD68                            Map_obj3A:	include "_maps\SONIC HAS PASSED.asm"
0000FD68 0000                       	dc.w byte_CBEA-Map_obj3A
0000FD6A 0000                       		dc.w byte_CC13-Map_obj3A
0000FD6C 0000                       		dc.w byte_CC32-Map_obj3A
0000FD6E 0000                       		dc.w byte_CC51-Map_obj3A
0000FD70 0000                       		dc.w byte_CC75-Map_obj3A
0000FD72 FF56                       		dc.w byte_CB47-Map_obj3A
0000FD74 FF35                       		dc.w byte_CB26-Map_obj3A
0000FD76 FF40                       		dc.w byte_CB31-Map_obj3A
0000FD78 FF4B                       		dc.w byte_CB3C-Map_obj3A
0000FD7A 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000FD7B F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000FD80 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000FD85 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000FD8A F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000FD8F F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000FD94 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000FD99 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000FD9E F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000FDA3 06                         byte_CC13:	dc.b 6			; PASSED
0000FDA4 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000FDA9 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000FDAE F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000FDB3 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000FDB8 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000FDBD F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000FDC2 06                         byte_CC32:	dc.b 6			; SCORE
0000FDC3 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000FDC8 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000FDCD F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000FDD2 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000FDD7 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000FDDC FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000FDE1 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000FDE2 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000FDE7 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FDEC F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FDF1 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FDF6 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FDFB F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000FE00 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FE05 07                         byte_CC75:	dc.b 7			; RING BONUS
0000FE06 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000FE0B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FE10 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FE15 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FE1A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FE1F F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000FE24 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FE2A 00                         		even
0000FE2A 00                         		even
0000FE2A                            Map_obj3A_Sh:	include "_maps\SHADOW HAS PASSED.asm"
0000FE2A 0000                       		dc.w byte2_CBEA-Map_obj3A_Sh
0000FE2C 0000                       		dc.w byte2_CC13-Map_obj3A_Sh
0000FE2E 0000                       		dc.w byte2_CC32-Map_obj3A_Sh
0000FE30 0000                       		dc.w byte2_CC51-Map_obj3A_Sh
0000FE32 0000                       		dc.w byte2_CC75-Map_obj3A_Sh
0000FE34 FE94                       		dc.w byte_CB47-Map_obj3A_Sh
0000FE36 FE73                       		dc.w byte_CB26-Map_obj3A_Sh
0000FE38 FE7E                       		dc.w byte_CB31-Map_obj3A_Sh
0000FE3A FE89                       		dc.w byte_CB3C-Map_obj3A_Sh
0000FE3C 09                         byte2_CBEA:	dc.b $9			; SHADOW HAS
0000FE3D F805 003E A8               	dc.b $F8, $5, $0, $3E, $A8
0000FE42 F805 001C 10               	dc.b $F8, $5, $0, $1C, $10
0000FE47 F805 0000 20               	dc.b $F8, $5, $0, $0, $20
0000FE4C F805 003E 30               	dc.b $F8, $5, $0, $3E, $30
0000FE51 F805 001C B8               	dc.b $F8, $5, $0, $1C, $B8
0000FE56 F805 0000 C8               	dc.b $F8, $5, $0, $0, $C8
0000FE5B F805 000C D8               	dc.b $F8, $5, $0, $C, $D8
0000FE60 F805 0032 E8               	dc.b $F8, $5, $0, $32, $E8
0000FE65 F805 004E F8               	dc.b $F8, $5, $0, $4E, $F8
0000FE6A 06                         byte2_CC13:	dc.b 6			; PASSED
0000FE6B F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000FE70 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000FE75 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000FE7A F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000FE7F F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000FE84 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000FE89 06                         byte2_CC32:	dc.b 6			; SCORE
0000FE8A F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000FE8F F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000FE94 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000FE99 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000FE9E F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000FEA3 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000FEA8 07                         byte2_CC51:	dc.b 7			; TIME BONUS
0000FEA9 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000FEAE F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FEB3 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FEB8 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FEBD FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FEC2 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000FEC7 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FECC 07                         byte2_CC75:	dc.b 7			; RING BONUS
0000FECD F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000FED2 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FED7 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FEDC F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FEE1 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FEE6 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000FEEB F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FEF0                            		even
0000FEF0                            		even
0000FEF0                            Map_obj3A_Met:	include "_maps\METAL HAS PASSED.asm"
0000FEF0 0000                       	dc.w byte3_CBEA-Map_obj3A_Met
0000FEF2 0000                       		dc.w byte3_CC13-Map_obj3A_Met
0000FEF4 0000                       		dc.w byte3_CC32-Map_obj3A_Met
0000FEF6 0000                       		dc.w byte3_CC51-Map_obj3A_Met
0000FEF8 0000                       		dc.w byte3_CC75-Map_obj3A_Met
0000FEFA FDCE                       		dc.w byte_CB47-Map_obj3A_Met
0000FEFC FDAD                       		dc.w byte_CB26-Map_obj3A_Met
0000FEFE FDB8                       		dc.w byte_CB31-Map_obj3A_Met
0000FF00 FDC3                       		dc.w byte_CB3C-Map_obj3A_Met
0000FF02 08                         byte3_CBEA:	dc.b 8			; METAL HAS
0000FF03 F805 001C 10               	dc.b $F8, $5, $0, $1C, $10
0000FF08 F805 0000 20               	dc.b $F8, $5, $0, $0, $20
0000FF0D F805 003E 30               	dc.b $F8, $5, $0, $3E, $30
0000FF12 F805 002A B4               	dc.b $F8, $5, $0, $2A, $B4
0000FF17 F805 0010 C4               	dc.b $F8, $5, $0, $10, $C4
0000FF1C F805 0042 D4               	dc.b $F8, $5, $0, $42, $D4
0000FF21 F805 0026 F4               	dc.b $F8, $5, $0, $26, $F4
0000FF26 F805 0000 E4               	dc.b $F8, $5, $0, $0, $E4
0000FF2B 06                         byte3_CC13:	dc.b 6			; PASSED
0000FF2C F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000FF31 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000FF36 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000FF3B F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000FF40 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000FF45 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000FF4A 06                         byte3_CC32:	dc.b 6			; SCORE
0000FF4B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000FF50 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000FF55 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000FF5A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000FF5F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000FF64 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000FF69 07                         byte3_CC51:	dc.b 7			; TIME BONUS
0000FF6A F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000FF6F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FF74 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FF79 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FF7E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FF83 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000FF88 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FF8D 07                         byte3_CC75:	dc.b 7			; RING BONUS
0000FF8E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000FF93 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000FF98 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000FF9D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000FFA2 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000FFA7 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000FFAC F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000FFB2 00                         		even
0000FFB2 00                         		even
0000FFB2                            Map_obj3A_Mty:	include "_maps\MIGHTY HAS PASSED.asm"
0000FFB2 0000                       	dc.w byte4_CBEA-Map_obj3A_Mty
0000FFB4 0000                       		dc.w byte4_CC13-Map_obj3A_Mty
0000FFB6 0000                       		dc.w byte4_CC32-Map_obj3A_Mty
0000FFB8 0000                       		dc.w byte4_CC51-Map_obj3A_Mty
0000FFBA 0000                       		dc.w byte4_CC75-Map_obj3A_Mty
0000FFBC FD0C                       		dc.w byte_CB47-Map_obj3A_Mty
0000FFBE FCEB                       		dc.w byte_CB26-Map_obj3A_Mty
0000FFC0 FCF6                       		dc.w byte_CB31-Map_obj3A_Mty
0000FFC2 FD01                       		dc.w byte_CB3C-Map_obj3A_Mty
0000FFC4 09                         byte4_CBEA:	dc.b 9			; MIGHTY HAS
0000FFC5 F801 0020 C0               	dc.b $F8, $1, $0, $20, $C0
0000FFCA F805 001C 10               	dc.b $F8, $5, $0, $1C, $10
0000FFCF F805 0000 20               	dc.b $F8, $5, $0, $0, $20
0000FFD4 F805 003E 30               	dc.b $F8, $5, $0, $3E, $30
0000FFD9 F805 002A B0               	dc.b $F8, $5, $0, $2A, $B0
0000FFDE F805 0018 C8               	dc.b $F8, $5, $0, $18, $C8
0000FFE3 F805 001C D8               	dc.b $F8, $5, $0, $1C, $D8
0000FFE8 F805 004A F7               	dc.b $F8, $5, $0, $4A, $F7
0000FFED F805 0042 E8               	dc.b $F8, $5, $0, $42, $E8
0000FFF2 06                         byte4_CC13:	dc.b 6			; PASSED
0000FFF3 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000FFF8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000FFFD F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
00010002 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
00010007 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0001000C F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
00010011 06                         byte4_CC32:	dc.b 6			; SCORE
00010012 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
00010017 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0001001C F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
00010021 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
00010026 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0001002B FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
00010030 07                         byte4_CC51:	dc.b 7			; TIME BONUS
00010031 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
00010036 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0001003B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
00010040 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
00010045 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0001004A F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0001004F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
00010054 07                         byte4_CC75:	dc.b 7			; RING BONUS
00010055 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0001005A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0001005F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
00010064 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
00010069 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0001006E F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
00010073 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
00010078                            		even
00010078                            		even
00010078                            ; ---------------------------------------------------------------------------
00010078                            ; Sprite mappings - special stage results screen
00010078                            ; ---------------------------------------------------------------------------
00010078 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0001007A 0000                       		dc.w byte_CCEE-Map_obj7E
0001007C 0000                       		dc.w byte_CD0D-Map_obj7E
0001007E FC46                       		dc.w byte_CB47-Map_obj7E
00010080 0000                       		dc.w byte_CD31-Map_obj7E
00010082 0000                       		dc.w byte_CD46-Map_obj7E
00010084 0000                       		dc.w byte_CD5B-Map_obj7E
00010086 0000                       		dc.w byte_CD6B-Map_obj7E
00010088 0000                       		dc.w byte_CDA8-Map_obj7E
0001008A 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0001008B F805 0008 90               		dc.b $F8, 5, 0,	8, $90
00010090 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
00010095 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0001009A F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0001009F F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
000100A4 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
000100A9 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
000100AE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
000100B3 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
000100B8 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
000100BD F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
000100C2 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
000100C7 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
000100CC 06                         byte_CCEE:	dc.b 6			; "SCORE"
000100CD F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
000100D2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
000100D7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
000100DC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
000100E1 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
000100E6 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
000100EB 07                         byte_CD0D:	dc.b 7
000100EC F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
000100F1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
000100F6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
000100FB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
00010100 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
00010105 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0001010A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0001010F 04                         byte_CD31:	dc.b 4
00010110 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
00010115 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0001011A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0001011F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
00010124 04                         byte_CD46:	dc.b 4
00010125 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0001012A F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0001012F F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
00010134 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
00010139 03                         byte_CD5B:	dc.b 3
0001013A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0001013F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
00010144 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
00010149 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0001014A F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0001014F F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
00010154 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
00010159 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0001015E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
00010163 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
00010168 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0001016D F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
00010172 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
00010177 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0001017C F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
00010181 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
00010186 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
00010187 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0001018C F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
00010191 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
00010196 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0001019B F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
000101A0 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
000101A5 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
000101AA F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
000101AF F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
000101B4 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
000101B9 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
000101BE F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
000101C3 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
000101C8 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
000101CD F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
000101D2                            		even
000101D2                            ; ---------------------------------------------------------------------------
000101D2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
000101D2                            ; ---------------------------------------------------------------------------
000101D2                            Map_obj7F:
000101D2                            	include "_maps\obj7F.asm"
000101D2                            ; ---------------------------------------------------------------------------
000101D2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
000101D2                            ; ---------------------------------------------------------------------------
000101D2 0000                       		dc.w byte_CE02-Map_obj7F
000101D4 0000                       		dc.w byte_CE08-Map_obj7F
000101D6 0000                       		dc.w byte_CE0E-Map_obj7F
000101D8 0000                       		dc.w byte_CE14-Map_obj7F
000101DA 0000                       		dc.w byte_CE1A-Map_obj7F
000101DC 0000                       		dc.w byte_CE20-Map_obj7F
000101DE 0000                       		dc.w byte_CE26-Map_obj7F
000101E0 01                         byte_CE02:	dc.b 1
000101E1 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
000101E6 01                         byte_CE08:	dc.b 1
000101E7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000101EC 01                         byte_CE0E:	dc.b 1
000101ED F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
000101F2 01                         byte_CE14:	dc.b 1
000101F3 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
000101F8 01                         byte_CE1A:	dc.b 1
000101F9 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
000101FE 01                         byte_CE20:	dc.b 1
000101FF F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
00010204 00                         byte_CE26:	dc.b 0			; Blank frame
00010206 00                         		even
00010206 00                         		even
00010206                            
00010206                            ; ===========================================================================
00010206                            ; ---------------------------------------------------------------------------
00010206                            ; Object 36 - spikes
00010206                            ; ---------------------------------------------------------------------------
00010206                            
00010206                            Obj36:					; XREF: Obj_Index
00010206 7000                       		moveq	#0,d0
00010208 1028 0024                  		move.b	$24(a0),d0
0001020C 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
00010210 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
00010214                            ; ===========================================================================
00010214 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
00010216 0000                       		dc.w Obj36_Solid-Obj36_Index
00010218                            
00010218 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0001021A 0110                       		dc.b 1,	$10
0001021C 0204                       		dc.b 2,	4
0001021E 031C                       		dc.b 3,	$1C
00010220 0440                       		dc.b 4,	$40
00010222 0510                       		dc.b 5,	$10
00010224                            ; ===========================================================================
00010224                            
00010224                            Obj36_Main:				; XREF: Obj36_Index
00010224 5428 0024                  		addq.b	#2,$24(a0)
00010228 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
00010230 317C 051B 0002             		move.w	#$51B,2(a0)
00010236 0028 0004 0001             		ori.b	#4,1(a0)
0001023C 117C 0004 0018             		move.b	#4,$18(a0)
00010242 1028 0028                  		move.b	$28(a0),d0
00010246 0228 000F 0028             		andi.b	#$F,$28(a0)
0001024C 0240 00F0                  		andi.w	#$F0,d0
00010250 43F9 0001 0218             		lea	(Obj36_Var).l,a1
00010256 E648                       		lsr.w	#3,d0
00010258 D2C0                       		adda.w	d0,a1
0001025A 1159 001A                  		move.b	(a1)+,$1A(a0)
0001025E 1159 0019                  		move.b	(a1)+,$19(a0)
00010262 3168 0008 0030             		move.w	8(a0),$30(a0)
00010268 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001026E                            
0001026E                            Obj36_Solid:				; XREF: Obj36_Index
0001026E 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
00010272 343C 0004                  		move.w	#4,d2
00010276 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0001027C 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0001027E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
00010284 6600                       		bne.s	Obj36_Upright	; if not, branch
00010286 343C 0014                  		move.w	#$14,d2
0001028A                            
0001028A                            ; Spikes types $1x and $5x face	sideways
0001028A                            
0001028A                            Obj36_SideWays:				; XREF: Obj36_Solid
0001028A 323C 001B                  		move.w	#$1B,d1
0001028E 3602                       		move.w	d2,d3
00010290 5243                       		addq.w	#1,d3
00010292 3828 0008                  		move.w	8(a0),d4
00010296 6100 0000                  		bsr.w	SolidObject
0001029A 0828 0003 0022             		btst	#3,$22(a0)
000102A0 6600                       		bne.s	Obj36_Display
000102A2 0C44 0001                  		cmpi.w	#1,d4
000102A6 6700                       		beq.s	Obj36_Hurt
000102A8 6000                       		bra.s	Obj36_Display
000102AA                            ; ===========================================================================
000102AA                            
000102AA                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
000102AA                            
000102AA                            Obj36_Upright:				; XREF: Obj36_Solid
000102AA 7200                       		moveq	#0,d1
000102AC 1228 0019                  		move.b	$19(a0),d1
000102B0 0641 000B                  		addi.w	#$B,d1
000102B4 343C 0010                  		move.w	#$10,d2
000102B8 363C 0011                  		move.w	#$11,d3
000102BC 3828 0008                  		move.w	8(a0),d4
000102C0 6100 0000                  		bsr.w	SolidObject
000102C4 0828 0003 0022             		btst	#3,$22(a0)
000102CA 6600                       		bne.s	Obj36_Hurt
000102CC 4A44                       		tst.w	d4
000102CE 6A00                       		bpl.s	Obj36_Display
000102D0                            
000102D0                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
000102D0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
000102D4 6600                       		bne.s	Obj36_Display	; if yes, branch
000102D6 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
000102DA 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
000102DC 2F08                       		move.l	a0,-(sp)
000102DE 2448                       		movea.l	a0,a2
000102E0 41F8 D000                  		lea	($FFFFD000).w,a0
000102E4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
000102EA 6400                       		bcc.s	loc_CF20
000102EC 2628 000C                  		move.l	$C(a0),d3
000102F0 3028 0012                  		move.w	$12(a0),d0
000102F4 48C0                       		ext.l	d0
000102F6 E180                       		asl.l	#8,d0
000102F8 9680                       		sub.l	d0,d3
000102FA 2143 000C                  		move.l	d3,$C(a0)
000102FE 4EB9 0000 0000             		jsr	HurtSonic
00010304                            
00010304                            loc_CF20:
00010304 205F                       		movea.l	(sp)+,a0
00010306                            
00010306                            Obj36_Display:
00010306 6100 0000                  		bsr.w	DisplaySprite
0001030A 3028 0030                  		move.w	$30(a0),d0
0001030E 0240 FF80                  		andi.w	#$FF80,d0
00010312 3238 F700                  		move.w	($FFFFF700).w,d1
00010316 0441 0080                  		subi.w	#$80,d1
0001031A 0241 FF80                  		andi.w	#$FF80,d1
0001031E 9041                       		sub.w	d1,d0
00010320 0C40 0280                  		cmpi.w	#$280,d0
00010324 6200 0000                  		bhi.w	DeleteObject
00010328 4E75                       		rts	
0001032A                            ; ===========================================================================
0001032A                            
0001032A                            Obj36_Type0x:				; XREF: Obj36_Solid
0001032A 7000                       		moveq	#0,d0
0001032C 1028 0028                  		move.b	$28(a0),d0
00010330 D040                       		add.w	d0,d0
00010332 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
00010336 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0001033A                            ; ===========================================================================
0001033A 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0001033C 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0001033E 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
00010340                            ; ===========================================================================
00010340                            
00010340                            Obj36_Type00:				; XREF: Obj36_TypeIndex
00010340 4E75                       		rts			; don't move the object
00010342                            ; ===========================================================================
00010342                            
00010342                            Obj36_Type01:				; XREF: Obj36_TypeIndex
00010342 6100 0000                  		bsr.w	Obj36_Wait
00010346 7000                       		moveq	#0,d0
00010348 1028 0034                  		move.b	$34(a0),d0
0001034C D068 0032                  		add.w	$32(a0),d0
00010350 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
00010354 4E75                       		rts	
00010356                            ; ===========================================================================
00010356                            
00010356                            Obj36_Type02:				; XREF: Obj36_TypeIndex
00010356 6100 0000                  		bsr.w	Obj36_Wait
0001035A 7000                       		moveq	#0,d0
0001035C 1028 0034                  		move.b	$34(a0),d0
00010360 D068 0030                  		add.w	$30(a0),d0
00010364 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
00010368 4E75                       		rts	
0001036A                            ; ===========================================================================
0001036A                            
0001036A                            Obj36_Wait:
0001036A 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0001036E 6700                       		beq.s	loc_CFA4	; if yes, branch
00010370 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
00010374 6600                       		bne.s	locret_CFE6
00010376 4A28 0001                  		tst.b	1(a0)
0001037A 6A00                       		bpl.s	locret_CFE6
0001037C 303C 00B6                  		move.w	#$B6,d0
00010380 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
00010386 6000                       		bra.s	locret_CFE6
00010388                            ; ===========================================================================
00010388                            
00010388                            loc_CFA4:
00010388 4A68 0036                  		tst.w	$36(a0)
0001038C 6700                       		beq.s	loc_CFC6
0001038E 0468 0800 0034             		subi.w	#$800,$34(a0)
00010394 6400                       		bcc.s	locret_CFE6
00010396 317C 0000 0034             		move.w	#0,$34(a0)
0001039C 317C 0000 0036             		move.w	#0,$36(a0)
000103A2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
000103A8 6000                       		bra.s	locret_CFE6
000103AA                            ; ===========================================================================
000103AA                            
000103AA                            loc_CFC6:
000103AA 0668 0800 0034             		addi.w	#$800,$34(a0)
000103B0 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
000103B6 6500                       		bcs.s	locret_CFE6
000103B8 317C 2000 0034             		move.w	#$2000,$34(a0)
000103BE 317C 0001 0036             		move.w	#1,$36(a0)
000103C4 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
000103CA                            
000103CA                            locret_CFE6:
000103CA 4E75                       		rts	
000103CC                            ; ===========================================================================
000103CC                            ; ---------------------------------------------------------------------------
000103CC                            ; Sprite mappings - spikes
000103CC                            ; ---------------------------------------------------------------------------
000103CC                            Map_obj36:
000103CC                            	include "_maps\obj36.asm"
000103CC                            ; ---------------------------------------------------------------------------
000103CC                            ; Sprite mappings - spikes
000103CC                            ; ---------------------------------------------------------------------------
000103CC 0000                       		dc.w byte_CFF4-Map_obj36
000103CE 0000                       		dc.w byte_D004-Map_obj36
000103D0 0000                       		dc.w byte_D014-Map_obj36
000103D2 0000                       		dc.w byte_D01A-Map_obj36
000103D4 0000                       		dc.w byte_D02A-Map_obj36
000103D6 0000                       		dc.w byte_D049-Map_obj36
000103D8 03                         byte_CFF4:	dc.b 3			; 3 spikes
000103D9 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
000103DE F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
000103E3 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
000103E8 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
000103E9 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
000103EE FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
000103F3 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
000103F8 01                         byte_D014:	dc.b 1			; 1 spike
000103F9 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
000103FE 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
000103FF F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
00010404 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
00010409 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0001040E 06                         byte_D02A:	dc.b 6			; 6 spikes
0001040F F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
00010414 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
00010419 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0001041E F003 0004 08               		dc.b $F0, 3, 0,	4, 8
00010423 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
00010428 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0001042D 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0001042E FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
00010434 00                         		even
00010434 00                         		even
00010434                            
00010434                            ; ===========================================================================
00010434                            ; ---------------------------------------------------------------------------
00010434                            ; Object 3B - purple rock (GHZ)
00010434                            ; ---------------------------------------------------------------------------
00010434                            
00010434                            Obj3B:					; XREF: Obj_Index
00010434 7000                       		moveq	#0,d0
00010436 1028 0024                  		move.b	$24(a0),d0
0001043A 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0001043E 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
00010442                            ; ===========================================================================
00010442 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
00010444 0000                       		dc.w Obj3B_Solid-Obj3B_Index
00010446                            ; ===========================================================================
00010446                            
00010446                            Obj3B_Main:				; XREF: Obj3B_Index
00010446 5428 0024                  		addq.b	#2,$24(a0)
0001044A 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
00010452 317C 63D0 0002             		move.w	#$63D0,2(a0)
00010458 117C 0004 0001             		move.b	#4,1(a0)
0001045E 117C 0013 0019             		move.b	#$13,$19(a0)
00010464 117C 0004 0018             		move.b	#4,$18(a0)
0001046A                            
0001046A                            Obj3B_Solid:				; XREF: Obj3B_Index
0001046A 323C 001B                  		move.w	#$1B,d1
0001046E 343C 0010                  		move.w	#$10,d2
00010472 363C 0010                  		move.w	#$10,d3
00010476 3828 0008                  		move.w	8(a0),d4
0001047A 6100 0000                  		bsr.w	SolidObject
0001047E 6100 0000                  		bsr.w	DisplaySprite
00010482 3028 0008                  		move.w	8(a0),d0
00010486 0240 FF80                  		andi.w	#$FF80,d0
0001048A 3238 F700                  		move.w	($FFFFF700).w,d1
0001048E 0441 0080                  		subi.w	#$80,d1
00010492 0241 FF80                  		andi.w	#$FF80,d1
00010496 9041                       		sub.w	d1,d0
00010498 0C40 0280                  		cmpi.w	#$280,d0
0001049C 6200 0000                  		bhi.w	DeleteObject
000104A0 4E75                       		rts	
000104A2                            ; ===========================================================================
000104A2                            ; ---------------------------------------------------------------------------
000104A2                            ; Object 49 - waterfall	sound effect (GHZ)
000104A2                            ; ---------------------------------------------------------------------------
000104A2                            
000104A2                            Obj49:					; XREF: Obj_Index
000104A2 7000                       		moveq	#0,d0
000104A4 1028 0024                  		move.b	$24(a0),d0
000104A8 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
000104AC 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
000104B0                            ; ===========================================================================
000104B0 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
000104B2 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
000104B4                            ; ===========================================================================
000104B4                            
000104B4                            Obj49_Main:				; XREF: Obj49_Index
000104B4 5428 0024                  		addq.b	#2,$24(a0)
000104B8 117C 0004 0001             		move.b	#4,1(a0)
000104BE                            
000104BE                            Obj49_PlaySnd:				; XREF: Obj49_Index
000104BE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000104C2 0200 003F                  		andi.b	#$3F,d0
000104C6 6600                       		bne.s	Obj49_ChkDel
000104C8 303C 00D0                  		move.w	#$D0,d0
000104CC 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play waterfall sound
000104D2                            
000104D2                            Obj49_ChkDel:
000104D2 3028 0008                  		move.w	8(a0),d0
000104D6 0240 FF80                  		andi.w	#$FF80,d0
000104DA 3238 F700                  		move.w	($FFFFF700).w,d1
000104DE 0441 0080                  		subi.w	#$80,d1
000104E2 0241 FF80                  		andi.w	#$FF80,d1
000104E6 9041                       		sub.w	d1,d0
000104E8 0C40 0280                  		cmpi.w	#$280,d0
000104EC 6200 0000                  		bhi.w	DeleteObject
000104F0 4E75                       		rts	
000104F2                            ; ===========================================================================
000104F2                            ; ---------------------------------------------------------------------------
000104F2                            ; Sprite mappings - purple rock	(GHZ)
000104F2                            ; ---------------------------------------------------------------------------
000104F2                            Map_obj3B:
000104F2                            	include "_maps\obj3B.asm"
000104F2                            ; ================================================================================
000104F2                            ; Sprite Mappings - generated by Flex 2 Sun Apr 29 2018 10:53:26 GMT-0400 (Eastern Daylight Time)
000104F2                            ; ================================================================================
000104F2                            
000104F2                            GHZROCK:
000104F2 0000                       	dc.w GHZROCK_0-GHZROCK
000104F4 02                         GHZROCK_0: dc.b $2
000104F5 F00B 6000 E8               	dc.b $F0, $B, $60, $0, $E8
000104FA F00B 600C 00               	dc.b $F0, $B, $60, $C, $0
00010500 00                         	even
00010500 00                         	even
00010500                            
00010500                            ; ===========================================================================
00010500                            ; ---------------------------------------------------------------------------
00010500                            ; Object 3C - smashable	wall (GHZ, SLZ)
00010500                            ; ---------------------------------------------------------------------------
00010500                            
00010500                            Obj3C:					; XREF: Obj_Index
00010500 7000                       		moveq	#0,d0
00010502 1028 0024                  		move.b	$24(a0),d0
00010506 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0001050A 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0001050E 6000 0000                  		bra.w	MarkObjGone
00010512                            ; ===========================================================================
00010512 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
00010514 0000                       		dc.w Obj3C_Solid-Obj3C_Index
00010516 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
00010518                            ; ===========================================================================
00010518                            
00010518                            Obj3C_Main:				; XREF: Obj3C_Index
00010518 5428 0024                  		addq.b	#2,$24(a0)
0001051C 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
00010524 317C 450F 0002             		move.w	#$450F,2(a0)
0001052A 117C 0004 0001             		move.b	#4,1(a0)
00010530 117C 0010 0019             		move.b	#$10,$19(a0)
00010536 117C 0004 0018             		move.b	#4,$18(a0)
0001053C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010542                            
00010542                            Obj3C_Solid:				; XREF: Obj3C_Index
00010542 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
00010548 323C 001B                  		move.w	#$1B,d1
0001054C 343C 0020                  		move.w	#$20,d2
00010550 363C 0020                  		move.w	#$20,d3
00010554 3828 0008                  		move.w	8(a0),d4
00010558 6100 0000                  		bsr.w	SolidObject
0001055C 0828 0005 0022             		btst	#5,$22(a0)
00010562 6600                       		bne.s	Obj3C_ChkRoll
00010564                            
00010564                            locret_D180:
00010564 4E75                       		rts	
00010566                            ; ===========================================================================
00010566                            
00010566                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
00010566 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0001056C 6700                       		beq.s	Obj3C_SmashSuper
0001056E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
00010574 66EE                       		bne.s	locret_D180	; if not, branch
00010576 3028 0030                  		move.w	$30(a0),d0
0001057A 6A00                       		bpl.s	Obj3C_ChkSpeed
0001057C 4440                       		neg.w	d0
0001057E                            
0001057E                            Obj3C_ChkSpeed:
0001057E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
00010582 65E0                       		bcs.s	locret_D180	; if not, branch
00010584                            Obj3C_SmashSuper:
00010584 3368 0030 0010             		move.w	$30(a0),$10(a1)
0001058A 5869 0008                  		addq.w	#4,8(a1)
0001058E 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
00010594 3028 0008                  		move.w	8(a0),d0
00010598 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0001059C 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0001059E 5169 0008                  		subq.w	#8,8(a1)
000105A2 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
000105A8                            
000105A8                            Obj3C_Smash:
000105A8 3369 0010 0014             		move.w	$10(a1),$14(a1)
000105AE 08A8 0005 0022             		bclr	#5,$22(a0)
000105B4 08A9 0005 0022             		bclr	#5,$22(a1)
000105BA 7207                       		moveq	#7,d1		; load 8 fragments
000105BC 343C 0070                  		move.w	#$70,d2
000105C0 6100                       		bsr.s	SmashObject
000105C2                            
000105C2                            Obj3C_FragMove:				; XREF: Obj3C_Index
000105C2 6100 0000                  		bsr.w	SpeedToPos
000105C6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
000105CC 6100 0000                  		bsr.w	DisplaySprite
000105D0 4A28 0001                  		tst.b	1(a0)
000105D4 6A00 0000                  		bpl.w	DeleteObject
000105D8 4E75                       		rts	
000105DA                            
000105DA                            ; ---------------------------------------------------------------------------
000105DA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
000105DA                            ; ---------------------------------------------------------------------------
000105DA                            
000105DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000105DA                            
000105DA                            
000105DA                            SmashObject:				; XREF: Obj3C_Smash
000105DA 7000                       		moveq	#0,d0
000105DC 1028 001A                  		move.b	$1A(a0),d0
000105E0 D040                       		add.w	d0,d0
000105E2 2668 0004                  		movea.l	4(a0),a3
000105E6 D6F3 0000                  		adda.w	(a3,d0.w),a3
000105EA 524B                       		addq.w	#1,a3
000105EC 08E8 0005 0001             		bset	#5,1(a0)
000105F2 1810                       		move.b	0(a0),d4
000105F4 1A28 0001                  		move.b	1(a0),d5
000105F8 2248                       		movea.l	a0,a1
000105FA 6000                       		bra.s	Smash_LoadFrag
000105FC                            ; ===========================================================================
000105FC                            
000105FC                            Smash_Loop:
000105FC 6100 0000                  		bsr.w	SingleObjLoad
00010600 6600                       		bne.s	Smash_PlaySnd
00010602 5A4B                       		addq.w	#5,a3
00010604                            
00010604                            Smash_LoadFrag:				; XREF: SmashObject
00010604 137C 0004 0024             		move.b	#4,$24(a1)
0001060A 1284                       		move.b	d4,0(a1)
0001060C 234B 0004                  		move.l	a3,4(a1)
00010610 1345 0001                  		move.b	d5,1(a1)
00010614 3368 0008 0008             		move.w	8(a0),8(a1)
0001061A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010620 3368 0002 0002             		move.w	2(a0),2(a1)
00010626 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001062C 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010632 335C 0010                  		move.w	(a4)+,$10(a1)
00010636 335C 0012                  		move.w	(a4)+,$12(a1)
0001063A B3C8                       		cmpa.l	a0,a1
0001063C 6400                       		bcc.s	loc_D268
0001063E 2F08                       		move.l	a0,-(sp)
00010640 2049                       		movea.l	a1,a0
00010642 6100 0000                  		bsr.w	SpeedToPos
00010646 D568 0012                  		add.w	d2,$12(a0)
0001064A 205F                       		movea.l	(sp)+,a0
0001064C 6100 0000                  		bsr.w	DisplaySprite2
00010650                            
00010650                            loc_D268:
00010650 51C9 FFAA                  		dbf	d1,Smash_Loop
00010654                            
00010654                            Smash_PlaySnd:
00010654 303C 00CB                  		move.w	#$CB,d0
00010658 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play smashing sound
0001065E                            ; End of function SmashObject
0001065E                            
0001065E                            ; ===========================================================================
0001065E                            ; Smashed block	fragment speeds
0001065E                            ;
0001065E 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
00010662 0600 FF00                  		dc.w $600, $FF00
00010666 0600 0100                  		dc.w $600, $100
0001066A 0400 0500                  		dc.w $400, $500
0001066E 0600 FA00                  		dc.w $600, $FA00
00010672 0800 FE00                  		dc.w $800, $FE00
00010676 0800 0200                  		dc.w $800, $200
0001067A 0600 0600                  		dc.w $600, $600
0001067E                            
0001067E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
00010682 F800 FE00                  		dc.w $F800, $FE00
00010686 F800 0200                  		dc.w $F800, $200
0001068A FA00 0600                  		dc.w $FA00, $600
0001068E FC00 FB00                  		dc.w $FC00, $FB00
00010692 FA00 FF00                  		dc.w $FA00, $FF00
00010696 FA00 0100                  		dc.w $FA00, $100
0001069A FC00 0500                  		dc.w $FC00, $500
0001069E                            ; ---------------------------------------------------------------------------
0001069E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0001069E                            ; ---------------------------------------------------------------------------
0001069E                            Map_obj3C:
0001069E                            	include "_maps\obj3C.asm"
0001069E                            ; ---------------------------------------------------------------------------
0001069E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0001069E                            ; ---------------------------------------------------------------------------
0001069E 0000                       		dc.w byte_D2BC-Map_obj3C
000106A0 0000                       		dc.w byte_D2E5-Map_obj3C
000106A2 0000                       		dc.w byte_D30E-Map_obj3C
000106A4 08                         byte_D2BC:	dc.b 8
000106A5 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
000106AA F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
000106AF 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
000106B4 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
000106B9 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
000106BE F005 0004 00               		dc.b $F0, 5, 0,	4, 0
000106C3 0005 0004 00               		dc.b 0,	5, 0, 4, 0
000106C8 1005 0004 00               		dc.b $10, 5, 0,	4, 0
000106CD 08                         byte_D2E5:	dc.b 8
000106CE E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
000106D3 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
000106D8 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
000106DD 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
000106E2 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
000106E7 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
000106EC 0005 0004 00               		dc.b 0,	5, 0, 4, 0
000106F1 1005 0004 00               		dc.b $10, 5, 0,	4, 0
000106F6 08                         byte_D30E:	dc.b 8
000106F7 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
000106FC F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
00010701 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
00010706 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0001070B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
00010710 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
00010715 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0001071A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
00010720 00                         		even
00010720 00                         		even
00010720                            
00010720                            ; ---------------------------------------------------------------------------
00010720                            ; Object code loading subroutine
00010720                            ; ---------------------------------------------------------------------------
00010720                            
00010720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010720                            
00010720                            
00010720                            ObjectsLoad:				; XREF: TitleScreen; et al
00010720 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
00010724 7E7F                       		moveq	#$7F,d7
00010726 7000                       		moveq	#0,d0
00010728 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001072E 6400                       		bcc.s	loc_D362
00010730                            
00010730                            loc_D348:
00010730 1010                       		move.b	(a0),d0		; load object number from RAM
00010732 6700                       		beq.s	loc_D358
00010734 D040                       		add.w	d0,d0
00010736 D040                       		add.w	d0,d0
00010738 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0001073C 4E91                       		jsr	(a1)		; run the object's code
0001073E 7000                       		moveq	#0,d0
00010740                            
00010740                            loc_D358:
00010740 41E8 0040                  		lea	$40(a0),a0	; next object
00010744 51CF FFEA                  		dbf	d7,loc_D348
00010748 4E75                       		rts	
0001074A                            ; ===========================================================================
0001074A                            
0001074A                            loc_D362:
0001074A 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
00010750 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
00010752 7E1F                       		moveq	#$1F,d7
00010754 61DA                       		bsr.s	loc_D348
00010756 7E5F                       		moveq	#$5F,d7
00010758                            
00010758                            loc_D368:
00010758 7000                       		moveq	#0,d0
0001075A 1010                       		move.b	(a0),d0
0001075C 6700                       		beq.s	loc_D378
0001075E 4A28 0001                  		tst.b	1(a0)
00010762 6A00                       		bpl.s	loc_D378
00010764 6100 0000                  		bsr.w	DisplaySprite
00010768                            
00010768                            loc_D378:
00010768 41E8 0040                  		lea	$40(a0),a0
0001076C                            
0001076C                            loc_D37C:
0001076C 51CF FFEA                  		dbf	d7,loc_D368
00010770 4E75                       		rts	
00010772                            ; End of function ObjectsLoad
00010772                            
00010772                            ; ===========================================================================
00010772                            ; ---------------------------------------------------------------------------
00010772                            ; Object pointers
00010772                            ; ---------------------------------------------------------------------------
00010772                            Obj_Index:
00010772                            	include "_inc\Object pointers.asm"
00010772                            ; ---------------------------------------------------------------------------
00010772                            ; Object pointers
00010772                            ; ---------------------------------------------------------------------------
00010772 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj_ShadowProjectile,	ObjectFall, ObjectFall
00010782 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjectFall, ObjectFall, Obj08
00010792 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
000107A2 0000 0000 0000 D69A 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
000107B2 0000 A35A 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
000107C2 0000 A980 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
000107D2 0000 B1CE 0000 B236 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
000107E2 0000 B88E 0000 BB9C 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
000107F2 0000 0000 0000 C786 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
00010802 0000 CAC8 0000 D106 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
00010812 0000 0000 0000 B964 0000+  	dc.l ObjectFall, Obj2A, Obj2B, Obj2C
00010822 0000 DD9E 0000 D314 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
00010832 0000 E770 0000 EE1E 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
00010842 0000 E2D4 0001 0206 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
00010852 0000 F5A4 0000 F65E 0001+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
00010862 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
00010872 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
00010882 0000 EA8C 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
00010892 0001 04A2 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
000108A2 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
000108B2 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
000108C2 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
000108D2 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
000108E2 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
000108F2 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
00010902 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
00010912 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
00010922 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
00010932 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
00010942 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
00010952 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
00010962 0000 0000 0000 F8E2 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
00010972 0000 7758 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
00010982 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
00010992 0000 7E30 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
00010992 0000 7E30 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
000109A2                            
000109A2                            ; ---------------------------------------------------------------------------
000109A2                            ; Subroutine to	make an	object fall downwards, increasingly fast
000109A2                            ; ---------------------------------------------------------------------------
000109A2                            
000109A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000109A2                            
000109A2                            
000109A2                            ObjectFall:
000109A2 3028 0010                  		move.w	$10(a0),d0
000109A6 48C0                       		ext.l	d0
000109A8 E188                       		lsl.l	#8,d0
000109AA D1A8 0008                  		add.l	d0,8(a0)
000109AE 3028 0012                  		move.w	$12(a0),d0
000109B2 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
000109B8 48C0                       		ext.l	d0
000109BA E188                       		lsl.l	#8,d0
000109BC D1A8 000C                  		add.l	d0,$C(a0)
000109C0 4E75                       		rts	
000109C2                            ; End of function ObjectFall
000109C2                            
000109C2                            ; ---------------------------------------------------------------------------
000109C2                            ; Subroutine translating object	speed to update	object position
000109C2                            ; ---------------------------------------------------------------------------
000109C2                            
000109C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000109C2                            
000109C2                            
000109C2                            SpeedToPos:
000109C2 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
000109C6 48C0                       		ext.l	d0
000109C8 E188                       		lsl.l	#8,d0		; multiply speed by $100
000109CA D1A8 0008                  		add.l	d0,8(a0)	; add to x-axis	position
000109CE 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
000109D2 48C0                       		ext.l	d0
000109D4 E188                       		lsl.l	#8,d0		; multiply by $100
000109D6 D1A8 000C                  		add.l	d0,$C(a0)	; add to y-axis	position
000109DA 4E75                       		rts	
000109DC                            ; End of function SpeedToPos
000109DC                            
000109DC                            ; ---------------------------------------------------------------------------
000109DC                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
000109DC                            ; ---------------------------------------------------------------------------
000109DC                            
000109DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000109DC                            
000109DC                            
000109DC                            DisplaySprite:
000109DC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000109E0 3028 0018                  		move.w	$18(a0),d0
000109E4 E248                       		lsr.w	#1,d0
000109E6 0240 0380                  		andi.w	#$380,d0
000109EA D2C0                       		adda.w	d0,a1
000109EC 0C51 007E                  		cmpi.w	#$7E,(a1)
000109F0 6400                       		bcc.s	locret_D620
000109F2 5451                       		addq.w	#2,(a1)
000109F4 D2D1                       		adda.w	(a1),a1
000109F6 3288                       		move.w	a0,(a1)
000109F8                            
000109F8                            locret_D620:
000109F8 4E75                       		rts	
000109FA                            ; End of function DisplaySprite
000109FA                            
000109FA                            ; ---------------------------------------------------------------------------
000109FA                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
000109FA                            ; ---------------------------------------------------------------------------
000109FA                            
000109FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000109FA                            
000109FA                            
000109FA                            DisplaySprite2:
000109FA 45F8 AC00                  		lea	($FFFFAC00).w,a2
000109FE 3029 0018                  		move.w	$18(a1),d0
00010A02 E248                       		lsr.w	#1,d0
00010A04 0240 0380                  		andi.w	#$380,d0
00010A08 D4C0                       		adda.w	d0,a2
00010A0A 0C52 007E                  		cmpi.w	#$7E,(a2)
00010A0E 6400                       		bcc.s	locret_D63E
00010A10 5452                       		addq.w	#2,(a2)
00010A12 D4D2                       		adda.w	(a2),a2
00010A14 3489                       		move.w	a1,(a2)
00010A16                            
00010A16                            locret_D63E:
00010A16 4E75                       		rts	
00010A18                            ; End of function DisplaySprite2
00010A18                            
00010A18                            ; ---------------------------------------------------------------------------
00010A18                            ; Subroutine to	delete an object
00010A18                            ; ---------------------------------------------------------------------------
00010A18                            
00010A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010A18                            
00010A18                            
00010A18                            DeleteObject:
00010A18 2248                       		movea.l	a0,a1
00010A1A                            
00010A1A                            DeleteObject2:
00010A1A 7200                       		moveq	#0,d1
00010A1C 700F                       		moveq	#$F,d0
00010A1E                            
00010A1E                            loc_D646:
00010A1E 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
00010A20 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
00010A24 4E75                       		rts	
00010A26                            ; End of function DeleteObject
00010A26                            
00010A26                            ; ===========================================================================
00010A26 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
00010A2A 00FF F700                  		dc.l $FFF700		; main screen x-position
00010A2E 00FF F708                  		dc.l $FFF708		; background x-position	1
00010A32 00FF F718                  		dc.l $FFF718		; background x-position	2
00010A36                            ; ---------------------------------------------------------------------------
00010A36                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
00010A36                            ; ---------------------------------------------------------------------------
00010A36                            
00010A36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010A36                            
00010A36                            
00010A36                            BuildSprites:				; XREF: TitleScreen; et al
00010A36 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
00010A3A 7A00                       		moveq	#0,d5
00010A3C 49F8 AC00                  		lea	($FFFFAC00).w,a4
00010A40 7E07                       		moveq	#7,d7
00010A42                            
00010A42                            loc_D66A:
00010A42 4A54                       		tst.w	(a4)
00010A44 6700 0000                  		beq.w	loc_D72E
00010A48 7C02                       		moveq	#2,d6
00010A4A                            
00010A4A                            loc_D672:
00010A4A 3074 6000                  		movea.w	(a4,d6.w),a0
00010A4E 4A10                       		tst.b	(a0)
00010A50 6700 0000                  		beq.w	loc_D726
00010A54 08A8 0007 0001             		bclr	#7,1(a0)
00010A5A 1028 0001                  		move.b	1(a0),d0
00010A5E 1800                       		move.b	d0,d4
00010A60 0240 000C                  		andi.w	#$C,d0
00010A64 6700                       		beq.s	loc_D6DE
00010A66 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
00010A6A 7000                       		moveq	#0,d0
00010A6C 1028 0019                  		move.b	$19(a0),d0
00010A70 3628 0008                  		move.w	8(a0),d3
00010A74 9651                       		sub.w	(a1),d3
00010A76 3203                       		move.w	d3,d1
00010A78 D240                       		add.w	d0,d1
00010A7A 6B00 0000                  		bmi.w	loc_D726
00010A7E 3203                       		move.w	d3,d1
00010A80 9240                       		sub.w	d0,d1
00010A82 0C41 0140                  		cmpi.w	#$140,d1
00010A86 6C00                       		bge.s	loc_D726
00010A88 0643 0080                  		addi.w	#$80,d3
00010A8C 0804 0004                  		btst	#4,d4
00010A90 6700                       		beq.s	loc_D6E8
00010A92 7000                       		moveq	#0,d0
00010A94 1028 0016                  		move.b	$16(a0),d0
00010A98 3428 000C                  		move.w	$C(a0),d2
00010A9C 9469 0004                  		sub.w	4(a1),d2
00010AA0 3202                       		move.w	d2,d1
00010AA2 D240                       		add.w	d0,d1
00010AA4 6B00                       		bmi.s	loc_D726
00010AA6 3202                       		move.w	d2,d1
00010AA8 9240                       		sub.w	d0,d1
00010AAA 0C41 00E0                  		cmpi.w	#$E0,d1
00010AAE 6C00                       		bge.s	loc_D726
00010AB0 0642 0080                  		addi.w	#$80,d2
00010AB4 6000                       		bra.s	loc_D700
00010AB6                            ; ===========================================================================
00010AB6                            
00010AB6                            loc_D6DE:
00010AB6 3428 000A                  		move.w	$A(a0),d2
00010ABA 3628 0008                  		move.w	8(a0),d3
00010ABE 6000                       		bra.s	loc_D700
00010AC0                            ; ===========================================================================
00010AC0                            
00010AC0                            loc_D6E8:
00010AC0 3428 000C                  		move.w	$C(a0),d2
00010AC4 9469 0004                  		sub.w	4(a1),d2
00010AC8 0642 0080                  		addi.w	#$80,d2
00010ACC 0C42 0060                  		cmpi.w	#$60,d2
00010AD0 6500                       		bcs.s	loc_D726
00010AD2 0C42 0180                  		cmpi.w	#$180,d2
00010AD6 6400                       		bcc.s	loc_D726
00010AD8                            
00010AD8                            loc_D700:
00010AD8 2268 0004                  		movea.l	4(a0),a1
00010ADC 7200                       		moveq	#0,d1
00010ADE 0804 0005                  		btst	#5,d4
00010AE2 6600                       		bne.s	loc_D71C
00010AE4 1228 001A                  		move.b	$1A(a0),d1
00010AE8 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
00010AEA D2F1 1000                  		adda.w	(a1,d1.w),a1
00010AEE 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
00010AF0 1219                       		move.b	(a1)+,d1
00010AF2 5301                       		subq.b	#1,d1
00010AF4 6B00                       		bmi.s	loc_D720
00010AF6                            
00010AF6                            loc_D71C:
00010AF6 6100 0000                  		bsr.w	sub_D750
00010AFA                            
00010AFA                            loc_D720:
00010AFA 08E8 0007 0001             		bset	#7,1(a0)
00010B00                            
00010B00                            loc_D726:
00010B00 5446                       		addq.w	#2,d6
00010B02 5554                       		subq.w	#2,(a4)
00010B04 6600 FF44                  		bne.w	loc_D672
00010B08                            
00010B08                            loc_D72E:
00010B08 49EC 0080                  		lea	$80(a4),a4
00010B0C 51CF FF34                  		dbf	d7,loc_D66A
00010B10 11C5 F62C                  		move.b	d5,($FFFFF62C).w
00010B14 0C05 0050                  		cmpi.b	#$50,d5
00010B18 6700                       		beq.s	loc_D748
00010B1A 24BC 0000 0000             		move.l	#0,(a2)
00010B20 4E75                       		rts	
00010B22                            ; ===========================================================================
00010B22                            
00010B22                            loc_D748:
00010B22 157C 0000 FFFB             		move.b	#0,-5(a2)
00010B28 4E75                       		rts	
00010B2A                            ; End of function BuildSprites
00010B2A                            
00010B2A                            
00010B2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010B2A                            
00010B2A                            
00010B2A                            sub_D750:				; XREF: BuildSprites
00010B2A 3668 0002                  		movea.w	2(a0),a3
00010B2E 0804 0000                  		btst	#0,d4
00010B32 6600                       		bne.s	loc_D796
00010B34 0804 0001                  		btst	#1,d4
00010B38 6600 0000                  		bne.w	loc_D7E4
00010B3C                            ; End of function sub_D750
00010B3C                            
00010B3C                            
00010B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010B3C                            
00010B3C                            
00010B3C                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
00010B3C 0C05 0050                  		cmpi.b	#$50,d5
00010B40 6700                       		beq.s	locret_D794
00010B42 1019                       		move.b	(a1)+,d0
00010B44 4880                       		ext.w	d0
00010B46 D042                       		add.w	d2,d0
00010B48 34C0                       		move.w	d0,(a2)+
00010B4A 14D9                       		move.b	(a1)+,(a2)+
00010B4C 5205                       		addq.b	#1,d5
00010B4E 14C5                       		move.b	d5,(a2)+
00010B50 1019                       		move.b	(a1)+,d0
00010B52 E148                       		lsl.w	#8,d0
00010B54 1019                       		move.b	(a1)+,d0
00010B56 D04B                       		add.w	a3,d0
00010B58 34C0                       		move.w	d0,(a2)+
00010B5A 1019                       		move.b	(a1)+,d0
00010B5C 4880                       		ext.w	d0
00010B5E D043                       		add.w	d3,d0
00010B60 0240 01FF                  		andi.w	#$1FF,d0
00010B64 6600                       		bne.s	loc_D78E
00010B66 5240                       		addq.w	#1,d0
00010B68                            
00010B68                            loc_D78E:
00010B68 34C0                       		move.w	d0,(a2)+
00010B6A 51C9 FFD0                  		dbf	d1,sub_D762
00010B6E                            
00010B6E                            locret_D794:
00010B6E 4E75                       		rts	
00010B70                            ; End of function sub_D762
00010B70                            
00010B70                            ; ===========================================================================
00010B70                            
00010B70                            loc_D796:
00010B70 0804 0001                  		btst	#1,d4
00010B74 6600 0000                  		bne.w	loc_D82A
00010B78                            
00010B78                            loc_D79E:
00010B78 0C05 0050                  		cmpi.b	#$50,d5
00010B7C 6700                       		beq.s	locret_D7E2
00010B7E 1019                       		move.b	(a1)+,d0
00010B80 4880                       		ext.w	d0
00010B82 D042                       		add.w	d2,d0
00010B84 34C0                       		move.w	d0,(a2)+
00010B86 1819                       		move.b	(a1)+,d4
00010B88 14C4                       		move.b	d4,(a2)+
00010B8A 5205                       		addq.b	#1,d5
00010B8C 14C5                       		move.b	d5,(a2)+
00010B8E 1019                       		move.b	(a1)+,d0
00010B90 E148                       		lsl.w	#8,d0
00010B92 1019                       		move.b	(a1)+,d0
00010B94 D04B                       		add.w	a3,d0
00010B96 0A40 0800                  		eori.w	#$800,d0
00010B9A 34C0                       		move.w	d0,(a2)+
00010B9C 1019                       		move.b	(a1)+,d0
00010B9E 4880                       		ext.w	d0
00010BA0 4440                       		neg.w	d0
00010BA2 D804                       		add.b	d4,d4
00010BA4 0244 0018                  		andi.w	#$18,d4
00010BA8 5044                       		addq.w	#8,d4
00010BAA 9044                       		sub.w	d4,d0
00010BAC D043                       		add.w	d3,d0
00010BAE 0240 01FF                  		andi.w	#$1FF,d0
00010BB2 6600                       		bne.s	loc_D7DC
00010BB4 5240                       		addq.w	#1,d0
00010BB6                            
00010BB6                            loc_D7DC:
00010BB6 34C0                       		move.w	d0,(a2)+
00010BB8 51C9 FFBE                  		dbf	d1,loc_D79E
00010BBC                            
00010BBC                            locret_D7E2:
00010BBC 4E75                       		rts	
00010BBE                            ; ===========================================================================
00010BBE                            
00010BBE                            loc_D7E4:				; XREF: sub_D750
00010BBE 0C05 0050                  		cmpi.b	#$50,d5
00010BC2 6700                       		beq.s	locret_D828
00010BC4 1019                       		move.b	(a1)+,d0
00010BC6 1811                       		move.b	(a1),d4
00010BC8 4880                       		ext.w	d0
00010BCA 4440                       		neg.w	d0
00010BCC E70C                       		lsl.b	#3,d4
00010BCE 0244 0018                  		andi.w	#$18,d4
00010BD2 5044                       		addq.w	#8,d4
00010BD4 9044                       		sub.w	d4,d0
00010BD6 D042                       		add.w	d2,d0
00010BD8 34C0                       		move.w	d0,(a2)+
00010BDA 14D9                       		move.b	(a1)+,(a2)+
00010BDC 5205                       		addq.b	#1,d5
00010BDE 14C5                       		move.b	d5,(a2)+
00010BE0 1019                       		move.b	(a1)+,d0
00010BE2 E148                       		lsl.w	#8,d0
00010BE4 1019                       		move.b	(a1)+,d0
00010BE6 D04B                       		add.w	a3,d0
00010BE8 0A40 1000                  		eori.w	#$1000,d0
00010BEC 34C0                       		move.w	d0,(a2)+
00010BEE 1019                       		move.b	(a1)+,d0
00010BF0 4880                       		ext.w	d0
00010BF2 D043                       		add.w	d3,d0
00010BF4 0240 01FF                  		andi.w	#$1FF,d0
00010BF8 6600                       		bne.s	loc_D822
00010BFA 5240                       		addq.w	#1,d0
00010BFC                            
00010BFC                            loc_D822:
00010BFC 34C0                       		move.w	d0,(a2)+
00010BFE 51C9 FFBE                  		dbf	d1,loc_D7E4
00010C02                            
00010C02                            locret_D828:
00010C02 4E75                       		rts	
00010C04                            ; ===========================================================================
00010C04                            
00010C04                            loc_D82A:
00010C04 0C05 0050                  		cmpi.b	#$50,d5
00010C08 6700                       		beq.s	locret_D87C
00010C0A 1019                       		move.b	(a1)+,d0
00010C0C 1811                       		move.b	(a1),d4
00010C0E 4880                       		ext.w	d0
00010C10 4440                       		neg.w	d0
00010C12 E70C                       		lsl.b	#3,d4
00010C14 0244 0018                  		andi.w	#$18,d4
00010C18 5044                       		addq.w	#8,d4
00010C1A 9044                       		sub.w	d4,d0
00010C1C D042                       		add.w	d2,d0
00010C1E 34C0                       		move.w	d0,(a2)+
00010C20 1819                       		move.b	(a1)+,d4
00010C22 14C4                       		move.b	d4,(a2)+
00010C24 5205                       		addq.b	#1,d5
00010C26 14C5                       		move.b	d5,(a2)+
00010C28 1019                       		move.b	(a1)+,d0
00010C2A E148                       		lsl.w	#8,d0
00010C2C 1019                       		move.b	(a1)+,d0
00010C2E D04B                       		add.w	a3,d0
00010C30 0A40 1800                  		eori.w	#$1800,d0
00010C34 34C0                       		move.w	d0,(a2)+
00010C36 1019                       		move.b	(a1)+,d0
00010C38 4880                       		ext.w	d0
00010C3A 4440                       		neg.w	d0
00010C3C D804                       		add.b	d4,d4
00010C3E 0244 0018                  		andi.w	#$18,d4
00010C42 5044                       		addq.w	#8,d4
00010C44 9044                       		sub.w	d4,d0
00010C46 D043                       		add.w	d3,d0
00010C48 0240 01FF                  		andi.w	#$1FF,d0
00010C4C 6600                       		bne.s	loc_D876
00010C4E 5240                       		addq.w	#1,d0
00010C50                            
00010C50                            loc_D876:
00010C50 34C0                       		move.w	d0,(a2)+
00010C52 51C9 FFB0                  		dbf	d1,loc_D82A
00010C56                            
00010C56                            locret_D87C:
00010C56 4E75                       		rts	
00010C58                            ; ---------------------------------------------------------------------------
00010C58                            ; Subroutine to	check if an object is on the screen
00010C58                            ; ---------------------------------------------------------------------------
00010C58                            
00010C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C58                            
00010C58                            
00010C58                            ChkObjOnScreen:
00010C58 3028 0008                  		move.w	8(a0),d0	; get object x-position
00010C5C 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
00010C60 6B00                       		bmi.s	NotOnScreen
00010C62 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
00010C66 6C00                       		bge.s	NotOnScreen	; if not, branch
00010C68                            
00010C68 3228 000C                  		move.w	$C(a0),d1	; get object y-position
00010C6C 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
00010C70 6B00                       		bmi.s	NotOnScreen
00010C72 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
00010C76 6C00                       		bge.s	NotOnScreen	; if not, branch
00010C78                            
00010C78 7000                       		moveq	#0,d0		; set flag to 0
00010C7A 4E75                       		rts	
00010C7C                            ; ===========================================================================
00010C7C                            
00010C7C                            NotOnScreen:				; XREF: ChkObjOnScreen
00010C7C 7001                       		moveq	#1,d0		; set flag to 1
00010C7E 4E75                       		rts	
00010C80                            ; End of function ChkObjOnScreen
00010C80                            
00010C80                            
00010C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C80                            
00010C80                            
00010C80                            ChkObjOnScreen2:
00010C80 7200                       		moveq	#0,d1
00010C82 1228 0019                  		move.b	$19(a0),d1
00010C86 3028 0008                  		move.w	8(a0),d0
00010C8A 9078 F700                  		sub.w	($FFFFF700).w,d0
00010C8E D041                       		add.w	d1,d0
00010C90 6B00                       		bmi.s	NotOnScreen2
00010C92 D241                       		add.w	d1,d1
00010C94 9041                       		sub.w	d1,d0
00010C96 0C40 0140                  		cmpi.w	#320,d0
00010C9A 6C00                       		bge.s	NotOnScreen2
00010C9C                            
00010C9C 3228 000C                  		move.w	$C(a0),d1
00010CA0 9278 F704                  		sub.w	($FFFFF704).w,d1
00010CA4 6B00                       		bmi.s	NotOnScreen2
00010CA6 0C41 00E0                  		cmpi.w	#224,d1
00010CAA 6C00                       		bge.s	NotOnScreen2
00010CAC                            
00010CAC 7000                       		moveq	#0,d0
00010CAE 4E75                       		rts	
00010CB0                            ; ===========================================================================
00010CB0                            
00010CB0                            NotOnScreen2:				; XREF: ChkObjOnScreen2
00010CB0 7001                       		moveq	#1,d0
00010CB2 4E75                       		rts	
00010CB4                            ; End of function ChkObjOnScreen2
00010CB4                            
00010CB4                            ; ---------------------------------------------------------------------------
00010CB4                            ; Subroutine to	load a level's objects
00010CB4                            ; ---------------------------------------------------------------------------
00010CB4                            
00010CB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010CB4                            
00010CB4                            
00010CB4                            ObjPosLoad:				; XREF: Level; et al
00010CB4 7000                       		moveq	#0,d0
00010CB6 1038 F76C                  		move.b	($FFFFF76C).w,d0
00010CBA 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
00010CBE 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
00010CC2                            ; End of function ObjPosLoad
00010CC2                            
00010CC2                            ; ===========================================================================
00010CC2 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
00010CC4 0000                       		dc.w OPL_Next-OPL_Index
00010CC6                            ; ===========================================================================
00010CC6                            
00010CC6                            OPL_Main:				; XREF: OPL_Index
00010CC6 5438 F76C                  		addq.b	#2,($FFFFF76C).w
00010CCA 3038 FE10                  		move.w	($FFFFFE10).w,d0
00010CCE ED08                       		lsl.b	#6,d0
00010CD0 E848                       		lsr.w	#4,d0
00010CD2 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
00010CD8 2248                       		movea.l	a0,a1
00010CDA D0F0 0000                  		adda.w	(a0,d0.w),a0
00010CDE 21C8 F770                  		move.l	a0,($FFFFF770).w
00010CE2 21C8 F774                  		move.l	a0,($FFFFF774).w
00010CE6 D2F1 0002                  		adda.w	2(a1,d0.w),a1
00010CEA 21C9 F778                  		move.l	a1,($FFFFF778).w
00010CEE 21C9 F77C                  		move.l	a1,($FFFFF77C).w
00010CF2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010CF6 34FC 0101                  		move.w	#$101,(a2)+
00010CFA 303C 005E                  		move.w	#$5E,d0
00010CFE                            
00010CFE                            OPL_ClrList:
00010CFE 429A                       		clr.l	(a2)+
00010D00 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
00010D04                            
00010D04 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D08 7400                       		moveq	#0,d2
00010D0A 3C38 F700                  		move.w	($FFFFF700).w,d6
00010D0E 0446 0080                  		subi.w	#$80,d6
00010D12 6400                       		bcc.s	loc_D93C
00010D14 7C00                       		moveq	#0,d6
00010D16                            
00010D16                            loc_D93C:
00010D16 0246 FF80                  		andi.w	#$FF80,d6
00010D1A 2078 F770                  		movea.l	($FFFFF770).w,a0
00010D1E                            
00010D1E                            loc_D944:
00010D1E BC50                       		cmp.w	(a0),d6
00010D20 6300                       		bls.s	loc_D956
00010D22 4A28 0004                  		tst.b	4(a0)
00010D26 6A00                       		bpl.s	loc_D952
00010D28 1412                       		move.b	(a2),d2
00010D2A 5212                       		addq.b	#1,(a2)
00010D2C                            
00010D2C                            loc_D952:
00010D2C 5C48                       		addq.w	#6,a0
00010D2E 60EE                       		bra.s	loc_D944
00010D30                            ; ===========================================================================
00010D30                            
00010D30                            loc_D956:
00010D30 21C8 F770                  		move.l	a0,($FFFFF770).w
00010D34 2078 F774                  		movea.l	($FFFFF774).w,a0
00010D38 0446 0080                  		subi.w	#$80,d6
00010D3C 6500                       		bcs.s	loc_D976
00010D3E                            
00010D3E                            loc_D964:
00010D3E BC50                       		cmp.w	(a0),d6
00010D40 6300                       		bls.s	loc_D976
00010D42 4A28 0004                  		tst.b	4(a0)
00010D46 6A00                       		bpl.s	loc_D972
00010D48 522A 0001                  		addq.b	#1,1(a2)
00010D4C                            
00010D4C                            loc_D972:
00010D4C 5C48                       		addq.w	#6,a0
00010D4E 60EE                       		bra.s	loc_D964
00010D50                            ; ===========================================================================
00010D50                            
00010D50                            loc_D976:
00010D50 21C8 F774                  		move.l	a0,($FFFFF774).w
00010D54 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
00010D5A                            
00010D5A                            OPL_Next:				; XREF: OPL_Index
00010D5A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D5E 7400                       		moveq	#0,d2
00010D60 3C38 F700                  		move.w	($FFFFF700).w,d6
00010D64 0246 FF80                  		andi.w	#$FF80,d6
00010D68 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
00010D6C 6700 0000                  		beq.w	locret_DA3A
00010D70 6C00                       		bge.s	loc_D9F6
00010D72 31C6 F76E                  		move.w	d6,($FFFFF76E).w
00010D76 2078 F774                  		movea.l	($FFFFF774).w,a0
00010D7A 0446 0080                  		subi.w	#$80,d6
00010D7E 6500                       		bcs.s	loc_D9D2
00010D80                            
00010D80                            loc_D9A6:
00010D80 BC68 FFFA                  		cmp.w	-6(a0),d6
00010D84 6C00                       		bge.s	loc_D9D2
00010D86 5D48                       		subq.w	#6,a0
00010D88 4A28 0004                  		tst.b	4(a0)
00010D8C 6A00                       		bpl.s	loc_D9BC
00010D8E 532A 0001                  		subq.b	#1,1(a2)
00010D92 142A 0001                  		move.b	1(a2),d2
00010D96                            
00010D96                            loc_D9BC:
00010D96 6100 0000                  		bsr.w	loc_DA3C
00010D9A 6600                       		bne.s	loc_D9C6
00010D9C 5D48                       		subq.w	#6,a0
00010D9E 60E0                       		bra.s	loc_D9A6
00010DA0                            ; ===========================================================================
00010DA0                            
00010DA0                            loc_D9C6:
00010DA0 4A28 0004                  		tst.b	4(a0)
00010DA4 6A00                       		bpl.s	loc_D9D0
00010DA6 522A 0001                  		addq.b	#1,1(a2)
00010DAA                            
00010DAA                            loc_D9D0:
00010DAA 5C48                       		addq.w	#6,a0
00010DAC                            
00010DAC                            loc_D9D2:
00010DAC 21C8 F774                  		move.l	a0,($FFFFF774).w
00010DB0 2078 F770                  		movea.l	($FFFFF770).w,a0
00010DB4 0646 0300                  		addi.w	#$300,d6
00010DB8                            
00010DB8                            loc_D9DE:
00010DB8 BC68 FFFA                  		cmp.w	-6(a0),d6
00010DBC 6E00                       		bgt.s	loc_D9F0
00010DBE 4A28 FFFE                  		tst.b	-2(a0)
00010DC2 6A00                       		bpl.s	loc_D9EC
00010DC4 5312                       		subq.b	#1,(a2)
00010DC6                            
00010DC6                            loc_D9EC:
00010DC6 5D48                       		subq.w	#6,a0
00010DC8 60EE                       		bra.s	loc_D9DE
00010DCA                            ; ===========================================================================
00010DCA                            
00010DCA                            loc_D9F0:
00010DCA 21C8 F770                  		move.l	a0,($FFFFF770).w
00010DCE 4E75                       		rts	
00010DD0                            ; ===========================================================================
00010DD0                            
00010DD0                            loc_D9F6:
00010DD0 31C6 F76E                  		move.w	d6,($FFFFF76E).w
00010DD4 2078 F770                  		movea.l	($FFFFF770).w,a0
00010DD8 0646 0280                  		addi.w	#$280,d6
00010DDC                            
00010DDC                            loc_DA02:
00010DDC BC50                       		cmp.w	(a0),d6
00010DDE 6300                       		bls.s	loc_DA16
00010DE0 4A28 0004                  		tst.b	4(a0)
00010DE4 6A00                       		bpl.s	loc_DA10
00010DE6 1412                       		move.b	(a2),d2
00010DE8 5212                       		addq.b	#1,(a2)
00010DEA                            
00010DEA                            loc_DA10:
00010DEA 6100 0000                  		bsr.w	loc_DA3C
00010DEE 67EC                       		beq.s	loc_DA02
00010DF0 4A28 0004                  		tst.b	$04(a0)		; was this object a remember state?
00010DF4 6A00                       		bpl.s	loc_DA16	; if not, branch
00010DF6 5312                       		subq.b	#$01,(a2)	; move right counter back
00010DF8                            
00010DF8                            loc_DA16:
00010DF8 21C8 F770                  		move.l	a0,($FFFFF770).w
00010DFC 2078 F774                  		movea.l	($FFFFF774).w,a0
00010E00 0446 0300                  		subi.w	#$300,d6
00010E04 6500                       		bcs.s	loc_DA36
00010E06                            
00010E06                            loc_DA24:
00010E06 BC50                       		cmp.w	(a0),d6
00010E08 6300                       		bls.s	loc_DA36
00010E0A 4A28 0004                  		tst.b	4(a0)
00010E0E 6A00                       		bpl.s	loc_DA32
00010E10 522A 0001                  		addq.b	#1,1(a2)
00010E14                            
00010E14                            loc_DA32:
00010E14 5C48                       		addq.w	#6,a0
00010E16 60EE                       		bra.s	loc_DA24
00010E18                            ; ===========================================================================
00010E18                            
00010E18                            loc_DA36:
00010E18 21C8 F774                  		move.l	a0,($FFFFF774).w
00010E1C                            
00010E1C                            locret_DA3A:
00010E1C 4E75                       		rts	
00010E1E                            ; ===========================================================================
00010E1E                            
00010E1E                            loc_DA3C:
00010E1E 4A28 0004                  		tst.b	4(a0)
00010E22 6A00                       		bpl.s	OPL_MakeItem
00010E24 0832 0007 2002             		btst	#7,2(a2,d2.w)
00010E2A 6700                       		beq.s	OPL_MakeItem
00010E2C 5C48                       		addq.w	#6,a0
00010E2E 7000                       		moveq	#0,d0
00010E30 4E75                       		rts	
00010E32                            ; ===========================================================================
00010E32                            
00010E32                            OPL_MakeItem:
00010E32 6100 0000                  		bsr.w	SingleObjLoad
00010E36 6600                       		bne.s	locret_DA8A
00010E38 3358 0008                  		move.w	(a0)+,8(a1)
00010E3C 3018                       		move.w	(a0)+,d0
00010E3E 3200                       		move.w	d0,d1
00010E40 0240 0FFF                  		andi.w	#$FFF,d0
00010E44 3340 000C                  		move.w	d0,$C(a1)
00010E48 E559                       		rol.w	#2,d1
00010E4A 0201 0003                  		andi.b	#3,d1
00010E4E 1341 0001                  		move.b	d1,1(a1)
00010E52 1341 0022                  		move.b	d1,$22(a1)
00010E56 1018                       		move.b	(a0)+,d0
00010E58 6A00                       		bpl.s	loc_DA80
00010E5A 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)	; set as removed
00010E60 0200 007F                  		andi.b	#$7F,d0
00010E64 1342 0023                  		move.b	d2,$23(a1)
00010E68                            
00010E68                            loc_DA80:
00010E68 1280                       		move.b	d0,0(a1)
00010E6A 1358 0028                  		move.b	(a0)+,$28(a1)
00010E6E 7000                       		moveq	#0,d0
00010E70                            
00010E70                            locret_DA8A:
00010E70 4E75                       		rts	
00010E72                            ; ---------------------------------------------------------------------------
00010E72                            ; Single object	loading	subroutine
00010E72                            ; ---------------------------------------------------------------------------
00010E72                            
00010E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E72                            
00010E72                            
00010E72                            SingleObjLoad:
00010E72 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
00010E76 303C 005F                  		move.w	#$5F,d0
00010E7A                            
00010E7A                            loc_DA94:
00010E7A 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
00010E7C 6700                       		beq.s	locret_DAA0	; if yes, branch
00010E7E 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
00010E82 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
00010E86                            
00010E86                            locret_DAA0:
00010E86 4E75                       		rts	
00010E88                            ; End of function SingleObjLoad
00010E88                            
00010E88                            
00010E88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E88                            
00010E88                            
00010E88                            SingleObjLoad2:
00010E88 2248                       		movea.l	a0,a1
00010E8A 303C F000                  		move.w	#-$1000,d0
00010E8E 9048                       		sub.w	a0,d0
00010E90 EC48                       		lsr.w	#6,d0
00010E92 5340                       		subq.w	#1,d0
00010E94 6500                       		bcs.s	locret_DABC
00010E96                            
00010E96                            loc_DAB0:
00010E96 4A11                       		tst.b	(a1)
00010E98 6700                       		beq.s	locret_DABC
00010E9A 43E9 0040                  		lea	$40(a1),a1
00010E9E 51C8 FFF6                  		dbf	d0,loc_DAB0
00010EA2                            
00010EA2                            locret_DABC:
00010EA2 4E75                       		rts	
00010EA4                            ; End of function SingleObjLoad2
00010EA4                            
00010EA4                            ; ===========================================================================
00010EA4                            ; ---------------------------------------------------------------------------
00010EA4                            ; Object 41 - springs
00010EA4                            ; ---------------------------------------------------------------------------
00010EA4                            
00010EA4                            Obj41:					; XREF: Obj_Index
00010EA4 7000                       		moveq	#0,d0
00010EA6 1028 0024                  		move.b	$24(a0),d0
00010EAA 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
00010EAE 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
00010EB2 6100 FB28                  		bsr.w	DisplaySprite
00010EB6 3028 0008                  		move.w	8(a0),d0
00010EBA 0240 FF80                  		andi.w	#$FF80,d0
00010EBE 3238 F700                  		move.w	($FFFFF700).w,d1
00010EC2 0441 0080                  		subi.w	#$80,d1
00010EC6 0241 FF80                  		andi.w	#$FF80,d1
00010ECA 9041                       		sub.w	d1,d0
00010ECC 0C40 0280                  		cmpi.w	#$280,d0
00010ED0 6200 FB46                  		bhi.w	DeleteObject
00010ED4 4E75                       		rts	
00010ED6                            ; ===========================================================================
00010ED6 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
00010ED8 0000                       		dc.w Obj41_Up-Obj41_Index
00010EDA 0000                       		dc.w Obj41_AniUp-Obj41_Index
00010EDC 0000                       		dc.w Obj41_ResetUp-Obj41_Index
00010EDE 0000                       		dc.w Obj41_LR-Obj41_Index
00010EE0 0000                       		dc.w Obj41_AniLR-Obj41_Index
00010EE2 0000                       		dc.w Obj41_ResetLR-Obj41_Index
00010EE4 0000                       		dc.w Obj41_Dwn-Obj41_Index
00010EE6 0000                       		dc.w Obj41_AniDwn-Obj41_Index
00010EE8 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
00010EEA                            
00010EEA F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
00010EEC F600                       		dc.w -$A00		; power	of yellow spring
00010EEE                            ; ===========================================================================
00010EEE                            
00010EEE                            Obj41_Main:				; XREF: Obj41_Index
00010EEE 5428 0024                  		addq.b	#2,$24(a0)
00010EF2 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
00010EFA 317C 0523 0002             		move.w	#$523,2(a0)
00010F00 0028 0004 0001             		ori.b	#4,1(a0)
00010F06 117C 0010 0019             		move.b	#$10,$19(a0)
00010F0C 117C 0004 0018             		move.b	#4,$18(a0)
00010F12 1028 0028                  		move.b	$28(a0),d0
00010F16 0800 0004                  		btst	#4,d0		; does the spring face left/right?
00010F1A 6700                       		beq.s	loc_DB54	; if not, branch
00010F1C 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
00010F22 117C 0001 001C             		move.b	#1,$1C(a0)
00010F28 117C 0003 001A             		move.b	#3,$1A(a0)
00010F2E 317C 0533 0002             		move.w	#$533,2(a0)
00010F34 117C 0008 0019             		move.b	#8,$19(a0)
00010F3A                            
00010F3A                            loc_DB54:
00010F3A 0800 0005                  		btst	#5,d0		; does the spring face downwards?
00010F3E 6700                       		beq.s	loc_DB66	; if not, branch
00010F40 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
00010F46 08E8 0001 0022             		bset	#1,$22(a0)
00010F4C                            
00010F4C                            loc_DB66:
00010F4C 0800 0001                  		btst	#1,d0
00010F50 6700                       		beq.s	loc_DB72
00010F52 08E8 0005 0002             		bset	#5,2(a0)
00010F58                            
00010F58                            loc_DB72:
00010F58 0240 000F                  		andi.w	#$F,d0
00010F5C 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
00010F62 4E75                       		rts	
00010F64                            ; ===========================================================================
00010F64                            
00010F64                            Obj41_Up:				; XREF: Obj41_Index
00010F64 323C 001B                  		move.w	#$1B,d1
00010F68 343C 0008                  		move.w	#8,d2
00010F6C 363C 0010                  		move.w	#$10,d3
00010F70 3828 0008                  		move.w	8(a0),d4
00010F74 6100 0000                  		bsr.w	SolidObject
00010F78 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
00010F7C 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
00010F7E 4E75                       		rts	
00010F80                            ; ===========================================================================
00010F80                            
00010F80                            Obj41_BounceUp:				; XREF: Obj41_Up
00010F80 5428 0024                  		addq.b	#2,$24(a0)
00010F84 5069 000C                  		addq.w	#8,$C(a1)
00010F88 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
00010F8E 08E9 0001 0022             		bset	#1,$22(a1)
00010F94 08A9 0003 0022             		bclr	#3,$22(a1)
00010F9A 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
00010FA0 137C 0002 0024             		move.b	#2,$24(a1)
00010FA6 08A8 0003 0022             		bclr	#3,$22(a0)
00010FAC 4228 0025                  		clr.b	$25(a0)
00010FB0 303C 00CC                  		move.w	#$CC,d0
00010FB4 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play spring sound
00010FBA                            
00010FBA                            Obj41_AniUp:				; XREF: Obj41_Index
00010FBA 43F9 0000 0000             		lea	(Ani_obj41).l,a1
00010FC0 6000 C818                  		bra.w	AnimateSprite
00010FC4                            ; ===========================================================================
00010FC4                            
00010FC4                            Obj41_ResetUp:				; XREF: Obj41_Index
00010FC4 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
00010FCA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
00010FCE 4E75                       		rts	
00010FD0                            ; ===========================================================================
00010FD0                            
00010FD0                            Obj41_LR:				; XREF: Obj41_Index
00010FD0 323C 0013                  		move.w	#$13,d1
00010FD4 343C 000E                  		move.w	#$E,d2
00010FD8 363C 000F                  		move.w	#$F,d3
00010FDC 3828 0008                  		move.w	8(a0),d4
00010FE0 6100 0000                  		bsr.w	SolidObject
00010FE4 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00010FEA 6600                       		bne.s	loc_DC0C
00010FEC 117C 0008 0024             		move.b	#8,$24(a0)
00010FF2                            
00010FF2                            loc_DC0C:
00010FF2 0828 0005 0022             		btst	#5,$22(a0)
00010FF8 6600                       		bne.s	Obj41_BounceLR
00010FFA 4E75                       		rts	
00010FFC                            ; ===========================================================================
00010FFC                            
00010FFC                            Obj41_BounceLR:				; XREF: Obj41_LR
00010FFC 5428 0024                  		addq.b	#2,$24(a0)
00011000 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
00011006 5069 0008                  		addq.w	#8,8(a1)
0001100A 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
00011010 6600                       		bne.s	loc_DC36	; if yes, branch
00011012 0469 0010 0008             		subi.w	#$10,8(a1)
00011018 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0001101C                            
0001101C                            loc_DC36:
0001101C 337C 000F 003E             		move.w	#$F,$3E(a1)
00011022 3369 0010 0014             		move.w	$10(a1),$14(a1)
00011028 0869 0000 0022             		bchg	#0,$22(a1)
0001102E 0829 0002 0022             		btst	#2,$22(a1)
00011034 6600                       		bne.s	loc_DC56
00011036 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0001103C                            
0001103C                            loc_DC56:
0001103C 08A8 0005 0022             		bclr	#5,$22(a0)
00011042 08A9 0005 0022             		bclr	#5,$22(a1)
00011048 303C 00CC                  		move.w	#$CC,d0
0001104C 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play spring sound
00011052                            
00011052                            Obj41_AniLR:				; XREF: Obj41_Index
00011052 4278 C904                  		clr.w	($FFFFC904).w	; clear screen delay counter
00011056 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0001105C 6000 C77C                  		bra.w	AnimateSprite
00011060                            ; ===========================================================================
00011060                            
00011060                            Obj41_ResetLR:				; XREF: Obj41_Index
00011060 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
00011066 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0001106A 4E75                       		rts	
0001106C                            ; ===========================================================================
0001106C                            
0001106C                            Obj41_Dwn:				; XREF: Obj41_Index
0001106C 323C 001B                  		move.w	#$1B,d1
00011070 343C 0008                  		move.w	#8,d2
00011074 363C 0010                  		move.w	#$10,d3
00011078 3828 0008                  		move.w	8(a0),d4
0001107C 6100 0000                  		bsr.w	SolidObject
00011080 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00011086 6600                       		bne.s	loc_DCA4
00011088 117C 000E 0024             		move.b	#$E,$24(a0)
0001108E                            
0001108E                            loc_DCA4:
0001108E 4A28 0025                  		tst.b	$25(a0)
00011092 6600                       		bne.s	locret_DCAE
00011094 4A44                       		tst.w	d4
00011096 6B00                       		bmi.s	Obj41_BounceDwn
00011098                            
00011098                            locret_DCAE:
00011098 4E75                       		rts	
0001109A                            ; ===========================================================================
0001109A                            
0001109A                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0001109A 5428 0024                  		addq.b	#2,$24(a0)
0001109E 5169 000C                  		subq.w	#8,$C(a1)
000110A2 3368 0030 0012             		move.w	$30(a0),$12(a1)
000110A8 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
000110AC 08E9 0001 0022             		bset	#1,$22(a1)
000110B2 08A9 0003 0022             		bclr	#3,$22(a1)
000110B8 137C 0002 0024             		move.b	#2,$24(a1)
000110BE 08A8 0003 0022             		bclr	#3,$22(a0)
000110C4 4228 0025                  		clr.b	$25(a0)
000110C8 303C 00CC                  		move.w	#$CC,d0
000110CC 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play spring sound
000110D2                            
000110D2                            Obj41_AniDwn:				; XREF: Obj41_Index
000110D2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
000110D8 6000 C700                  		bra.w	AnimateSprite
000110DC                            ; ===========================================================================
000110DC                            
000110DC                            Obj41_ResetDwn:				; XREF: Obj41_Index
000110DC 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
000110E2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
000110E6 4E75                       		rts	
000110E8                            ; ===========================================================================
000110E8                            Ani_obj41:
000110E8                            	include "_anim\obj41.asm"
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            ; Animation script - springs
000110E8                            ; ---------------------------------------------------------------------------
000110E8 0000                       		dc.w byte_DD02-Ani_obj41
000110EA 0000                       		dc.w byte_DD0E-Ani_obj41
000110EC 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
000110F8 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
00011104                            		even
00011104                            		even
00011104                            
00011104                            ; ---------------------------------------------------------------------------
00011104                            ; Sprite mappings - springs
00011104                            ; ---------------------------------------------------------------------------
00011104                            Map_obj41:
00011104                            	include "_maps\obj41.asm"
00011104                            ; ---------------------------------------------------------------------------
00011104                            ; Sprite mappings - springs
00011104                            ; ---------------------------------------------------------------------------
00011104 0000                       		dc.w byte_DD26-Map_obj41
00011106 0000                       		dc.w byte_DD31-Map_obj41
00011108 0000                       		dc.w byte_DD37-Map_obj41
0001110A 0000                       		dc.w byte_DD47-Map_obj41
0001110C 0000                       		dc.w byte_DD4D-Map_obj41
0001110E 0000                       		dc.w byte_DD53-Map_obj41
00011110 02                         byte_DD26:	dc.b 2
00011111 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00011116 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0001111B 01                         byte_DD31:	dc.b 1
0001111C 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
00011121 03                         byte_DD37:	dc.b 3
00011122 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
00011127 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001112C 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
00011131 01                         byte_DD47:	dc.b 1
00011132 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00011137 01                         byte_DD4D:	dc.b 1
00011138 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0001113D 04                         byte_DD53:	dc.b 4
0001113E F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00011143 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
00011148 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0001114D 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
00011152                            		even
00011152                            		even
00011152                            
00011152                            ; ===========================================================================
00011152                            ; ---------------------------------------------------------------------------
00011152                            ; Object 42 - Newtron enemy (GHZ)
00011152                            ; ---------------------------------------------------------------------------
00011152                            
00011152                            Obj42:					; XREF: Obj_Index
00011152 7000                       		moveq	#0,d0
00011154 1028 0024                  		move.b	$24(a0),d0
00011158 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0001115C 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
00011160                            ; ===========================================================================
00011160 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
00011162 0000                       		dc.w Obj42_Action-Obj42_Index
00011164 0000                       		dc.w Obj42_Delete-Obj42_Index
00011166                            ; ===========================================================================
00011166                            
00011166                            Obj42_Main:				; XREF: Obj42_Index
00011166 5428 0024                  		addq.b	#2,$24(a0)
0001116A 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
00011172 317C 049B 0002             		move.w	#$49B,2(a0)
00011178 117C 0004 0001             		move.b	#4,1(a0)
0001117E 117C 0004 0018             		move.b	#4,$18(a0)
00011184 117C 0014 0019             		move.b	#$14,$19(a0)
0001118A 117C 0010 0016             		move.b	#$10,$16(a0)
00011190 117C 0008 0017             		move.b	#8,$17(a0)
00011196                            
00011196                            Obj42_Action:				; XREF: Obj42_Index
00011196 7000                       		moveq	#0,d0
00011198 1028 0025                  		move.b	$25(a0),d0
0001119C 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
000111A0 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
000111A4 43F9 0000 0000             		lea	(Ani_obj42).l,a1
000111AA 6100 C62E                  		bsr.w	AnimateSprite
000111AE 6000 0000                  		bra.w	MarkObjGone
000111B2                            ; ===========================================================================
000111B2 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
000111B4 0000                       		dc.w Obj42_Type00-Obj42_Index2
000111B6 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
000111B8 0000                       		dc.w Obj42_Speed-Obj42_Index2
000111BA 0000                       		dc.w Obj42_Type01-Obj42_Index2
000111BC                            ; ===========================================================================
000111BC                            
000111BC                            Obj42_ChkDist:				; XREF: Obj42_Index2
000111BC 08E8 0000 0022             		bset	#0,$22(a0)
000111C2 3038 D008                  		move.w	($FFFFD008).w,d0
000111C6 9068 0008                  		sub.w	8(a0),d0
000111CA 6400                       		bcc.s	loc_DDEA
000111CC 4440                       		neg.w	d0
000111CE 08A8 0000 0022             		bclr	#0,$22(a0)
000111D4                            
000111D4                            loc_DDEA:
000111D4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
000111D8 6400                       		bcc.s	locret_DE12	; if not, branch
000111DA 5428 0025                  		addq.b	#2,$25(a0)
000111DE 117C 0001 001C             		move.b	#1,$1C(a0)
000111E4 4A28 0028                  		tst.b	$28(a0)		; check	object type
000111E8 6700                       		beq.s	locret_DE12	; if type is 00, branch
000111EA 317C 249B 0002             		move.w	#$249B,2(a0)
000111F0 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
000111F6 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
000111FC                            
000111FC                            locret_DE12:
000111FC 4E75                       		rts	
000111FE                            ; ===========================================================================
000111FE                            
000111FE                            Obj42_Type00:				; XREF: Obj42_Index2
000111FE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
00011204 6400                       		bcc.s	Obj42_Fall	; is yes, branch
00011206 08E8 0000 0022             		bset	#0,$22(a0)
0001120C 3038 D008                  		move.w	($FFFFD008).w,d0
00011210 9068 0008                  		sub.w	8(a0),d0
00011214 6400                       		bcc.s	locret_DE32
00011216 08A8 0000 0022             		bclr	#0,$22(a0)
0001121C                            
0001121C                            locret_DE32:
0001121C 4E75                       		rts	
0001121E                            ; ===========================================================================
0001121E                            
0001121E                            Obj42_Fall:				; XREF: Obj42_Type00
0001121E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
00011224 6600                       		bne.s	loc_DE42
00011226 117C 000C 0020             		move.b	#$C,$20(a0)
0001122C                            
0001122C                            loc_DE42:
0001122C 6100 F774                  		bsr.w	ObjectFall
00011230 4EB9 0000 0000             		jsr		ObjHitFloor
00011236 4A41                       		tst.w	d1		; has newtron hit the floor?
00011238 6A00                       		bpl.s	locret_DE86	; if not, branch
0001123A D368 000C                  		add.w	d1,$C(a0)
0001123E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
00011244 5428 0025                  		addq.b	#2,$25(a0)
00011248 117C 0002 001C             		move.b	#2,$1C(a0)
0001124E 0828 0005 0002             		btst	#5,2(a0)
00011254 6700                       		beq.s	Obj42_Move
00011256 5228 001C                  		addq.b	#1,$1C(a0)
0001125A                            
0001125A                            Obj42_Move:
0001125A 117C 000D 0020             		move.b	#$D,$20(a0)
00011260 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
00011266 0828 0000 0022             		btst	#0,$22(a0)
0001126C 6600                       		bne.s	locret_DE86
0001126E 4468 0010                  		neg.w	$10(a0)
00011272                            
00011272                            locret_DE86:
00011272 4E75                       		rts	
00011274                            ; ===========================================================================
00011274                            
00011274                            Obj42_MatchFloor:			; XREF: Obj42_Index2
00011274 6100 F74C                  		bsr.w	SpeedToPos
00011278 4EB9 0000 0000             		jsr		ObjHitFloor
0001127E 0C41 FFF8                  		cmpi.w	#-8,d1
00011282 6D00                       		blt.s	loc_DEA2
00011284 0C41 000C                  		cmpi.w	#$C,d1
00011288 6C00                       		bge.s	loc_DEA2
0001128A D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0001128E 4E75                       		rts	
00011290                            ; ===========================================================================
00011290                            
00011290                            loc_DEA2:
00011290 5428 0025                  		addq.b	#2,$25(a0)
00011294 4E75                       		rts	
00011296                            ; ===========================================================================
00011296                            
00011296                            Obj42_Speed:				; XREF: Obj42_Index2
00011296 6100 F72A                  		bsr.w	SpeedToPos
0001129A 4E75                       		rts	
0001129C                            ; ===========================================================================
0001129C                            
0001129C                            Obj42_Type01:				; XREF: Obj42_Index2
0001129C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
000112A2 6600                       		bne.s	Obj42_FireMissile
000112A4 117C 000C 0020             		move.b	#$C,$20(a0)
000112AA                            
000112AA                            Obj42_FireMissile:
000112AA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000112B0 6600                       		bne.s	locret_DF14
000112B2 4A28 0032                  		tst.b	$32(a0)
000112B6 6600                       		bne.s	locret_DF14
000112B8 117C 0001 0032             		move.b	#1,$32(a0)
000112BE 6100 FBB2                  		bsr.w	SingleObjLoad
000112C2 6600                       		bne.s	locret_DF14
000112C4 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
000112C8 3368 0008 0008             		move.w	8(a0),8(a1)
000112CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000112D4 5169 000C                  		subq.w	#8,$C(a1)
000112D8 337C 0200 0010             		move.w	#$200,$10(a1)
000112DE 303C 0014                  		move.w	#$14,d0
000112E2 0828 0000 0022             		btst	#0,$22(a0)
000112E8 6600                       		bne.s	loc_DF04
000112EA 4440                       		neg.w	d0
000112EC 4469 0010                  		neg.w	$10(a1)
000112F0                            
000112F0                            loc_DF04:
000112F0 D169 0008                  		add.w	d0,8(a1)
000112F4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000112FA 137C 0001 0028             		move.b	#1,$28(a1)
00011300                            
00011300                            locret_DF14:
00011300 4E75                       		rts	
00011302                            ; ===========================================================================
00011302                            
00011302                            Obj42_Delete:				; XREF: Obj42_Index
00011302 6000 F714                  		bra.w	DeleteObject
00011306                            ; ===========================================================================
00011306                            Ani_obj42:
00011306                            	include "_anim\obj42.asm"
00011306                            ; ---------------------------------------------------------------------------
00011306                            ; Animation script - Newtron enemy
00011306                            ; ---------------------------------------------------------------------------
00011306 0000                       		dc.w byte_DF24-Ani_obj42
00011308 0000                       		dc.w byte_DF28-Ani_obj42
0001130A 0000                       		dc.w byte_DF30-Ani_obj42
0001130C 0000                       		dc.w byte_DF34-Ani_obj42
0001130E 0000                       		dc.w byte_DF38-Ani_obj42
00011310 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
00011314 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0001131C 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
00011320 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
00011324 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0001132E                            		even
0001132E                            		even
0001132E                            
0001132E                            ; ---------------------------------------------------------------------------
0001132E                            ; Sprite mappings - Newtron enemy (GHZ)
0001132E                            ; ---------------------------------------------------------------------------
0001132E                            Map_obj42:
0001132E                            	include "_maps\obj42.asm"
0001132E                            ; ---------------------------------------------------------------------------
0001132E                            ; Sprite mappings - Newtron enemy (GHZ)
0001132E                            ; ---------------------------------------------------------------------------
0001132E 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
00011332 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
00011336 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0001133A 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0001133E 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
00011342 0000                       		dc.w byte_DFF8-Map_obj42
00011344 03                         byte_DF58:	dc.b 3
00011345 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0001134A F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0001134F FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
00011354 03                         byte_DF68:	dc.b 3
00011355 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0001135A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001135F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00011364 03                         byte_DF78:	dc.b 3
00011365 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0001136A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001136F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00011374 04                         byte_DF88:	dc.b 4
00011375 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0001137A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001137F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00011384 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00011389 03                         byte_DF9D:	dc.b 3
0001138A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0001138F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00011394 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
00011399 02                         byte_DFAD:	dc.b 2
0001139A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001139F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000113A4 03                         byte_DFB8:	dc.b 3
000113A5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000113AA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000113AF FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
000113B4 03                         byte_DFC8:	dc.b 3
000113B5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000113BA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000113BF FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
000113C4 03                         byte_DFD8:	dc.b 3
000113C5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000113CA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000113CF FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
000113D4 03                         byte_DFE8:	dc.b 3
000113D5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000113DA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000113DF FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
000113E4 00                         byte_DFF8:	dc.b 0
000113E6 00                         		even
000113E6 00                         		even
000113E6                            
000113E6                            ; ===========================================================================
000113E6                            ; ---------------------------------------------------------------------------
000113E6                            ; Object 43 - Roller enemy (SYZ)
000113E6                            ; ---------------------------------------------------------------------------
000113E6                            
000113E6                            Obj43:					; XREF: Obj_Index
000113E6 7000                       		moveq	#0,d0
000113E8 1028 0024                  		move.b	$24(a0),d0
000113EC 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
000113F0 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
000113F4                            ; ===========================================================================
000113F4 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
000113F6 0000                       		dc.w Obj43_Action-Obj43_Index
000113F8                            ; ===========================================================================
000113F8                            
000113F8                            Obj43_Main:				; XREF: Obj43_Index
000113F8 117C 000E 0016             		move.b	#$E,$16(a0)
000113FE 117C 0008 0017             		move.b	#8,$17(a0)
00011404 6100 F59C                  		bsr.w	ObjectFall
00011408 4EB9 0000 0000             		jsr		ObjHitFloor
0001140E 4A41                       		tst.w	d1
00011410 6A00                       		bpl.s	locret_E052
00011412 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
00011416 317C 0000 0012             		move.w	#0,$12(a0)
0001141C 5428 0024                  		addq.b	#2,$24(a0)
00011420 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
00011428 317C 04B8 0002             		move.w	#$4B8,2(a0)
0001142E 117C 0004 0001             		move.b	#4,1(a0)
00011434 117C 0004 0018             		move.b	#4,$18(a0)
0001143A 117C 0010 0019             		move.b	#$10,$19(a0)
00011440                            
00011440                            locret_E052:
00011440 4E75                       		rts	
00011442                            ; ===========================================================================
00011442                            
00011442                            Obj43_Action:				; XREF: Obj43_Index
00011442 7000                       		moveq	#0,d0
00011444 1028 0025                  		move.b	$25(a0),d0
00011448 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0001144C 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
00011450 43F9 0000 0000             		lea	(Ani_obj43).l,a1
00011456 6100 C382                  		bsr.w	AnimateSprite
0001145A 3028 0008                  		move.w	8(a0),d0
0001145E 0240 FF80                  		andi.w	#$FF80,d0
00011462 3238 F700                  		move.w	($FFFFF700).w,d1
00011466 0441 0080                  		subi.w	#$80,d1
0001146A 0241 FF80                  		andi.w	#$FF80,d1
0001146E 9041                       		sub.w	d1,d0
00011470 0C40 0280                  		cmpi.w	#$280,d0
00011474 6E00 0000                  		bgt.w	Obj43_ChkGone
00011478 6000 F562                  		bra.w	DisplaySprite
0001147C                            ; ===========================================================================
0001147C                            
0001147C                            Obj43_ChkGone:				; XREF: Obj43_Action
0001147C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011480 7000                       		moveq	#0,d0
00011482 1028 0023                  		move.b	$23(a0),d0
00011486 6700                       		beq.s	Obj43_Delete
00011488 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001148E                            
0001148E                            Obj43_Delete:
0001148E 6000 F588                  		bra.w	DeleteObject
00011492                            ; ===========================================================================
00011492 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
00011494 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
00011496 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
00011498 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0001149A                            ; ===========================================================================
0001149A                            
0001149A                            Obj43_RollChk:				; XREF: Obj43_Index2
0001149A 3038 D008                  		move.w	($FFFFD008).w,d0
0001149E 0440 0100                  		subi.w	#$100,d0
000114A2 6500                       		bcs.s	loc_E0D2
000114A4 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
000114A8 6500                       		bcs.s	loc_E0D2
000114AA 5828 0025                  		addq.b	#4,$25(a0)
000114AE 117C 0002 001C             		move.b	#2,$1C(a0)
000114B4 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
000114BA 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
000114C0                            
000114C0                            loc_E0D2:
000114C0 588F                       		addq.l	#4,sp
000114C2 4E75                       		rts	
000114C4                            ; ===========================================================================
000114C4                            
000114C4                            Obj43_RollNoChk:			; XREF: Obj43_Index2
000114C4 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
000114CA 6700                       		beq.s	loc_E0F8
000114CC 5368 0030                  		subq.w	#1,$30(a0)
000114D0 6A00                       		bpl.s	locret_E0F6
000114D2 117C 0001 001C             		move.b	#1,$1C(a0)
000114D8 317C 0700 0010             		move.w	#$700,$10(a0)
000114DE 117C 008E 0020             		move.b	#$8E,$20(a0)
000114E4                            
000114E4                            locret_E0F6:
000114E4 4E75                       		rts	
000114E6                            ; ===========================================================================
000114E6                            
000114E6                            loc_E0F8:
000114E6 5428 0025                  		addq.b	#2,$25(a0)
000114EA 4E75                       		rts	
000114EC                            ; ===========================================================================
000114EC                            
000114EC                            Obj43_ChkJump:				; XREF: Obj43_Index2
000114EC 6100 0000                  		bsr.w	Obj43_Stop
000114F0 6100 F4D0                  		bsr.w	SpeedToPos
000114F4 4EB9 0000 0000             		jsr		ObjHitFloor
000114FA 0C41 FFF8                  		cmpi.w	#-8,d1
000114FE 6D00                       		blt.s	Obj43_Jump
00011500 0C41 000C                  		cmpi.w	#$C,d1
00011504 6C00                       		bge.s	Obj43_Jump
00011506 D368 000C                  		add.w	d1,$C(a0)
0001150A 4E75                       		rts	
0001150C                            ; ===========================================================================
0001150C                            
0001150C                            Obj43_Jump:
0001150C 5428 0025                  		addq.b	#2,$25(a0)
00011510 08E8 0000 0032             		bset	#0,$32(a0)
00011516 6700                       		beq.s	locret_E12E
00011518 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0001151E                            
0001151E                            locret_E12E:
0001151E 4E75                       		rts	
00011520                            ; ===========================================================================
00011520                            
00011520                            Obj43_MatchFloor:			; XREF: Obj43_Index2
00011520 6100 F480                  		bsr.w	ObjectFall
00011524 4A68 0012                  		tst.w	$12(a0)
00011528 6B00                       		bmi.s	locret_E150
0001152A 4EB9 0000 0000             		jsr		ObjHitFloor
00011530 4A41                       		tst.w	d1
00011532 6A00                       		bpl.s	locret_E150
00011534 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
00011538 5528 0025                  		subq.b	#2,$25(a0)
0001153C 317C 0000 0012             		move.w	#0,$12(a0)
00011542                            
00011542                            locret_E150:
00011542 4E75                       		rts	
00011544                            
00011544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011544                            
00011544                            
00011544                            Obj43_Stop:				; XREF: Obj43_ChkJump
00011544 4A28 0032                  		tst.b	$32(a0)
00011548 6B00                       		bmi.s	locret_E188
0001154A 3038 D008                  		move.w	($FFFFD008).w,d0
0001154E 0440 0030                  		subi.w	#$30,d0
00011552 9068 0008                  		sub.w	8(a0),d0
00011556 6400                       		bcc.s	locret_E188
00011558 117C 0000 001C             		move.b	#0,$1C(a0)
0001155E 117C 000E 0020             		move.b	#$E,$20(a0)
00011564 4268 0010                  		clr.w	$10(a0)
00011568 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0001156E 117C 0002 0025             		move.b	#2,$25(a0)
00011574 08E8 0007 0032             		bset	#7,$32(a0)
0001157A                            
0001157A                            locret_E188:
0001157A 4E75                       		rts	
0001157C                            ; End of function Obj43_Stop
0001157C                            
0001157C                            ; ===========================================================================
0001157C                            Ani_obj43:
0001157C                            	include "_anim\obj43.asm"
0001157C                            ; ---------------------------------------------------------------------------
0001157C                            ; Animation script - Roller enemy
0001157C                            ; ---------------------------------------------------------------------------
0001157C 0000                       		dc.w byte_E190-Ani_obj43
0001157E 0000                       		dc.w byte_E196-Ani_obj43
00011580 0000                       		dc.w byte_E19C-Ani_obj43
00011582 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
00011588 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0001158E 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
00011594 00                         		even
00011594 00                         		even
00011594                            
00011594                            ; ---------------------------------------------------------------------------
00011594                            ; Sprite mappings - Roller enemy (SYZ)
00011594                            ; ---------------------------------------------------------------------------
00011594                            Map_obj43:
00011594                            	include "_maps\obj43.asm"
00011594                            ; ---------------------------------------------------------------------------
00011594                            ; Sprite mappings - Roller enemy (SYZ)
00011594                            ; ---------------------------------------------------------------------------
00011594 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
00011598 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0001159C 0000                       		dc.w byte_E1CE-Map_obj43
0001159E 02                         byte_E1AC:	dc.b 2
0001159F DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
000115A4 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
000115A9 02                         byte_E1B7:	dc.b 2
000115AA E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
000115AF FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
000115B4 01                         byte_E1C2:	dc.b 1
000115B5 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000115BA 01                         byte_E1C8:	dc.b 1
000115BB F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000115C0 01                         byte_E1CE:	dc.b 1
000115C1 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000115C6                            		even
000115C6                            		even
000115C6                            
000115C6                            ; ===========================================================================
000115C6                            ; ---------------------------------------------------------------------------
000115C6                            ; Object 44 - walls (GHZ)
000115C6                            ; ---------------------------------------------------------------------------
000115C6                            
000115C6                            Obj44:					; XREF: Obj_Index
000115C6 7000                       		moveq	#0,d0
000115C8 1028 0024                  		move.b	$24(a0),d0
000115CC 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
000115D0 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
000115D4                            ; ===========================================================================
000115D4 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
000115D6 0000                       		dc.w Obj44_Solid-Obj44_Index
000115D8 0000                       		dc.w Obj44_Display-Obj44_Index
000115DA                            ; ===========================================================================
000115DA                            
000115DA                            Obj44_Main:				; XREF: Obj44_Index
000115DA 5428 0024                  		addq.b	#2,$24(a0)
000115DE 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
000115E6 317C 434C 0002             		move.w	#$434C,2(a0)
000115EC 0028 0004 0001             		ori.b	#4,1(a0)
000115F2 117C 0008 0019             		move.b	#8,$19(a0)
000115F8 117C 0006 0018             		move.b	#6,$18(a0)
000115FE 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
00011604 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0001160A 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0001160C 5428 0024                  		addq.b	#2,$24(a0)
00011610 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
00011612                            ; ===========================================================================
00011612                            
00011612                            Obj44_Solid:				; XREF: Obj44_Index
00011612 323C 0013                  		move.w	#$13,d1
00011616 343C 0028                  		move.w	#$28,d2
0001161A 6100 A476                  		bsr.w	Obj44_SolidWall
0001161E                            
0001161E                            Obj44_Display:				; XREF: Obj44_Index
0001161E 6100 F3BC                  		bsr.w	DisplaySprite
00011622 3028 0008                  		move.w	8(a0),d0
00011626 0240 FF80                  		andi.w	#$FF80,d0
0001162A 3238 F700                  		move.w	($FFFFF700).w,d1
0001162E 0441 0080                  		subi.w	#$80,d1
00011632 0241 FF80                  		andi.w	#$FF80,d1
00011636 9041                       		sub.w	d1,d0
00011638 0C40 0280                  		cmpi.w	#$280,d0
0001163C 6200 F3DA                  		bhi.w	DeleteObject
00011640 4E75                       		rts	
00011642                            ; ===========================================================================
00011642                            ; ---------------------------------------------------------------------------
00011642                            ; Sprite mappings - walls (GHZ)
00011642                            ; ---------------------------------------------------------------------------
00011642                            Map_obj44:
00011642                            	include "_maps\obj44.asm"
00011642                            ; ---------------------------------------------------------------------------
00011642                            ; Sprite mappings - walls (GHZ)
00011642                            ; ---------------------------------------------------------------------------
00011642 0000                       		dc.w byte_E256-Map_obj44
00011644 0000                       		dc.w byte_E26B-Map_obj44
00011646 0000                       		dc.w byte_E280-Map_obj44
00011648 04                         byte_E256:	dc.b 4
00011649 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0001164E F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00011653 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00011658 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001165D 04                         byte_E26B:	dc.b 4
0001165E E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
00011663 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00011668 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0001166D 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00011672 04                         byte_E280:	dc.b 4
00011673 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
00011678 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0001167D 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
00011682 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00011688 00                         		even
00011688 00                         		even
00011688                            
00011688                            ; ===========================================================================
00011688                            ; ---------------------------------------------------------------------------
00011688                            ; Object 13 - lava ball	producer (MZ, SLZ)
00011688                            ; ---------------------------------------------------------------------------
00011688                            
00011688                            Obj13:					; XREF: Obj_Index
00011688 7000                       		moveq	#0,d0
0001168A 1028 0024                  		move.b	$24(a0),d0
0001168E 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
00011692 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
00011696 6000 0000                  		bra.w	Obj14_ChkDel
0001169A                            ; ===========================================================================
0001169A 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0001169C 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0001169E                            ; ---------------------------------------------------------------------------
0001169E                            ;
0001169E                            ; Lava ball production rates
0001169E                            ;
0001169E 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
000116A4                            ; ===========================================================================
000116A4                            
000116A4                            Obj13_Main:				; XREF: Obj13_Index
000116A4 5428 0024                  		addq.b	#2,$24(a0)
000116A8 1028 0028                  		move.b	$28(a0),d0
000116AC E848                       		lsr.w	#4,d0
000116AE 0240 000F                  		andi.w	#$F,d0
000116B2 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
000116B8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
000116BE 0228 000F 0028             		andi.b	#$F,$28(a0)
000116C4                            
000116C4                            Obj13_MakeLava:				; XREF: Obj13_Index
000116C4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
000116C8 6600                       		bne.s	locret_E302	; if time still	remains, branch
000116CA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
000116D0 6100 F586                  		bsr.w	ChkObjOnScreen
000116D4 6600                       		bne.s	locret_E302
000116D6 6100 F79A                  		bsr.w	SingleObjLoad
000116DA 6600                       		bne.s	locret_E302
000116DC 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000116E0 3368 0008 0008             		move.w	8(a0),8(a1)
000116E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000116EC 1368 0028 0028             		move.b	$28(a0),$28(a1)
000116F2                            
000116F2                            locret_E302:
000116F2 4E75                       		rts	
000116F4                            ; ===========================================================================
000116F4                            ; ---------------------------------------------------------------------------
000116F4                            ; Object 14 - lava balls (MZ, SLZ)
000116F4                            ; ---------------------------------------------------------------------------
000116F4                            
000116F4                            Obj14:					; XREF: Obj_Index
000116F4 7000                       		moveq	#0,d0
000116F6 1028 0024                  		move.b	$24(a0),d0
000116FA 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
000116FE 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
00011702 6000 F2D8                  		bra.w	DisplaySprite
00011706                            ; ===========================================================================
00011706 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
00011708 0000                       		dc.w Obj14_Action-Obj14_Index
0001170A 0000                       		dc.w Obj14_Delete-Obj14_Index
0001170C                            
0001170C FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
00011716 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0001171E                            ; ===========================================================================
0001171E                            
0001171E                            Obj14_Main:				; XREF: Obj14_Index
0001171E 5428 0024                  		addq.b	#2,$24(a0)
00011722 117C 0008 0016             		move.b	#8,$16(a0)
00011728 117C 0008 0017             		move.b	#8,$17(a0)
0001172E 217C 0000 E464 0004        		move.l	#Map_obj14,4(a0)
00011736 317C 0345 0002             		move.w	#$345,2(a0)
0001173C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00011742 6600                       		bne.s	loc_E35A
00011744 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0001174A                            
0001174A                            loc_E35A:
0001174A 117C 0004 0001             		move.b	#4,1(a0)
00011750 117C 0003 0018             		move.b	#3,$18(a0)
00011756 117C 008B 0020             		move.b	#$8B,$20(a0)
0001175C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011762 4A28 0029                  		tst.b	$29(a0)
00011766 6700                       		beq.s	Obj14_SetSpeed
00011768 5428 0018                  		addq.b	#2,$18(a0)
0001176C                            
0001176C                            Obj14_SetSpeed:
0001176C 7000                       		moveq	#0,d0
0001176E 1028 0028                  		move.b	$28(a0),d0
00011772 D040                       		add.w	d0,d0
00011774 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0001177A 117C 0008 0019             		move.b	#8,$19(a0)
00011780 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
00011786 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
00011788 117C 0010 0019             		move.b	#$10,$19(a0)
0001178E 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
00011794 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0001179A 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
000117A0                            
000117A0                            Obj14_PlaySnd:
000117A0 303C 00AE                  		move.w	#$AE,d0
000117A4 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play lava ball sound
000117AA                            
000117AA                            Obj14_Action:				; XREF: Obj14_Index
000117AA 7000                       		moveq	#0,d0
000117AC 1028 0028                  		move.b	$28(a0),d0
000117B0 D040                       		add.w	d0,d0
000117B2 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
000117B6 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
000117BA 6100 F206                  		bsr.w	SpeedToPos
000117BE 43F9 0000 0000             		lea	(Ani_obj14).l,a1
000117C4 6100 C014                  		bsr.w	AnimateSprite
000117C8                            
000117C8                            Obj14_ChkDel:				; XREF: Obj13
000117C8 3028 0008                  		move.w	8(a0),d0
000117CC 0240 FF80                  		andi.w	#$FF80,d0
000117D0 3238 F700                  		move.w	($FFFFF700).w,d1
000117D4 0441 0080                  		subi.w	#$80,d1
000117D8 0241 FF80                  		andi.w	#$FF80,d1
000117DC 9041                       		sub.w	d1,d0
000117DE 0C40 0280                  		cmpi.w	#$280,d0
000117E2 6200 F234                  		bhi.w	DeleteObject
000117E6 4E75                       		rts	
000117E8                            ; ===========================================================================
000117E8 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
000117EC 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
000117F0 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
000117F4 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
000117F8 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
000117FA                            ; ===========================================================================
000117FA                            ; lavaball types 00-03 fly up and fall back down
000117FA                            
000117FA                            Obj14_Type00:				; XREF: Obj14_TypeIndex
000117FA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
00011800 3028 0030                  		move.w	$30(a0),d0
00011804 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
00011808 6400                       		bcc.s	loc_E41E	; if not, branch
0001180A 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0001180E                            
0001180E                            loc_E41E:
0001180E 08A8 0001 0022             		bclr	#1,$22(a0)
00011814 4A68 0012                  		tst.w	$12(a0)
00011818 6A00                       		bpl.s	locret_E430
0001181A 08E8 0001 0022             		bset	#1,$22(a0)
00011820                            
00011820                            locret_E430:
00011820 4E75                       		rts	
00011822                            ; ===========================================================================
00011822                            ; lavaball type	04 flies up until it hits the ceiling
00011822                            
00011822                            Obj14_Type04:				; XREF: Obj14_TypeIndex
00011822 08E8 0001 0022             		bset	#1,$22(a0)
00011828 4EB9 0000 0000             		jsr	ObjHitCeiling
0001182E 4A41                       		tst.w	d1
00011830 6A00                       		bpl.s	locret_E452
00011832 117C 0008 0028             		move.b	#8,$28(a0)
00011838 117C 0001 001C             		move.b	#1,$1C(a0)
0001183E 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
00011844                            
00011844                            locret_E452
00011844                            ; ===========================================================================
00011844                            ; lavaball type	05 falls down until it hits the	floor
00011844                            
00011844                            Obj14_Type05:				; XREF: Obj14_TypeIndex
00011844 08A8 0001 0022             		bclr	#1,$22(a0)
0001184A 4EB9 0000 0000             		jsr		ObjHitFloor
00011850 4A41                       		tst.w	d1
00011852 6A00                       		bpl.s	locret_E474
00011854 117C 0008 0028             		move.b	#8,$28(a0)
0001185A 117C 0001 001C             		move.b	#1,$1C(a0)
00011860 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
00011866                            
00011866                            locret_E474:
00011866 4E75                       		rts	
00011868                            ; ===========================================================================
00011868                            ; lavaball types 06-07 move sideways
00011868                            
00011868                            Obj14_Type06:				; XREF: Obj14_TypeIndex
00011868 08E8 0000 0022             		bset	#0,$22(a0)
0001186E 76F8                       		moveq	#-8,d3
00011870 4EB9 0000 0000             		jsr	ObjHitWallLeft
00011876 4A41                       		tst.w	d1
00011878 6A00                       		bpl.s	locret_E498
0001187A 117C 0008 0028             		move.b	#8,$28(a0)
00011880 117C 0003 001C             		move.b	#3,$1C(a0)
00011886 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0001188C                            
0001188C                            locret_E498:
0001188C 4E75                       		rts		
0001188E                            ; ===========================================================================
0001188E                            
0001188E                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0001188E 08A8 0000 0022             		bclr	#0,$22(a0)
00011894 7608                       		moveq	#8,d3
00011896 4EB9 0000 0000             		jsr		ObjHitWallRight
0001189C 4A41                       		tst.w	d1
0001189E 6A00                       		bpl.s	locret_E4BC
000118A0 117C 0008 0028             		move.b	#8,$28(a0)
000118A6 117C 0003 001C             		move.b	#3,$1C(a0)
000118AC 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
000118B2                            
000118B2                            locret_E4BC:
000118B2 4E75                       		rts	
000118B4                            ; ===========================================================================
000118B4                            
000118B4                            Obj14_Type08:				; XREF: Obj14_TypeIndex
000118B4 4E75                       		rts	
000118B6                            ; ===========================================================================
000118B6                            
000118B6                            Obj14_Delete:				; XREF: Obj14_Index
000118B6 6000 F160                  		bra.w	DeleteObject
000118BA                            ; ===========================================================================
000118BA                            Ani_obj14:
000118BA                            	include "_anim\obj14.asm"
000118BA                            ; ---------------------------------------------------------------------------
000118BA                            ; Animation script - lava balls
000118BA                            ; ---------------------------------------------------------------------------
000118BA 0000                       		dc.w byte_E4CC-Ani_obj14
000118BC 0000                       		dc.w byte_E4D2-Ani_obj14
000118BE 0000                       		dc.w byte_E4D6-Ani_obj14
000118C0 0000                       		dc.w byte_E4DC-Ani_obj14
000118C2 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
000118C8 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
000118CC 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
000118D2 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
000118D6                            		even
000118D6                            		even
000118D6                            
000118D6                            ; ===========================================================================
000118D6                            ; ---------------------------------------------------------------------------
000118D6                            ; Object 6D - flame thrower (SBZ)
000118D6                            ; ---------------------------------------------------------------------------
000118D6                            
000118D6                            Obj6D:					; XREF: Obj_Index
000118D6 7000                       		moveq	#0,d0
000118D8 1028 0024                  		move.b	$24(a0),d0
000118DC 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
000118E0 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
000118E4                            ; ===========================================================================
000118E4 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
000118E6 0000                       		dc.w Obj6D_Action-Obj6D_Index
000118E8                            ; ===========================================================================
000118E8                            
000118E8                            Obj6D_Main:				; XREF: Obj6D_Index
000118E8 5428 0024                  		addq.b	#2,$24(a0)
000118EC 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
000118F4 317C 83D9 0002             		move.w	#$83D9,2(a0)
000118FA 0028 0004 0001             		ori.b	#4,1(a0)
00011900 117C 0001 0018             		move.b	#1,$18(a0)
00011906 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001190C 117C 000C 0019             		move.b	#$C,$19(a0)
00011912 1028 0028                  		move.b	$28(a0),d0
00011916 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001191A D040                       		add.w	d0,d0		; multiply by 2
0001191C 3140 0030                  		move.w	d0,$30(a0)
00011920 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00011924 1028 0028                  		move.b	$28(a0),d0
00011928 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0001192C EB48                       		lsl.w	#5,d0		; multiply by $20
0001192E 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00011932 117C 000A 0036             		move.b	#$A,$36(a0)
00011938 0828 0001 0022             		btst	#1,$22(a0)
0001193E 6700                       		beq.s	Obj6D_Action
00011940 117C 0002 001C             		move.b	#2,$1C(a0)
00011946 117C 0015 0036             		move.b	#$15,$36(a0)
0001194C                            
0001194C                            Obj6D_Action:				; XREF: Obj6D_Index
0001194C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00011950 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00011952 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
00011958 0868 0000 001C             		bchg	#0,$1C(a0)
0001195E 6700                       		beq.s	loc_E57A
00011960 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00011966 303C 00B3                  		move.w	#$B3,d0
0001196A 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play flame sound
00011970                            
00011970                            loc_E57A:
00011970 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
00011976 6100 BE62                  		bsr.w	AnimateSprite
0001197A 117C 0000 0020             		move.b	#0,$20(a0)
00011980 1028 0036                  		move.b	$36(a0),d0
00011984 B028 001A                  		cmp.b	$1A(a0),d0
00011988 6600                       		bne.s	Obj6D_ChkDel
0001198A 117C 00A3 0020             		move.b	#$A3,$20(a0)
00011990                            
00011990                            Obj6D_ChkDel:
00011990 3028 0008                  		move.w	8(a0),d0
00011994 0240 FF80                  		andi.w	#$FF80,d0
00011998 3238 F700                  		move.w	($FFFFF700).w,d1
0001199C 0441 0080                  		subi.w	#$80,d1
000119A0 0241 FF80                  		andi.w	#$FF80,d1
000119A4 9041                       		sub.w	d1,d0
000119A6 0C40 0280                  		cmpi.w	#$280,d0
000119AA 6200 F06C                  		bhi.w	DeleteObject
000119AE 6000 F02C                  		bra.w	DisplaySprite
000119B2                            ; ===========================================================================
000119B2                            Ani_obj6D:
000119B2                            	include "_anim\obj6D.asm"
000119B2                            ; ---------------------------------------------------------------------------
000119B2                            ; Animation script - flamethrower (SBZ)
000119B2                            ; ---------------------------------------------------------------------------
000119B2 0000                       		dc.w byte_E5C4-Ani_obj6D
000119B4 0000                       		dc.w byte_E5D2-Ani_obj6D
000119B6 0000                       		dc.w byte_E5DC-Ani_obj6D
000119B8 0000                       		dc.w byte_E5EA-Ani_obj6D
000119BA 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
000119C8 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
000119D2 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
000119E0 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
000119EA                            		even
000119EA                            		even
000119EA                            
000119EA                            ; ---------------------------------------------------------------------------
000119EA                            ; Sprite mappings - flame thrower (SBZ)
000119EA                            ; ---------------------------------------------------------------------------
000119EA                            Map_obj6D:
000119EA                            	include "_maps\obj6D.asm"
000119EA                            ; ---------------------------------------------------------------------------
000119EA                            ; Sprite mappings - flame thrower (SBZ)
000119EA                            ; ---------------------------------------------------------------------------
000119EA 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
000119EE 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
000119F2 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
000119F6 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
000119FA 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
000119FE 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
00011A02 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
00011A06 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
00011A0A 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
00011A0E 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
00011A12 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
00011A16 01                         byte_E620:	dc.b 1
00011A17 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011A1C 02                         byte_E626:	dc.b 2
00011A1D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011A22 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011A27 02                         byte_E631:	dc.b 2
00011A28 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011A2D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011A32 03                         byte_E63C:	dc.b 3
00011A33 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011A38 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011A3D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011A42 03                         byte_E64C:	dc.b 3
00011A43 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011A48 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011A4D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011A52 04                         byte_E65C:	dc.b 4
00011A53 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00011A58 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011A5D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011A62 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011A67 04                         byte_E671:	dc.b 4
00011A68 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00011A6D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011A72 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011A77 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011A7C 05                         byte_E686:	dc.b 5
00011A7D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00011A82 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00011A87 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011A8C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011A91 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011A96 05                         byte_E6A0:	dc.b 5
00011A97 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00011A9C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00011AA1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011AA6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011AAB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011AB0 06                         byte_E6BA:	dc.b 6
00011AB1 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00011AB6 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00011ABB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00011AC0 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00011AC5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011ACA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011ACF 06                         byte_E6D9:	dc.b 6
00011AD0 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00011AD5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00011ADA 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00011ADF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011AE4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011AE9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00011AEE 01                         byte_E6F8:	dc.b 1
00011AEF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011AF4 02                         byte_E6FE:	dc.b 2
00011AF5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011AFA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011AFF 02                         byte_E709:	dc.b 2
00011B00 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011B05 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011B0A 03                         byte_E714:	dc.b 3
00011B0B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011B10 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011B15 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011B1A 03                         byte_E724:	dc.b 3
00011B1B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011B20 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011B25 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011B2A 04                         byte_E734:	dc.b 4
00011B2B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00011B30 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011B35 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011B3A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011B3F 04                         byte_E749:	dc.b 4
00011B40 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00011B45 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011B4A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011B4F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011B54 05                         byte_E75E:	dc.b 5
00011B55 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00011B5A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00011B5F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00011B64 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011B69 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011B6E 05                         byte_E778:	dc.b 5
00011B6F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00011B74 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00011B79 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011B7E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011B83 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011B88 06                         byte_E792:	dc.b 6
00011B89 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00011B8E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00011B93 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00011B98 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00011B9D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011BA2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00011BA7 06                         byte_E7B1:	dc.b 6
00011BA8 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00011BAD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00011BB2 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00011BB7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00011BBC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00011BC1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00011BC6                            		even
00011BC6                            		even
00011BC6                            
00011BC6                            ; ===========================================================================
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6                            
00011BC6                            Obj46:					; XREF: Obj_Index
00011BC6 7000                       		moveq	#0,d0
00011BC8 1028 0024                  		move.b	$24(a0),d0
00011BCC 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
00011BD0 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
00011BD4                            ; ===========================================================================
00011BD4 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
00011BD6 0000                       		dc.w Obj46_Action-Obj46_Index
00011BD8                            ; ===========================================================================
00011BD8                            
00011BD8                            Obj46_Main:				; XREF: Obj46_Index
00011BD8 5428 0024                  		addq.b	#2,$24(a0)
00011BDC 117C 000F 0016             		move.b	#$F,$16(a0)
00011BE2 117C 000F 0017             		move.b	#$F,$17(a0)
00011BE8 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00011BF0 317C 4000 0002             		move.w	#$4000,2(a0)
00011BF6 117C 0004 0001             		move.b	#4,1(a0)
00011BFC 117C 0003 0018             		move.b	#3,$18(a0)
00011C02 117C 0010 0019             		move.b	#$10,$19(a0)
00011C08 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011C0E 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00011C14                            
00011C14                            Obj46_Action:				; XREF: Obj46_Index
00011C14 4A28 0001                  		tst.b	1(a0)
00011C18 6A00                       		bpl.s	Obj46_ChkDel
00011C1A 7000                       		moveq	#0,d0
00011C1C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C20 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00011C24 D040                       		add.w	d0,d0
00011C26 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
00011C2A 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
00011C2E 323C 001B                  		move.w	#$1B,d1
00011C32 343C 0010                  		move.w	#$10,d2
00011C36 363C 0011                  		move.w	#$11,d3
00011C3A 3828 0008                  		move.w	8(a0),d4
00011C3E 6100 0000                  		bsr.w	SolidObject
00011C42                            
00011C42                            Obj46_ChkDel:
00011C42 6100 ED98                  		bsr.w	DisplaySprite
00011C46 3028 0008                  		move.w	8(a0),d0
00011C4A 0240 FF80                  		andi.w	#$FF80,d0
00011C4E 3238 F700                  		move.w	($FFFFF700).w,d1
00011C52 0441 0080                  		subi.w	#$80,d1
00011C56 0241 FF80                  		andi.w	#$FF80,d1
00011C5A 9041                       		sub.w	d1,d0
00011C5C 0C40 0280                  		cmpi.w	#$280,d0
00011C60 6200 EDB6                  		bhi.w	DeleteObject
00011C64 4E75                       		rts	
00011C66                            ; ===========================================================================
00011C66 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
00011C68 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
00011C6A 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
00011C6C 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00011C6E 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00011C70                            ; ===========================================================================
00011C70                            
00011C70                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00011C70 4E75                       		rts	
00011C72                            ; ===========================================================================
00011C72                            
00011C72                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00011C72 3038 D008                  		move.w	($FFFFD008).w,d0
00011C76 9068 0008                  		sub.w	8(a0),d0
00011C7A 6400                       		bcc.s	loc_E888
00011C7C 4440                       		neg.w	d0
00011C7E                            
00011C7E                            loc_E888:
00011C7E 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00011C82 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00011C84 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
00011C8A                            
00011C8A                            Obj46_Type01:				; XREF: Obj46_TypeIndex
00011C8A 7000                       		moveq	#0,d0
00011C8C 1038 FE74                  		move.b	($FFFFFE74).w,d0
00011C90 0828 0003 0028             		btst	#3,$28(a0)
00011C96 6700                       		beq.s	loc_E8A8
00011C98 4440                       		neg.w	d0
00011C9A 0640 0010                  		addi.w	#$10,d0
00011C9E                            
00011C9E                            loc_E8A8:
00011C9E 3228 0030                  		move.w	$30(a0),d1
00011CA2 9240                       		sub.w	d0,d1
00011CA4 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
00011CA8 4E75                       		rts	
00011CAA                            ; ===========================================================================
00011CAA                            
00011CAA                            Obj46_Type03:				; XREF: Obj46_TypeIndex
00011CAA 6100 ED16                  		bsr.w	SpeedToPos
00011CAE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00011CB4 4EB9 0000 0000             		jsr		ObjHitFloor
00011CBA 4A41                       		tst.w	d1		; has the block	hit the	floor?
00011CBC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00011CC0 D368 000C                  		add.w	d1,$C(a0)
00011CC4 4268 0012                  		clr.w	$12(a0)		; stop the block falling
00011CC8 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011CCE 117C 0004 0028             		move.b	#4,$28(a0)
00011CD4 3011                       		move.w	(a1),d0
00011CD6 0240 03FF                  		andi.w	#$3FF,d0
00011CDA 0C40 02E8                  		cmpi.w	#$2E8,d0
00011CDE 6400                       		bcc.s	locret_E8EE
00011CE0 117C 0000 0028             		move.b	#0,$28(a0)
00011CE6                            
00011CE6                            locret_E8EE:
00011CE6 4E75                       		rts	
00011CE8                            ; ===========================================================================
00011CE8                            
00011CE8                            Obj46_Type04:				; XREF: Obj46_TypeIndex
00011CE8 7000                       		moveq	#0,d0
00011CEA 1038 FE70                  		move.b	($FFFFFE70).w,d0
00011CEE E648                       		lsr.w	#3,d0
00011CF0 3228 0030                  		move.w	$30(a0),d1
00011CF4 9240                       		sub.w	d0,d1
00011CF6 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
00011CFA 4E75                       		rts	
00011CFC                            ; ===========================================================================
00011CFC                            ; ---------------------------------------------------------------------------
00011CFC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00011CFC                            ; ---------------------------------------------------------------------------
00011CFC                            Map_obj46:
00011CFC                            	include "_maps\obj46.asm"
00011CFC                            ; ---------------------------------------------------------------------------
00011CFC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00011CFC                            ; ---------------------------------------------------------------------------
00011CFC 0000                       		dc.w byte_E906-Map_obj46
00011CFE 01                         byte_E906:	dc.b 1
00011CFF F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00011D04                            		even
00011D04                            		even
00011D04                            
00011D04                            ; ===========================================================================
00011D04                            ; ---------------------------------------------------------------------------
00011D04                            ; Object 12 - lamp (SYZ)
00011D04                            ; ---------------------------------------------------------------------------
00011D04                            
00011D04                            Obj12:					; XREF: Obj_Index
00011D04 7000                       		moveq	#0,d0
00011D06 1028 0024                  		move.b	$24(a0),d0
00011D0A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
00011D0E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
00011D12                            ; ===========================================================================
00011D12 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
00011D14 0000                       		dc.w Obj12_Animate-Obj12_Index
00011D16                            ; ===========================================================================
00011D16                            
00011D16                            Obj12_Main:				; XREF: Obj12_Index
00011D16 5428 0024                  		addq.b	#2,$24(a0)
00011D1A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
00011D22 317C 0000 0002             		move.w	#0,2(a0)
00011D28 117C 0004 0001             		move.b	#4,1(a0)
00011D2E 117C 0010 0019             		move.b	#$10,$19(a0)
00011D34 117C 0006 0018             		move.b	#6,$18(a0)
00011D3A                            
00011D3A                            Obj12_Animate:				; XREF: Obj12_Index
00011D3A 5328 001E                  		subq.b	#1,$1E(a0)
00011D3E 6A00                       		bpl.s	Obj12_ChkDel
00011D40 117C 0007 001E             		move.b	#7,$1E(a0)
00011D46 5228 001A                  		addq.b	#1,$1A(a0)
00011D4A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00011D50 6500                       		bcs.s	Obj12_ChkDel
00011D52 117C 0000 001A             		move.b	#0,$1A(a0)
00011D58                            
00011D58                            Obj12_ChkDel:
00011D58 3028 0008                  		move.w	8(a0),d0
00011D5C 0240 FF80                  		andi.w	#$FF80,d0
00011D60 3238 F700                  		move.w	($FFFFF700).w,d1
00011D64 0441 0080                  		subi.w	#$80,d1
00011D68 0241 FF80                  		andi.w	#$FF80,d1
00011D6C 9041                       		sub.w	d1,d0
00011D6E 0C40 0280                  		cmpi.w	#$280,d0
00011D72 6200 ECA4                  		bhi.w	DeleteObject
00011D76 6000 EC64                  		bra.w	DisplaySprite
00011D7A                            ; ===========================================================================
00011D7A                            ; ---------------------------------------------------------------------------
00011D7A                            ; Sprite mappings - lamp (SYZ)
00011D7A                            ; ---------------------------------------------------------------------------
00011D7A                            Map_obj12:
00011D7A                            	include "_maps\obj12.asm"
00011D7A                            ; ---------------------------------------------------------------------------
00011D7A                            ; Sprite mappings - lamp (SYZ)
00011D7A                            ; ---------------------------------------------------------------------------
00011D7A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00011D7E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00011D82 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00011D86 02                         byte_E98E:	dc.b 2
00011D87 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
00011D8C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00011D91 02                         byte_E999:	dc.b 2
00011D92 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00011D97 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
00011D9C 02                         byte_E9A4:	dc.b 2
00011D9D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00011DA2 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00011DA7 02                         byte_E9AF:	dc.b 2
00011DA8 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
00011DAD 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00011DB2 02                         byte_E9BA:	dc.b 2
00011DB3 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00011DB8 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
00011DBD 02                         byte_E9C5:	dc.b 2
00011DBE F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00011DC3 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
00011DC8                            		even
00011DC8                            		even
00011DC8                            
00011DC8                            ; ===========================================================================
00011DC8                            ; ---------------------------------------------------------------------------
00011DC8                            ; Object 47 - pinball bumper (SYZ)
00011DC8                            ; ---------------------------------------------------------------------------
00011DC8                            
00011DC8                            Obj47:					; XREF: Obj_Index
00011DC8 7000                       		moveq	#0,d0
00011DCA 1028 0024                  		move.b	$24(a0),d0
00011DCE 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
00011DD2 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
00011DD6                            ; ===========================================================================
00011DD6 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
00011DD8 0000                       		dc.w Obj47_Hit-Obj47_Index
00011DDA                            ; ===========================================================================
00011DDA                            
00011DDA                            Obj47_Main:				; XREF: Obj47_Index
00011DDA 5428 0024                  		addq.b	#2,$24(a0)
00011DDE 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
00011DE6 317C 0380 0002             		move.w	#$380,2(a0)
00011DEC 117C 0004 0001             		move.b	#4,1(a0)
00011DF2 117C 0010 0019             		move.b	#$10,$19(a0)
00011DF8 117C 0001 0018             		move.b	#1,$18(a0)
00011DFE 117C 00D7 0020             		move.b	#$D7,$20(a0)
00011E04                            
00011E04                            Obj47_Hit:				; XREF: Obj47_Index
00011E04 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
00011E08 6700 0000                  		beq.w	Obj47_Display	; if not, branch
00011E0C 4228 0021                  		clr.b	$21(a0)
00011E10 43F8 D000                  		lea	($FFFFD000).w,a1
00011E14 3228 0008                  		move.w	8(a0),d1
00011E18 3428 000C                  		move.w	$C(a0),d2
00011E1C 9269 0008                  		sub.w	8(a1),d1
00011E20 9469 000C                  		sub.w	$C(a1),d2
00011E24 4EB9 0000 3A04             		jsr	(CalcAngle).l
00011E2A 4EB9 0000 3736             		jsr	(CalcSine).l
00011E30 C3FC F900                  		muls.w	#-$700,d1
00011E34 E081                       		asr.l	#8,d1
00011E36 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
00011E3A C1FC F900                  		muls.w	#-$700,d0
00011E3E E080                       		asr.l	#8,d0
00011E40 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
00011E44 08E9 0001 0022             		bset	#1,$22(a1)
00011E4A 08A9 0004 0022             		bclr	#4,$22(a1)
00011E50 08A9 0005 0022             		bclr	#5,$22(a1)
00011E56 4229 003C                  		clr.b	$3C(a1)
00011E5A 117C 0001 001C             		move.b	#1,$1C(a0)
00011E60 303C 00B4                  		move.w	#$B4,d0
00011E64 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play bumper sound
00011E6A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011E6E 7000                       		moveq	#0,d0
00011E70 1028 0023                  		move.b	$23(a0),d0
00011E74 6700                       		beq.s	Obj47_Score
00011E76 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
00011E7C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
00011E7E 5232 0002                  		addq.b	#1,2(a2,d0.w)
00011E82                            
00011E82                            Obj47_Score:
00011E82 7001                       		moveq	#1,d0
00011E84 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
00011E8A 6100 EFE6                  		bsr.w	SingleObjLoad
00011E8E 6600                       		bne.s	Obj47_Display
00011E90                            ;		move.b	#$29,0(a1)	; load points object
00011E90 3368 0008 0008             		move.w	8(a0),8(a1)
00011E96 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E9C 137C 0004 001A             		move.b	#4,$1A(a1)
00011EA2                            
00011EA2                            Obj47_Display:
00011EA2 43F9 0000 0000             		lea	(Ani_obj47).l,a1
00011EA8 6100 B930                  		bsr.w	AnimateSprite
00011EAC 3028 0008                  		move.w	8(a0),d0
00011EB0 0240 FF80                  		andi.w	#$FF80,d0
00011EB4 3238 F700                  		move.w	($FFFFF700).w,d1
00011EB8 0441 0080                  		subi.w	#$80,d1
00011EBC 0241 FF80                  		andi.w	#$FF80,d1
00011EC0 9041                       		sub.w	d1,d0
00011EC2 0C40 0280                  		cmpi.w	#$280,d0
00011EC6 6200                       		bhi.s	Obj47_ChkHit
00011EC8 6000 EB12                  		bra.w	DisplaySprite
00011ECC                            ; ===========================================================================
00011ECC                            
00011ECC                            Obj47_ChkHit:				; XREF: Obj47_Display
00011ECC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011ED0 7000                       		moveq	#0,d0
00011ED2 1028 0023                  		move.b	$23(a0),d0
00011ED6 6700                       		beq.s	Obj47_Delete
00011ED8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011EDE                            
00011EDE                            Obj47_Delete:
00011EDE 6000 EB38                  		bra.w	DeleteObject
00011EE2                            ; ===========================================================================
00011EE2                            Ani_obj47:
00011EE2                            	include "_anim\obj47.asm"
00011EE2                            ; ---------------------------------------------------------------------------
00011EE2                            ; Animation script - flamethrower (SBZ)
00011EE2                            ; ---------------------------------------------------------------------------
00011EE2 0000                       		dc.w byte_EAF4-Ani_obj47
00011EE4 0000                       		dc.w byte_EAF8-Ani_obj47
00011EE6 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
00011EEA 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
00011EF2                            		even
00011EF2                            		even
00011EF2                            
00011EF2                            ; ---------------------------------------------------------------------------
00011EF2                            ; Sprite mappings - pinball bumper (SYZ)
00011EF2                            ; ---------------------------------------------------------------------------
00011EF2                            Map_obj47:
00011EF2                            	include "_maps\obj47.asm"
00011EF2                            ; ---------------------------------------------------------------------------
00011EF2                            ; Sprite mappings - pinball bumper (SYZ)
00011EF2                            ; ---------------------------------------------------------------------------
00011EF2 0000                       		dc.w byte_EB06-Map_obj47
00011EF4 0000                       		dc.w byte_EB11-Map_obj47
00011EF6 0000                       		dc.w byte_EB1C-Map_obj47
00011EF8 02                         byte_EB06:	dc.b 2
00011EF9 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00011EFE F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00011F03 02                         byte_EB11:	dc.b 2
00011F04 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00011F09 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00011F0E 02                         byte_EB1C:	dc.b 2
00011F0F F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00011F14 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00011F1A 00                         		even
00011F1A 00                         		even
00011F1A                            
00011F1A                            ; ===========================================================================
00011F1A                            ; ---------------------------------------------------------------------------
00011F1A                            ; Object 0D - signpost at the end of a level
00011F1A                            ; ---------------------------------------------------------------------------
00011F1A                            
00011F1A                            Obj0D:					; XREF: Obj_Index
00011F1A 7000                       		moveq	#0,d0
00011F1C 1028 0024                  		move.b	$24(a0),d0
00011F20 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
00011F24 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
00011F28 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
00011F2E 6100 B8AA                  		bsr.w	AnimateSprite
00011F32 6100 EAA8                  		bsr.w	DisplaySprite
00011F36 3028 0008                  		move.w	8(a0),d0
00011F3A 0240 FF80                  		andi.w	#$FF80,d0
00011F3E 3238 F700                  		move.w	($FFFFF700).w,d1
00011F42 0441 0080                  		subi.w	#$80,d1
00011F46 0241 FF80                  		andi.w	#$FF80,d1
00011F4A 9041                       		sub.w	d1,d0
00011F4C 0C40 0280                  		cmpi.w	#$280,d0
00011F50 6200 EAC6                  		bhi.w	DeleteObject
00011F54 4E75                       		rts	
00011F56                            ; ===========================================================================
00011F56 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00011F58 0000                       		dc.w Obj0D_Touch-Obj0D_Index
00011F5A 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00011F5C 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00011F5E 0000                       		dc.w locret_ED1A-Obj0D_Index
00011F60                            ; ===========================================================================
00011F60                            
00011F60                            Obj0D_Main:				; XREF: Obj0D_Index
00011F60 5428 0024                  		addq.b	#2,$24(a0)
00011F64 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00011F6C 317C 0680 0002             		move.w	#$680,2(a0)
00011F72 117C 0004 0001             		move.b	#4,1(a0)
00011F78 117C 0018 0019             		move.b	#$18,$19(a0)
00011F7E 117C 0004 0018             		move.b	#4,$18(a0)
00011F84                            
00011F84                            Obj0D_Touch:				; XREF: Obj0D_Index
00011F84 3038 D008                  		move.w	($FFFFD008).w,d0
00011F88 9068 0008                  		sub.w	8(a0),d0
00011F8C 6500                       		bcs.s	locret_EBBA
00011F8E 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00011F92 6400                       		bcc.s	locret_EBBA	; if not, branch
00011F94 4228 0034                  		clr.b 	$34(a0)
00011F98 303C 00CF                  		move.w	#$CF,d0
00011F9C 4EB9 0000 1108             		jsr	(PlaySound).l	; play signpost	sound
00011FA2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00011FA6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
00011FAC 31FC 0000 D034             		move.w	#$0,($FFFFD034).w ; time limit for the power-up
00011FB2                            ;		move.b	#1,($FFFFF7CC).w ; lock	controls
00011FB2                            ;		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00011FB2 5428 0024                  		addq.b	#2,$24(a0)
00011FB6 11FC 0000 FFA0             		move.b	#0,($FFFFFFA0).w ; move 0 to the goggle check
00011FBC                            
00011FBC                            
00011FBC                            locret_EBBA:
00011FBC 4E75                       		rts	
00011FBE                            ; ===========================================================================
00011FBE                            
00011FBE                            Obj0D_Spin:				; XREF: Obj0D_Index
00011FBE 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
00011FC2 31FC 0600 F760             		move.w #$600,(Sonic_top_speed).w ; Revert speeds
00011FC8 31FC 000C F762             		move.w #$C,(Sonic_acceleration).w ; ^^^
00011FCE 31FC 0080 F764             		move.w #$80,(Sonic_deceleration).w ; ^^^
00011FD4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00011FD8 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00011FDA 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
00011FE0 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
00011FE4 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
00011FEA 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
00011FEC 5428 0024                  		addq.b	#2,$24(a0)
00011FF0                            
00011FF0                            Obj0D_Sparkle:
00011FF0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00011FF4 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00011FF6 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
00011FFC 7000                       		moveq	#0,d0
00011FFE 1028 0034                  		move.b	$34(a0),d0
00012002 5428 0034                  		addq.b	#2,$34(a0)
00012006 0228 000E 0034             		andi.b	#$E,$34(a0)
0001200C 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
00012010 6100 EE60                  		bsr.w	SingleObjLoad
00012014 6600                       		bne.s	locret_EC42
00012016 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0001201A 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
00012020 101A                       		move.b	(a2)+,d0
00012022 4880                       		ext.w	d0
00012024 D068 0008                  		add.w	8(a0),d0
00012028 3340 0008                  		move.w	d0,8(a1)
0001202C 101A                       		move.b	(a2)+,d0
0001202E 4880                       		ext.w	d0
00012030 D068 000C                  		add.w	$C(a0),d0
00012034 3340 000C                  		move.w	d0,$C(a1)
00012038 237C 0000 CF80 0004        		move.l	#Map_obj25,4(a1)
00012040 337C 27B2 0002             		move.w	#$27B2,2(a1)
00012046 137C 0004 0001             		move.b	#4,1(a1)
0001204C 137C 0002 0018             		move.b	#2,$18(a1)
00012052 137C 0008 0019             		move.b	#8,$19(a1)
00012058                            
00012058                            locret_EC42:
00012058 4E75                       		rts	
0001205A                            ; ===========================================================================
0001205A E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0001205C 0808                       		dc.b	8,   8
0001205E F000                       		dc.b -$10,   0
00012060 18F8                       		dc.b  $18,  -8
00012062 00F8                       		dc.b	0,  -8
00012064 1000                       		dc.b  $10,   0
00012066 E808                       		dc.b -$18,   8
00012068 1810                       		dc.b  $18, $10
0001206A                            ; ===========================================================================
0001206A                            
0001206A                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0001206A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001206E 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00012072                            ;		btst	#1,($FFFFD022).w
00012072                            ;		bne.s	loc_EC70
00012072                            ;		move.b	#1,($FFFFF7CC).w ; lock	controls		;STOP CHANGING THIS GOD DAMN YOU
00012072                            ;		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00012072                            
00012072                            loc_EC70:
00012072 4A38 D000                  		tst.b	($FFFFD000).w
00012076 6700                       		beq.s	loc_EC86
00012078 3038 D008                  		move.w	($FFFFD008).w,d0
0001207C 3238 F72A                  		move.w	($FFFFF72A).w,d1
00012080 0641 0128                  		addi.w	#$128,d1
00012084 B041                       		cmp.w	d1,d0
00012086 6500                       		bcs.s	locret_ECEE
00012088                            
00012088                            loc_EC86:
00012088 5428 0024                  		addq.b	#2,$24(a0)
0001208C                            
0001208C                            ; ---------------------------------------------------------------------------
0001208C                            ; Subroutine to	set up bonuses at the end of an	act
0001208C                            ; ---------------------------------------------------------------------------
0001208C                            
0001208C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001208C                            
0001208C                            
0001208C                            GotThroughAct:				; XREF: Obj3E_EndAct
0001208C                            ;		tst.b	($FFFFD5C0).w
0001208C                            ;		bne.s	locret_ECEE
0001208C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
00012092 4238 FE2C                  		clr.b	($FFFFFE2C).w	; Remove the shield, if Sonic has it.
00012096 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0001209A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001209E 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
000120A4 7010                       		moveq	#$10,d0
000120A6 4EB9 0000 13D4             		jsr	(LoadPLC2).l	; load title card patterns
000120AC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
000120B2 7000                       		moveq	#0,d0
000120B4 1038 FE23                  		move.b	($FFFFFE23).w,d0
000120B8 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000120BC 7200                       		moveq	#0,d1
000120BE 1238 FE24                  		move.b	($FFFFFE24).w,d1
000120C2 D041                       		add.w	d1,d0		; add up your time
000120C4 80FC 000F                  		divu.w	#15,d0		; divide by 15
000120C8 7214                       		moveq	#$14,d1
000120CA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000120CC 6500                       		bcs.s	loc_ECD0	; if not, branch
000120CE 3001                       		move.w	d1,d0		; use minimum time bonus (0)
000120D0                            
000120D0                            loc_ECD0:
000120D0 D040                       		add.w	d0,d0
000120D2 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
000120D8 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
000120DC C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
000120E0 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
000120E4 303C 008E                  		move.w	#$8E,d0
000120E8 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
000120EE                            
000120EE                            locret_ECEE:
000120EE 4E75                       		rts	
000120F0                            ; End of function GotThroughAct
000120F0                            
000120F0                            ; ===========================================================================
000120F0 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00012104 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0001211A                            ; ===========================================================================
0001211A                            
0001211A                            locret_ED1A:				; XREF: Obj0D_Index
0001211A 4E75                       		rts	
0001211C                            ; ===========================================================================
0001211C                            Ani_obj0D:
0001211C                            	include "_anim\obj0D.asm"
0001211C                            ; ---------------------------------------------------------------------------
0001211C                            ; Animation script - signpost
0001211C                            ; ---------------------------------------------------------------------------
0001211C 0000                       		dc.w byte_ED24-Ani_obj0D
0001211E 0000                       		dc.w byte_ED28-Ani_obj0D
00012120 0000                       		dc.w byte_ED2E-Ani_obj0D
00012122 0000                       		dc.w byte_ED34-Ani_obj0D
00012124 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
00012128 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0001212E 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
00012134 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
00012138 00                         		even
00012138 00                         		even
00012138                            
00012138                            ; ---------------------------------------------------------------------------
00012138                            ; Sprite mappings - signpost
00012138                            ; ---------------------------------------------------------------------------
00012138                            Map_obj0D:
00012138                            	include "_maps\obj0D.asm"
00012138                            ; ================================================================================
00012138                            ; Sprite Mappings - generated by Flex 2 Sat Apr 14 2018 20:01:01 GMT-0400 (Eastern Daylight Time)
00012138                            ; ================================================================================
00012138                            
00012138                            DATA5VOLMCGEKYL:
00012138 0000 0000                  	dc.w DATA5VOLMCGEKYL_0-DATA5VOLMCGEKYL, DATA5VOLMCGEKYL_1-DATA5VOLMCGEKYL
0001213C 0000 0000                  	dc.w DATA5VOLMCGEKYL_2-DATA5VOLMCGEKYL, DATA5VOLMCGEKYL_3-DATA5VOLMCGEKYL
00012140 0000                       	dc.w DATA5VOLMCGEKYL_4-DATA5VOLMCGEKYL
00012142 03                         DATA5VOLMCGEKYL_0: dc.b $3
00012143 F00B 0000 E8               	dc.b $F0, $B, $0, $0, $E8
00012148 F00B 0800 00               	dc.b $F0, $B, $8, $0, $0
0001214D 1001 000C FC               	dc.b $10, $1, $0, $C, $FC
00012152 02                         DATA5VOLMCGEKYL_1: dc.b $2
00012153 F00F 000E F0               	dc.b $F0, $F, $0, $E, $F0
00012158 1001 000C FC               	dc.b $10, $1, $0, $C, $FC
0001215D 05                         DATA5VOLMCGEKYL_2: dc.b $5
0001215E 1001 000C FC               	dc.b $10, $1, $0, $C, $FC
00012163 F000 001E FC               	dc.b $F0, $0, $0, $1E, $FC
00012168 0800 001F FC               	dc.b $8, $0, $0, $1F, $FC
0001216D F800 0020 FC               	dc.b $F8, $0, $0, $20, $FC
00012172 0000 0020 FC               	dc.b $0, $0, $0, $20, $FC
00012177 02                         DATA5VOLMCGEKYL_3: dc.b $2
00012178 F00F 080E F0               	dc.b $F0, $F, $8, $E, $F0
0001217D 1001 000C FC               	dc.b $10, $1, $0, $C, $FC
00012182 03                         DATA5VOLMCGEKYL_4: dc.b $3
00012183 F00B 0021 E8               	dc.b $F0, $B, $0, $21, $E8
00012188 F00B 002D 00               	dc.b $F0, $B, $0, $2D, $0
0001218D 1001 000C FC               	dc.b $10, $1, $0, $C, $FC
00012192                            	even
00012192                            	even
00012192                            
00012192                            ; ===========================================================================
00012192                            ; ---------------------------------------------------------------------------
00012192                            ; Object 4C - lava geyser / lavafall producer (MZ)
00012192                            ; ---------------------------------------------------------------------------
00012192                            
00012192                            Obj4C:					; XREF: Obj_Index
00012192 7000                       		moveq	#0,d0
00012194 1028 0024                  		move.b	$24(a0),d0
00012198 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0001219C 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
000121A0 6000 0000                  		bra.w	Obj4D_ChkDel
000121A4                            ; ===========================================================================
000121A4 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
000121A6 0000                       		dc.w loc_EDCC-Obj4C_Index
000121A8 0000                       		dc.w loc_EE3E-Obj4C_Index
000121AA 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
000121AC 0000                       		dc.w Obj4C_Display-Obj4C_Index
000121AE 0000                       		dc.w Obj4C_Delete-Obj4C_Index
000121B0                            ; ===========================================================================
000121B0                            
000121B0                            Obj4C_Main:				; XREF: Obj4C_Index
000121B0 5428 0024                  		addq.b	#2,$24(a0)
000121B4 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
000121BC 317C E3A8 0002             		move.w	#$E3A8,2(a0)
000121C2 117C 0004 0001             		move.b	#4,1(a0)
000121C8 117C 0001 0018             		move.b	#1,$18(a0)
000121CE 117C 0038 0019             		move.b	#$38,$19(a0)
000121D4 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
000121DA                            
000121DA                            loc_EDCC:				; XREF: Obj4C_Index
000121DA 5368 0032                  		subq.w	#1,$32(a0)
000121DE 6A00                       		bpl.s	locret_EDF0
000121E0 3168 0034 0032             		move.w	$34(a0),$32(a0)
000121E6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000121EA 3228 000C                  		move.w	$C(a0),d1
000121EE B041                       		cmp.w	d1,d0
000121F0 6400                       		bcc.s	locret_EDF0
000121F2 0441 0170                  		subi.w	#$170,d1
000121F6 B041                       		cmp.w	d1,d0
000121F8 6500                       		bcs.s	locret_EDF0
000121FA 5428 0024                  		addq.b	#2,$24(a0)
000121FE                            
000121FE                            locret_EDF0:
000121FE 4E75                       		rts	
00012200                            ; ===========================================================================
00012200                            
00012200                            Obj4C_MakeLava:				; XREF: Obj4C_Index
00012200 5428 0024                  		addq.b	#2,$24(a0)
00012204 6100 EC82                  		bsr.w	SingleObjLoad2
00012208 6600                       		bne.s	loc_EE18
0001220A 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0001220E 3368 0008 0008             		move.w	8(a0),8(a1)
00012214 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001221A 1368 0028 0028             		move.b	$28(a0),$28(a1)
00012220 2348 003C                  		move.l	a0,$3C(a1)
00012224                            
00012224                            loc_EE18:
00012224 117C 0001 001C             		move.b	#1,$1C(a0)
0001222A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0001222E 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00012230 117C 0004 001C             		move.b	#4,$1C(a0)
00012236 6000                       		bra.s	Obj4C_Display
00012238                            ; ===========================================================================
00012238                            
00012238                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
00012238 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0001223C 08E9 0001 0022             		bset	#1,$22(a1)
00012242 337C FA80 0012             		move.w	#-$580,$12(a1)
00012248 6000                       		bra.s	Obj4C_Display
0001224A                            ; ===========================================================================
0001224A                            
0001224A                            loc_EE3E:				; XREF: Obj4C_Index
0001224A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0001224E 6700                       		beq.s	Obj4C_Display	; if yes, branch
00012250 5428 0024                  		addq.b	#2,$24(a0)
00012254 4E75                       		rts	
00012256                            ; ===========================================================================
00012256                            
00012256                            Obj4C_Display:				; XREF: Obj4C_Index
00012256 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0001225C 6100 B57C                  		bsr.w	AnimateSprite
00012260 6100 E77A                  		bsr.w	DisplaySprite
00012264 4E75                       		rts	
00012266                            ; ===========================================================================
00012266                            
00012266                            Obj4C_Delete:				; XREF: Obj4C_Index
00012266 117C 0000 001C             		move.b	#0,$1C(a0)
0001226C 117C 0002 0024             		move.b	#2,$24(a0)
00012272 4A28 0028                  		tst.b	$28(a0)
00012276 6700 E7A0                  		beq.w	DeleteObject
0001227A 4E75                       		rts	
0001227C                            ; ===========================================================================
0001227C                            ; ---------------------------------------------------------------------------
0001227C                            ; Object 4D - lava geyser / lavafall (MZ)
0001227C                            ; ---------------------------------------------------------------------------
0001227C                            
0001227C                            Obj4D:					; XREF: Obj_Index
0001227C 7000                       		moveq	#0,d0
0001227E 1028 0024                  		move.b	$24(a0),d0
00012282 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
00012286 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0001228A 6000 E750                  		bra.w	DisplaySprite
0001228E                            ; ===========================================================================
0001228E 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00012290 0000                       		dc.w Obj4D_Action-Obj4D_Index
00012292 0000                       		dc.w loc_EFFC-Obj4D_Index
00012294 0000                       		dc.w Obj4D_Delete-Obj4D_Index
00012296                            
00012296 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0001229A                            ; ===========================================================================
0001229A                            
0001229A                            Obj4D_Main:				; XREF: Obj4D_Index
0001229A 5428 0024                  		addq.b	#2,$24(a0)
0001229E 3168 000C 0030             		move.w	$C(a0),$30(a0)
000122A4 4A28 0028                  		tst.b	$28(a0)
000122A8 6700                       		beq.s	loc_EEA4
000122AA 0468 0250 000C             		subi.w	#$250,$C(a0)
000122B0                            
000122B0                            loc_EEA4:
000122B0 7000                       		moveq	#0,d0
000122B2 1028 0028                  		move.b	$28(a0),d0
000122B6 D040                       		add.w	d0,d0
000122B8 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
000122BE 2248                       		movea.l	a0,a1
000122C0 7201                       		moveq	#1,d1
000122C2 6100                       		bsr.s	Obj4D_MakeLava
000122C4 6000                       		bra.s	loc_EF10
000122C6                            ; ===========================================================================
000122C6                            
000122C6                            Obj4D_Loop:
000122C6 6100 EBC0                  		bsr.w	SingleObjLoad2
000122CA 6600                       		bne.s	loc_EF0A
000122CC                            
000122CC                            Obj4D_MakeLava:				; XREF: Obj4D_Main
000122CC 12BC 004D                  		move.b	#$4D,0(a1)
000122D0 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
000122D8 337C 63A8 0002             		move.w	#$63A8,2(a1)
000122DE 137C 0004 0001             		move.b	#4,1(a1)
000122E4 137C 0020 0019             		move.b	#$20,$19(a1)
000122EA 3368 0008 0008             		move.w	8(a0),8(a1)
000122F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000122F6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000122FC 137C 0001 0018             		move.b	#1,$18(a1)
00012302 137C 0005 001C             		move.b	#5,$1C(a1)
00012308 4A28 0028                  		tst.b	$28(a0)
0001230C 6700                       		beq.s	loc_EF0A
0001230E 137C 0002 001C             		move.b	#2,$1C(a1)
00012314                            
00012314                            loc_EF0A:
00012314 51C9 FFB0                  		dbf	d1,Obj4D_Loop
00012318 4E75                       		rts	
0001231A                            ; ===========================================================================
0001231A                            
0001231A                            loc_EF10:				; XREF: Obj4D_Main
0001231A 0669 0060 000C             		addi.w	#$60,$C(a1)
00012320 3368 0030 0030             		move.w	$30(a0),$30(a1)
00012326 0669 0060 0030             		addi.w	#$60,$30(a1)
0001232C 137C 0093 0020             		move.b	#$93,$20(a1)
00012332 137C 0080 0016             		move.b	#$80,$16(a1)
00012338 08E9 0004 0001             		bset	#4,1(a1)
0001233E 5829 0024                  		addq.b	#4,$24(a1)
00012342 2348 003C                  		move.l	a0,$3C(a1)
00012346 4A28 0028                  		tst.b	$28(a0)
0001234A 6700                       		beq.s	Obj4D_PlaySnd
0001234C 7200                       		moveq	#0,d1
0001234E 6100 FF76                  		bsr.w	Obj4D_Loop
00012352 5429 0024                  		addq.b	#2,$24(a1)
00012356 08E9 0004 0002             		bset	#4,2(a1)
0001235C 0669 0100 000C             		addi.w	#$100,$C(a1)
00012362 137C 0000 0018             		move.b	#0,$18(a1)
00012368 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001236E 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00012374 117C 0000 0028             		move.b	#0,$28(a0)
0001237A                            
0001237A                            Obj4D_PlaySnd:
0001237A 303C 00C8                  		move.w	#$C8,d0
0001237E 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play flame sound
00012384                            
00012384                            Obj4D_Action:				; XREF: Obj4D_Index
00012384 7000                       		moveq	#0,d0
00012386 1028 0028                  		move.b	$28(a0),d0
0001238A D040                       		add.w	d0,d0
0001238C 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00012390 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00012394 6100 E62C                  		bsr.w	SpeedToPos
00012398 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0001239E 6100 B43A                  		bsr.w	AnimateSprite
000123A2                            
000123A2                            Obj4D_ChkDel:				; XREF: Obj4C
000123A2 3028 0008                  		move.w	8(a0),d0
000123A6 0240 FF80                  		andi.w	#$FF80,d0
000123AA 3238 F700                  		move.w	($FFFFF700).w,d1
000123AE 0441 0080                  		subi.w	#$80,d1
000123B2 0241 FF80                  		andi.w	#$FF80,d1
000123B6 9041                       		sub.w	d1,d0
000123B8 0C40 0280                  		cmpi.w	#$280,d0
000123BC 6200 E65A                  		bhi.w	DeleteObject
000123C0 4E75                       		rts	
000123C2                            ; ===========================================================================
000123C2 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
000123C4 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
000123C6                            ; ===========================================================================
000123C6                            
000123C6                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
000123C6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000123CC 3028 0030                  		move.w	$30(a0),d0
000123D0 B068 000C                  		cmp.w	$C(a0),d0
000123D4 6400                       		bcc.s	locret_EFDA
000123D6 5828 0024                  		addq.b	#4,$24(a0)
000123DA 2268 003C                  		movea.l	$3C(a0),a1
000123DE 137C 0003 001C             		move.b	#3,$1C(a1)
000123E4                            
000123E4                            locret_EFDA:
000123E4 4E75                       		rts	
000123E6                            ; ===========================================================================
000123E6                            
000123E6                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
000123E6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000123EC 3028 0030                  		move.w	$30(a0),d0
000123F0 B068 000C                  		cmp.w	$C(a0),d0
000123F4 6400                       		bcc.s	locret_EFFA
000123F6 5828 0024                  		addq.b	#4,$24(a0)
000123FA 2268 003C                  		movea.l	$3C(a0),a1
000123FE 137C 0001 001C             		move.b	#1,$1C(a1)
00012404                            
00012404                            locret_EFFA:
00012404 4E75                       		rts	
00012406                            ; ===========================================================================
00012406                            
00012406                            loc_EFFC:				; XREF: Obj4D_Index
00012406 2268 003C                  		movea.l	$3C(a0),a1
0001240A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00012410 6700 0000                  		beq.w	Obj4D_Delete
00012414 3029 000C                  		move.w	$C(a1),d0
00012418 0640 0060                  		addi.w	#$60,d0
0001241C 3140 000C                  		move.w	d0,$C(a0)
00012420 9068 0030                  		sub.w	$30(a0),d0
00012424 4440                       		neg.w	d0
00012426 7208                       		moveq	#8,d1
00012428 0C40 0040                  		cmpi.w	#$40,d0
0001242C 6C00                       		bge.s	loc_F026
0001242E 720B                       		moveq	#$B,d1
00012430                            
00012430                            loc_F026:
00012430 0C40 0080                  		cmpi.w	#$80,d0
00012434 6F00                       		ble.s	loc_F02E
00012436 720E                       		moveq	#$E,d1
00012438                            
00012438                            loc_F02E:
00012438 5328 001E                  		subq.b	#1,$1E(a0)
0001243C 6A00                       		bpl.s	loc_F04C
0001243E 117C 0007 001E             		move.b	#7,$1E(a0)
00012444 5228 001B                  		addq.b	#1,$1B(a0)
00012448 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0001244E 6500                       		bcs.s	loc_F04C
00012450 117C 0000 001B             		move.b	#0,$1B(a0)
00012456                            
00012456                            loc_F04C:
00012456 1028 001B                  		move.b	$1B(a0),d0
0001245A D001                       		add.b	d1,d0
0001245C 1140 001A                  		move.b	d0,$1A(a0)
00012460 6000 FF40                  		bra.w	Obj4D_ChkDel
00012464                            ; ===========================================================================
00012464                            
00012464                            Obj4D_Delete:				; XREF: Obj4D_Index
00012464 6000 E5B2                  		bra.w	DeleteObject
00012468                            ; ===========================================================================
00012468                            ; ---------------------------------------------------------------------------
00012468                            ; Object 4E - advancing	wall of	lava (MZ)
00012468                            ; ---------------------------------------------------------------------------
00012468                            
00012468                            Obj4E:					; XREF: Obj_Index
00012468 7000                       		moveq	#0,d0
0001246A 1028 0024                  		move.b	$24(a0),d0
0001246E 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00012472 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00012476                            ; ===========================================================================
00012476 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00012478 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0001247A 0000                       		dc.w Obj4E_Action-Obj4E_Index
0001247C 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0001247E 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00012480                            ; ===========================================================================
00012480                            
00012480                            Obj4E_Main:				; XREF: Obj4E_Index
00012480 5828 0024                  		addq.b	#4,$24(a0)
00012484 2248                       		movea.l	a0,a1
00012486 7201                       		moveq	#1,d1
00012488 6000                       		bra.s	Obj4E_Main2
0001248A                            ; ===========================================================================
0001248A                            
0001248A                            Obj4E_Loop:
0001248A 6100 E9FC                  		bsr.w	SingleObjLoad2
0001248E 6600                       		bne.s	loc_F0C8
00012490                            
00012490                            Obj4E_Main2:				; XREF: Obj4E_Main
00012490 12BC 004E                  		move.b	#$4E,0(a1)	; load object
00012494 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0001249C 337C 63A8 0002             		move.w	#$63A8,2(a1)
000124A2 137C 0004 0001             		move.b	#4,1(a1)
000124A8 137C 0050 0019             		move.b	#$50,$19(a1)
000124AE 3368 0008 0008             		move.w	8(a0),8(a1)
000124B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000124BA 137C 0001 0018             		move.b	#1,$18(a1)
000124C0 137C 0000 001C             		move.b	#0,$1C(a1)
000124C6 137C 0094 0020             		move.b	#$94,$20(a1)
000124CC 2348 003C                  		move.l	a0,$3C(a1)
000124D0                            
000124D0                            loc_F0C8:
000124D0 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
000124D4                            
000124D4 5C29 0024                  		addq.b	#6,$24(a1)
000124D8 137C 0004 001A             		move.b	#4,$1A(a1)
000124DE                            
000124DE                            Obj4E_Action:				; XREF: Obj4E_Index
000124DE 3038 D008                  		move.w	($FFFFD008).w,d0
000124E2 9068 0008                  		sub.w	8(a0),d0
000124E6 6400                       		bcc.s	Obj4E_ChkSonic
000124E8 4440                       		neg.w	d0
000124EA                            
000124EA                            Obj4E_ChkSonic:
000124EA 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
000124EE 6400                       		bcc.s	Obj4E_Move	; if not, branch
000124F0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000124F4 9068 000C                  		sub.w	$C(a0),d0
000124F8 6400                       		bcc.s	loc_F0F4
000124FA 4440                       		neg.w	d0
000124FC                            
000124FC                            loc_F0F4:
000124FC 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00012500 6400                       		bcc.s	Obj4E_Move	; if not, branch
00012502 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00012508 6000                       		bra.s	Obj4E_Solid
0001250A                            ; ===========================================================================
0001250A                            
0001250A                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0001250A 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0001250E 6700                       		beq.s	Obj4E_Solid	; if not, branch
00012510 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00012516 5528 0024                  		subq.b	#2,$24(a0)
0001251A                            
0001251A                            Obj4E_Solid:				; XREF: Obj4E_Index
0001251A 323C 002B                  		move.w	#$2B,d1
0001251E 343C 0018                  		move.w	#$18,d2
00012522 3602                       		move.w	d2,d3
00012524 5243                       		addq.w	#1,d3
00012526 3828 0008                  		move.w	8(a0),d4
0001252A 1028 0024                  		move.b	$24(a0),d0
0001252E 3F00                       		move.w	d0,-(sp)
00012530 6100 0000                  		bsr.w	SolidObject
00012534 301F                       		move.w	(sp)+,d0
00012536 1140 0024                  		move.b	d0,$24(a0)
0001253A 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00012540 6600                       		bne.s	Obj4E_Animate	; if not, branch
00012542 4268 0010                  		clr.w	$10(a0)		; stop object moving
00012546 4228 0036                  		clr.b	$36(a0)
0001254A                            
0001254A                            Obj4E_Animate:
0001254A 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00012550 6100 B288                  		bsr.w	AnimateSprite
00012554 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001255A 6400                       		bcc.s	Obj4E_ChkDel
0001255C 6100 E464                  		bsr.w	SpeedToPos
00012560                            
00012560                            Obj4E_ChkDel:
00012560 6100 E47A                  		bsr.w	DisplaySprite
00012564 4A28 0036                  		tst.b	$36(a0)
00012568 6600                       		bne.s	locret_F17E
0001256A 3028 0008                  		move.w	8(a0),d0
0001256E 0240 FF80                  		andi.w	#$FF80,d0
00012572 3238 F700                  		move.w	($FFFFF700).w,d1
00012576 0441 0080                  		subi.w	#$80,d1
0001257A 0241 FF80                  		andi.w	#$FF80,d1
0001257E 9041                       		sub.w	d1,d0
00012580 0C40 0280                  		cmpi.w	#$280,d0
00012584 6200                       		bhi.s	Obj4E_ChkGone
00012586                            
00012586                            locret_F17E:
00012586 4E75                       		rts	
00012588                            ; ===========================================================================
00012588                            
00012588                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00012588 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001258C 7000                       		moveq	#0,d0
0001258E 1028 0023                  		move.b	$23(a0),d0
00012592 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012598 117C 0008 0024             		move.b	#8,$24(a0)
0001259E 4E75                       		rts	
000125A0                            ; ===========================================================================
000125A0                            
000125A0                            Obj4E_Move2:				; XREF: Obj4E_Index
000125A0 2268 003C                  		movea.l	$3C(a0),a1
000125A4 0C29 0008 0024             		cmpi.b	#8,$24(a1)
000125AA 6700                       		beq.s	Obj4E_Delete
000125AC 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
000125B2 0468 0080 0008             		subi.w	#$80,8(a0)
000125B8 6000 E422                  		bra.w	DisplaySprite
000125BC                            ; ===========================================================================
000125BC                            
000125BC                            Obj4E_Delete:				; XREF: Obj4E_Index
000125BC 6000 E45A                  		bra.w	DeleteObject
000125C0                            ; ===========================================================================
000125C0                            ; ---------------------------------------------------------------------------
000125C0                            ; Object 54 - invisible	lava tag (MZ)
000125C0                            ; ---------------------------------------------------------------------------
000125C0                            
000125C0                            Obj54:					; XREF: Obj_Index
000125C0 7000                       		moveq	#0,d0
000125C2 1028 0024                  		move.b	$24(a0),d0
000125C6 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
000125CA 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
000125CE                            ; ===========================================================================
000125CE 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
000125D0 0000                       		dc.w Obj54_ChkDel-Obj54_Index
000125D2                            
000125D2 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
000125D6                            ; ===========================================================================
000125D6                            
000125D6                            Obj54_Main:				; XREF: Obj54_Index
000125D6 5428 0024                  		addq.b	#2,$24(a0)
000125DA 7000                       		moveq	#0,d0
000125DC 1028 0028                  		move.b	$28(a0),d0
000125E0 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
000125E6 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
000125EE 117C 0084 0001             		move.b	#$84,1(a0)
000125F4                            
000125F4                            Obj54_ChkDel:				; XREF: Obj54_Index
000125F4 3028 0008                  		move.w	8(a0),d0
000125F8 0240 FF80                  		andi.w	#$FF80,d0
000125FC 3238 F700                  		move.w	($FFFFF700).w,d1
00012600 0441 0080                  		subi.w	#$80,d1
00012604 0241 FF80                  		andi.w	#$FF80,d1
00012608 9041                       		sub.w	d1,d0
0001260A 6B00 E40C                  		bmi.w	DeleteObject
0001260E 0C40 0280                  		cmpi.w	#$280,d0
00012612 6200 E404                  		bhi.w	DeleteObject
00012616 4E75                       		rts	
00012618                            ; ===========================================================================
00012618                            ; ---------------------------------------------------------------------------
00012618                            ; Sprite mappings - invisible lava tag (MZ)
00012618                            ; ---------------------------------------------------------------------------
00012618                            Map_obj54:
00012618                            	include "_maps\obj54.asm"
00012618                            ; ---------------------------------------------------------------------------
00012618                            ; Sprite mappings - invisible lava tag (MZ)
00012618                            ; ---------------------------------------------------------------------------
00012618 0000                       		dc.w byte_F212-Map_obj54
0001261A 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0001261C 00                         		even
0001261C 00                         		even
0001261C                            
0001261C                            Ani_obj4C:
0001261C                            	include "_anim\obj4C.asm"
0001261C                            ; ---------------------------------------------------------------------------
0001261C                            ; Animation script - geyser of lava (MZ)
0001261C                            ; ---------------------------------------------------------------------------
0001261C 0000                       		dc.w byte_F220-Ani_obj4C
0001261E 0000                       		dc.w byte_F22A-Ani_obj4C
00012620 0000                       		dc.w byte_F22E-Ani_obj4C
00012622 0000                       		dc.w byte_F232-Ani_obj4C
00012624 0000                       		dc.w byte_F23A-Ani_obj4C
00012626 0000                       		dc.w byte_F23E-Ani_obj4C
00012628 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00012632 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00012636 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0001263A 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00012642 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00012646 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0001264A                            		even
0001264A                            		even
0001264A                            
0001264A                            Ani_obj4E:
0001264A                            	include "_anim\obj4E.asm"
0001264A                            ; ---------------------------------------------------------------------------
0001264A                            ; Animation script - advancing wall of lava (MZ)
0001264A                            ; ---------------------------------------------------------------------------
0001264A 0000                       		dc.w byte_F244-Ani_obj4E
0001264C 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00012652                            		even
00012652                            		even
00012652                            
00012652                            ; ---------------------------------------------------------------------------
00012652                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00012652                            ; ---------------------------------------------------------------------------
00012652                            Map_obj4C:
00012652                            	include "_maps\obj4C.asm"
00012652                            ; ---------------------------------------------------------------------------
00012652                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00012652                            ; ---------------------------------------------------------------------------
00012652 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00012656 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0001265A 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0001265E 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00012662 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00012666 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0001266A 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0001266E 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00012672 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00012676 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0001267A 02                         byte_F272:	dc.b 2
0001267B EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00012680 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00012685 02                         byte_F27D:	dc.b 2
00012686 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0001268B EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00012690 04                         byte_F288:	dc.b 4
00012691 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00012696 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001269B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000126A0 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000126A5 04                         byte_F29D:	dc.b 4
000126A6 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000126AB F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000126B0 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000126B5 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000126BA 06                         byte_F2B2:	dc.b 6
000126BB EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000126C0 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000126C5 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000126CA EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000126CF E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000126D4 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000126D9 06                         byte_F2D1:	dc.b 6
000126DA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000126DF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000126E4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000126E9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000126EE E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
000126F3 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000126F8 02                         byte_F2F0:	dc.b 2
000126F9 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
000126FE E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00012703 02                         byte_F2FB:	dc.b 2
00012704 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00012709 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0001270E 0A                         byte_F306:	dc.b $A
0001270F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00012714 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00012719 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001271E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00012723 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00012728 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001272D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00012732 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00012737 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001273C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00012741 0A                         byte_F339:	dc.b $A
00012742 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00012747 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001274C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00012751 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00012756 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001275B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00012760 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00012765 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001276A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001276F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00012774 0A                         byte_F36C:	dc.b $A
00012775 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001277A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001277F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00012784 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00012789 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001278E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00012793 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00012798 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0001279D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000127A2 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000127A7 06                         byte_F39F:	dc.b 6
000127A8 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000127AD 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000127B2 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000127B7 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000127BC D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000127C1 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000127C6 06                         byte_F3BE:	dc.b 6
000127C7 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000127CC 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000127D1 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000127D6 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000127DB D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000127E0 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000127E5 06                         byte_F3DD:	dc.b 6
000127E6 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000127EB 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000127F0 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000127F5 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000127FA D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000127FF D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00012804 10                         byte_F3FC:	dc.b $10
00012805 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001280A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001280F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00012814 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00012819 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001281E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00012823 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00012828 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001282D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00012832 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00012837 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0001283C 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00012841 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00012846 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0001284B 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00012850 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00012855 10                         byte_F44D:	dc.b $10
00012856 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001285B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00012860 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00012865 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001286A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001286F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00012874 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00012879 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001287E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00012883 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00012888 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0001288D 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00012892 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00012897 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0001289C 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000128A1 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000128A6 10                         byte_F49E:	dc.b $10
000128A7 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000128AC 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000128B1 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000128B6 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000128BB D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000128C0 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000128C5 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000128CA F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000128CF 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000128D4 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000128D9 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000128DE 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000128E3 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
000128E8 500F 0860 00               		dc.b $50, $F, 8, $60, 0
000128ED 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
000128F2 700F 0860 00               		dc.b $70, $F, 8, $60, 0
000128F7 06                         byte_F4EF:	dc.b 6
000128F8 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
000128FD E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00012902 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00012907 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0001290C D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00012911 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00012916 06                         byte_F50E:	dc.b 6
00012917 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0001291C E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00012921 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00012926 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001292B D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00012930 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00012935 00                         byte_F52D:	dc.b 0
00012936                            		even
00012936                            		even
00012936                            
00012936                            ; ---------------------------------------------------------------------------
00012936                            ; Sprite mappings - advancing wall of lava (MZ)
00012936                            ; ---------------------------------------------------------------------------
00012936                            Map_obj4E:
00012936                            	include "_maps\obj4E.asm"
00012936                            ; ---------------------------------------------------------------------------
00012936                            ; Sprite mappings - advancing wall of lava (MZ)
00012936                            ; ---------------------------------------------------------------------------
00012936 0000                       		dc.w byte_F538-Map_obj4E
00012938 0000                       		dc.w byte_F566-Map_obj4E
0001293A 0000                       		dc.w byte_F594-Map_obj4E
0001293C 0000                       		dc.w byte_F5C2-Map_obj4E
0001293E 0000                       		dc.w byte_F5F0-Map_obj4E
00012940 09                         byte_F538:	dc.b 9
00012941 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00012946 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001294B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00012950 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00012955 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001295A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001295F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00012964 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00012969 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001296E 09                         byte_F566:	dc.b 9
0001296F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00012974 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00012979 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001297E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00012983 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00012988 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001298D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00012992 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00012997 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001299C 09                         byte_F594:	dc.b 9
0001299D E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
000129A2 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000129A7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000129AC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000129B1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000129B6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000129BB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000129C0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000129C5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000129CA 09                         byte_F5C2:	dc.b 9
000129CB E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000129D0 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000129D5 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000129DA E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000129DF 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000129E4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000129E9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000129EE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000129F3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000129F8 08                         byte_F5F0:	dc.b 8
000129F9 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
000129FE 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00012A03 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00012A08 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00012A0D E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00012A12 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00012A17 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00012A1C 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00012A22 00                         		even
00012A22 00                         		even
00012A22                            
00012A22                            ; ===========================================================================
00012A22                            ; ---------------------------------------------------------------------------
00012A22                            ; Object 40 - Moto Bug enemy (GHZ)
00012A22                            ; ---------------------------------------------------------------------------
00012A22                            
00012A22                            Obj40:					; XREF: Obj_Index
00012A22 7000                       		moveq	#0,d0
00012A24 1028 0024                  		move.b	$24(a0),d0
00012A28 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00012A2C 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00012A30                            ; ===========================================================================
00012A30 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00012A32 0000                       		dc.w Obj40_Action-Obj40_Index
00012A34 0000                       		dc.w Obj40_Animate-Obj40_Index
00012A36 0000                       		dc.w Obj40_Delete-Obj40_Index
00012A38                            ; ===========================================================================
00012A38                            
00012A38                            Obj40_Main:				; XREF: Obj40_Index
00012A38 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00012A40 317C 04F0 0002             		move.w	#$4F0,2(a0)
00012A46 117C 0004 0001             		move.b	#4,1(a0)
00012A4C 117C 0004 0018             		move.b	#4,$18(a0)
00012A52 117C 0014 0019             		move.b	#$14,$19(a0)
00012A58 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00012A5C 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00012A5E 117C 000E 0016             		move.b	#$E,$16(a0)
00012A64 117C 0008 0017             		move.b	#8,$17(a0)
00012A6A 117C 000C 0020             		move.b	#$C,$20(a0)
00012A70 6100 DF30                  		bsr.w	ObjectFall
00012A74 4EB9 0000 0000             		jsr	ObjHitFloor
00012A7A 4A41                       		tst.w	d1
00012A7C 6A00                       		bpl.s	locret_F68A
00012A7E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00012A82 317C 0000 0012             		move.w	#0,$12(a0)
00012A88 5428 0024                  		addq.b	#2,$24(a0)
00012A8C 0868 0000 0022             		bchg	#0,$22(a0)
00012A92                            
00012A92                            locret_F68A:
00012A92 4E75                       		rts	
00012A94                            ; ===========================================================================
00012A94                            
00012A94                            Obj40_SetSmoke:				; XREF: Obj40_Main
00012A94 5828 0024                  		addq.b	#4,$24(a0)
00012A98 6000 0000                  		bra.w	Obj40_Animate
00012A9C                            ; ===========================================================================
00012A9C                            
00012A9C                            Obj40_Action:				; XREF: Obj40_Index
00012A9C 7000                       		moveq	#0,d0
00012A9E 1028 0025                  		move.b	$25(a0),d0
00012AA2 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00012AA6 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00012AAA 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00012AB0 6100 AD28                  		bsr.w	AnimateSprite
00012AB4                            
00012AB4                            ; ---------------------------------------------------------------------------
00012AB4                            ; Routine to mark an enemy/monitor/ring	as destroyed
00012AB4                            ; ---------------------------------------------------------------------------
00012AB4                            
00012AB4                            MarkObjGone:
00012AB4 3028 0008                  		move.w	8(a0),d0
00012AB8 0240 FF80                  		andi.w	#$FF80,d0
00012ABC 3238 F700                  		move.w	($FFFFF700).w,d1
00012AC0 0441 0080                  		subi.w	#$80,d1
00012AC4 0241 FF80                  		andi.w	#$FF80,d1
00012AC8 9041                       		sub.w	d1,d0
00012ACA 0C40 0280                  		cmpi.w	#$280,d0
00012ACE 6200 0000                  		bhi.w	Mark_ChkGone
00012AD2 6000 DF08                  		bra.w	DisplaySprite
00012AD6                            ; ===========================================================================
00012AD6                            
00012AD6                            Mark_ChkGone:
00012AD6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012ADA 7000                       		moveq	#0,d0
00012ADC 1028 0023                  		move.b	$23(a0),d0
00012AE0 6700                       		beq.s	Mark_Delete
00012AE2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012AE8                            
00012AE8                            Mark_Delete:
00012AE8 6000 DF2E                  		bra.w	DeleteObject
00012AEC                            
00012AEC                            ; ===========================================================================
00012AEC 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00012AEE 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00012AF0                            ; ===========================================================================
00012AF0                            
00012AF0                            Obj40_Move:				; XREF: Obj40_Index2
00012AF0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00012AF4 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00012AF6 5428 0025                  		addq.b	#2,$25(a0)
00012AFA 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00012B00 117C 0001 001C             		move.b	#1,$1C(a0)
00012B06 0868 0000 0022             		bchg	#0,$22(a0)
00012B0C 6600                       		bne.s	locret_F70A
00012B0E 4468 0010                  		neg.w	$10(a0)		; change direction
00012B12                            
00012B12                            locret_F70A:
00012B12 4E75                       		rts	
00012B14                            ; ===========================================================================
00012B14                            
00012B14                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00012B14 6100 DEAC                  		bsr.w	SpeedToPos
00012B18 4EB9 0000 0000             		jsr	ObjHitFloor
00012B1E 0C41 FFF8                  		cmpi.w	#-8,d1
00012B22 6D00                       		blt.s	Obj40_Pause
00012B24 0C41 000C                  		cmpi.w	#$C,d1
00012B28 6C00                       		bge.s	Obj40_Pause
00012B2A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00012B2E 5328 0033                  		subq.b	#1,$33(a0)
00012B32 6A00                       		bpl.s	locret_F756
00012B34 117C 000F 0033             		move.b	#$F,$33(a0)
00012B3A 6100 E336                  		bsr.w	SingleObjLoad
00012B3E 6600                       		bne.s	locret_F756
00012B40 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00012B44 3368 0008 0008             		move.w	8(a0),8(a1)
00012B4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012B50 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012B56 137C 0002 001C             		move.b	#2,$1C(a1)
00012B5C                            
00012B5C                            locret_F756:
00012B5C 4E75                       		rts	
00012B5E                            ; ===========================================================================
00012B5E                            
00012B5E                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00012B5E 5528 0025                  		subq.b	#2,$25(a0)
00012B62 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00012B68 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00012B6E 117C 0000 001C             		move.b	#0,$1C(a0)
00012B74 4E75                       		rts	
00012B76                            ; ===========================================================================
00012B76                            
00012B76                            Obj40_Animate:				; XREF: Obj40_Index
00012B76 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00012B7C 6100 AC5C                  		bsr.w	AnimateSprite
00012B80 6000 DE5A                  		bra.w	DisplaySprite
00012B84                            ; ===========================================================================
00012B84                            
00012B84                            Obj40_Delete:				; XREF: Obj40_Index
00012B84 6000 DE92                  		bra.w	DeleteObject
00012B88                            ; ===========================================================================
00012B88                            Ani_obj40:
00012B88                            	include "_anim\obj40.asm"
00012B88                            ; ---------------------------------------------------------------------------
00012B88                            ; Animation script - Motobug enemy
00012B88                            ; ---------------------------------------------------------------------------
00012B88 0000                       		dc.w byte_F788-Ani_obj40
00012B8A 0000                       		dc.w byte_F78C-Ani_obj40
00012B8C 0000                       		dc.w byte_F792-Ani_obj40
00012B8E 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00012B92 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00012B98 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00012BA6                            		even
00012BA6                            		even
00012BA6                            
00012BA6                            ; ---------------------------------------------------------------------------
00012BA6                            ; Sprite mappings - Moto Bug enemy (GHZ)
00012BA6                            ; ---------------------------------------------------------------------------
00012BA6                            Map_obj40:
00012BA6                            	include "_maps\obj40.asm"
00012BA6                            ; ---------------------------------------------------------------------------
00012BA6                            ; Sprite mappings - Moto Bug enemy (GHZ)
00012BA6                            ; ---------------------------------------------------------------------------
00012BA6 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
00012BAA 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00012BAE 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00012BB2 0000                       		dc.w byte_F804-Map_obj40
00012BB4 04                         byte_F7AE:	dc.b 4
00012BB5 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00012BBA 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
00012BBF F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00012BC4 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
00012BC9 04                         byte_F7C3:	dc.b 4
00012BCA F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
00012BCF 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
00012BD4 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
00012BD9 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
00012BDE 05                         byte_F7D8:	dc.b 5
00012BDF F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00012BE4 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
00012BE9 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00012BEE 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
00012BF3 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
00012BF8 01                         byte_F7F2:	dc.b 1
00012BF9 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
00012BFE 01                         byte_F7F8:	dc.b 1
00012BFF FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
00012C04 01                         byte_F7FE:	dc.b 1
00012C05 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
00012C0A 00                         byte_F804:	dc.b 0
00012C0C 00                         		even
00012C0C 00                         		even
00012C0C                            
00012C0C                            ; ===========================================================================
00012C0C                            ; ---------------------------------------------------------------------------
00012C0C                            ; Object 4F - blank
00012C0C                            ; ---------------------------------------------------------------------------
00012C0C                            
00012C0C                            Obj4F:					; XREF: Obj_Index
00012C0C 4E75                       		rts	
00012C0E                            
00012C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C0E                            
00012C0E                            
00012C0E                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00012C0E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012C12 D047                       		add.w	d7,d0
00012C14 0240 0003                  		andi.w	#3,d0
00012C18 6600                       		bne.s	loc_F836
00012C1A 7600                       		moveq	#0,d3
00012C1C 1628 0019                  		move.b	$19(a0),d3
00012C20 4A68 0010                  		tst.w	$10(a0)
00012C24 6B00                       		bmi.s	loc_F82C
00012C26 6100 0000                  		bsr.w	ObjHitWallRight
00012C2A 4A41                       		tst.w	d1
00012C2C 6A00                       		bpl.s	loc_F836
00012C2E                            
00012C2E                            loc_F828:
00012C2E 7001                       		moveq	#1,d0
00012C30 4E75                       		rts	
00012C32                            ; ===========================================================================
00012C32                            
00012C32                            loc_F82C:
00012C32 4643                       		not.w	d3
00012C34 6100 0000                  		bsr.w	ObjHitWallLeft
00012C38 4A41                       		tst.w	d1
00012C3A 6BF2                       		bmi.s	loc_F828
00012C3C                            
00012C3C                            loc_F836:
00012C3C 7000                       		moveq	#0,d0
00012C3E 4E75                       		rts	
00012C40                            ; End of function Obj50_ChkWall
00012C40                            
00012C40                            ; ===========================================================================
00012C40                            ; ---------------------------------------------------------------------------
00012C40                            ; Object 50 - Yadrin enemy (SYZ)
00012C40                            ; ---------------------------------------------------------------------------
00012C40                            
00012C40                            Obj50:					; XREF: Obj_Index
00012C40 7000                       		moveq	#0,d0
00012C42 1028 0024                  		move.b	$24(a0),d0
00012C46 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00012C4A 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00012C4E                            ; ===========================================================================
00012C4E 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00012C50 0000                       		dc.w Obj50_Action-Obj50_Index
00012C52                            ; ===========================================================================
00012C52                            
00012C52                            Obj50_Main:				; XREF: Obj50_Index
00012C52 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00012C5A 317C 247B 0002             		move.w	#$247B,2(a0)
00012C60 117C 0004 0001             		move.b	#4,1(a0)
00012C66 117C 0004 0018             		move.b	#4,$18(a0)
00012C6C 117C 0014 0019             		move.b	#$14,$19(a0)
00012C72 117C 0011 0016             		move.b	#$11,$16(a0)
00012C78 117C 0008 0017             		move.b	#8,$17(a0)
00012C7E 117C 00CC 0020             		move.b	#$CC,$20(a0)
00012C84 6100 DD1C                  		bsr.w	ObjectFall
00012C88 6100 0000                  		bsr.w	ObjHitFloor
00012C8C 4A41                       		tst.w	d1
00012C8E 6A00                       		bpl.s	locret_F89E
00012C90 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00012C94 317C 0000 0012             		move.w	#0,$12(a0)
00012C9A 5428 0024                  		addq.b	#2,$24(a0)
00012C9E 0868 0000 0022             		bchg	#0,$22(a0)
00012CA4                            
00012CA4                            locret_F89E:
00012CA4 4E75                       		rts	
00012CA6                            ; ===========================================================================
00012CA6                            
00012CA6                            Obj50_Action:				; XREF: Obj50_Index
00012CA6 7000                       		moveq	#0,d0
00012CA8 1028 0025                  		move.b	$25(a0),d0
00012CAC 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00012CB0 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00012CB4 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00012CBA 6100 AB1E                  		bsr.w	AnimateSprite
00012CBE 6000 FDF4                  		bra.w	MarkObjGone
00012CC2                            ; ===========================================================================
00012CC2 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00012CC4 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00012CC6                            ; ===========================================================================
00012CC6                            
00012CC6                            Obj50_Move:				; XREF: Obj50_Index2
00012CC6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00012CCA 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00012CCC 5428 0025                  		addq.b	#2,$25(a0)
00012CD0 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00012CD6 117C 0001 001C             		move.b	#1,$1C(a0)
00012CDC 0868 0000 0022             		bchg	#0,$22(a0)
00012CE2 6600                       		bne.s	locret_F8E2
00012CE4 4468 0010                  		neg.w	$10(a0)		; change direction
00012CE8                            
00012CE8                            locret_F8E2:
00012CE8 4E75                       		rts	
00012CEA                            ; ===========================================================================
00012CEA                            
00012CEA                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00012CEA 6100 DCD6                  		bsr.w	SpeedToPos
00012CEE 6100 0000                  		bsr.w	ObjHitFloor
00012CF2 0C41 FFF8                  		cmpi.w	#-8,d1
00012CF6 6D00                       		blt.s	Obj50_Pause
00012CF8 0C41 000C                  		cmpi.w	#$C,d1
00012CFC 6C00                       		bge.s	Obj50_Pause
00012CFE D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00012D02 6100 FF0A                  		bsr.w	Obj50_ChkWall
00012D06 6600                       		bne.s	Obj50_Pause
00012D08 4E75                       		rts	
00012D0A                            ; ===========================================================================
00012D0A                            
00012D0A                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00012D0A 5528 0025                  		subq.b	#2,$25(a0)
00012D0E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00012D14 317C 0000 0010             		move.w	#0,$10(a0)
00012D1A 117C 0000 001C             		move.b	#0,$1C(a0)
00012D20 4E75                       		rts	
00012D22                            ; ===========================================================================
00012D22                            Ani_obj50:
00012D22                            	include "_anim\obj50.asm"
00012D22                            ; ---------------------------------------------------------------------------
00012D22                            ; Animation script - Yadrin enemy
00012D22                            ; ---------------------------------------------------------------------------
00012D22 0000                       		dc.w byte_F920-Ani_obj50
00012D24 0000                       		dc.w byte_F924-Ani_obj50
00012D26 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00012D2A 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00012D34                            		even
00012D34                            		even
00012D34                            
00012D34                            ; ---------------------------------------------------------------------------
00012D34                            ; Sprite mappings - Yadrin enemy (SYZ)
00012D34                            ; ---------------------------------------------------------------------------
00012D34                            Map_obj50:
00012D34                            	include "_maps\obj50.asm"
00012D34                            ; ---------------------------------------------------------------------------
00012D34                            ; Sprite mappings - Yadrin enemy (SYZ)
00012D34                            ; ---------------------------------------------------------------------------
00012D34 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00012D38 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00012D3C 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00012D40 05                         byte_F93A:	dc.b 5
00012D41 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00012D46 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00012D4B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00012D50 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00012D55 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00012D5A 05                         byte_F954:	dc.b 5
00012D5B F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00012D60 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00012D65 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00012D6A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00012D6F 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00012D74 05                         byte_F96E:	dc.b 5
00012D75 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00012D7A 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00012D7F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00012D84 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00012D89 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00012D8E 05                         byte_F988:	dc.b 5
00012D8F F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00012D94 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00012D99 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00012D9E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00012DA3 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00012DA8 05                         byte_F9A2:	dc.b 5
00012DA9 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00012DAE FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00012DB3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00012DB8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00012DBD 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00012DC2 05                         byte_F9BC:	dc.b 5
00012DC3 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00012DC8 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00012DCD EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00012DD2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00012DD7 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00012DDC                            		even
00012DDC                            		even
00012DDC                            
00012DDC                            ; ---------------------------------------------------------------------------
00012DDC                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00012DDC                            ;
00012DDC                            ; variables:
00012DDC                            ; d1 = width
00012DDC                            ; d2 = height /	2 (when	jumping)
00012DDC                            ; d3 = height /	2 (when	walking)
00012DDC                            ; d4 = x-axis position
00012DDC                            ; ---------------------------------------------------------------------------
00012DDC                            
00012DDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DDC                            
00012DDC                            
00012DDC                            SolidObject:
00012DDC 4A28 0025                  		tst.b	$25(a0)
00012DE0 6700 0000                  		beq.w	loc_FAC8
00012DE4 3401                       		move.w	d1,d2
00012DE6 D442                       		add.w	d2,d2
00012DE8 43F8 D000                  		lea	($FFFFD000).w,a1
00012DEC 0829 0001 0022             		btst	#1,$22(a1)
00012DF2 6600                       		bne.s	loc_F9FE
00012DF4 3029 0008                  		move.w	8(a1),d0
00012DF8 9068 0008                  		sub.w	8(a0),d0
00012DFC D041                       		add.w	d1,d0
00012DFE 6B00                       		bmi.s	loc_F9FE
00012E00 B042                       		cmp.w	d2,d0
00012E02 6500                       		bcs.s	loc_FA12
00012E04                            
00012E04                            loc_F9FE:
00012E04 08A9 0003 0022             		bclr	#3,$22(a1)
00012E0A 08A8 0003 0022             		bclr	#3,$22(a0)
00012E10 4228 0025                  		clr.b	$25(a0)
00012E14 7800                       		moveq	#0,d4
00012E16 4E75                       		rts	
00012E18                            ; ===========================================================================
00012E18                            
00012E18                            loc_FA12:
00012E18 3404                       		move.w	d4,d2
00012E1A 4EB9 0000 AB4C             		jsr		MvSonicOnPtfm
00012E20 7800                       		moveq	#0,d4
00012E22 4E75                       		rts	
00012E24                            ; ===========================================================================
00012E24                            
00012E24                            SolidObject71:				; XREF: Obj71_Solid
00012E24 4A28 0025                  		tst.b	$25(a0)
00012E28 6700 0000                  		beq.w	loc_FAD0
00012E2C 3401                       		move.w	d1,d2
00012E2E D442                       		add.w	d2,d2
00012E30 43F8 D000                  		lea	($FFFFD000).w,a1
00012E34 0829 0001 0022             		btst	#1,$22(a1)
00012E3A 6600                       		bne.s	loc_FA44
00012E3C 3029 0008                  		move.w	8(a1),d0
00012E40 9068 0008                  		sub.w	8(a0),d0
00012E44 D041                       		add.w	d1,d0
00012E46 6B00                       		bmi.s	loc_FA44
00012E48 B042                       		cmp.w	d2,d0
00012E4A 6500                       		bcs.s	loc_FA58
00012E4C                            
00012E4C                            loc_FA44:
00012E4C 08A9 0003 0022             		bclr	#3,$22(a1)
00012E52 08A8 0003 0022             		bclr	#3,$22(a0)
00012E58 4228 0025                  		clr.b	$25(a0)
00012E5C 7800                       		moveq	#0,d4
00012E5E 4E75                       		rts	
00012E60                            ; ===========================================================================
00012E60                            
00012E60                            loc_FA58:
00012E60 3404                       		move.w	d4,d2
00012E62 4EB9 0000 AB4C             		jsr		MvSonicOnPtfm
00012E68 7800                       		moveq	#0,d4
00012E6A 4E75                       		rts	
00012E6C                            ; ===========================================================================
00012E6C                            
00012E6C                            SolidObject2F:				; XREF: Obj2F_Solid
00012E6C 43F8 D000                  		lea	($FFFFD000).w,a1
00012E70 4A28 0001                  		tst.b	1(a0)
00012E74 6A00 0000                  		bpl.w	loc_FB92
00012E78 3029 0008                  		move.w	8(a1),d0
00012E7C 9068 0008                  		sub.w	8(a0),d0
00012E80 D041                       		add.w	d1,d0
00012E82 6B00 0000                  		bmi.w	loc_FB92
00012E86 3601                       		move.w	d1,d3
00012E88 D643                       		add.w	d3,d3
00012E8A B043                       		cmp.w	d3,d0
00012E8C 6200 0000                  		bhi.w	loc_FB92
00012E90 3A00                       		move.w	d0,d5
00012E92 0828 0000 0001             		btst	#0,1(a0)
00012E98 6700                       		beq.s	loc_FA94
00012E9A 4645                       		not.w	d5
00012E9C DA43                       		add.w	d3,d5
00012E9E                            
00012E9E                            loc_FA94:
00012E9E E24D                       		lsr.w	#1,d5
00012EA0 7600                       		moveq	#0,d3
00012EA2 1632 5000                  		move.b	(a2,d5.w),d3
00012EA6 9612                       		sub.b	(a2),d3
00012EA8 3A28 000C                  		move.w	$C(a0),d5
00012EAC 9A43                       		sub.w	d3,d5
00012EAE 1629 0016                  		move.b	$16(a1),d3
00012EB2 4883                       		ext.w	d3
00012EB4 D443                       		add.w	d3,d2
00012EB6 3629 000C                  		move.w	$C(a1),d3
00012EBA 9645                       		sub.w	d5,d3
00012EBC 5843                       		addq.w	#4,d3
00012EBE D642                       		add.w	d2,d3
00012EC0 6B00 0000                  		bmi.w	loc_FB92
00012EC4 3802                       		move.w	d2,d4
00012EC6 D844                       		add.w	d4,d4
00012EC8 B644                       		cmp.w	d4,d3
00012ECA 6400 0000                  		bcc.w	loc_FB92
00012ECE 6000 0000                  		bra.w	loc_FB0E
00012ED2                            ; ===========================================================================
00012ED2                            
00012ED2                            loc_FAC8:
00012ED2 4A28 0001                  		tst.b	1(a0)
00012ED6 6A00 0000                  		bpl.w	loc_FB92
00012EDA                            
00012EDA                            loc_FAD0:
00012EDA 43F8 D000                  		lea	($FFFFD000).w,a1
00012EDE 3029 0008                  		move.w	8(a1),d0
00012EE2 9068 0008                  		sub.w	8(a0),d0
00012EE6 D041                       		add.w	d1,d0
00012EE8 6B00 0000                  		bmi.w	loc_FB92
00012EEC 3601                       		move.w	d1,d3
00012EEE D643                       		add.w	d3,d3
00012EF0 B043                       		cmp.w	d3,d0
00012EF2 6200 0000                  		bhi.w	loc_FB92
00012EF6 1629 0016                  		move.b	$16(a1),d3
00012EFA 4883                       		ext.w	d3
00012EFC D443                       		add.w	d3,d2
00012EFE 3629 000C                  		move.w	$C(a1),d3
00012F02 9668 000C                  		sub.w	$C(a0),d3
00012F06 5843                       		addq.w	#4,d3
00012F08 D642                       		add.w	d2,d3
00012F0A 6B00 0000                  		bmi.w	loc_FB92
00012F0E 3802                       		move.w	d2,d4
00012F10 D844                       		add.w	d4,d4
00012F12 B644                       		cmp.w	d4,d3
00012F14 6400 0000                  		bcc.w	loc_FB92
00012F18                            
00012F18                            loc_FB0E:
00012F18 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012F1C 6B00 0000                  		bmi.w	loc_FB92
00012F20 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00012F26 6400 0000                  		bcc.w	loc_FB92
00012F2A 4A78 FE08                  		tst.w	($FFFFFE08).w
00012F2E 6600 0000                  		bne.w	loc_FBAC
00012F32 3A00                       		move.w	d0,d5
00012F34 B240                       		cmp.w	d0,d1
00012F36 6400                       		bcc.s	loc_FB36
00012F38 D241                       		add.w	d1,d1
00012F3A 9041                       		sub.w	d1,d0
00012F3C 3A00                       		move.w	d0,d5
00012F3E 4445                       		neg.w	d5
00012F40                            
00012F40                            loc_FB36:
00012F40 3203                       		move.w	d3,d1
00012F42 B443                       		cmp.w	d3,d2
00012F44 6400                       		bcc.s	loc_FB44
00012F46 5943                       		subq.w	#4,d3
00012F48 9644                       		sub.w	d4,d3
00012F4A 3203                       		move.w	d3,d1
00012F4C 4441                       		neg.w	d1
00012F4E                            
00012F4E                            loc_FB44:	; @isbelow
00012F4E BA41                       		cmp.w	d1,d5
00012F50 6200 0000                  		bhi.w	loc_FBB0
00012F54 0C41 0004                  		cmpi.w	#4,d1
00012F58 6300                       		bls.s	loc_FB8C
00012F5A 4A40                       		tst.w	d0
00012F5C 6700                       		beq.s	loc_FB70
00012F5E 6B00                       		bmi.s	loc_FB5E
00012F60 4A69 0010                  		tst.w	$10(a1)
00012F64 6B00                       		bmi.s	loc_FB70
00012F66 6000                       		bra.s	loc_FB64	; bra.s solid_left
00012F68                            ; ===========================================================================
00012F68                            
00012F68                            loc_FB5E:
00012F68 4A69 0010                  		tst.w	$10(a1)
00012F6C 6A00                       		bpl.s	loc_FB70
00012F6E                            
00012F6E                            loc_FB64:
00012F6E 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00012F74 337C 0000 0010             		move.w	#0,$10(a1)
00012F7A                            
00012F7A                            loc_FB70:
00012F7A 9169 0008                  		sub.w	d0,8(a1)	; correct sonic's position
00012F7E 0829 0001 0022             		btst	#1,$22(a1)	; is sonic in the air
00012F84 6600                       		bne.s	loc_FB8C
00012F86 08E9 0005 0022             		bset	#5,$22(a1)
00012F8C 08E8 0005 0022             		bset	#5,$22(a0)
00012F92 7801                       		moveq	#1,d4	; return side collision
00012F94 4E75                       		rts	
00012F96                            ; ===========================================================================
00012F96                            
00012F96                            loc_FB8C:
00012F96 2F08                       		move.l	a0,-(sp)
00012F98 2049                       		movea.l	a1,a0
00012F9A 0C38 0003 FFF6             		cmpi.b	#$03, ($FFFFFFF6).w ; if player flag set?
00012FA0 6600                       		bne.s	@nowalljump
00012FA2 6100 0000                  		bsr.w	WallJump
00012FA6                            
00012FA6                            @nowalljump:
00012FA6 205F                       		movea.l	(sp)+,a0
00012FA8                            
00012FA8                            Solid_SideAir2:
00012FA8 6100                       		bsr.s	loc_FBA0	
00012FAA 7801                       		moveq	#1,d4		; return side collision
00012FAC 4E75                       		rts	
00012FAE                            ; ===========================================================================
00012FAE                            
00012FAE                            loc_FB92:
00012FAE 0828 0005 0022             		btst	#5,$22(a0)
00012FB4 6700                       		beq.s	loc_FBAC
00012FB6 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
00012FBC 6700                       		beq.s	loc_FBA0
00012FBE 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00012FC4 6700                       		beq.s	loc_FBA0
00012FC6 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
00012FCC 6700                       		beq.s	loc_FBA0
00012FCE 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00012FD4                            
00012FD4                            loc_FBA0:
00012FD4 08A8 0005 0022             		bclr	#5,$22(a0)
00012FDA 08A9 0005 0022             		bclr	#5,$22(a1)
00012FE0                            
00012FE0                            loc_FBAC:
00012FE0 7800                       		moveq	#0,d4
00012FE2 4E75                       		rts	
00012FE4                            ; ===========================================================================
00012FE4                            
00012FE4                            loc_FBB0:
00012FE4 4A43                       		tst.w	d3
00012FE6 6B00                       		bmi.s	loc_FBBC
00012FE8 0C43 0010                  		cmpi.w	#$10,d3
00012FEC 6500                       		bcs.s	loc_FBEE
00012FEE 60BE                       		bra.s	loc_FB92
00012FF0                            ; ===========================================================================
00012FF0                            
00012FF0                            loc_FBBC:
00012FF0 4A69 0012                  		tst.w	$12(a1)
00012FF4 6700                       		beq.s	loc_FBD6
00012FF6 6A00                       		bpl.s	loc_FBD2
00012FF8 4A43                       		tst.w	d3
00012FFA 6A00                       		bpl.s	loc_FBD2
00012FFC 9769 000C                  		sub.w	d3,$C(a1)
00013000 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00013006                            
00013006                            loc_FBD2:
00013006 78FF                       		moveq	#-1,d4
00013008 4E75                       		rts	
0001300A                            ; ===========================================================================
0001300A                            
0001300A                            loc_FBD6:
0001300A 0829 0001 0022             		btst	#1,$22(a1)
00013010 66F4                       		bne.s	loc_FBD2
00013012 2F08                       		move.l	a0,-(sp)
00013014 2049                       		movea.l	a1,a0
00013016 4EB9 0000 0000             		jsr	KillSonic
0001301C 205F                       		movea.l	(sp)+,a0
0001301E 78FF                       		moveq	#-1,d4
00013020 4E75                       		rts	
00013022                            ; ===========================================================================
00013022                            
00013022                            loc_FBEE:
00013022 5943                       		subq.w	#4,d3
00013024 7200                       		moveq	#0,d1
00013026 1228 0019                  		move.b	$19(a0),d1
0001302A 3401                       		move.w	d1,d2
0001302C D442                       		add.w	d2,d2
0001302E D269 0008                  		add.w	8(a1),d1
00013032 9268 0008                  		sub.w	8(a0),d1
00013036 6B00                       		bmi.s	loc_FC28
00013038 B242                       		cmp.w	d2,d1
0001303A 6400                       		bcc.s	loc_FC28
0001303C 4A69 0012                  		tst.w	$12(a1)
00013040 6B00                       		bmi.s	loc_FC28
00013042 9769 000C                  		sub.w	d3,$C(a1)
00013046 5369 000C                  		subq.w	#1,$C(a1)
0001304A 6100                       		bsr.s	sub_FC2C
0001304C 117C 0002 0025             		move.b	#2,$25(a0)
00013052 08E8 0003 0022             		bset	#3,$22(a0)
00013058 78FF                       		moveq	#-1,d4
0001305A 4E75                       		rts	
0001305C                            ; ===========================================================================
0001305C                            
0001305C                            loc_FC28:
0001305C 7800                       		moveq	#0,d4
0001305E 4E75                       		rts	
00013060                            ; End of function SolidObject
00013060                            
00013060                            
00013060                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013060                            
00013060                            
00013060                            sub_FC2C:				; XREF: SolidObject
00013060 0829 0003 0022             		btst	#3,$22(a1)
00013066 6700                       		beq.s	loc_FC4E
00013068 7000                       		moveq	#0,d0
0001306A 1029 003D                  		move.b	$3D(a1),d0
0001306E ED48                       		lsl.w	#6,d0
00013070 0680 00FF D000             		addi.l	#$FFD000,d0
00013076 2440                       		movea.l	d0,a2
00013078 08AA 0003 0022             		bclr	#3,$22(a2)
0001307E 422A 0025                  		clr.b	$25(a2)
00013082                            
00013082                            loc_FC4E:
00013082 3008                       		move.w	a0,d0
00013084 0440 D000                  		subi.w	#-$3000,d0
00013088 EC48                       		lsr.w	#6,d0
0001308A 0240 007F                  		andi.w	#$7F,d0
0001308E 1340 003D                  		move.b	d0,$3D(a1)
00013092 137C 0000 0026             		move.b	#0,$26(a1)
00013098 337C 0000 0012             		move.w	#0,$12(a1)
0001309E 3369 0010 0014             		move.w	$10(a1),$14(a1)
000130A4 0829 0001 0022             		btst	#1,$22(a1)
000130AA 6700                       		beq.s	loc_FC84
000130AC 2F08                       		move.l	a0,-(sp)
000130AE 2049                       		movea.l	a1,a0
000130B0 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000130B6 205F                       		movea.l	(sp)+,a0
000130B8                            
000130B8                            loc_FC84:
000130B8 08E9 0003 0022             		bset	#3,$22(a1)
000130BE 08E8 0003 0022             		bset	#3,$22(a0)
000130C4 4E75                       		rts	
000130C6                            ; End of function sub_FC2C
000130C6                            
000130C6                            ; ===========================================================================
000130C6                            ; ---------------------------------------------------------------------------
000130C6                            ; Object 51 - smashable	green block (MZ)
000130C6                            ; ---------------------------------------------------------------------------
000130C6                            
000130C6                            Obj51:					; XREF: Obj_Index
000130C6 7000                       		moveq	#0,d0
000130C8 1028 0024                  		move.b	$24(a0),d0
000130CC 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000130D0 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000130D4 6000 F9DE                  		bra.w	MarkObjGone
000130D8                            ; ===========================================================================
000130D8 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000130DA 0000                       		dc.w Obj51_Solid-Obj51_Index
000130DC 0000                       		dc.w Obj51_Display-Obj51_Index
000130DE                            ; ===========================================================================
000130DE                            
000130DE                            Obj51_Main:				; XREF: Obj51_Index
000130DE 5428 0024                  		addq.b	#2,$24(a0)
000130E2 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000130EA 317C 42B8 0002             		move.w	#$42B8,2(a0)
000130F0 117C 0004 0001             		move.b	#4,1(a0)
000130F6 117C 0010 0019             		move.b	#$10,$19(a0)
000130FC 117C 0004 0018             		move.b	#4,$18(a0)
00013102 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00013108                            
00013108                            Obj51_Solid:				; XREF: Obj51_Index
00013108 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001310E 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00013114 323C 001B                  		move.w	#$1B,d1
00013118 343C 0010                  		move.w	#$10,d2
0001311C 363C 0011                  		move.w	#$11,d3
00013120 3828 0008                  		move.w	8(a0),d4
00013124 6100 FCB6                  		bsr.w	SolidObject
00013128 0828 0003 0022             		btst	#3,$22(a0)
0001312E 6600                       		bne.s	Obj51_Smash
00013130                            
00013130                            locret_FCFC:
00013130 4E75                       		rts	
00013132                            ; ===========================================================================
00013132                            
00013132                            Obj51_Smash:				; XREF: Obj51_Solid
00013132 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00013138 66F6                       		bne.s	locret_FCFC	; if not, branch
0001313A 6100                       		bsr.s	SmashingRocks
0001313C 0C28 0024 0032             		cmpi.b	#$24,$32(a0)
00013142 66EC                       		bne.s	locret_FCFC	; if not, branch
00013144                            SmashingRocks:
00013144 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001314A 08E9 0002 0022             		bset	#2,$22(a1)
00013150 137C 000E 0016             		move.b	#$E,$16(a1)
00013156 137C 0007 0017             		move.b	#7,$17(a1)
0001315C 137C 0002 001C             		move.b	#2,$1C(a1)
00013162 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00013168 08E9 0001 0022             		bset	#1,$22(a1)
0001316E 08A9 0003 0022             		bclr	#3,$22(a1)
00013174 137C 0002 0024             		move.b	#2,$24(a1)
0001317A 08A8 0003 0022             		bclr	#3,$22(a0)
00013180 4228 0025                  		clr.b	$25(a0)
00013184 117C 0001 001A             		move.b	#1,$1A(a0)
0001318A 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00013190 7203                       		moveq	#3,d1		; set number of	fragments to 4
00013192 343C 0038                  		move.w	#$38,d2
00013196 6100 D442                  		bsr.w	SmashObject
0001319A 6100 DCD6                  		bsr.w	SingleObjLoad
0001319E 6600                       		bne.s	Obj51_Display
000131A0                            ;		move.b	#$29,0(a1)	; load points object
000131A0 3368 0008 0008             		move.w	8(a0),8(a1)
000131A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000131AC 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000131B0 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000131B4 0C42 0006                  		cmpi.w	#6,d2
000131B8 6500                       		bcs.s	Obj51_Bonus
000131BA 7406                       		moveq	#6,d2
000131BC                            
000131BC                            Obj51_Bonus:
000131BC 7000                       		moveq	#0,d0
000131BE 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000131C2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000131C8 6500                       		bcs.s	loc_FD98	; if not, branch
000131CA 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000131CE 740A                       		moveq	#10,d2
000131D0                            
000131D0                            loc_FD98:
000131D0 4EB9 0000 0000             		jsr	AddPoints
000131D6 E24A                       		lsr.w	#1,d2
000131D8 1342 001A                  		move.b	d2,$1A(a1)
000131DC                            
000131DC                            Obj51_Display:				; XREF: Obj51_Index
000131DC 6100 D7E4                  		bsr.w	SpeedToPos
000131E0 0668 0038 0012             		addi.w	#$38,$12(a0)
000131E6 6100 D7F4                  		bsr.w	DisplaySprite
000131EA 4A28 0001                  		tst.b	1(a0)
000131EE 6A00 D828                  		bpl.w	DeleteObject
000131F2 4E75                       		rts	
000131F4                            ; ===========================================================================
000131F4 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000131F8 FF00 FF00                  		dc.w $FF00, $FF00
000131FC 0200 FE00                  		dc.w $200, $FE00
00013200 0100 FF00                  		dc.w $100, $FF00
00013204                            
00013204 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001320C                            ; ---------------------------------------------------------------------------
0001320C                            ; Sprite mappings - smashable green block (MZ)
0001320C                            ; ---------------------------------------------------------------------------
0001320C                            Map_obj51:
0001320C                            	include "_maps\obj51.asm"
0001320C                            ; ---------------------------------------------------------------------------
0001320C                            ; Sprite mappings - smashable green block (MZ)
0001320C                            ; ---------------------------------------------------------------------------
0001320C 0000                       		dc.w byte_FDD8-Map_obj51
0001320E 0000                       		dc.w byte_FDE3-Map_obj51
00013210 02                         byte_FDD8:	dc.b 2
00013211 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00013216 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001321B 04                         byte_FDE3:	dc.b 4
0001321C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00013221 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00013226 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001322B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00013230                            		even
00013230                            		even
00013230                            
00013230                            ; ===========================================================================
00013230                            ; ---------------------------------------------------------------------------
00013230                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00013230                            ; ---------------------------------------------------------------------------
00013230                            
00013230                            Obj52:					; XREF: Obj_Index
00013230 7000                       		moveq	#0,d0
00013232 1028 0024                  		move.b	$24(a0),d0
00013236 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001323A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001323E                            ; ===========================================================================
0001323E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00013240 0000                       		dc.w Obj52_Platform-Obj52_Index
00013242 0000                       		dc.w Obj52_StandOn-Obj52_Index
00013244                            
00013244 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00013246 2001                       		dc.b $20, 1
00013248 2002                       		dc.b $20, 2
0001324A 4003                       		dc.b $40, 3
0001324C 3004                       		dc.b $30, 4
0001324E                            ; ===========================================================================
0001324E                            
0001324E                            Obj52_Main:				; XREF: Obj52_Index
0001324E 5428 0024                  		addq.b	#2,$24(a0)
00013252 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001325A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00013260 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013266 6600                       		bne.s	loc_FE44
00013268 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00013270 317C 43BC 0002             		move.w	#$43BC,2(a0)
00013276 117C 0007 0016             		move.b	#7,$16(a0)
0001327C                            
0001327C                            loc_FE44:
0001327C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00013282 6600                       		bne.s	loc_FE60
00013284 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001328A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00013290 6700                       		beq.s	loc_FE60	; if yes, branch
00013292 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00013298                            
00013298                            loc_FE60:
00013298 117C 0004 0001             		move.b	#4,1(a0)
0001329E 7000                       		moveq	#0,d0
000132A0 1028 0028                  		move.b	$28(a0),d0
000132A4 E648                       		lsr.w	#3,d0
000132A6 0240 001E                  		andi.w	#$1E,d0
000132AA 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000132AE 115A 0019                  		move.b	(a2)+,$19(a0)
000132B2 115A 001A                  		move.b	(a2)+,$1A(a0)
000132B6 117C 0004 0018             		move.b	#4,$18(a0)
000132BC 3168 0008 0030             		move.w	8(a0),$30(a0)
000132C2 3168 000C 0032             		move.w	$C(a0),$32(a0)
000132C8 0228 000F 0028             		andi.b	#$F,$28(a0)
000132CE                            
000132CE                            Obj52_Platform:				; XREF: Obj52_Index
000132CE 6100 0000                  		bsr.w	Obj52_Move
000132D2 7200                       		moveq	#0,d1
000132D4 1228 0019                  		move.b	$19(a0),d1
000132D8 4EB9 0000 A47A             		jsr	(PlatformObject).l
000132DE 6000                       		bra.s	Obj52_ChkDel
000132E0                            ; ===========================================================================
000132E0                            
000132E0                            Obj52_StandOn:				; XREF: Obj52_Index
000132E0 7200                       		moveq	#0,d1
000132E2 1228 0019                  		move.b	$19(a0),d1
000132E6 4EB9 0000 A5EE             		jsr	(ExitPlatform).l
000132EC 3F28 0008                  		move.w	8(a0),-(sp)
000132F0 6100 0000                  		bsr.w	Obj52_Move
000132F4 341F                       		move.w	(sp)+,d2
000132F6 4EB9 0000 AB58             		jsr	(MvSonicOnPtfm2).l
000132FC                            
000132FC                            Obj52_ChkDel:				; XREF: Obj52_Platform
000132FC 3028 0030                  		move.w	$30(a0),d0
00013300 0240 FF80                  		andi.w	#$FF80,d0
00013304 3238 F700                  		move.w	($FFFFF700).w,d1
00013308 0441 0080                  		subi.w	#$80,d1
0001330C 0241 FF80                  		andi.w	#$FF80,d1
00013310 9041                       		sub.w	d1,d0
00013312 0C40 0280                  		cmpi.w	#$280,d0
00013316 6200 D700                  		bhi.w	DeleteObject
0001331A 6000 D6C0                  		bra.w	DisplaySprite
0001331E                            ; ===========================================================================
0001331E                            
0001331E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001331E 7000                       		moveq	#0,d0
00013320 1028 0028                  		move.b	$28(a0),d0
00013324 0240 000F                  		andi.w	#$F,d0
00013328 D040                       		add.w	d0,d0
0001332A 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001332E 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00013332                            ; ===========================================================================
00013332 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00013336 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001333A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001333E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00013342 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00013346 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00013348                            ; ===========================================================================
00013348                            
00013348                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00013348 4E75                       		rts	
0001334A                            ; ===========================================================================
0001334A                            
0001334A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001334A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001334E 323C 0060                  		move.w	#$60,d1
00013352 0828 0000 0022             		btst	#0,$22(a0)
00013358 6700                       		beq.s	loc_FF26
0001335A 4440                       		neg.w	d0
0001335C D041                       		add.w	d1,d0
0001335E                            
0001335E                            loc_FF26:
0001335E 3228 0030                  		move.w	$30(a0),d1
00013362 9240                       		sub.w	d0,d1
00013364 3141 0008                  		move.w	d1,8(a0)
00013368 4E75                       		rts	
0001336A                            ; ===========================================================================
0001336A                            
0001336A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001336A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00013370 6600                       		bne.s	Obj52_02_Wait
00013372 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013376                            
00013376                            Obj52_02_Wait:
00013376 4E75                       		rts	
00013378                            ; ===========================================================================
00013378                            
00013378                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00013378 7600                       		moveq	#0,d3
0001337A 1628 0019                  		move.b	$19(a0),d3
0001337E 6100 0000                  		bsr.w	ObjHitWallRight
00013382 4A41                       		tst.w	d1		; has the platform hit a wall?
00013384 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00013386 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001338A 3168 0008 0030             		move.w	8(a0),$30(a0)
00013390 4E75                       		rts	
00013392                            ; ===========================================================================
00013392                            
00013392                            Obj52_03_End:
00013392 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00013396 4E75                       		rts	
00013398                            ; ===========================================================================
00013398                            
00013398                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00013398 7600                       		moveq	#0,d3
0001339A 1628 0019                  		move.b	$19(a0),d3
0001339E 6100 0000                  		bsr.w	ObjHitWallRight
000133A2 4A41                       		tst.w	d1		; has the platform hit a wall?
000133A4 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000133A6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000133AA 3168 0008 0030             		move.w	8(a0),$30(a0)
000133B0 4E75                       		rts	
000133B2                            ; ===========================================================================
000133B2                            
000133B2                            Obj52_05_End:
000133B2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000133B6 4E75                       		rts	
000133B8                            ; ===========================================================================
000133B8                            
000133B8                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000133B8 6100 D608                  		bsr.w	SpeedToPos
000133BC 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000133C2 6100 0000                  		bsr.w	ObjHitFloor
000133C6 4A41                       		tst.w	d1		; has platform hit the floor?
000133C8 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000133CC D368 000C                  		add.w	d1,$C(a0)
000133D0 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000133D4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000133D8                            
000133D8                            locret_FFA0:
000133D8 4E75                       		rts	
000133DA                            ; ===========================================================================
000133DA                            
000133DA                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000133DA 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000133DE 6700                       		beq.s	Obj52_07_ChkDel
000133E0 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000133E4                            
000133E4                            Obj52_07_ChkDel:
000133E4 588F                       		addq.l	#4,sp
000133E6 3028 0030                  		move.w	$30(a0),d0
000133EA 0240 FF80                  		andi.w	#$FF80,d0
000133EE 3238 F700                  		move.w	($FFFFF700).w,d1
000133F2 0441 0080                  		subi.w	#$80,d1
000133F6 0241 FF80                  		andi.w	#$FF80,d1
000133FA 9041                       		sub.w	d1,d0
000133FC 0C40 0280                  		cmpi.w	#$280,d0
00013400 6200 D616                  		bhi.w	DeleteObject
00013404 4E75                       		rts	
00013406                            ; ===========================================================================
00013406                            
00013406                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00013406 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001340A 323C 0080                  		move.w	#$80,d1
0001340E 0828 0000 0022             		btst	#0,$22(a0)
00013414 6700                       		beq.s	loc_FFE2
00013416 4440                       		neg.w	d0
00013418 D041                       		add.w	d1,d0
0001341A                            
0001341A                            loc_FFE2:
0001341A 3228 0032                  		move.w	$32(a0),d1
0001341E 9240                       		sub.w	d0,d1
00013420 3141 000C                  		move.w	d1,$C(a0)
00013424 4E75                       		rts	
00013426                            ; ===========================================================================
00013426                            
00013426                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00013426 7600                       		moveq	#0,d3
00013428 1628 0019                  		move.b	$19(a0),d3
0001342C D643                       		add.w	d3,d3
0001342E 7208                       		moveq	#8,d1
00013430 0828 0000 0022             		btst	#0,$22(a0)
00013436 6700                       		beq.s	loc_10004
00013438 4441                       		neg.w	d1
0001343A 4443                       		neg.w	d3
0001343C                            
0001343C                            loc_10004:
0001343C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00013440 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00013442 3028 0008                  		move.w	8(a0),d0
00013446 9068 0030                  		sub.w	$30(a0),d0
0001344A B043                       		cmp.w	d3,d0
0001344C 6700                       		beq.s	Obj52_0A_Wait
0001344E D368 0008                  		add.w	d1,8(a0)	; move platform
00013452 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00013458 4E75                       		rts	
0001345A                            ; ===========================================================================
0001345A                            
0001345A                            Obj52_0A_Wait:
0001345A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001345E 6600                       		bne.s	locret_1002E	; if time remains, branch
00013460 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00013466                            
00013466                            locret_1002E:
00013466 4E75                       		rts	
00013468                            ; ===========================================================================
00013468                            
00013468                            Obj52_0A_Back:
00013468 3028 0008                  		move.w	8(a0),d0
0001346C 9068 0030                  		sub.w	$30(a0),d0
00013470 6700                       		beq.s	Obj52_0A_Reset
00013472 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00013476 4E75                       		rts	
00013478                            ; ===========================================================================
00013478                            
00013478                            Obj52_0A_Reset:
00013478 4268 0036                  		clr.w	$36(a0)
0001347C 5328 0028                  		subq.b	#1,$28(a0)
00013480 4E75                       		rts	
00013482                            ; ===========================================================================
00013482                            ; ---------------------------------------------------------------------------
00013482                            ; Sprite mappings - moving blocks (MZ, SBZ)
00013482                            ; ---------------------------------------------------------------------------
00013482                            Map_obj52:
00013482                            	include "_maps\obj52mz.asm"
00013482                            ; ---------------------------------------------------------------------------
00013482                            ; Sprite mappings - moving blocks (MZ, SBZ)
00013482                            ; ---------------------------------------------------------------------------
00013482 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00013486 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001348A 0000                       		dc.w byte_1008F-Map_obj52
0001348C 01                         byte_10054:	dc.b 1
0001348D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00013492 02                         byte_1005A:	dc.b 2
00013493 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00013498 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001349D 04                         byte_10065:	dc.b 4
0001349E F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000134A3 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000134A8 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000134AD 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000134B2 04                         byte_1007A:	dc.b 4
000134B3 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000134B8 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000134BD F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000134C2 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000134C7 03                         byte_1008F:	dc.b 3
000134C8 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000134CD F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000134D2 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000134D8 00                         		even
000134D8 00                         		even
000134D8                            
000134D8                            ; ---------------------------------------------------------------------------
000134D8                            ; Sprite mappings - moving block (LZ)
000134D8                            ; ---------------------------------------------------------------------------
000134D8                            Map_obj52a:
000134D8                            	include "_maps\obj52lz.asm"
000134D8                            ; ---------------------------------------------------------------------------
000134D8                            ; Sprite mappings - moving block (LZ)
000134D8                            ; ---------------------------------------------------------------------------
000134D8 0000                       		dc.w byte_100A2-Map_obj52a
000134DA 01                         byte_100A2:	dc.b 1
000134DB F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000134E0                            		even
000134E0                            		even
000134E0                            
000134E0                            ; ===========================================================================
000134E0                            ; ---------------------------------------------------------------------------
000134E0                            ; Object 55 - Basaran enemy (MZ)
000134E0                            ; ---------------------------------------------------------------------------
000134E0                            
000134E0                            Obj55:					; XREF: Obj_Index
000134E0 7000                       		moveq	#0,d0
000134E2 1028 0024                  		move.b	$24(a0),d0
000134E6 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000134EA 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000134EE                            ; ===========================================================================
000134EE 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000134F0 0000                       		dc.w Obj55_Action-Obj55_Index
000134F2                            ; ===========================================================================
000134F2                            
000134F2                            Obj55_Main:				; XREF: Obj55_Index
000134F2 5428 0024                  		addq.b	#2,$24(a0)
000134F6 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000134FE 317C 84B8 0002             		move.w	#$84B8,2(a0)
00013504 117C 0004 0001             		move.b	#4,1(a0)
0001350A 117C 000C 0016             		move.b	#$C,$16(a0)
00013510 117C 0002 0018             		move.b	#2,$18(a0)
00013516 117C 000B 0020             		move.b	#$B,$20(a0)
0001351C 117C 0010 0019             		move.b	#$10,$19(a0)
00013522                            
00013522                            Obj55_Action:				; XREF: Obj55_Index
00013522 7000                       		moveq	#0,d0
00013524 1028 0025                  		move.b	$25(a0),d0
00013528 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001352C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00013530 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00013536 6100 A2A2                  		bsr.w	AnimateSprite
0001353A 6000 F578                  		bra.w	MarkObjGone
0001353E                            ; ===========================================================================
0001353E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00013540 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00013542 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00013544 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00013546                            ; ===========================================================================
00013546                            
00013546                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00013546 343C 0080                  		move.w	#$80,d2
0001354A 6100 0000                  		bsr.w	Obj55_ChkSonic
0001354E 6400                       		bcc.s	Obj55_NoDrop
00013550 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013554 3140 0036                  		move.w	d0,$36(a0)
00013558 9068 000C                  		sub.w	$C(a0),d0
0001355C 6500                       		bcs.s	Obj55_NoDrop
0001355E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00013562 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00013564 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00013568 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001356A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001356E D007                       		add.b	d7,d0
00013570 0200 0007                  		andi.b	#7,d0
00013574 6600                       		bne.s	Obj55_NoDrop
00013576 117C 0001 001C             		move.b	#1,$1C(a0)
0001357C 5428 0025                  		addq.b	#2,$25(a0)
00013580                            
00013580                            Obj55_NoDrop:
00013580 4E75                       		rts	
00013582                            ; ===========================================================================
00013582                            
00013582                            Obj55_DropFly:				; XREF: Obj55_Index2
00013582 6100 D43E                  		bsr.w	SpeedToPos
00013586 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0001358C 343C 0080                  		move.w	#$80,d2
00013590 6100 0000                  		bsr.w	Obj55_ChkSonic
00013594 3028 0036                  		move.w	$36(a0),d0
00013598 9068 000C                  		sub.w	$C(a0),d0
0001359C 6500                       		bcs.s	Obj55_ChkDel
0001359E 0C40 0010                  		cmpi.w	#$10,d0
000135A2 6400                       		bcc.s	locret_10180
000135A4 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000135A8 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000135AE 117C 0002 001C             		move.b	#2,$1C(a0)
000135B4 5428 0025                  		addq.b	#2,$25(a0)
000135B8                            
000135B8                            locret_10180:
000135B8 4E75                       		rts	
000135BA                            ; ===========================================================================
000135BA                            
000135BA                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000135BA 4A28 0001                  		tst.b	1(a0)
000135BE 6A00 D458                  		bpl.w	DeleteObject
000135C2 4E75                       		rts	
000135C4                            ; ===========================================================================
000135C4                            
000135C4                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000135C4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000135C8 0200 000F                  		andi.b	#$F,d0
000135CC 6600                       		bne.s	loc_101A0
000135CE 303C 00C0                  		move.w	#$C0,d0
000135D2 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play flapping sound
000135D8                            
000135D8                            loc_101A0:
000135D8 6100 D3E8                  		bsr.w	SpeedToPos
000135DC 3038 D008                  		move.w	($FFFFD008).w,d0
000135E0 9068 0008                  		sub.w	8(a0),d0
000135E4 6400                       		bcc.s	loc_101B0
000135E6 4440                       		neg.w	d0
000135E8                            
000135E8                            loc_101B0:
000135E8 0C40 0080                  		cmpi.w	#$80,d0
000135EC 6500                       		bcs.s	locret_101C6
000135EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000135F2 D007                       		add.b	d7,d0
000135F4 0200 0007                  		andi.b	#7,d0
000135F8 6600                       		bne.s	locret_101C6
000135FA 5428 0025                  		addq.b	#2,$25(a0)
000135FE                            
000135FE                            locret_101C6:
000135FE 4E75                       		rts	
00013600                            ; ===========================================================================
00013600                            
00013600                            Obj55_FlyUp:				; XREF: Obj55_Index2
00013600 6100 D3C0                  		bsr.w	SpeedToPos
00013604 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001360A 6100 0000                  		bsr.w	ObjHitCeiling
0001360E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00013610 6A00                       		bpl.s	locret_101F4	; if not, branch
00013612 9368 000C                  		sub.w	d1,$C(a0)
00013616 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001361C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00013620 4268 0012                  		clr.w	$12(a0)
00013624 4228 001C                  		clr.b	$1C(a0)
00013628 4228 0025                  		clr.b	$25(a0)
0001362C                            
0001362C                            locret_101F4:
0001362C 4E75                       		rts	
0001362E                            ; ===========================================================================
0001362E                            
0001362E                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001362E 323C 0100                  		move.w	#$100,d1
00013632 08E8 0000 0022             		bset	#0,$22(a0)
00013638 3038 D008                  		move.w	($FFFFD008).w,d0
0001363C 9068 0008                  		sub.w	8(a0),d0
00013640 6400                       		bcc.s	loc_10214
00013642 4440                       		neg.w	d0
00013644 4441                       		neg.w	d1
00013646 08A8 0000 0022             		bclr	#0,$22(a0)
0001364C                            
0001364C                            loc_10214:
0001364C B042                       		cmp.w	d2,d0
0001364E 4E75                       		rts	
00013650                            ; ===========================================================================
00013650 6100 D370                  		bsr.w	SpeedToPos
00013654 6100 D386                  		bsr.w	DisplaySprite
00013658 4A28 0001                  		tst.b	1(a0)
0001365C 6A00 D3BA                  		bpl.w	DeleteObject
00013660 4E75                       		rts	
00013662                            ; ===========================================================================
00013662                            Ani_obj55:
00013662                            	include "_anim\obj55.asm"
00013662                            ; ---------------------------------------------------------------------------
00013662                            ; Animation script - Basaran enemy
00013662                            ; ---------------------------------------------------------------------------
00013662 0000                       		dc.w byte_10230-Ani_obj55
00013664 0000                       		dc.w byte_10234-Ani_obj55
00013666 0000                       		dc.w byte_10238-Ani_obj55
00013668 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001366C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00013670 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00013676                            		even
00013676                            		even
00013676                            
00013676                            ; ---------------------------------------------------------------------------
00013676                            ; Sprite mappings - Basaran enemy (MZ)
00013676                            ; ---------------------------------------------------------------------------
00013676                            Map_obj55:
00013676                            	include "_maps\obj55.asm"
00013676                            ; ---------------------------------------------------------------------------
00013676                            ; Sprite mappings - Basaran enemy (MZ)
00013676                            ; ---------------------------------------------------------------------------
00013676 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001367A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
0001367E 01                         byte_10246:	dc.b 1
0001367F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00013684 03                         byte_1024C:	dc.b 3
00013685 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001368A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
0001368F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00013694 04                         byte_1025C:	dc.b 4
00013695 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
0001369A 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
0001369F 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000136A4 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000136A9 04                         byte_10271:	dc.b 4
000136AA F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000136AF 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000136B4 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000136B9 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000136BE                            		even
000136BE                            		even
000136BE                            
000136BE                            ; ===========================================================================
000136BE                            ; ---------------------------------------------------------------------------
000136BE                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000136BE                            ; ---------------------------------------------------------------------------
000136BE                            
000136BE                            Obj56:					; XREF: Obj_Index
000136BE 7000                       		moveq	#0,d0
000136C0 1028 0024                  		move.b	$24(a0),d0
000136C4 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000136C8 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000136CC                            ; ===========================================================================
000136CC 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000136CE 0000                       		dc.w Obj56_Action-Obj56_Index
000136D0                            
000136D0 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000136D2 2020                       		dc.b  $20, $20
000136D4 1020                       		dc.b  $10, $20
000136D6 201A                       		dc.b  $20, $1A
000136D8 1027                       		dc.b  $10, $27
000136DA 1010                       		dc.b  $10, $10
000136DC 0820                       		dc.b	8, $20
000136DE 4010                       		dc.b  $40, $10
000136E0                            ; ===========================================================================
000136E0                            
000136E0                            Obj56_Main:				; XREF: Obj56_Index
000136E0 5428 0024                  		addq.b	#2,$24(a0)
000136E4 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000136EC 317C 4000 0002             		move.w	#$4000,2(a0)
000136F2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000136F8 6600                       		bne.s	loc_102C8
000136FA 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00013700                            
00013700                            loc_102C8:
00013700 117C 0004 0001             		move.b	#4,1(a0)
00013706 117C 0003 0018             		move.b	#3,$18(a0)
0001370C 7000                       		moveq	#0,d0
0001370E 1028 0028                  		move.b	$28(a0),d0
00013712 E648                       		lsr.w	#3,d0
00013714 0240 000E                  		andi.w	#$E,d0
00013718 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001371C 115A 0019                  		move.b	(a2)+,$19(a0)
00013720 1152 0016                  		move.b	(a2),$16(a0)
00013724 E248                       		lsr.w	#1,d0
00013726 1140 001A                  		move.b	d0,$1A(a0)
0001372A 3168 0008 0034             		move.w	8(a0),$34(a0)
00013730 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013736 7000                       		moveq	#0,d0
00013738 1012                       		move.b	(a2),d0
0001373A D040                       		add.w	d0,d0
0001373C 3140 003A                  		move.w	d0,$3A(a0)
00013740 7000                       		moveq	#0,d0
00013742 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013748 6700                       		beq.s	loc_10332
0001374A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
0001374E 0240 000F                  		andi.w	#$F,d0
00013752 5140                       		subq.w	#8,d0
00013754 6500                       		bcs.s	loc_10332
00013756 E548                       		lsl.w	#2,d0
00013758 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001375C 45F2 0000                  		lea	(a2,d0.w),a2
00013760 4A52                       		tst.w	(a2)
00013762 6A00                       		bpl.s	loc_10332
00013764 0868 0000 0022             		bchg	#0,$22(a0)
0001376A                            
0001376A                            loc_10332:
0001376A 1028 0028                  		move.b	$28(a0),d0
0001376E 6A00                       		bpl.s	Obj56_Action
00013770 0200 000F                  		andi.b	#$F,d0
00013774 1140 003C                  		move.b	d0,$3C(a0)
00013778 117C 0005 0028             		move.b	#5,$28(a0)
0001377E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00013784 6600                       		bne.s	Obj56_ChkGone
00013786 117C 000C 0028             		move.b	#$C,$28(a0)
0001378C 317C 0080 003A             		move.w	#$80,$3A(a0)
00013792                            
00013792                            Obj56_ChkGone:
00013792 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013796 7000                       		moveq	#0,d0
00013798 1028 0023                  		move.b	$23(a0),d0
0001379C 6700                       		beq.s	Obj56_Action
0001379E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000137A4 0832 0000 0002             		btst	#0,2(a2,d0.w)
000137AA 6700                       		beq.s	Obj56_Action
000137AC 5228 0028                  		addq.b	#1,$28(a0)
000137B0 4268 003A                  		clr.w	$3A(a0)
000137B4                            
000137B4                            Obj56_Action:				; XREF: Obj56_Index
000137B4 3F28 0008                  		move.w	8(a0),-(sp)
000137B8 7000                       		moveq	#0,d0
000137BA 1028 0028                  		move.b	$28(a0),d0	; get object type
000137BE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000137C2 D040                       		add.w	d0,d0
000137C4 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000137C8 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000137CC 381F                       		move.w	(sp)+,d4
000137CE 4A28 0001                  		tst.b	1(a0)
000137D2 6A00                       		bpl.s	Obj56_ChkDel
000137D4 7200                       		moveq	#0,d1
000137D6 1228 0019                  		move.b	$19(a0),d1
000137DA 0641 000B                  		addi.w	#$B,d1
000137DE 7400                       		moveq	#0,d2
000137E0 1428 0016                  		move.b	$16(a0),d2
000137E4 3602                       		move.w	d2,d3
000137E6 5243                       		addq.w	#1,d3
000137E8 6100 F5F2                  		bsr.w	SolidObject
000137EC                            
000137EC                            Obj56_ChkDel:
000137EC 3028 0034                  		move.w	$34(a0),d0
000137F0 0240 FF80                  		andi.w	#$FF80,d0
000137F4 3238 F700                  		move.w	($FFFFF700).w,d1
000137F8 0441 0080                  		subi.w	#$80,d1
000137FC 0241 FF80                  		andi.w	#$FF80,d1
00013800 9041                       		sub.w	d1,d0
00013802 0C40 0280                  		cmpi.w	#$280,d0
00013806 6200 D210                  		bhi.w	DeleteObject
0001380A 6000 D1D0                  		bra.w	DisplaySprite
0001380E                            ; ===========================================================================
0001380E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00013812 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00013816 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001381A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001381E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00013822 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00013826 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001382A                            ; ===========================================================================
0001382A                            
0001382A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001382A 4E75                       		rts	
0001382C                            ; ===========================================================================
0001382C                            
0001382C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001382C 323C 0040                  		move.w	#$40,d1
00013830 7000                       		moveq	#0,d0
00013832 1038 FE68                  		move.b	($FFFFFE68).w,d0
00013836 6000                       		bra.s	Obj56_Move_LR
00013838                            ; ===========================================================================
00013838                            
00013838                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00013838 323C 0080                  		move.w	#$80,d1
0001383C 7000                       		moveq	#0,d0
0001383E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00013842                            
00013842                            Obj56_Move_LR:
00013842 0828 0000 0022             		btst	#0,$22(a0)
00013848 6700                       		beq.s	loc_10416
0001384A 4440                       		neg.w	d0
0001384C D041                       		add.w	d1,d0
0001384E                            
0001384E                            loc_10416:
0001384E 3228 0034                  		move.w	$34(a0),d1
00013852 9240                       		sub.w	d0,d1
00013854 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00013858 4E75                       		rts	
0001385A                            ; ===========================================================================
0001385A                            
0001385A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001385A 323C 0040                  		move.w	#$40,d1
0001385E 7000                       		moveq	#0,d0
00013860 1038 FE68                  		move.b	($FFFFFE68).w,d0
00013864 6000                       		bra.s	Obj56_Move_UD
00013866                            ; ===========================================================================
00013866                            
00013866                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00013866 323C 0080                  		move.w	#$80,d1
0001386A 7000                       		moveq	#0,d0
0001386C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00013870                            
00013870                            Obj56_Move_UD:
00013870 0828 0000 0022             		btst	#0,$22(a0)
00013876 6700                       		beq.s	loc_10444
00013878 4440                       		neg.w	d0
0001387A D041                       		add.w	d1,d0
0001387C                            
0001387C                            loc_10444:
0001387C 3228 0030                  		move.w	$30(a0),d1
00013880 9240                       		sub.w	d0,d1
00013882 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00013886 4E75                       		rts	
00013888                            ; ===========================================================================
00013888                            
00013888                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00013888 4A28 0038                  		tst.b	$38(a0)
0001388C 6600                       		bne.s	loc_104A4
0001388E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00013894 6600                       		bne.s	loc_1047A	; if not, branch
00013896 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
0001389C 6600                       		bne.s	loc_1047A
0001389E 4238 F7C9                  		clr.b	($FFFFF7C9).w
000138A2 3038 D008                  		move.w	($FFFFD008).w,d0
000138A6 B068 0008                  		cmp.w	8(a0),d0
000138AA 6400                       		bcc.s	loc_1047A
000138AC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000138B2                            
000138B2                            loc_1047A:
000138B2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000138B6 7000                       		moveq	#0,d0
000138B8 1028 003C                  		move.b	$3C(a0),d0
000138BC 0832 0000 0000             		btst	#0,(a2,d0.w)
000138C2 6700                       		beq.s	loc_104AE
000138C4 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000138CA 6600                       		bne.s	loc_1049E	; if not, branch
000138CC 0C00 0003                  		cmpi.b	#3,d0
000138D0 6600                       		bne.s	loc_1049E
000138D2 4238 F7C9                  		clr.b	($FFFFF7C9).w
000138D6                            
000138D6                            loc_1049E:
000138D6 117C 0001 0038             		move.b	#1,$38(a0)
000138DC                            
000138DC                            loc_104A4:
000138DC 4A68 003A                  		tst.w	$3A(a0)
000138E0 6700                       		beq.s	loc_104C8
000138E2 5568 003A                  		subq.w	#2,$3A(a0)
000138E6                            
000138E6                            loc_104AE:
000138E6 3028 003A                  		move.w	$3A(a0),d0
000138EA 0828 0000 0022             		btst	#0,$22(a0)
000138F0 6700                       		beq.s	loc_104BC
000138F2 4440                       		neg.w	d0
000138F4                            
000138F4                            loc_104BC:
000138F4 3228 0030                  		move.w	$30(a0),d1
000138F8 D240                       		add.w	d0,d1
000138FA 3141 000C                  		move.w	d1,$C(a0)
000138FE 4E75                       		rts	
00013900                            ; ===========================================================================
00013900                            
00013900                            loc_104C8:
00013900 5228 0028                  		addq.b	#1,$28(a0)
00013904 4228 0038                  		clr.b	$38(a0)
00013908 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001390C 7000                       		moveq	#0,d0
0001390E 1028 0023                  		move.b	$23(a0),d0
00013912 67D2                       		beq.s	loc_104AE
00013914 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001391A 60CA                       		bra.s	loc_104AE
0001391C                            ; ===========================================================================
0001391C                            
0001391C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001391C 4A28 0038                  		tst.b	$38(a0)
00013920 6600                       		bne.s	loc_10500
00013922 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00013926 7000                       		moveq	#0,d0
00013928 1028 003C                  		move.b	$3C(a0),d0
0001392C 4A32 0000                  		tst.b	(a2,d0.w)
00013930 6A00                       		bpl.s	loc_10512
00013932 117C 0001 0038             		move.b	#1,$38(a0)
00013938                            
00013938                            loc_10500:
00013938 7000                       		moveq	#0,d0
0001393A 1028 0016                  		move.b	$16(a0),d0
0001393E D040                       		add.w	d0,d0
00013940 B068 003A                  		cmp.w	$3A(a0),d0
00013944 6700                       		beq.s	loc_1052C
00013946 5468 003A                  		addq.w	#2,$3A(a0)
0001394A                            
0001394A                            loc_10512:
0001394A 3028 003A                  		move.w	$3A(a0),d0
0001394E 0828 0000 0022             		btst	#0,$22(a0)
00013954 6700                       		beq.s	loc_10520
00013956 4440                       		neg.w	d0
00013958                            
00013958                            loc_10520:
00013958 3228 0030                  		move.w	$30(a0),d1
0001395C D240                       		add.w	d0,d1
0001395E 3141 000C                  		move.w	d1,$C(a0)
00013962 4E75                       		rts	
00013964                            ; ===========================================================================
00013964                            
00013964                            loc_1052C:
00013964 5328 0028                  		subq.b	#1,$28(a0)
00013968 4228 0038                  		clr.b	$38(a0)
0001396C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013970 7000                       		moveq	#0,d0
00013972 1028 0023                  		move.b	$23(a0),d0
00013976 67D2                       		beq.s	loc_10512
00013978 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001397E 60CA                       		bra.s	loc_10512
00013980                            ; ===========================================================================
00013980                            
00013980                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00013980 4A28 0038                  		tst.b	$38(a0)
00013984 6600                       		bne.s	loc_1055E
00013986 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001398A 6700                       		beq.s	locret_10578
0001398C 117C 0001 0038             		move.b	#1,$38(a0)
00013992 4268 003A                  		clr.w	$3A(a0)
00013996                            
00013996                            loc_1055E:
00013996 5268 0008                  		addq.w	#1,8(a0)
0001399A 3168 0008 0034             		move.w	8(a0),$34(a0)
000139A0 5268 003A                  		addq.w	#1,$3A(a0)
000139A4 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000139AA 6600                       		bne.s	locret_10578
000139AC 4228 0028                  		clr.b	$28(a0)
000139B0                            
000139B0                            locret_10578:
000139B0 4E75                       		rts	
000139B2                            ; ===========================================================================
000139B2                            
000139B2                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000139B2 4A28 0038                  		tst.b	$38(a0)
000139B6 6600                       		bne.s	loc_10598
000139B8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000139BC 7000                       		moveq	#0,d0
000139BE 1028 003C                  		move.b	$3C(a0),d0
000139C2 0832 0000 0000             		btst	#0,(a2,d0.w)
000139C8 6700                       		beq.s	loc_105A2
000139CA 117C 0001 0038             		move.b	#1,$38(a0)
000139D0                            
000139D0                            loc_10598:
000139D0 4A68 003A                  		tst.w	$3A(a0)
000139D4 6700                       		beq.s	loc_105C0
000139D6 5568 003A                  		subq.w	#2,$3A(a0)
000139DA                            
000139DA                            loc_105A2:
000139DA 3028 003A                  		move.w	$3A(a0),d0
000139DE 0828 0000 0022             		btst	#0,$22(a0)
000139E4 6700                       		beq.s	loc_105B4
000139E6 4440                       		neg.w	d0
000139E8 0640 0080                  		addi.w	#$80,d0
000139EC                            
000139EC                            loc_105B4:
000139EC 3228 0034                  		move.w	$34(a0),d1
000139F0 D240                       		add.w	d0,d1
000139F2 3141 0008                  		move.w	d1,8(a0)
000139F6 4E75                       		rts	
000139F8                            ; ===========================================================================
000139F8                            
000139F8                            loc_105C0:
000139F8 5228 0028                  		addq.b	#1,$28(a0)
000139FC 4228 0038                  		clr.b	$38(a0)
00013A00 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013A04 7000                       		moveq	#0,d0
00013A06 1028 0023                  		move.b	$23(a0),d0
00013A0A 67CE                       		beq.s	loc_105A2
00013A0C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00013A12 60C6                       		bra.s	loc_105A2
00013A14                            ; ===========================================================================
00013A14                            
00013A14                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00013A14 4A28 0038                  		tst.b	$38(a0)
00013A18 6600                       		bne.s	loc_105F8
00013A1A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00013A1E 7000                       		moveq	#0,d0
00013A20 1028 003C                  		move.b	$3C(a0),d0
00013A24 4A32 0000                  		tst.b	(a2,d0.w)
00013A28 6A00                       		bpl.s	loc_10606
00013A2A 117C 0001 0038             		move.b	#1,$38(a0)
00013A30                            
00013A30                            loc_105F8:
00013A30 303C 0080                  		move.w	#$80,d0
00013A34 B068 003A                  		cmp.w	$3A(a0),d0
00013A38 6700                       		beq.s	loc_10624
00013A3A 5468 003A                  		addq.w	#2,$3A(a0)
00013A3E                            
00013A3E                            loc_10606:
00013A3E 3028 003A                  		move.w	$3A(a0),d0
00013A42 0828 0000 0022             		btst	#0,$22(a0)
00013A48 6700                       		beq.s	loc_10618
00013A4A 4440                       		neg.w	d0
00013A4C 0640 0080                  		addi.w	#$80,d0
00013A50                            
00013A50                            loc_10618:
00013A50 3228 0034                  		move.w	$34(a0),d1
00013A54 D240                       		add.w	d0,d1
00013A56 3141 0008                  		move.w	d1,8(a0)
00013A5A 4E75                       		rts	
00013A5C                            ; ===========================================================================
00013A5C                            
00013A5C                            loc_10624:
00013A5C 5328 0028                  		subq.b	#1,$28(a0)
00013A60 4228 0038                  		clr.b	$38(a0)
00013A64 45F8 FC00                  		lea	($FFFFFC00).w,a2
00013A68 7000                       		moveq	#0,d0
00013A6A 1028 0023                  		move.b	$23(a0),d0
00013A6E 67CE                       		beq.s	loc_10606
00013A70 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00013A76 60C6                       		bra.s	loc_10606
00013A78                            ; ===========================================================================
00013A78                            
00013A78                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00013A78 323C 0010                  		move.w	#$10,d1
00013A7C 7000                       		moveq	#0,d0
00013A7E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00013A82 E248                       		lsr.w	#1,d0
00013A84 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00013A88 6000                       		bra.s	Obj56_Move_Sqr
00013A8A                            ; ===========================================================================
00013A8A                            
00013A8A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00013A8A 323C 0030                  		move.w	#$30,d1
00013A8E 7000                       		moveq	#0,d0
00013A90 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00013A94 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00013A98 6000                       		bra.s	Obj56_Move_Sqr
00013A9A                            ; ===========================================================================
00013A9A                            
00013A9A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00013A9A 323C 0050                  		move.w	#$50,d1
00013A9E 7000                       		moveq	#0,d0
00013AA0 1038 FE90                  		move.b	($FFFFFE90).w,d0
00013AA4 3638 FE92                  		move.w	($FFFFFE92).w,d3
00013AA8 6000                       		bra.s	Obj56_Move_Sqr
00013AAA                            ; ===========================================================================
00013AAA                            
00013AAA                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00013AAA 323C 0070                  		move.w	#$70,d1
00013AAE 7000                       		moveq	#0,d0
00013AB0 1038 FE94                  		move.b	($FFFFFE94).w,d0
00013AB4 3638 FE96                  		move.w	($FFFFFE96).w,d3
00013AB8                            
00013AB8                            Obj56_Move_Sqr:
00013AB8 4A43                       		tst.w	d3
00013ABA 6600                       		bne.s	loc_1068E
00013ABC 5228 0022                  		addq.b	#1,$22(a0)
00013AC0 0228 0003 0022             		andi.b	#3,$22(a0)
00013AC6                            
00013AC6                            loc_1068E:
00013AC6 1428 0022                  		move.b	$22(a0),d2
00013ACA 0202 0003                  		andi.b	#3,d2
00013ACE 6600                       		bne.s	loc_106AE
00013AD0 9041                       		sub.w	d1,d0
00013AD2 D068 0034                  		add.w	$34(a0),d0
00013AD6 3140 0008                  		move.w	d0,8(a0)
00013ADA 4441                       		neg.w	d1
00013ADC D268 0030                  		add.w	$30(a0),d1
00013AE0 3141 000C                  		move.w	d1,$C(a0)
00013AE4 4E75                       		rts	
00013AE6                            ; ===========================================================================
00013AE6                            
00013AE6                            loc_106AE:
00013AE6 5302                       		subq.b	#1,d2
00013AE8 6600                       		bne.s	loc_106CC
00013AEA 5341                       		subq.w	#1,d1
00013AEC 9041                       		sub.w	d1,d0
00013AEE 4440                       		neg.w	d0
00013AF0 D068 0030                  		add.w	$30(a0),d0
00013AF4 3140 000C                  		move.w	d0,$C(a0)
00013AF8 5241                       		addq.w	#1,d1
00013AFA D268 0034                  		add.w	$34(a0),d1
00013AFE 3141 0008                  		move.w	d1,8(a0)
00013B02 4E75                       		rts	
00013B04                            ; ===========================================================================
00013B04                            
00013B04                            loc_106CC:
00013B04 5302                       		subq.b	#1,d2
00013B06 6600                       		bne.s	loc_106EA
00013B08 5341                       		subq.w	#1,d1
00013B0A 9041                       		sub.w	d1,d0
00013B0C 4440                       		neg.w	d0
00013B0E D068 0034                  		add.w	$34(a0),d0
00013B12 3140 0008                  		move.w	d0,8(a0)
00013B16 5241                       		addq.w	#1,d1
00013B18 D268 0030                  		add.w	$30(a0),d1
00013B1C 3141 000C                  		move.w	d1,$C(a0)
00013B20 4E75                       		rts	
00013B22                            ; ===========================================================================
00013B22                            
00013B22                            loc_106EA:
00013B22 9041                       		sub.w	d1,d0
00013B24 D068 0030                  		add.w	$30(a0),d0
00013B28 3140 000C                  		move.w	d0,$C(a0)
00013B2C 4441                       		neg.w	d1
00013B2E D268 0034                  		add.w	$34(a0),d1
00013B32 3141 0008                  		move.w	d1,8(a0)
00013B36 4E75                       		rts	
00013B38                            ; ===========================================================================
00013B38                            ; ---------------------------------------------------------------------------
00013B38                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00013B38                            ; ---------------------------------------------------------------------------
00013B38                            Map_obj56:
00013B38                            	include "_maps\obj56.asm"
00013B38                            ; ---------------------------------------------------------------------------
00013B38                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00013B38                            ; ---------------------------------------------------------------------------
00013B38 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00013B3C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00013B40 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00013B44 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00013B48 01                         byte_10710:	dc.b 1
00013B49 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00013B4E 04                         byte_10716:	dc.b 4
00013B4F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00013B54 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00013B59 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00013B5E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00013B63 02                         byte_1072B:	dc.b 2
00013B64 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00013B69 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00013B6E 04                         byte_10736:	dc.b 4
00013B6F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00013B74 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00013B79 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00013B7E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00013B83 03                         byte_1074B:	dc.b 3
00013B84 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00013B89 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00013B8E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00013B93 01                         byte_1075B:	dc.b 1
00013B94 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013B99 02                         byte_10761:	dc.b 2
00013B9A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013B9F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00013BA4 04                         byte_1076C:	dc.b 4
00013BA5 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00013BAA F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00013BAF F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00013BB4 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00013BBA 00                         		even
00013BBA 00                         		even
00013BBA                            
00013BBA                            ; ===========================================================================
00013BBA                            ; ---------------------------------------------------------------------------
00013BBA                            ; Object 57 - spiked balls (SYZ, LZ)
00013BBA                            ; ---------------------------------------------------------------------------
00013BBA                            
00013BBA                            Obj57:					; XREF: Obj_Index
00013BBA 7000                       		moveq	#0,d0
00013BBC 1028 0024                  		move.b	$24(a0),d0
00013BC0 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00013BC4 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00013BC8                            ; ===========================================================================
00013BC8 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00013BCA 0000                       		dc.w Obj57_Move-Obj57_Index
00013BCC 0000                       		dc.w Obj57_Display-Obj57_Index
00013BCE                            ; ===========================================================================
00013BCE                            
00013BCE                            Obj57_Main:				; XREF: Obj57_Index
00013BCE 5428 0024                  		addq.b	#2,$24(a0)
00013BD2 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00013BDA 317C 03BA 0002             		move.w	#$3BA,2(a0)
00013BE0 117C 0004 0001             		move.b	#4,1(a0)
00013BE6 117C 0004 0018             		move.b	#4,$18(a0)
00013BEC 117C 0008 0019             		move.b	#8,$19(a0)
00013BF2 3168 0008 003A             		move.w	8(a0),$3A(a0)
00013BF8 3168 000C 0038             		move.w	$C(a0),$38(a0)
00013BFE 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00013C04 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013C0A 6600                       		bne.s	loc_107E8
00013C0C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00013C12 317C 0310 0002             		move.w	#$310,2(a0)
00013C18 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00013C20                            
00013C20                            loc_107E8:
00013C20 1228 0028                  		move.b	$28(a0),d1	; get object type
00013C24 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00013C28 4881                       		ext.w	d1
00013C2A E741                       		asl.w	#3,d1		; multiply by 8
00013C2C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00013C30 1028 0022                  		move.b	$22(a0),d0
00013C34 E418                       		ror.b	#2,d0
00013C36 0200 00C0                  		andi.b	#-$40,d0
00013C3A 1140 0026                  		move.b	d0,$26(a0)
00013C3E 45E8 0029                  		lea	$29(a0),a2
00013C42 1228 0028                  		move.b	$28(a0),d1	; get object type
00013C46 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00013C4A 14FC 0000                  		move.b	#0,(a2)+
00013C4E 3601                       		move.w	d1,d3
00013C50 E94B                       		lsl.w	#4,d3
00013C52 1143 003C                  		move.b	d3,$3C(a0)
00013C56 5341                       		subq.w	#1,d1		; set chain length (type-1)
00013C58 6500                       		bcs.s	loc_10894
00013C5A 0828 0003 0028             		btst	#3,$28(a0)
00013C60 6700                       		beq.s	Obj57_MakeChain
00013C62 5341                       		subq.w	#1,d1
00013C64 6500                       		bcs.s	loc_10894
00013C66                            
00013C66                            Obj57_MakeChain:
00013C66 6100 D20A                  		bsr.w	SingleObjLoad
00013C6A 6600                       		bne.s	loc_10894
00013C6C 5228 0029                  		addq.b	#1,$29(a0)
00013C70 3A09                       		move.w	a1,d5
00013C72 0445 D000                  		subi.w	#-$3000,d5
00013C76 EC4D                       		lsr.w	#6,d5
00013C78 0245 007F                  		andi.w	#$7F,d5
00013C7C 14C5                       		move.b	d5,(a2)+
00013C7E 137C 0004 0024             		move.b	#4,$24(a1)
00013C84 1290                       		move.b	0(a0),0(a1)
00013C86 2368 0004 0004             		move.l	4(a0),4(a1)
00013C8C 3368 0002 0002             		move.w	2(a0),2(a1)
00013C92 1368 0001 0001             		move.b	1(a0),1(a1)
00013C98 1368 0018 0018             		move.b	$18(a0),$18(a1)
00013C9E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00013CA4 1368 0020 0020             		move.b	$20(a0),$20(a1)
00013CAA 0403 0010                  		subi.b	#$10,d3
00013CAE 1343 003C                  		move.b	d3,$3C(a1)
00013CB2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00013CB8 6600                       		bne.s	loc_10890
00013CBA 4A03                       		tst.b	d3
00013CBC 6600                       		bne.s	loc_10890
00013CBE 137C 0002 001A             		move.b	#2,$1A(a1)
00013CC4                            
00013CC4                            loc_10890:
00013CC4 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00013CC8                            
00013CC8                            loc_10894:
00013CC8 3A08                       		move.w	a0,d5
00013CCA 0445 D000                  		subi.w	#-$3000,d5
00013CCE EC4D                       		lsr.w	#6,d5
00013CD0 0245 007F                  		andi.w	#$7F,d5
00013CD4 14C5                       		move.b	d5,(a2)+
00013CD6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00013CDC 6600                       		bne.s	Obj57_Move
00013CDE 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00013CE4 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00013CEA                            
00013CEA                            Obj57_Move:				; XREF: Obj57_Index
00013CEA 6100 0000                  		bsr.w	Obj57_MoveSub
00013CEE 6000 0000                  		bra.w	Obj57_ChkDel
00013CF2                            ; ===========================================================================
00013CF2                            
00013CF2                            Obj57_MoveSub:				; XREF: Obj57_Move
00013CF2 3028 003E                  		move.w	$3E(a0),d0
00013CF6 D168 0026                  		add.w	d0,$26(a0)
00013CFA 1028 0026                  		move.b	$26(a0),d0
00013CFE 4EB9 0000 3736             		jsr	(CalcSine).l
00013D04 3428 0038                  		move.w	$38(a0),d2
00013D08 3628 003A                  		move.w	$3A(a0),d3
00013D0C 45E8 0029                  		lea	$29(a0),a2
00013D10 7C00                       		moveq	#0,d6
00013D12 1C1A                       		move.b	(a2)+,d6
00013D14                            
00013D14                            Obj57_MoveLoop:
00013D14 7800                       		moveq	#0,d4
00013D16 181A                       		move.b	(a2)+,d4
00013D18 ED4C                       		lsl.w	#6,d4
00013D1A 0684 00FF D000             		addi.l	#$FFD000,d4
00013D20 2244                       		movea.l	d4,a1
00013D22 7800                       		moveq	#0,d4
00013D24 1829 003C                  		move.b	$3C(a1),d4
00013D28 2A04                       		move.l	d4,d5
00013D2A C9C0                       		muls.w	d0,d4
00013D2C E084                       		asr.l	#8,d4
00013D2E CBC1                       		muls.w	d1,d5
00013D30 E085                       		asr.l	#8,d5
00013D32 D842                       		add.w	d2,d4
00013D34 DA43                       		add.w	d3,d5
00013D36 3344 000C                  		move.w	d4,$C(a1)
00013D3A 3345 0008                  		move.w	d5,8(a1)
00013D3E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00013D42 4E75                       		rts	
00013D44                            ; ===========================================================================
00013D44                            
00013D44                            Obj57_ChkDel:				; XREF: Obj57_Move
00013D44 3028 003A                  		move.w	$3A(a0),d0
00013D48 0240 FF80                  		andi.w	#$FF80,d0
00013D4C 3238 F700                  		move.w	($FFFFF700).w,d1
00013D50 0441 0080                  		subi.w	#$80,d1
00013D54 0241 FF80                  		andi.w	#$FF80,d1
00013D58 9041                       		sub.w	d1,d0
00013D5A 0C40 0280                  		cmpi.w	#$280,d0
00013D5E 6200 0000                  		bhi.w	Obj57_Delete
00013D62 6000 CC78                  		bra.w	DisplaySprite
00013D66                            ; ===========================================================================
00013D66                            
00013D66                            Obj57_Delete:				; XREF: Obj57_ChkDel
00013D66 7400                       		moveq	#0,d2
00013D68 45E8 0029                  		lea	$29(a0),a2
00013D6C 141A                       		move.b	(a2)+,d2
00013D6E                            
00013D6E                            Obj57_DelLoop:
00013D6E 7000                       		moveq	#0,d0
00013D70 101A                       		move.b	(a2)+,d0
00013D72 ED48                       		lsl.w	#6,d0
00013D74 0680 00FF D000             		addi.l	#$FFD000,d0
00013D7A 2240                       		movea.l	d0,a1
00013D7C 6100 CC9C                  		bsr.w	DeleteObject2
00013D80 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00013D84                            
00013D84 4E75                       		rts	
00013D86                            ; ===========================================================================
00013D86                            
00013D86                            Obj57_Display:				; XREF: Obj57_Index
00013D86 6000 CC54                  		bra.w	DisplaySprite
00013D8A                            ; ===========================================================================
00013D8A                            ; ---------------------------------------------------------------------------
00013D8A                            ; Sprite mappings - chain of spiked balls (SYZ)
00013D8A                            ; ---------------------------------------------------------------------------
00013D8A                            Map_obj57:
00013D8A                            	include "_maps\obj57syz.asm"
00013D8A                            ; ---------------------------------------------------------------------------
00013D8A                            ; Sprite mappings - chain of spiked balls (SYZ)
00013D8A                            ; ---------------------------------------------------------------------------
00013D8A 0000                       		dc.w byte_10958-Map_obj57
00013D8C 01                         byte_10958:	dc.b 1
00013D8D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00013D92                            		even
00013D92                            		even
00013D92                            
00013D92                            ; ---------------------------------------------------------------------------
00013D92                            ; Sprite mappings - spiked ball	on a chain (LZ)
00013D92                            ; ---------------------------------------------------------------------------
00013D92                            Map_obj57a:
00013D92                            	include "_maps\obj57lz.asm"
00013D92                            ; ---------------------------------------------------------------------------
00013D92                            ; Sprite mappings - spiked ball	on a chain (LZ)
00013D92                            ; ---------------------------------------------------------------------------
00013D92 0000                       		dc.w byte_10964-Map_obj57a
00013D94 0000                       		dc.w byte_1096A-Map_obj57a
00013D96 0000                       		dc.w byte_10970-Map_obj57a
00013D98 01                         byte_10964:	dc.b 1
00013D99 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00013D9E 01                         byte_1096A:	dc.b 1
00013D9F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00013DA4 01                         byte_10970:	dc.b 1
00013DA5 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00013DAA                            		even
00013DAA                            		even
00013DAA                            
00013DAA                            ; ===========================================================================
00013DAA                            ; ---------------------------------------------------------------------------
00013DAA                            ; Object 58 - giant spiked balls (SYZ)
00013DAA                            ; ---------------------------------------------------------------------------
00013DAA                            
00013DAA                            Obj58:					; XREF: Obj_Index
00013DAA 7000                       		moveq	#0,d0
00013DAC 1028 0024                  		move.b	$24(a0),d0
00013DB0 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00013DB4 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00013DB8                            ; ===========================================================================
00013DB8 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00013DBA 0000                       		dc.w Obj58_Move-Obj58_Index
00013DBC                            ; ===========================================================================
00013DBC                            
00013DBC                            Obj58_Main:				; XREF: Obj58_Index
00013DBC 5428 0024                  		addq.b	#2,$24(a0)
00013DC0 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00013DC8 317C 0396 0002             		move.w	#$396,2(a0)
00013DCE 117C 0004 0001             		move.b	#4,1(a0)
00013DD4 117C 0004 0018             		move.b	#4,$18(a0)
00013DDA 117C 0018 0019             		move.b	#$18,$19(a0)
00013DE0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00013DE6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00013DEC 117C 0086 0020             		move.b	#$86,$20(a0)
00013DF2 1228 0028                  		move.b	$28(a0),d1	; get object type
00013DF6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00013DFA 4881                       		ext.w	d1
00013DFC E741                       		asl.w	#3,d1		; multiply by 8
00013DFE 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00013E02 1028 0022                  		move.b	$22(a0),d0
00013E06 E418                       		ror.b	#2,d0
00013E08 0200 00C0                  		andi.b	#$C0,d0
00013E0C 1140 0026                  		move.b	d0,$26(a0)
00013E10 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00013E16                            
00013E16                            Obj58_Move:				; XREF: Obj58_Index
00013E16 7000                       		moveq	#0,d0
00013E18 1028 0028                  		move.b	$28(a0),d0	; get object type
00013E1C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00013E20 D040                       		add.w	d0,d0
00013E22 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00013E26 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00013E2A 3028 003A                  		move.w	$3A(a0),d0
00013E2E 0240 FF80                  		andi.w	#$FF80,d0
00013E32 3238 F700                  		move.w	($FFFFF700).w,d1
00013E36 0441 0080                  		subi.w	#$80,d1
00013E3A 0241 FF80                  		andi.w	#$FF80,d1
00013E3E 9041                       		sub.w	d1,d0
00013E40 0C40 0280                  		cmpi.w	#$280,d0
00013E44 6200 CBD2                  		bhi.w	DeleteObject
00013E48 6000 CB92                  		bra.w	DisplaySprite
00013E4C                            ; ===========================================================================
00013E4C 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00013E4E 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00013E50 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00013E52 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00013E54                            ; ===========================================================================
00013E54                            
00013E54                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00013E54 4E75                       		rts	
00013E56                            ; ===========================================================================
00013E56                            
00013E56                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00013E56 323C 0060                  		move.w	#$60,d1
00013E5A 7000                       		moveq	#0,d0
00013E5C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00013E60 0828 0000 0022             		btst	#0,$22(a0)
00013E66 6700                       		beq.s	loc_10A38
00013E68 4440                       		neg.w	d0
00013E6A D041                       		add.w	d1,d0
00013E6C                            
00013E6C                            loc_10A38:
00013E6C 3228 003A                  		move.w	$3A(a0),d1
00013E70 9240                       		sub.w	d0,d1
00013E72 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00013E76 4E75                       		rts	
00013E78                            ; ===========================================================================
00013E78                            
00013E78                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00013E78 323C 0060                  		move.w	#$60,d1
00013E7C 7000                       		moveq	#0,d0
00013E7E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00013E82 0828 0000 0022             		btst	#0,$22(a0)
00013E88 6700                       		beq.s	loc_10A5C
00013E8A 4440                       		neg.w	d0
00013E8C 0640 0080                  		addi.w	#$80,d0
00013E90                            
00013E90                            loc_10A5C:
00013E90 3228 0038                  		move.w	$38(a0),d1
00013E94 9240                       		sub.w	d0,d1
00013E96 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00013E9A 4E75                       		rts	
00013E9C                            ; ===========================================================================
00013E9C                            
00013E9C                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00013E9C 3028 003E                  		move.w	$3E(a0),d0
00013EA0 D168 0026                  		add.w	d0,$26(a0)
00013EA4 1028 0026                  		move.b	$26(a0),d0
00013EA8 4EB9 0000 3736             		jsr	(CalcSine).l
00013EAE 3428 0038                  		move.w	$38(a0),d2
00013EB2 3628 003A                  		move.w	$3A(a0),d3
00013EB6 7800                       		moveq	#0,d4
00013EB8 1828 003C                  		move.b	$3C(a0),d4
00013EBC 2A04                       		move.l	d4,d5
00013EBE C9C0                       		muls.w	d0,d4
00013EC0 E084                       		asr.l	#8,d4
00013EC2 CBC1                       		muls.w	d1,d5
00013EC4 E085                       		asr.l	#8,d5
00013EC6 D842                       		add.w	d2,d4
00013EC8 DA43                       		add.w	d3,d5
00013ECA 3144 000C                  		move.w	d4,$C(a0)
00013ECE 3145 0008                  		move.w	d5,8(a0)
00013ED2 4E75                       		rts	
00013ED4                            ; ===========================================================================
00013ED4                            ; ---------------------------------------------------------------------------
00013ED4                            ; Sprite mappings - SBZ	spiked ball on a chain
00013ED4                            ; ---------------------------------------------------------------------------
00013ED4                            Map_obj15b:
00013ED4                            	include "_maps\obj15sbz.asm"
00013ED4                            ; ---------------------------------------------------------------------------
00013ED4                            ; Sprite mappings - spiked ball on a chain (SBZ)
00013ED4                            ; ---------------------------------------------------------------------------
00013ED4 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00013ED8 0000                       		dc.w byte_10AC6-Map_obj15b
00013EDA 05                         byte_10AA6:	dc.b 5
00013EDB E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00013EE0 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00013EE5 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00013EEA F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00013EEF 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00013EF4 01                         byte_10AC0:	dc.b 1
00013EF5 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00013EFA 02                         byte_10AC6:	dc.b 2
00013EFB F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00013F00 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00013F06 00                         		even
00013F06 00                         		even
00013F06                            
00013F06                            ; ===========================================================================
00013F06                            ; ---------------------------------------------------------------------------
00013F06                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00013F06                            ; ---------------------------------------------------------------------------
00013F06                            
00013F06                            Obj59:					; XREF: Obj_Index
00013F06 7000                       		moveq	#0,d0
00013F08 1028 0024                  		move.b	$24(a0),d0
00013F0C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00013F10 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00013F14 3028 0032                  		move.w	$32(a0),d0
00013F18 0240 FF80                  		andi.w	#$FF80,d0
00013F1C 3238 F700                  		move.w	($FFFFF700).w,d1
00013F20 0441 0080                  		subi.w	#$80,d1
00013F24 0241 FF80                  		andi.w	#$FF80,d1
00013F28 9041                       		sub.w	d1,d0
00013F2A 0C40 0280                  		cmpi.w	#$280,d0
00013F2E 6200 CAE8                  		bhi.w	DeleteObject
00013F32 6000 CAA8                  		bra.w	DisplaySprite
00013F36                            ; ===========================================================================
00013F36 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00013F38 0000                       		dc.w Obj59_Platform-Obj59_Index
00013F3A 0000                       		dc.w Obj59_Action-Obj59_Index
00013F3C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00013F3E                            
00013F3E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00013F40                            
00013F40 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00013F42 2001                       		dc.b $20, 1
00013F44 3401                       		dc.b $34, 1
00013F46 1003                       		dc.b $10, 3
00013F48 2003                       		dc.b $20, 3
00013F4A 3403                       		dc.b $34, 3
00013F4C 1401                       		dc.b $14, 1
00013F4E 2401                       		dc.b $24, 1
00013F50 2C01                       		dc.b $2C, 1
00013F52 1403                       		dc.b $14, 3
00013F54 2403                       		dc.b $24, 3
00013F56 2C03                       		dc.b $2C, 3
00013F58 2005                       		dc.b $20, 5
00013F5A 2007                       		dc.b $20, 7
00013F5C 3009                       		dc.b $30, 9
00013F5E                            ; ===========================================================================
00013F5E                            
00013F5E                            Obj59_Main:				; XREF: Obj59_Index
00013F5E 5428 0024                  		addq.b	#2,$24(a0)
00013F62 7000                       		moveq	#0,d0
00013F64 1028 0028                  		move.b	$28(a0),d0
00013F68 6A00                       		bpl.s	Obj59_Main2
00013F6A 5828 0024                  		addq.b	#4,$24(a0)
00013F6E 0240 007F                  		andi.w	#$7F,d0
00013F72 C0FC 0006                  		mulu.w	#6,d0
00013F76 3140 003C                  		move.w	d0,$3C(a0)
00013F7A 3140 003E                  		move.w	d0,$3E(a0)
00013F7E 588F                       		addq.l	#4,sp
00013F80 4E75                       		rts	
00013F82                            ; ===========================================================================
00013F82                            
00013F82                            Obj59_Main2:
00013F82 E648                       		lsr.w	#3,d0
00013F84 0240 001E                  		andi.w	#$1E,d0
00013F88 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00013F8C 115A 0019                  		move.b	(a2)+,$19(a0)
00013F90 115A 001A                  		move.b	(a2)+,$1A(a0)
00013F94 7000                       		moveq	#0,d0
00013F96 1028 0028                  		move.b	$28(a0),d0
00013F9A D040                       		add.w	d0,d0
00013F9C 0240 001E                  		andi.w	#$1E,d0
00013FA0 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00013FA4 101A                       		move.b	(a2)+,d0
00013FA6 E548                       		lsl.w	#2,d0
00013FA8 3140 003C                  		move.w	d0,$3C(a0)
00013FAC 115A 0028                  		move.b	(a2)+,$28(a0)
00013FB0 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00013FB8 317C 4000 0002             		move.w	#$4000,2(a0)
00013FBE 117C 0004 0001             		move.b	#4,1(a0)
00013FC4 117C 0004 0018             		move.b	#4,$18(a0)
00013FCA 3168 0008 0032             		move.w	8(a0),$32(a0)
00013FD0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013FD6                            
00013FD6                            Obj59_Platform:				; XREF: Obj59_Index
00013FD6 7200                       		moveq	#0,d1
00013FD8 1228 0019                  		move.b	$19(a0),d1
00013FDC 4EB9 0000 A47A             		jsr	(PlatformObject).l
00013FE2 6000 0000                  		bra.w	Obj59_Types
00013FE6                            ; ===========================================================================
00013FE6                            
00013FE6                            Obj59_Action:				; XREF: Obj59_Index
00013FE6 7200                       		moveq	#0,d1
00013FE8 1228 0019                  		move.b	$19(a0),d1
00013FEC 4EB9 0000 A5EE             		jsr	(ExitPlatform).l
00013FF2 3F28 0008                  		move.w	8(a0),-(sp)
00013FF6 6100 0000                  		bsr.w	Obj59_Types
00013FFA 341F                       		move.w	(sp)+,d2
00013FFC 4A10                       		tst.b	0(a0)
00013FFE 6700                       		beq.s	locret_10BD4
00014000 4EF9 0000 AB58             		jmp	(MvSonicOnPtfm2).l
00014006                            ; ===========================================================================
00014006                            
00014006                            locret_10BD4:
00014006 4E75                       		rts	
00014008                            ; ===========================================================================
00014008                            
00014008                            Obj59_Types:
00014008 7000                       		moveq	#0,d0
0001400A 1028 0028                  		move.b	$28(a0),d0
0001400E 0240 000F                  		andi.w	#$F,d0
00014012 D040                       		add.w	d0,d0
00014014 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00014018 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001401C                            ; ===========================================================================
0001401C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00014020 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00014024 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00014028 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001402C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00014030                            ; ===========================================================================
00014030                            
00014030                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00014030 4E75                       		rts	
00014032                            ; ===========================================================================
00014032                            
00014032                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00014032 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00014038 6600                       		bne.s	locret_10C0C
0001403A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001403E                            
0001403E                            locret_10C0C:
0001403E 4E75                       		rts	
00014040                            ; ===========================================================================
00014040                            
00014040                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00014040 6100 0000                  		bsr.w	Obj59_Move
00014044 3028 0034                  		move.w	$34(a0),d0
00014048 4440                       		neg.w	d0
0001404A D068 0030                  		add.w	$30(a0),d0
0001404E 3140 000C                  		move.w	d0,$C(a0)
00014052 4E75                       		rts	
00014054                            ; ===========================================================================
00014054                            
00014054                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00014054 6100 0000                  		bsr.w	Obj59_Move
00014058 3028 0034                  		move.w	$34(a0),d0
0001405C D068 0030                  		add.w	$30(a0),d0
00014060 3140 000C                  		move.w	d0,$C(a0)
00014064 4E75                       		rts	
00014066                            ; ===========================================================================
00014066                            
00014066                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00014066 6100 0000                  		bsr.w	Obj59_Move
0001406A 3028 0034                  		move.w	$34(a0),d0
0001406E E240                       		asr.w	#1,d0
00014070 4440                       		neg.w	d0
00014072 D068 0030                  		add.w	$30(a0),d0
00014076 3140 000C                  		move.w	d0,$C(a0)
0001407A 3028 0034                  		move.w	$34(a0),d0
0001407E D068 0032                  		add.w	$32(a0),d0
00014082 3140 0008                  		move.w	d0,8(a0)
00014086 4E75                       		rts	
00014088                            ; ===========================================================================
00014088                            
00014088                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00014088 6100 0000                  		bsr.w	Obj59_Move
0001408C 3028 0034                  		move.w	$34(a0),d0
00014090 E240                       		asr.w	#1,d0
00014092 D068 0030                  		add.w	$30(a0),d0
00014096 3140 000C                  		move.w	d0,$C(a0)
0001409A 3028 0034                  		move.w	$34(a0),d0
0001409E 4440                       		neg.w	d0
000140A0 D068 0032                  		add.w	$32(a0),d0
000140A4 3140 0008                  		move.w	d0,8(a0)
000140A8 4E75                       		rts	
000140AA                            ; ===========================================================================
000140AA                            
000140AA                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000140AA 6100 0000                  		bsr.w	Obj59_Move
000140AE 3028 0034                  		move.w	$34(a0),d0
000140B2 4440                       		neg.w	d0
000140B4 D068 0030                  		add.w	$30(a0),d0
000140B8 3140 000C                  		move.w	d0,$C(a0)
000140BC 4A28 0028                  		tst.b	$28(a0)
000140C0 6700 0000                  		beq.w	loc_10C94
000140C4 4E75                       		rts	
000140C6                            ; ===========================================================================
000140C6                            
000140C6                            loc_10C94:
000140C6 0828 0003 0022             		btst	#3,$22(a0)
000140CC 6700                       		beq.s	Obj59_Delete
000140CE 08E9 0001 0022             		bset	#1,$22(a1)
000140D4 08A9 0003 0022             		bclr	#3,$22(a1)
000140DA 137C 0002 0024             		move.b	#2,$24(a1)
000140E0                            
000140E0                            Obj59_Delete:
000140E0 6000 C936                  		bra.w	DeleteObject
000140E4                            
000140E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140E4                            
000140E4                            
000140E4                            Obj59_Move:				; XREF: Obj59_Type02; et al
000140E4 3028 0038                  		move.w	$38(a0),d0
000140E8 4A28 003A                  		tst.b	$3A(a0)
000140EC 6600                       		bne.s	loc_10CC8
000140EE 0C40 0800                  		cmpi.w	#$800,d0
000140F2 6400                       		bcc.s	loc_10CD0
000140F4 0640 0010                  		addi.w	#$10,d0
000140F8 6000                       		bra.s	loc_10CD0
000140FA                            ; ===========================================================================
000140FA                            
000140FA                            loc_10CC8:
000140FA 4A40                       		tst.w	d0
000140FC 6700                       		beq.s	loc_10CD0
000140FE 0440 0010                  		subi.w	#$10,d0
00014102                            
00014102                            loc_10CD0:
00014102 3140 0038                  		move.w	d0,$38(a0)
00014106 48C0                       		ext.l	d0
00014108 E180                       		asl.l	#8,d0
0001410A D0A8 0034                  		add.l	$34(a0),d0
0001410E 2140 0034                  		move.l	d0,$34(a0)
00014112 4840                       		swap	d0
00014114 3428 003C                  		move.w	$3C(a0),d2
00014118 B042                       		cmp.w	d2,d0
0001411A 6300                       		bls.s	loc_10CF0
0001411C 117C 0001 003A             		move.b	#1,$3A(a0)
00014122                            
00014122                            loc_10CF0:
00014122 D442                       		add.w	d2,d2
00014124 B042                       		cmp.w	d2,d0
00014126 6600                       		bne.s	locret_10CFA
00014128 4228 0028                  		clr.b	$28(a0)
0001412C                            
0001412C                            locret_10CFA:
0001412C 4E75                       		rts	
0001412E                            ; End of function Obj59_Move
0001412E                            
0001412E                            ; ===========================================================================
0001412E                            
0001412E                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001412E 5368 003C                  		subq.w	#1,$3C(a0)
00014132 6600                       		bne.s	Obj59_ChkDel
00014134 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001413A 6100 CD36                  		bsr.w	SingleObjLoad
0001413E 6600                       		bne.s	Obj59_ChkDel
00014140 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00014144 3368 0008 0008             		move.w	8(a0),8(a1)
0001414A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014150 137C 000E 0028             		move.b	#$E,$28(a1)
00014156                            
00014156                            Obj59_ChkDel:
00014156 588F                       		addq.l	#4,sp
00014158 3028 0008                  		move.w	8(a0),d0
0001415C 0240 FF80                  		andi.w	#$FF80,d0
00014160 3238 F700                  		move.w	($FFFFF700).w,d1
00014164 0441 0080                  		subi.w	#$80,d1
00014168 0241 FF80                  		andi.w	#$FF80,d1
0001416C 9041                       		sub.w	d1,d0
0001416E 0C40 0280                  		cmpi.w	#$280,d0
00014172 6200 C8A4                  		bhi.w	DeleteObject
00014176 4E75                       		rts	
00014178                            ; ===========================================================================
00014178                            ; ---------------------------------------------------------------------------
00014178                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00014178                            ; ---------------------------------------------------------------------------
00014178                            Map_obj59:
00014178                            	include "_maps\obj59.asm"
00014178                            ; ---------------------------------------------------------------------------
00014178                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00014178                            ; ---------------------------------------------------------------------------
00014178 0000                       		dc.w byte_10D4A-Map_obj59
0001417A 03                         byte_10D4A:	dc.b 3
0001417B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00014180 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00014185 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001418A                            		even
0001418A                            		even
0001418A                            
0001418A                            ; ===========================================================================
0001418A                            ; ---------------------------------------------------------------------------
0001418A                            ; Object 5A - platforms	moving in circles (SLZ)
0001418A                            ; ---------------------------------------------------------------------------
0001418A                            
0001418A                            Obj5A:					; XREF: Obj_Index
0001418A 7000                       		moveq	#0,d0
0001418C 1028 0024                  		move.b	$24(a0),d0
00014190 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00014194 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00014198 3028 0032                  		move.w	$32(a0),d0
0001419C 0240 FF80                  		andi.w	#$FF80,d0
000141A0 3238 F700                  		move.w	($FFFFF700).w,d1
000141A4 0441 0080                  		subi.w	#$80,d1
000141A8 0241 FF80                  		andi.w	#$FF80,d1
000141AC 9041                       		sub.w	d1,d0
000141AE 0C40 0280                  		cmpi.w	#$280,d0
000141B2 6200 C864                  		bhi.w	DeleteObject
000141B6 6000 C824                  		bra.w	DisplaySprite
000141BA                            ; ===========================================================================
000141BA 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000141BC 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000141BE 0000                       		dc.w Obj5A_Action-Obj5A_Index
000141C0                            ; ===========================================================================
000141C0                            
000141C0                            Obj5A_Main:				; XREF: Obj5A_Index
000141C0 5428 0024                  		addq.b	#2,$24(a0)
000141C4 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000141CC 317C 4000 0002             		move.w	#$4000,2(a0)
000141D2 117C 0004 0001             		move.b	#4,1(a0)
000141D8 117C 0004 0018             		move.b	#4,$18(a0)
000141DE 117C 0018 0019             		move.b	#$18,$19(a0)
000141E4 3168 0008 0032             		move.w	8(a0),$32(a0)
000141EA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000141F0                            
000141F0                            Obj5A_Platform:				; XREF: Obj5A_Index
000141F0 7200                       		moveq	#0,d1
000141F2 1228 0019                  		move.b	$19(a0),d1
000141F6 4EB9 0000 A47A             		jsr	(PlatformObject).l
000141FC 6000 0000                  		bra.w	Obj5A_Types
00014200                            ; ===========================================================================
00014200                            
00014200                            Obj5A_Action:				; XREF: Obj5A_Index
00014200 7200                       		moveq	#0,d1
00014202 1228 0019                  		move.b	$19(a0),d1
00014206 4EB9 0000 A5EE             		jsr	(ExitPlatform).l
0001420C 3F28 0008                  		move.w	8(a0),-(sp)
00014210 6100 0000                  		bsr.w	Obj5A_Types
00014214 341F                       		move.w	(sp)+,d2
00014216 4EF9 0000 AB58             		jmp	(MvSonicOnPtfm2).l
0001421C                            ; ===========================================================================
0001421C                            
0001421C                            Obj5A_Types:
0001421C 7000                       		moveq	#0,d0
0001421E 1028 0028                  		move.b	$28(a0),d0
00014222 0240 000C                  		andi.w	#$C,d0
00014226 E248                       		lsr.w	#1,d0
00014228 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001422C 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00014230                            ; ===========================================================================
00014230 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00014232 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00014234                            ; ===========================================================================
00014234                            
00014234                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00014234 1238 FE80                  		move.b	($FFFFFE80).w,d1
00014238 0401 0050                  		subi.b	#$50,d1
0001423C 4881                       		ext.w	d1
0001423E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00014242 0402 0050                  		subi.b	#$50,d2
00014246 4882                       		ext.w	d2
00014248 0828 0000 0028             		btst	#0,$28(a0)
0001424E 6700                       		beq.s	loc_10E24
00014250 4441                       		neg.w	d1
00014252 4442                       		neg.w	d2
00014254                            
00014254                            loc_10E24:
00014254 0828 0001 0028             		btst	#1,$28(a0)
0001425A 6700                       		beq.s	loc_10E30
0001425C 4441                       		neg.w	d1
0001425E C342                       		exg	d1,d2
00014260                            
00014260                            loc_10E30:
00014260 D268 0032                  		add.w	$32(a0),d1
00014264 3141 0008                  		move.w	d1,8(a0)
00014268 D468 0030                  		add.w	$30(a0),d2
0001426C 3142 000C                  		move.w	d2,$C(a0)
00014270 4E75                       		rts	
00014272                            ; ===========================================================================
00014272                            
00014272                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00014272 1238 FE80                  		move.b	($FFFFFE80).w,d1
00014276 0401 0050                  		subi.b	#$50,d1
0001427A 4881                       		ext.w	d1
0001427C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00014280 0402 0050                  		subi.b	#$50,d2
00014284 4882                       		ext.w	d2
00014286 0828 0000 0028             		btst	#0,$28(a0)
0001428C 6700                       		beq.s	loc_10E62
0001428E 4441                       		neg.w	d1
00014290 4442                       		neg.w	d2
00014292                            
00014292                            loc_10E62:
00014292 0828 0001 0028             		btst	#1,$28(a0)
00014298 6700                       		beq.s	loc_10E6E
0001429A 4441                       		neg.w	d1
0001429C C342                       		exg	d1,d2
0001429E                            
0001429E                            loc_10E6E:
0001429E 4441                       		neg.w	d1
000142A0 D268 0032                  		add.w	$32(a0),d1
000142A4 3141 0008                  		move.w	d1,8(a0)
000142A8 D468 0030                  		add.w	$30(a0),d2
000142AC 3142 000C                  		move.w	d2,$C(a0)
000142B0 4E75                       		rts	
000142B2                            ; ===========================================================================
000142B2                            ; ---------------------------------------------------------------------------
000142B2                            ; Sprite mappings - platforms that move	in circles (SLZ)
000142B2                            ; ---------------------------------------------------------------------------
000142B2                            Map_obj5A:
000142B2                            	include "_maps\obj5A.asm"
000142B2                            ; ---------------------------------------------------------------------------
000142B2                            ; Sprite mappings - platforms that move	in circles (SLZ)
000142B2                            ; ---------------------------------------------------------------------------
000142B2 0000                       		dc.w byte_10E84-Map_obj5A
000142B4 02                         byte_10E84:	dc.b 2
000142B5 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000142BA F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000142C0 00                         		even
000142C0 00                         		even
000142C0                            
000142C0                            ; ===========================================================================
000142C0                            ; ---------------------------------------------------------------------------
000142C0                            ; Object 5B - blocks that form a staircase (SLZ)
000142C0                            ; ---------------------------------------------------------------------------
000142C0                            
000142C0                            Obj5B:					; XREF: Obj_Index
000142C0 7000                       		moveq	#0,d0
000142C2 1028 0024                  		move.b	$24(a0),d0
000142C6 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000142CA 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000142CE 3028 0030                  		move.w	$30(a0),d0
000142D2 0240 FF80                  		andi.w	#$FF80,d0
000142D6 3238 F700                  		move.w	($FFFFF700).w,d1
000142DA 0441 0080                  		subi.w	#$80,d1
000142DE 0241 FF80                  		andi.w	#$FF80,d1
000142E2 9041                       		sub.w	d1,d0
000142E4 0C40 0280                  		cmpi.w	#$280,d0
000142E8 6200 C72E                  		bhi.w	DeleteObject
000142EC 6000 C6EE                  		bra.w	DisplaySprite
000142F0                            ; ===========================================================================
000142F0 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000142F2 0000                       		dc.w Obj5B_Move-Obj5B_Index
000142F4 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000142F6                            ; ===========================================================================
000142F6                            
000142F6                            Obj5B_Main:				; XREF: Obj5B_Index
000142F6 5428 0024                  		addq.b	#2,$24(a0)
000142FA 7638                       		moveq	#$38,d3
000142FC 7801                       		moveq	#1,d4
000142FE 0828 0000 0022             		btst	#0,$22(a0)
00014304 6700                       		beq.s	loc_10EDA
00014306 763B                       		moveq	#$3B,d3
00014308 78FF                       		moveq	#-1,d4
0001430A                            
0001430A                            loc_10EDA:
0001430A 3428 0008                  		move.w	8(a0),d2
0001430E 2248                       		movea.l	a0,a1
00014310 7203                       		moveq	#3,d1
00014312 6000                       		bra.s	Obj5B_MakeBlocks
00014314                            ; ===========================================================================
00014314                            
00014314                            Obj5B_Loop:
00014314 6100 CB72                  		bsr.w	SingleObjLoad2
00014318 6600 0000                  		bne.w	Obj5B_Move
0001431C 137C 0004 0024             		move.b	#4,$24(a1)
00014322                            
00014322                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00014322 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00014326 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001432E 337C 4000 0002             		move.w	#$4000,2(a1)
00014334 137C 0004 0001             		move.b	#4,1(a1)
0001433A 137C 0003 0018             		move.b	#3,$18(a1)
00014340 137C 0010 0019             		move.b	#$10,$19(a1)
00014346 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001434C 3342 0008                  		move.w	d2,8(a1)
00014350 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014356 3368 0008 0030             		move.w	8(a0),$30(a1)
0001435C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00014362 0642 0020                  		addi.w	#$20,d2
00014366 1343 0037                  		move.b	d3,$37(a1)
0001436A 2348 003C                  		move.l	a0,$3C(a1)
0001436E D604                       		add.b	d4,d3
00014370 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00014374                            
00014374                            Obj5B_Move:				; XREF: Obj5B_Index
00014374 7000                       		moveq	#0,d0
00014376 1028 0028                  		move.b	$28(a0),d0
0001437A 0240 0007                  		andi.w	#7,d0
0001437E D040                       		add.w	d0,d0
00014380 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00014384 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00014388                            
00014388                            Obj5B_Solid:				; XREF: Obj5B_Index
00014388 2468 003C                  		movea.l	$3C(a0),a2
0001438C 7000                       		moveq	#0,d0
0001438E 1028 0037                  		move.b	$37(a0),d0
00014392 1032 0000                  		move.b	(a2,d0.w),d0
00014396 D068 0032                  		add.w	$32(a0),d0
0001439A 3140 000C                  		move.w	d0,$C(a0)
0001439E 7200                       		moveq	#0,d1
000143A0 1228 0019                  		move.b	$19(a0),d1
000143A4 0641 000B                  		addi.w	#$B,d1
000143A8 343C 0010                  		move.w	#$10,d2
000143AC 363C 0011                  		move.w	#$11,d3
000143B0 3828 0008                  		move.w	8(a0),d4
000143B4 6100 EA26                  		bsr.w	SolidObject
000143B8 4A04                       		tst.b	d4
000143BA 6A00                       		bpl.s	loc_10F92
000143BC 1544 0036                  		move.b	d4,$36(a2)
000143C0                            
000143C0                            loc_10F92:
000143C0 0828 0003 0022             		btst	#3,$22(a0)
000143C6 6700                       		beq.s	locret_10FA0
000143C8 157C 0001 0036             		move.b	#1,$36(a2)
000143CE                            
000143CE                            locret_10FA0:
000143CE 4E75                       		rts	
000143D0                            ; ===========================================================================
000143D0 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000143D2 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000143D4 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000143D6 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000143D8                            ; ===========================================================================
000143D8                            
000143D8                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000143D8 4A68 0034                  		tst.w	$34(a0)
000143DC 6600                       		bne.s	loc_10FC0
000143DE 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000143E4 6600                       		bne.s	locret_10FBE
000143E6 317C 001E 0034             		move.w	#$1E,$34(a0)
000143EC                            
000143EC                            locret_10FBE:
000143EC 4E75                       		rts	
000143EE                            ; ===========================================================================
000143EE                            
000143EE                            loc_10FC0:
000143EE 5368 0034                  		subq.w	#1,$34(a0)
000143F2 66F8                       		bne.s	locret_10FBE
000143F4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000143F8 4E75                       		rts	
000143FA                            ; ===========================================================================
000143FA                            
000143FA                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000143FA 4A68 0034                  		tst.w	$34(a0)
000143FE 6600                       		bne.s	loc_10FE0
00014400 4A28 0036                  		tst.b	$36(a0)
00014404 6A00                       		bpl.s	locret_10FDE
00014406 317C 003C 0034             		move.w	#$3C,$34(a0)
0001440C                            
0001440C                            locret_10FDE:
0001440C 4E75                       		rts	
0001440E                            ; ===========================================================================
0001440E                            
0001440E                            loc_10FE0:
0001440E 5368 0034                  		subq.w	#1,$34(a0)
00014412 6600                       		bne.s	loc_10FEC
00014414 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00014418 4E75                       		rts	
0001441A                            ; ===========================================================================
0001441A                            
0001441A                            loc_10FEC:
0001441A 43E8 0038                  		lea	$38(a0),a1
0001441E 3028 0034                  		move.w	$34(a0),d0
00014422 E408                       		lsr.b	#2,d0
00014424 0200 0001                  		andi.b	#1,d0
00014428 12C0                       		move.b	d0,(a1)+
0001442A 0A00 0001                  		eori.b	#1,d0
0001442E 12C0                       		move.b	d0,(a1)+
00014430 0A00 0001                  		eori.b	#1,d0
00014434 12C0                       		move.b	d0,(a1)+
00014436 0A00 0001                  		eori.b	#1,d0
0001443A 12C0                       		move.b	d0,(a1)+
0001443C 4E75                       		rts	
0001443E                            ; ===========================================================================
0001443E                            
0001443E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001443E 43E8 0038                  		lea	$38(a0),a1
00014442 0C11 0080                  		cmpi.b	#$80,(a1)
00014446 6700                       		beq.s	locret_11038
00014448 5211                       		addq.b	#1,(a1)
0001444A 7200                       		moveq	#0,d1
0001444C 1219                       		move.b	(a1)+,d1
0001444E 4841                       		swap	d1
00014450 E289                       		lsr.l	#1,d1
00014452 2401                       		move.l	d1,d2
00014454 E289                       		lsr.l	#1,d1
00014456 2601                       		move.l	d1,d3
00014458 D682                       		add.l	d2,d3
0001445A 4841                       		swap	d1
0001445C 4842                       		swap	d2
0001445E 4843                       		swap	d3
00014460 12C3                       		move.b	d3,(a1)+
00014462 12C2                       		move.b	d2,(a1)+
00014464 12C1                       		move.b	d1,(a1)+
00014466                            
00014466                            locret_11038:
00014466 4E75                       		rts	
00014468 4E75                       		rts	
0001446A                            ; ===========================================================================
0001446A                            ; ---------------------------------------------------------------------------
0001446A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001446A                            ; ---------------------------------------------------------------------------
0001446A                            Map_obj5B:
0001446A                            	include "_maps\obj5B.asm"
0001446A                            ; ---------------------------------------------------------------------------
0001446A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001446A                            ; ---------------------------------------------------------------------------
0001446A 0000                       		dc.w byte_1103E-Map_obj5B
0001446C 01                         byte_1103E:	dc.b 1
0001446D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00014472                            		even
00014472                            		even
00014472                            
00014472                            ; ===========================================================================
00014472                            ; ---------------------------------------------------------------------------
00014472                            ; Object 5C - metal girders in foreground (SLZ)
00014472                            ; ---------------------------------------------------------------------------
00014472                            
00014472                            Obj5C:					; XREF: Obj_Index
00014472 7000                       		moveq	#0,d0
00014474 1028 0024                  		move.b	$24(a0),d0
00014478 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001447C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00014480                            ; ===========================================================================
00014480 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00014482 0000                       		dc.w Obj5C_Display-Obj5C_Index
00014484                            ; ===========================================================================
00014484                            
00014484                            Obj5C_Main:				; XREF: Obj5C_Index
00014484 5428 0024                  		addq.b	#2,$24(a0)
00014488 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00014490 317C 83CC 0002             		move.w	#$83CC,2(a0)
00014496 117C 0010 0019             		move.b	#$10,$19(a0)
0001449C                            
0001449C                            Obj5C_Display:				; XREF: Obj5C_Index
0001449C 2238 F700                  		move.l	($FFFFF700).w,d1
000144A0 D281                       		add.l	d1,d1
000144A2 4841                       		swap	d1
000144A4 4441                       		neg.w	d1
000144A6 3141 0008                  		move.w	d1,8(a0)
000144AA 2238 F704                  		move.l	($FFFFF704).w,d1
000144AE D281                       		add.l	d1,d1
000144B0 4841                       		swap	d1
000144B2 0241 003F                  		andi.w	#$3F,d1
000144B6 4441                       		neg.w	d1
000144B8 0641 0100                  		addi.w	#$100,d1
000144BC 3141 000A                  		move.w	d1,$A(a0)
000144C0 6000 C51A                  		bra.w	DisplaySprite
000144C4                            ; ===========================================================================
000144C4                            ; ---------------------------------------------------------------------------
000144C4                            ; Sprite mappings - metal girders in foreground	(SLZ)
000144C4                            ; ---------------------------------------------------------------------------
000144C4                            Map_obj5C:
000144C4                            	include "_maps\obj5C.asm"
000144C4                            ; ---------------------------------------------------------------------------
000144C4                            ; Sprite mappings - metal girders in foreground	(SLZ)
000144C4                            ; ---------------------------------------------------------------------------
000144C4 0000                       		dc.w byte_11098-Map_obj5C
000144C6 09                         byte_11098:	dc.b 9
000144C7 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000144CC A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000144D1 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000144D6 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000144DB 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000144E0 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000144E5 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000144EA 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000144EF 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000144F4                            		even
000144F4                            		even
000144F4                            
000144F4                            ; ===========================================================================
000144F4                            ; ---------------------------------------------------------------------------
000144F4                            ; Object 1B - water surface (LZ)
000144F4                            ; ---------------------------------------------------------------------------
000144F4                            
000144F4                            Obj1B:					; XREF: Obj_Index
000144F4 7000                       		moveq	#0,d0
000144F6 1028 0024                  		move.b	$24(a0),d0
000144FA 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000144FE 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00014502                            ; ===========================================================================
00014502 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00014504 0000                       		dc.w Obj1B_Action-Obj1B_Index
00014506                            ; ===========================================================================
00014506                            
00014506                            Obj1B_Main:				; XREF: Obj1B_Index
00014506 5428 0024                  		addq.b	#2,$24(a0)
0001450A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00014512 317C C300 0002             		move.w	#$C300,2(a0)
00014518 117C 0004 0001             		move.b	#4,1(a0)
0001451E 117C 0080 0019             		move.b	#$80,$19(a0)
00014524 3168 0008 0030             		move.w	8(a0),$30(a0)
0001452A                            
0001452A                            Obj1B_Action:				; XREF: Obj1B_Index
0001452A 3238 F700                  		move.w	($FFFFF700).w,d1
0001452E 0241 FFE0                  		andi.w	#$FFE0,d1
00014532 D268 0030                  		add.w	$30(a0),d1
00014536 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001453C 6700                       		beq.s	loc_11114
0001453E 0641 0020                  		addi.w	#$20,d1
00014542                            
00014542                            loc_11114:
00014542 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00014546 3238 F646                  		move.w	($FFFFF646).w,d1
0001454A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001454E 4A28 0032                  		tst.b	$32(a0)
00014552 6600                       		bne.s	Obj1B_Animate
00014554 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001455A 6700                       		beq.s	loc_1114A	; if not, branch
0001455C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00014560 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00014566 6000                       		bra.s	Obj1B_Display
00014568                            ; ===========================================================================
00014568                            
00014568                            Obj1B_Animate:				; XREF: loc_11114
00014568 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001456C 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001456E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00014574 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00014578                            
00014578                            loc_1114A:				; XREF: loc_11114
00014578 5328 001E                  		subq.b	#1,$1E(a0)
0001457C 6A00                       		bpl.s	Obj1B_Display
0001457E 117C 0007 001E             		move.b	#7,$1E(a0)
00014584 5228 001A                  		addq.b	#1,$1A(a0)
00014588 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
0001458E 6500                       		bcs.s	Obj1B_Display
00014590 117C 0000 001A             		move.b	#0,$1A(a0)
00014596                            
00014596                            Obj1B_Display:
00014596 6000 C444                  		bra.w	DisplaySprite
0001459A                            ; ===========================================================================
0001459A                            ; ---------------------------------------------------------------------------
0001459A                            ; Sprite mappings - water surface (LZ)
0001459A                            ; ---------------------------------------------------------------------------
0001459A                            Map_obj1B:
0001459A                            	include "_maps\obj1B.asm"
0001459A                            ; ---------------------------------------------------------------------------
0001459A                            ; Sprite mappings - water surface (LZ)
0001459A                            ; ---------------------------------------------------------------------------
0001459A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001459E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000145A2 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000145A6 03                         byte_11178:	dc.b 3
000145A7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000145AC FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000145B1 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000145B6 03                         byte_11188:	dc.b 3
000145B7 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000145BC FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000145C1 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000145C6 03                         byte_11198:	dc.b 3
000145C7 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000145CC FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000145D1 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000145D6 06                         byte_111A8:	dc.b 6
000145D7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000145DC FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000145E1 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000145E6 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000145EB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000145F0 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000145F5 06                         byte_111C7:	dc.b 6
000145F6 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000145FB FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00014600 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00014605 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001460A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001460F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00014614 06                         byte_111E6:	dc.b 6
00014615 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001461A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001461F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00014624 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00014629 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001462E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00014634 00                         		even
00014634 00                         		even
00014634                            
00014634                            ; ===========================================================================
00014634                            ; ---------------------------------------------------------------------------
00014634                            ; Object 0B - pole that	breaks (LZ)
00014634                            ; ---------------------------------------------------------------------------
00014634                            
00014634                            Obj0B:					; XREF: Obj_Index
00014634 7000                       		moveq	#0,d0
00014636 1028 0024                  		move.b	$24(a0),d0
0001463A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001463E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00014642                            ; ===========================================================================
00014642 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00014644 0000                       		dc.w Obj0B_Action-Obj0B_Index
00014646 0000                       		dc.w Obj0B_Display-Obj0B_Index
00014648                            ; ===========================================================================
00014648                            
00014648                            Obj0B_Main:				; XREF: Obj0B_Index
00014648 5428 0024                  		addq.b	#2,$24(a0)
0001464C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00014654 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001465A 117C 0004 0001             		move.b	#4,1(a0)
00014660 117C 0008 0019             		move.b	#8,$19(a0)
00014666 117C 0004 0018             		move.b	#4,$18(a0)
0001466C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00014672 7000                       		moveq	#0,d0
00014674 1028 0028                  		move.b	$28(a0),d0	; get object type
00014678 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001467C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00014680                            
00014680                            Obj0B_Action:				; XREF: Obj0B_Index
00014680 4A28 0032                  		tst.b	$32(a0)
00014684 6700                       		beq.s	Obj0B_Grab
00014686 4A68 0030                  		tst.w	$30(a0)
0001468A 6700                       		beq.s	Obj0B_MoveUp
0001468C 5368 0030                  		subq.w	#1,$30(a0)
00014690 6600                       		bne.s	Obj0B_MoveUp
00014692 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00014698 6000                       		bra.s	Obj0B_Release
0001469A                            ; ===========================================================================
0001469A                            
0001469A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001469A 43F8 D000                  		lea	($FFFFD000).w,a1
0001469E 3028 000C                  		move.w	$C(a0),d0
000146A2 0440 0018                  		subi.w	#$18,d0
000146A6 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000146AC 6700                       		beq.s	Obj0B_MoveDown
000146AE 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000146B2 B069 000C                  		cmp.w	$C(a1),d0
000146B6 6500                       		bcs.s	Obj0B_MoveDown
000146B8 3340 000C                  		move.w	d0,$C(a1)
000146BC                            
000146BC                            Obj0B_MoveDown:
000146BC 0640 0024                  		addi.w	#$24,d0
000146C0 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000146C6 6700                       		beq.s	Obj0B_LetGo
000146C8 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000146CC B069 000C                  		cmp.w	$C(a1),d0
000146D0 6400                       		bcc.s	Obj0B_LetGo
000146D2 3340 000C                  		move.w	d0,$C(a1)
000146D6                            
000146D6                            Obj0B_LetGo:
000146D6 1038 F603                  		move.b	($FFFFF603).w,d0
000146DA 0240 0070                  		andi.w	#$70,d0
000146DE 6700                       		beq.s	Obj0B_Display
000146E0                            
000146E0                            Obj0B_Release:				; XREF: Obj0B_Action
000146E0 4228 0020                  		clr.b	$20(a0)
000146E4 5428 0024                  		addq.b	#2,$24(a0)
000146E8 4238 F7C8                  		clr.b	($FFFFF7C8).w
000146EC 4238 F7C9                  		clr.b	($FFFFF7C9).w
000146F0 4228 0032                  		clr.b	$32(a0)
000146F4 6000                       		bra.s	Obj0B_Display
000146F6                            ; ===========================================================================
000146F6                            
000146F6                            Obj0B_Grab:				; XREF: Obj0B_Action
000146F6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
000146FA 6700                       		beq.s	Obj0B_Display	; if not, branch
000146FC 43F8 D000                  		lea	($FFFFD000).w,a1
00014700 3028 0008                  		move.w	8(a0),d0
00014704 0640 0014                  		addi.w	#$14,d0
00014708 B069 0008                  		cmp.w	8(a1),d0
0001470C 6400                       		bcc.s	Obj0B_Display
0001470E 4228 0021                  		clr.b	$21(a0)
00014712 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00014718 6400                       		bcc.s	Obj0B_Display
0001471A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001471E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00014722 3028 0008                  		move.w	8(a0),d0
00014726 0640 0014                  		addi.w	#$14,d0
0001472A 3340 0008                  		move.w	d0,8(a1)
0001472E 08A9 0000 0022             		bclr	#0,$22(a1)
00014734 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001473A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00014740 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00014746 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001474C                            
0001474C                            Obj0B_Display:				; XREF: Obj0B_Index
0001474C 6000 E366                  		bra.w	MarkObjGone
00014750                            ; ===========================================================================
00014750                            ; ---------------------------------------------------------------------------
00014750                            ; Sprite mappings - pole that breaks (LZ)
00014750                            ; ---------------------------------------------------------------------------
00014750                            Map_obj0B:
00014750                            	include "_maps\obj0B.asm"
00014750                            ; ---------------------------------------------------------------------------
00014750                            ; Sprite mappings - pole that breaks (LZ)
00014750                            ; ---------------------------------------------------------------------------
00014750 0000                       		dc.w byte_11326-Map_obj0B
00014752 0000                       		dc.w byte_11331-Map_obj0B
00014754 02                         byte_11326:	dc.b 2			; normal pole
00014755 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001475A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001475F 04                         byte_11331:	dc.b 4			; broken pole
00014760 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00014765 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001476A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001476F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00014774                            		even
00014774                            		even
00014774                            
00014774                            ; ===========================================================================
00014774                            ; ---------------------------------------------------------------------------
00014774                            ; Object 0C - flapping door (LZ)
00014774                            ; ---------------------------------------------------------------------------
00014774                            
00014774                            Obj0C:					; XREF: Obj_Index
00014774 7000                       		moveq	#0,d0
00014776 1028 0024                  		move.b	$24(a0),d0
0001477A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0001477E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00014782                            ; ===========================================================================
00014782 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00014784 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00014786                            ; ===========================================================================
00014786                            
00014786                            Obj0C_Main:				; XREF: Obj0C_Index
00014786 5428 0024                  		addq.b	#2,$24(a0)
0001478A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00014792 317C 4328 0002             		move.w	#$4328,2(a0)
00014798 0028 0004 0001             		ori.b	#4,1(a0)
0001479E 117C 0028 0019             		move.b	#$28,$19(a0)
000147A4 7000                       		moveq	#0,d0
000147A6 1028 0028                  		move.b	$28(a0),d0	; get object type
000147AA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000147AE 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000147B2                            
000147B2                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000147B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000147B6 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000147B8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000147BE 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000147C4 4A28 0001                  		tst.b	1(a0)
000147C8 6A00                       		bpl.s	Obj0C_Solid
000147CA 303C 00BB                  		move.w	#$BB,d0
000147CE 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play door sound
000147D4                            
000147D4                            Obj0C_Solid:
000147D4 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000147DA 6100 8FFE                  		bsr.w	AnimateSprite
000147DE 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
000147E2 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000147E6 6600                       		bne.s	Obj0C_Display	; if yes, branch
000147E8 3038 D008                  		move.w	($FFFFD008).w,d0
000147EC B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000147F0 6400                       		bcc.s	Obj0C_Display	; if yes, branch
000147F2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000147F8 323C 0013                  		move.w	#$13,d1
000147FC 343C 0020                  		move.w	#$20,d2
00014800 3602                       		move.w	d2,d3
00014802 5243                       		addq.w	#1,d3
00014804 3828 0008                  		move.w	8(a0),d4
00014808 6100 E5D2                  		bsr.w	SolidObject	; make the door	solid
0001480C                            
0001480C                            Obj0C_Display:
0001480C 6000 E2A6                  		bra.w	MarkObjGone
00014810                            ; ===========================================================================
00014810                            Ani_obj0C:
00014810                            	include "_anim\obj0C.asm"
00014810                            ; ---------------------------------------------------------------------------
00014810                            ; Animation script - flapping door (LZ)
00014810                            ; ---------------------------------------------------------------------------
00014810 0000                       		dc.w byte_113E6-Ani_obj0C
00014812 0000                       		dc.w byte_113EC-Ani_obj0C
00014814 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001481A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00014820                            		even
00014820                            		even
00014820                            
00014820                            ; ---------------------------------------------------------------------------
00014820                            ; Sprite mappings - flapping door (LZ)
00014820                            ; ---------------------------------------------------------------------------
00014820                            Map_obj0C:
00014820                            	include "_maps\obj0C.asm"
00014820                            ; ---------------------------------------------------------------------------
00014820                            ; Sprite mappings - flapping door (LZ)
00014820                            ; ---------------------------------------------------------------------------
00014820 0000                       		dc.w byte_113F8-Map_obj0C
00014822 0000                       		dc.w byte_11403-Map_obj0C
00014824 0000                       		dc.w byte_1140E-Map_obj0C
00014826 02                         byte_113F8:	dc.b 2
00014827 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001482C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00014831 02                         byte_11403:	dc.b 2
00014832 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00014837 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001483C 02                         byte_1140E:	dc.b 2
0001483D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00014842 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00014848 00                         		even
00014848 00                         		even
00014848                            
00014848                            ; ===========================================================================
00014848                            ; ---------------------------------------------------------------------------
00014848                            ; Object 71 - invisible	solid blocks
00014848                            ; ---------------------------------------------------------------------------
00014848                            
00014848                            Obj71:					; XREF: Obj_Index
00014848 7000                       		moveq	#0,d0
0001484A 1028 0024                  		move.b	$24(a0),d0
0001484E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00014852 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00014856                            ; ===========================================================================
00014856 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00014858 0000                       		dc.w Obj71_Solid-Obj71_Index
0001485A                            ; ===========================================================================
0001485A                            
0001485A                            Obj71_Main:				; XREF: Obj71_Index
0001485A 5428 0024                  		addq.b	#2,$24(a0)
0001485E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00014866 317C 8680 0002             		move.w	#$8680,2(a0)
0001486C 0028 0004 0001             		ori.b	#4,1(a0)
00014872 1028 0028                  		move.b	$28(a0),d0	; get object type
00014876 1200                       		move.b	d0,d1
00014878 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001487C 0640 0010                  		addi.w	#$10,d0
00014880 E248                       		lsr.w	#1,d0
00014882 1140 0019                  		move.b	d0,$19(a0)	; set object width
00014886 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001488A 5241                       		addq.w	#1,d1
0001488C E749                       		lsl.w	#3,d1
0001488E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00014892                            
00014892                            Obj71_Solid:				; XREF: Obj71_Index
00014892 6100 C3C4                  		bsr.w	ChkObjOnScreen
00014896 6600                       		bne.s	Obj71_ChkDel
00014898 7200                       		moveq	#0,d1
0001489A 1228 0019                  		move.b	$19(a0),d1
0001489E 0641 000B                  		addi.w	#$B,d1
000148A2 7400                       		moveq	#0,d2
000148A4 1428 0016                  		move.b	$16(a0),d2
000148A8 3602                       		move.w	d2,d3
000148AA 5243                       		addq.w	#1,d3
000148AC 3828 0008                  		move.w	8(a0),d4
000148B0 6100 E572                  		bsr.w	SolidObject71
000148B4                            
000148B4                            Obj71_ChkDel:
000148B4 3028 0008                  		move.w	8(a0),d0
000148B8 0240 FF80                  		andi.w	#$FF80,d0
000148BC 3238 F700                  		move.w	($FFFFF700).w,d1
000148C0 0441 0080                  		subi.w	#$80,d1
000148C4 0241 FF80                  		andi.w	#$FF80,d1
000148C8 9041                       		sub.w	d1,d0
000148CA 0C40 0280                  		cmpi.w	#$280,d0
000148CE 6200                       		bhi.s	Obj71_Delete
000148D0 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000148D4 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000148D6 4EFA C104                  		jmp	DisplaySprite	; if yes, display the object
000148DA                            ; ===========================================================================
000148DA                            
000148DA                            Obj71_NoDisplay:
000148DA 4E75                       		rts	
000148DC                            ; ===========================================================================
000148DC                            
000148DC                            Obj71_Delete:
000148DC 4EFA C13A                  		jmp	DeleteObject
000148E0                            ; ===========================================================================
000148E0                            ; ---------------------------------------------------------------------------
000148E0                            ; Sprite mappings - invisible solid blocks
000148E0                            ; ---------------------------------------------------------------------------
000148E0                            Map_obj71:
000148E0                            	include "_maps\obj71.asm"
000148E0                            ; ---------------------------------------------------------------------------
000148E0                            ; Sprite mappings - invisible solid blocks
000148E0                            ; ---------------------------------------------------------------------------
000148E0 0000                       		dc.w byte_114BC-Map_obj71
000148E2 0000                       		dc.w byte_114D1-Map_obj71
000148E4 0000                       		dc.w byte_114E6-Map_obj71
000148E6 04                         byte_114BC:	dc.b 4
000148E7 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
000148EC F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
000148F1 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
000148F6 0005 0018 00               		dc.b 0,	5, 0, $18, 0
000148FB 04                         byte_114D1:	dc.b 4
000148FC E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00014901 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00014906 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001490B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00014910 04                         byte_114E6:	dc.b 4
00014911 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00014916 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001491B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00014920 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00014926 00                         		even
00014926 00                         		even
00014926                            
00014926                            ; ===========================================================================
00014926                            ; ---------------------------------------------------------------------------
00014926                            ; Object 5D - fans (SLZ)
00014926                            ; ---------------------------------------------------------------------------
00014926                            
00014926                            Obj5D:					; XREF: Obj_Index
00014926 7000                       		moveq	#0,d0
00014928 1028 0024                  		move.b	$24(a0),d0
0001492C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00014930 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00014934                            ; ===========================================================================
00014934 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00014936 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00014938                            ; ===========================================================================
00014938                            
00014938                            Obj5D_Main:				; XREF: Obj5D_Index
00014938 5428 0024                  		addq.b	#2,$24(a0)
0001493C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00014944 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001494A 0028 0004 0001             		ori.b	#4,1(a0)
00014950 117C 0010 0019             		move.b	#$10,$19(a0)
00014956 117C 0004 0018             		move.b	#4,$18(a0)
0001495C                            
0001495C                            Obj5D_Delay:				; XREF: Obj5D_Index
0001495C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00014962 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00014964 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00014968 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001496A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00014970 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00014976 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00014978 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001497E                            
0001497E                            Obj5D_Blow:
0001497E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00014982 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00014986 43F8 D000                  		lea	($FFFFD000).w,a1
0001498A 3029 0008                  		move.w	8(a1),d0
0001498E 9068 0008                  		sub.w	8(a0),d0
00014992 0828 0000 0022             		btst	#0,$22(a0)
00014998 6600                       		bne.s	Obj5D_ChkSonic
0001499A 4440                       		neg.w	d0
0001499C                            
0001499C                            Obj5D_ChkSonic:
0001499C 0640 0050                  		addi.w	#$50,d0
000149A0 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000149A4 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000149A6 3229 000C                  		move.w	$C(a1),d1
000149AA 0641 0060                  		addi.w	#$60,d1
000149AE 9268 000C                  		sub.w	$C(a0),d1
000149B2 6500                       		bcs.s	Obj5D_Animate
000149B4 0C41 0070                  		cmpi.w	#$70,d1
000149B8 6400                       		bcc.s	Obj5D_Animate
000149BA 0440 0050                  		subi.w	#$50,d0
000149BE 6400                       		bcc.s	loc_1159A
000149C0 4640                       		not.w	d0
000149C2 D040                       		add.w	d0,d0
000149C4                            
000149C4                            loc_1159A:
000149C4 0640 0060                  		addi.w	#$60,d0
000149C8 0828 0000 0022             		btst	#0,$22(a0)
000149CE 6600                       		bne.s	loc_115A8
000149D0 4440                       		neg.w	d0
000149D2                            
000149D2                            loc_115A8:
000149D2 4400                       		neg.b	d0
000149D4 E840                       		asr.w	#4,d0
000149D6 0828 0000 0028             		btst	#0,$28(a0)
000149DC 6700                       		beq.s	Obj5D_MoveSonic
000149DE 4440                       		neg.w	d0
000149E0                            
000149E0                            Obj5D_MoveSonic:
000149E0 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000149E4                            
000149E4                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000149E4 5328 001E                  		subq.b	#1,$1E(a0)
000149E8 6A00                       		bpl.s	Obj5D_ChkDel
000149EA 117C 0000 001E             		move.b	#0,$1E(a0)
000149F0 5228 001B                  		addq.b	#1,$1B(a0)
000149F4 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000149FA 6500                       		bcs.s	loc_115D8
000149FC 117C 0000 001B             		move.b	#0,$1B(a0)
00014A02                            
00014A02                            loc_115D8:
00014A02 7000                       		moveq	#0,d0
00014A04 0828 0000 0028             		btst	#0,$28(a0)
00014A0A 6700                       		beq.s	loc_115E4
00014A0C 7002                       		moveq	#2,d0
00014A0E                            
00014A0E                            loc_115E4:
00014A0E D028 001B                  		add.b	$1B(a0),d0
00014A12 1140 001A                  		move.b	d0,$1A(a0)
00014A16                            
00014A16                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00014A16 6100 BFC4                  		bsr.w	DisplaySprite
00014A1A 3028 0008                  		move.w	8(a0),d0
00014A1E 0240 FF80                  		andi.w	#$FF80,d0
00014A22 3238 F700                  		move.w	($FFFFF700).w,d1
00014A26 0441 0080                  		subi.w	#$80,d1
00014A2A 0241 FF80                  		andi.w	#$FF80,d1
00014A2E 9041                       		sub.w	d1,d0
00014A30 0C40 0280                  		cmpi.w	#$280,d0
00014A34 6200 BFE2                  		bhi.w	DeleteObject
00014A38 4E75                       		rts	
00014A3A                            ; ===========================================================================
00014A3A                            ; ---------------------------------------------------------------------------
00014A3A                            ; Sprite mappings - fans (SLZ)
00014A3A                            ; ---------------------------------------------------------------------------
00014A3A                            Map_obj5D:
00014A3A                            	include "_maps\obj5D.asm"
00014A3A                            ; ---------------------------------------------------------------------------
00014A3A                            ; Sprite mappings - fans (SLZ)
00014A3A                            ; ---------------------------------------------------------------------------
00014A3A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00014A3E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00014A42 0000                       		dc.w byte_1161A-Map_obj5D
00014A44 02                         byte_1161A:	dc.b 2
00014A45 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00014A4A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00014A4F 02                         byte_11625:	dc.b 2
00014A50 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00014A55 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00014A5A 02                         byte_11630:	dc.b 2
00014A5B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00014A60 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00014A66 00                         		even
00014A66 00                         		even
00014A66                            
00014A66                            ; ===========================================================================
00014A66                            ; ---------------------------------------------------------------------------
00014A66                            ; Object 5E - seesaws (SLZ)
00014A66                            ; ---------------------------------------------------------------------------
00014A66                            
00014A66                            Obj5E:					; XREF: Obj_Index
00014A66 7000                       		moveq	#0,d0
00014A68 1028 0024                  		move.b	$24(a0),d0
00014A6C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00014A70 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00014A74 3028 0030                  		move.w	$30(a0),d0
00014A78 0240 FF80                  		andi.w	#$FF80,d0
00014A7C 3238 F700                  		move.w	($FFFFF700).w,d1
00014A80 0441 0080                  		subi.w	#$80,d1
00014A84 0241 FF80                  		andi.w	#$FF80,d1
00014A88 9041                       		sub.w	d1,d0
00014A8A 6B00 BF8C                  		bmi.w	DeleteObject
00014A8E 0C40 0280                  		cmpi.w	#$280,d0
00014A92 6200 BF84                  		bhi.w	DeleteObject
00014A96 6000 BF44                  		bra.w	DisplaySprite
00014A9A                            ; ===========================================================================
00014A9A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00014A9C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00014A9E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00014AA0 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00014AA2 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00014AA4 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00014AA6                            ; ===========================================================================
00014AA6                            
00014AA6                            Obj5E_Main:				; XREF: Obj5E_Index
00014AA6 5428 0024                  		addq.b	#2,$24(a0)
00014AAA 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00014AB2 317C 0374 0002             		move.w	#$374,2(a0)
00014AB8 0028 0004 0001             		ori.b	#4,1(a0)
00014ABE 117C 0004 0018             		move.b	#4,$18(a0)
00014AC4 117C 0030 0019             		move.b	#$30,$19(a0)
00014ACA 3168 0008 0030             		move.w	8(a0),$30(a0)
00014AD0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00014AD4 6600                       		bne.s	loc_116D2	; if not, branch
00014AD6 6100 C3B0                  		bsr.w	SingleObjLoad2
00014ADA 6600                       		bne.s	loc_116D2
00014ADC 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00014AE0 5C29 0024                  		addq.b	#6,$24(a1)
00014AE4 3368 0008 0008             		move.w	8(a0),8(a1)
00014AEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014AF0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00014AF6 2348 003C                  		move.l	a0,$3C(a1)
00014AFA                            
00014AFA                            loc_116D2:
00014AFA 0828 0000 0022             		btst	#0,$22(a0)
00014B00 6700                       		beq.s	loc_116E0
00014B02 117C 0002 001A             		move.b	#2,$1A(a0)
00014B08                            
00014B08                            loc_116E0:
00014B08 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00014B0E                            
00014B0E                            Obj5E_Slope:				; XREF: Obj5E_Index
00014B0E 1228 003A                  		move.b	$3A(a0),d1
00014B12 6100 0000                  		bsr.w	loc_11766
00014B16 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00014B1C 0828 0000 001A             		btst	#0,$1A(a0)
00014B22 6700                       		beq.s	loc_11702
00014B24 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00014B2A                            
00014B2A                            loc_11702:
00014B2A 43F8 D000                  		lea	($FFFFD000).w,a1
00014B2E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00014B34 323C 0030                  		move.w	#$30,d1
00014B38 4EB9 0000 A54E             		jsr	(SlopeObject).l
00014B3E 4E75                       		rts	
00014B40                            ; ===========================================================================
00014B40                            
00014B40                            Obj5E_Slope2:				; XREF: Obj5E_Index
00014B40 6100 0000                  		bsr.w	loc_1174A
00014B44 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00014B4A 0828 0000 001A             		btst	#0,$1A(a0)
00014B50 6700                       		beq.s	loc_11730
00014B52 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00014B58                            
00014B58                            loc_11730:
00014B58 323C 0030                  		move.w	#$30,d1
00014B5C 4EB9 0000 A5EE             		jsr	(ExitPlatform).l
00014B62 323C 0030                  		move.w	#$30,d1
00014B66 3428 0008                  		move.w	8(a0),d2
00014B6A 4EB9 0000 B55A             		jsr	SlopeObject2
00014B70 4E75                       		rts	
00014B72                            ; ===========================================================================
00014B72                            
00014B72                            loc_1174A:				; XREF: Obj5E_Slope2
00014B72 7202                       		moveq	#2,d1
00014B74 43F8 D000                  		lea	($FFFFD000).w,a1
00014B78 3028 0008                  		move.w	8(a0),d0
00014B7C 9069 0008                  		sub.w	8(a1),d0
00014B80 6400                       		bcc.s	loc_1175E
00014B82 4440                       		neg.w	d0
00014B84 7200                       		moveq	#0,d1
00014B86                            
00014B86                            loc_1175E:
00014B86 0C40 0008                  		cmpi.w	#8,d0
00014B8A 6400                       		bcc.s	loc_11766
00014B8C 7201                       		moveq	#1,d1
00014B8E                            
00014B8E                            loc_11766:
00014B8E 1028 001A                  		move.b	$1A(a0),d0
00014B92 B001                       		cmp.b	d1,d0
00014B94 6700                       		beq.s	locret_11790
00014B96 6400                       		bcc.s	loc_11772
00014B98 5400                       		addq.b	#2,d0
00014B9A                            
00014B9A                            loc_11772:
00014B9A 5300                       		subq.b	#1,d0
00014B9C 1140 001A                  		move.b	d0,$1A(a0)
00014BA0 1141 003A                  		move.b	d1,$3A(a0)
00014BA4 08A8 0000 0001             		bclr	#0,1(a0)
00014BAA 0828 0001 001A             		btst	#1,$1A(a0)
00014BB0 6700                       		beq.s	locret_11790
00014BB2 08E8 0000 0001             		bset	#0,1(a0)
00014BB8                            
00014BB8                            locret_11790:
00014BB8 4E75                       		rts	
00014BBA                            ; ===========================================================================
00014BBA                            
00014BBA                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00014BBA 5428 0024                  		addq.b	#2,$24(a0)
00014BBE 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00014BC6 317C 04F0 0002             		move.w	#$4F0,2(a0)
00014BCC 0028 0004 0001             		ori.b	#4,1(a0)
00014BD2 117C 0004 0018             		move.b	#4,$18(a0)
00014BD8 117C 008B 0020             		move.b	#$8B,$20(a0)
00014BDE 117C 000C 0019             		move.b	#$C,$19(a0)
00014BE4 3168 0008 0030             		move.w	8(a0),$30(a0)
00014BEA 0668 0028 0008             		addi.w	#$28,8(a0)
00014BF0 3168 000C 0034             		move.w	$C(a0),$34(a0)
00014BF6 117C 0001 001A             		move.b	#1,$1A(a0)
00014BFC 0828 0000 0022             		btst	#0,$22(a0)
00014C02 6700                       		beq.s	Obj5E_MoveSpike
00014C04 0468 0050 0008             		subi.w	#$50,8(a0)
00014C0A 117C 0002 003A             		move.b	#2,$3A(a0)
00014C10                            
00014C10                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00014C10 2268 003C                  		movea.l	$3C(a0),a1
00014C14 7000                       		moveq	#0,d0
00014C16 1028 003A                  		move.b	$3A(a0),d0
00014C1A 9029 003A                  		sub.b	$3A(a1),d0
00014C1E 6700                       		beq.s	loc_1183E
00014C20 6400                       		bcc.s	loc_117FC
00014C22 4400                       		neg.b	d0
00014C24                            
00014C24                            loc_117FC:
00014C24 323C F7E8                  		move.w	#-$818,d1
00014C28 343C FEEC                  		move.w	#-$114,d2
00014C2C 0C00 0001                  		cmpi.b	#1,d0
00014C30 6700                       		beq.s	loc_11822
00014C32 323C F510                  		move.w	#-$AF0,d1
00014C36 343C FF34                  		move.w	#-$CC,d2
00014C3A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00014C40 6D00                       		blt.s	loc_11822
00014C42 323C F200                  		move.w	#-$E00,d1
00014C46 343C FF60                  		move.w	#-$A0,d2
00014C4A                            
00014C4A                            loc_11822:
00014C4A 3141 0012                  		move.w	d1,$12(a0)
00014C4E 3142 0010                  		move.w	d2,$10(a0)
00014C52 3028 0008                  		move.w	8(a0),d0
00014C56 9068 0030                  		sub.w	$30(a0),d0
00014C5A 6400                       		bcc.s	loc_11838
00014C5C 4468 0010                  		neg.w	$10(a0)
00014C60                            
00014C60                            loc_11838:
00014C60 5428 0024                  		addq.b	#2,$24(a0)
00014C64 6000                       		bra.s	Obj5E_SpikeFall
00014C66                            ; ===========================================================================
00014C66                            
00014C66                            loc_1183E:				; XREF: Obj5E_MoveSpike
00014C66 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00014C6C 7000                       		moveq	#0,d0
00014C6E 1029 001A                  		move.b	$1A(a1),d0
00014C72 343C 0028                  		move.w	#$28,d2
00014C76 3228 0008                  		move.w	8(a0),d1
00014C7A 9268 0030                  		sub.w	$30(a0),d1
00014C7E 6400                       		bcc.s	loc_1185C
00014C80 4442                       		neg.w	d2
00014C82 5440                       		addq.w	#2,d0
00014C84                            
00014C84                            loc_1185C:
00014C84 D040                       		add.w	d0,d0
00014C86 3228 0034                  		move.w	$34(a0),d1
00014C8A D272 0000                  		add.w	(a2,d0.w),d1
00014C8E 3141 000C                  		move.w	d1,$C(a0)
00014C92 D468 0030                  		add.w	$30(a0),d2
00014C96 3142 0008                  		move.w	d2,8(a0)
00014C9A 4268 000E                  		clr.w	$E(a0)
00014C9E 4268 000A                  		clr.w	$A(a0)
00014CA2 4E75                       		rts	
00014CA4                            ; ===========================================================================
00014CA4                            
00014CA4                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00014CA4 4A68 0012                  		tst.w	$12(a0)
00014CA8 6A00                       		bpl.s	loc_1189A
00014CAA 6100 BCF6                  		bsr.w	ObjectFall
00014CAE 3028 0034                  		move.w	$34(a0),d0
00014CB2 0440 002F                  		subi.w	#$2F,d0
00014CB6 B068 000C                  		cmp.w	$C(a0),d0
00014CBA 6E00                       		bgt.s	locret_11898
00014CBC 6100 BCE4                  		bsr.w	ObjectFall
00014CC0                            
00014CC0                            locret_11898:
00014CC0 4E75                       		rts	
00014CC2                            ; ===========================================================================
00014CC2                            
00014CC2                            loc_1189A:				; XREF: Obj5E_SpikeFall
00014CC2 6100 BCDE                  		bsr.w	ObjectFall
00014CC6 2268 003C                  		movea.l	$3C(a0),a1
00014CCA 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00014CD0 7000                       		moveq	#0,d0
00014CD2 1029 001A                  		move.b	$1A(a1),d0
00014CD6 3228 0008                  		move.w	8(a0),d1
00014CDA 9268 0030                  		sub.w	$30(a0),d1
00014CDE 6400                       		bcc.s	loc_118BA
00014CE0 5440                       		addq.w	#2,d0
00014CE2                            
00014CE2                            loc_118BA:
00014CE2 D040                       		add.w	d0,d0
00014CE4 3228 0034                  		move.w	$34(a0),d1
00014CE8 D272 0000                  		add.w	(a2,d0.w),d1
00014CEC B268 000C                  		cmp.w	$C(a0),d1
00014CF0 6E00                       		bgt.s	locret_11938
00014CF2 2268 003C                  		movea.l	$3C(a0),a1
00014CF6 7202                       		moveq	#2,d1
00014CF8 4A68 0010                  		tst.w	$10(a0)
00014CFC 6B00                       		bmi.s	Obj5E_Spring
00014CFE 7200                       		moveq	#0,d1
00014D00                            
00014D00                            Obj5E_Spring:
00014D00 1341 003A                  		move.b	d1,$3A(a1)
00014D04 1141 003A                  		move.b	d1,$3A(a0)
00014D08 B229 001A                  		cmp.b	$1A(a1),d1
00014D0C 6700                       		beq.s	loc_1192C
00014D0E 08A9 0003 0022             		bclr	#3,$22(a1)
00014D14 6700                       		beq.s	loc_1192C
00014D16 4229 0025                  		clr.b	$25(a1)
00014D1A 137C 0002 0024             		move.b	#2,$24(a1)
00014D20 45F8 D000                  		lea	($FFFFD000).w,a2
00014D24 3568 0012 0012             		move.w	$12(a0),$12(a2)
00014D2A 446A 0012                  		neg.w	$12(a2)
00014D2E 08EA 0001 0022             		bset	#1,$22(a2)
00014D34 08AA 0003 0022             		bclr	#3,$22(a2)
00014D3A 422A 003C                  		clr.b	$3C(a2)
00014D3E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00014D44 157C 0002 0024             		move.b	#2,$24(a2)
00014D4A 303C 00CC                  		move.w	#$CC,d0
00014D4E 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play spring sound
00014D54                            
00014D54                            loc_1192C:
00014D54 4268 0010                  		clr.w	$10(a0)
00014D58 4268 0012                  		clr.w	$12(a0)
00014D5C 5528 0024                  		subq.b	#2,$24(a0)
00014D60                            
00014D60                            locret_11938:
00014D60 4E75                       		rts	
00014D62                            ; ===========================================================================
00014D62 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00014D6C                            
00014D6C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00014D9C                            		even
00014D9C                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00014DCC                            		even
00014DCC                            ; ---------------------------------------------------------------------------
00014DCC                            ; Sprite mappings - seesaws (SLZ)
00014DCC                            ; ---------------------------------------------------------------------------
00014DCC                            Map_obj5E:
00014DCC                            	include "_maps\obj5E.asm"
00014DCC                            ; ---------------------------------------------------------------------------
00014DCC                            ; Sprite mappings - seesaws (SLZ)
00014DCC                            ; ---------------------------------------------------------------------------
00014DCC 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00014DD0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00014DD4 07                         byte_119AC:	dc.b 7
00014DD5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00014DDA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00014DDF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00014DE4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00014DE9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00014DEE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00014DF3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00014DF8 04                         byte_119D0:	dc.b 4
00014DF9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00014DFE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00014E03 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00014E08 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00014E0E 00                         		even
00014E0E 00                         		even
00014E0E                            
00014E0E                            ; ---------------------------------------------------------------------------
00014E0E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00014E0E                            ; ---------------------------------------------------------------------------
00014E0E                            Map_obj5Ea:
00014E0E                            	include "_maps\obj5Eballs.asm"
00014E0E                            ; ---------------------------------------------------------------------------
00014E0E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00014E0E                            ; ---------------------------------------------------------------------------
00014E0E 0000                       		dc.w byte_119EA-Map_obj5Ea
00014E10 0000                       		dc.w byte_119F0-Map_obj5Ea
00014E12 01                         byte_119EA:	dc.b 1
00014E13 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00014E18 01                         byte_119F0:	dc.b 1
00014E19 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00014E1E                            		even
00014E1E                            		even
00014E1E                            
00014E1E                            ; ===========================================================================
00014E1E                            ; ---------------------------------------------------------------------------
00014E1E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00014E1E                            ; ---------------------------------------------------------------------------
00014E1E                            
00014E1E                            Obj5F:					; XREF: Obj_Index
00014E1E 7000                       		moveq	#0,d0
00014E20 1028 0024                  		move.b	$24(a0),d0
00014E24 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00014E28 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00014E2C                            ; ===========================================================================
00014E2C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00014E2E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00014E30 0000                       		dc.w Obj5F_Display-Obj5F_Index
00014E32 0000                       		dc.w Obj5F_End-Obj5F_Index
00014E34                            ; ===========================================================================
00014E34                            
00014E34                            Obj5F_Main:				; XREF: Obj5F_Index
00014E34 5428 0024                  		addq.b	#2,$24(a0)
00014E38 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00014E40 317C 0400 0002             		move.w	#$400,2(a0)
00014E46 0028 0004 0001             		ori.b	#4,1(a0)
00014E4C 117C 0003 0018             		move.b	#3,$18(a0)
00014E52 117C 000C 0019             		move.b	#$C,$19(a0)
00014E58 1028 0028                  		move.b	$28(a0),d0
00014E5C 6700                       		beq.s	loc_11A3C
00014E5E 1140 0024                  		move.b	d0,$24(a0)
00014E62 4E75                       		rts	
00014E64                            ; ===========================================================================
00014E64                            
00014E64                            loc_11A3C:
00014E64 117C 009A 0020             		move.b	#$9A,$20(a0)
00014E6A 0868 0000 0022             		bchg	#0,$22(a0)
00014E70                            
00014E70                            Obj5F_Action:				; XREF: Obj5F_Index
00014E70 7000                       		moveq	#0,d0
00014E72 1028 0025                  		move.b	$25(a0),d0
00014E76 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00014E7A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00014E7E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00014E84 6100 8954                  		bsr.w	AnimateSprite
00014E88 6000 DC2A                  		bra.w	MarkObjGone
00014E8C                            ; ===========================================================================
00014E8C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00014E8E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00014E90 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00014E92                            ; ===========================================================================
00014E92                            
00014E92                            Obj5F_Walk:				; XREF: Obj5F_Index2
00014E92 6100 0000                  		bsr.w	Obj5F_ChkSonic
00014E96 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00014E9A 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00014E9C 5428 0025                  		addq.b	#2,$25(a0)
00014EA0 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00014EA6 317C 0010 0010             		move.w	#$10,$10(a0)
00014EAC 117C 0001 001C             		move.b	#1,$1C(a0)
00014EB2 0868 0000 0022             		bchg	#0,$22(a0)
00014EB8 6700                       		beq.s	locret_11A96
00014EBA 4468 0010                  		neg.w	$10(a0)		; change direction
00014EBE                            
00014EBE                            locret_11A96:
00014EBE 4E75                       		rts	
00014EC0                            ; ===========================================================================
00014EC0                            
00014EC0                            Obj5F_Wait:				; XREF: Obj5F_Index2
00014EC0 6100 0000                  		bsr.w	Obj5F_ChkSonic
00014EC4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00014EC8 6B00                       		bmi.s	loc_11AA8
00014ECA 6100 BAF6                  		bsr.w	SpeedToPos
00014ECE 4E75                       		rts	
00014ED0                            ; ===========================================================================
00014ED0                            
00014ED0                            loc_11AA8:
00014ED0 5528 0025                  		subq.b	#2,$25(a0)
00014ED4 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00014EDA 4268 0010                  		clr.w	$10(a0)		; stop walking
00014EDE 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00014EE4 4E75                       		rts	
00014EE6                            ; ===========================================================================
00014EE6                            
00014EE6                            Obj5F_Explode:				; XREF: Obj5F_Index2
00014EE6 5368 0030                  		subq.w	#1,$30(a0)
00014EEA 6A00                       		bpl.s	locret_11AD0
00014EEC 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00014EF0 117C 0000 0024             		move.b	#0,$24(a0)
00014EF6                            
00014EF6                            locret_11AD0:
00014EF6 4E75                       		rts	
00014EF8                            ; ===========================================================================
00014EF8                            
00014EF8                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00014EF8 3038 D008                  		move.w	($FFFFD008).w,d0
00014EFC 9068 0008                  		sub.w	8(a0),d0
00014F00 6400                       		bcc.s	loc_11ADE
00014F02 4440                       		neg.w	d0
00014F04                            
00014F04                            loc_11ADE:
00014F04 0C40 0060                  		cmpi.w	#$60,d0
00014F08 6400                       		bcc.s	locret_11B5E
00014F0A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014F0E 9068 000C                  		sub.w	$C(a0),d0
00014F12 6400                       		bcc.s	Obj5F_MakeFuse
00014F14 4440                       		neg.w	d0
00014F16                            
00014F16                            Obj5F_MakeFuse:
00014F16 0C40 0060                  		cmpi.w	#$60,d0
00014F1A 6400                       		bcc.s	locret_11B5E
00014F1C 4A78 FE08                  		tst.w	($FFFFFE08).w
00014F20 6600                       		bne.s	locret_11B5E
00014F22 117C 0004 0025             		move.b	#4,$25(a0)
00014F28 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00014F2E 4268 0010                  		clr.w	$10(a0)
00014F32 117C 0002 001C             		move.b	#2,$1C(a0)
00014F38 6100 BF4E                  		bsr.w	SingleObjLoad2
00014F3C 6600                       		bne.s	locret_11B5E
00014F3E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00014F42 3368 0008 0008             		move.w	8(a0),8(a1)
00014F48 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014F4E 3368 000C 0034             		move.w	$C(a0),$34(a1)
00014F54 1368 0022 0022             		move.b	$22(a0),$22(a1)
00014F5A 137C 0004 0028             		move.b	#4,$28(a1)
00014F60 137C 0003 001C             		move.b	#3,$1C(a1)
00014F66 337C 0010 0012             		move.w	#$10,$12(a1)
00014F6C 0828 0001 0022             		btst	#1,$22(a0)
00014F72 6700                       		beq.s	loc_11B54
00014F74 4469 0012                  		neg.w	$12(a1)
00014F78                            
00014F78                            loc_11B54:
00014F78 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00014F7E 2348 003C                  		move.l	a0,$3C(a1)
00014F82                            
00014F82                            locret_11B5E:
00014F82 4E75                       		rts	
00014F84                            ; ===========================================================================
00014F84                            
00014F84                            Obj5F_Display:				; XREF: Obj5F_Index
00014F84 6100                       		bsr.s	loc_11B70
00014F86 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00014F8C 6100 884C                  		bsr.w	AnimateSprite
00014F90 6000 DB22                  		bra.w	MarkObjGone
00014F94                            ; ===========================================================================
00014F94                            
00014F94                            loc_11B70:
00014F94 5368 0030                  		subq.w	#1,$30(a0)
00014F98 6B00                       		bmi.s	loc_11B7C
00014F9A 6100 BA26                  		bsr.w	SpeedToPos
00014F9E 4E75                       		rts	
00014FA0                            ; ===========================================================================
00014FA0                            
00014FA0                            loc_11B7C:
00014FA0 4268 0030                  		clr.w	$30(a0)
00014FA4 4228 0024                  		clr.b	$24(a0)
00014FA8 3168 0034 000C             		move.w	$34(a0),$C(a0)
00014FAE 7203                       		moveq	#3,d1
00014FB0 2248                       		movea.l	a0,a1
00014FB2 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00014FB8 6000                       		bra.s	Obj5F_MakeShrap
00014FBA                            ; ===========================================================================
00014FBA                            
00014FBA                            Obj5F_Loop:
00014FBA 6100 BECC                  		bsr.w	SingleObjLoad2
00014FBE 6600                       		bne.s	loc_11BCE
00014FC0                            
00014FC0                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00014FC0 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00014FC4 3368 0008 0008             		move.w	8(a0),8(a1)
00014FCA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014FD0 137C 0006 0028             		move.b	#6,$28(a1)
00014FD6 137C 0004 001C             		move.b	#4,$1C(a1)
00014FDC 335A 0010                  		move.w	(a2)+,$10(a1)
00014FE0 335A 0012                  		move.w	(a2)+,$12(a1)
00014FE4 137C 0098 0020             		move.b	#$98,$20(a1)
00014FEA 08E9 0007 0001             		bset	#7,1(a1)
00014FF0                            
00014FF0                            loc_11BCE:
00014FF0 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00014FF4                            
00014FF4 117C 0006 0024             		move.b	#6,$24(a0)
00014FFA                            
00014FFA                            Obj5F_End:				; XREF: Obj5F_Index
00014FFA 6100 B9C6                  		bsr.w	SpeedToPos
00014FFE 0668 0018 0012             		addi.w	#$18,$12(a0)
00015004 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001500A 6100 87CE                  		bsr.w	AnimateSprite
0001500E 4A28 0001                  		tst.b	1(a0)
00015012 6A00 BA04                  		bpl.w	DeleteObject
00015016 6000 B9C4                  		bra.w	DisplaySprite
0001501A                            ; ===========================================================================
0001501A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001502A                            
0001502A                            Ani_obj5F:
0001502A                            	include "_anim\obj5F.asm"
0001502A                            ; ---------------------------------------------------------------------------
0001502A                            ; Animation script - Bomb enemy
0001502A                            ; ---------------------------------------------------------------------------
0001502A 0000                       		dc.w byte_11C12-Ani_obj5F
0001502C 0000                       		dc.w byte_11C16-Ani_obj5F
0001502E 0000                       		dc.w byte_11C1C-Ani_obj5F
00015030 0000                       		dc.w byte_11C20-Ani_obj5F
00015032 0000                       		dc.w byte_11C24-Ani_obj5F
00015034 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00015038 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001503E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00015042 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00015046 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001504A                            		even
0001504A                            		even
0001504A                            
0001504A                            ; ---------------------------------------------------------------------------
0001504A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001504A                            ; ---------------------------------------------------------------------------
0001504A                            Map_obj5F:
0001504A                            	include "_maps\obj5F.asm"
0001504A                            ; ---------------------------------------------------------------------------
0001504A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001504A                            ; ---------------------------------------------------------------------------
0001504A 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001504E 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00015052 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00015056 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001505A 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001505E 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00015062 03                         byte_11C40:	dc.b 3
00015063 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00015068 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001506D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00015072 03                         byte_11C50:	dc.b 3
00015073 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00015078 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001507D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00015082 03                         byte_11C60:	dc.b 3
00015083 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00015088 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001508D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00015092 03                         byte_11C70:	dc.b 3
00015093 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00015098 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001509D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000150A2 03                         byte_11C80:	dc.b 3
000150A3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000150A8 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000150AD E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000150B2 03                         byte_11C90:	dc.b 3
000150B3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000150B8 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000150BD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000150C2 02                         byte_11CA0:	dc.b 2
000150C3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000150C8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000150CD 02                         byte_11CAB:	dc.b 2
000150CE F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000150D3 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000150D8 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000150D9 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000150DE 01                         byte_11CBC:	dc.b 1			; fuse
000150DF E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000150E4 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000150E5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000150EA 01                         byte_11CC8:	dc.b 1			; fireball
000150EB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000150F0                            		even
000150F0                            		even
000150F0                            
000150F0                            ; ===========================================================================
000150F0                            ; ---------------------------------------------------------------------------
000150F0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000150F0                            ; ---------------------------------------------------------------------------
000150F0                            
000150F0                            Obj60:					; XREF: Obj_Index
000150F0 7000                       		moveq	#0,d0
000150F2 1028 0024                  		move.b	$24(a0),d0
000150F6 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000150FA 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000150FE                            ; ===========================================================================
000150FE 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00015100 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00015102 0000                       		dc.w Obj60_Display-Obj60_Index
00015104 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00015106 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00015108                            ; ===========================================================================
00015108                            
00015108                            Obj60_Main:				; XREF: Obj60_Index
00015108 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00015110 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00015116 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001511C 6700                       		beq.s	loc_11D02
0001511E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00015124                            
00015124                            loc_11D02:
00015124 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001512A 6600                       		bne.s	loc_11D10
0001512C 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00015132                            
00015132                            loc_11D10:
00015132 0028 0004 0001             		ori.b	#4,1(a0)
00015138 117C 0004 0018             		move.b	#4,$18(a0)
0001513E 117C 000B 0020             		move.b	#$B,$20(a0)
00015144 117C 000C 0019             		move.b	#$C,$19(a0)
0001514A 7400                       		moveq	#0,d2
0001514C 45E8 0037                  		lea	$37(a0),a2
00015150 264A                       		movea.l	a2,a3
00015152 524A                       		addq.w	#1,a2
00015154 7203                       		moveq	#3,d1
00015156                            
00015156                            Obj60_MakeOrbs:
00015156 6100 BD30                  		bsr.w	SingleObjLoad2
0001515A 6600                       		bne.s	loc_11D90
0001515C 5213                       		addq.b	#1,(a3)
0001515E 3A09                       		move.w	a1,d5
00015160 0445 D000                  		subi.w	#-$3000,d5
00015164 EC4D                       		lsr.w	#6,d5
00015166 0245 007F                  		andi.w	#$7F,d5
0001516A 14C5                       		move.b	d5,(a2)+
0001516C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001516E 137C 0006 0024             		move.b	#6,$24(a1)
00015174 2368 0004 0004             		move.l	4(a0),4(a1)
0001517A 3368 0002 0002             		move.w	2(a0),2(a1)
00015180 0029 0004 0001             		ori.b	#4,1(a1)
00015186 137C 0004 0018             		move.b	#4,$18(a1)
0001518C 137C 0008 0019             		move.b	#8,$19(a1)
00015192 137C 0003 001A             		move.b	#3,$1A(a1)
00015198 137C 0098 0020             		move.b	#$98,$20(a1)
0001519E 1342 0026                  		move.b	d2,$26(a1)
000151A2 0602 0040                  		addi.b	#$40,d2
000151A6 2348 003C                  		move.l	a0,$3C(a1)
000151AA 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000151AE                            
000151AE                            loc_11D90:
000151AE 7001                       		moveq	#1,d0
000151B0 0828 0000 0022             		btst	#0,$22(a0)
000151B6 6700                       		beq.s	Obj60_Move
000151B8 4440                       		neg.w	d0
000151BA                            
000151BA                            Obj60_Move:
000151BA 1140 0036                  		move.b	d0,$36(a0)
000151BE 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000151C4 5428 0024                  		addq.b	#2,$24(a0)
000151C8 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000151CE 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000151D4 6700                       		beq.s	locret_11DBC	; if not, branch
000151D6 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000151DA                            
000151DA                            locret_11DBC:
000151DA 4E75                       		rts	
000151DC                            ; ===========================================================================
000151DC                            
000151DC                            Obj60_ChkSonic:				; XREF: Obj60_Index
000151DC 3038 D008                  		move.w	($FFFFD008).w,d0
000151E0 9068 0008                  		sub.w	8(a0),d0
000151E4 6400                       		bcc.s	loc_11DCA
000151E6 4440                       		neg.w	d0
000151E8                            
000151E8                            loc_11DCA:
000151E8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000151EC 6400                       		bcc.s	Obj60_Animate	; if not, branch
000151EE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000151F2 9068 000C                  		sub.w	$C(a0),d0
000151F6 6400                       		bcc.s	loc_11DDC
000151F8 4440                       		neg.w	d0
000151FA                            
000151FA                            loc_11DDC:
000151FA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000151FE 6400                       		bcc.s	Obj60_Animate	; if not, branch
00015200 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00015204 6600                       		bne.s	Obj60_Animate	; if yes, branch
00015206 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001520C                            
0001520C                            Obj60_Animate:
0001520C 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00015212 6100 85C6                  		bsr.w	AnimateSprite
00015216 6000 0000                  		bra.w	Obj60_ChkDel
0001521A                            ; ===========================================================================
0001521A                            
0001521A                            Obj60_Display:				; XREF: Obj60_Index
0001521A 6100 B7A6                  		bsr.w	SpeedToPos
0001521E                            
0001521E                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001521E 3028 0008                  		move.w	8(a0),d0
00015222 0240 FF80                  		andi.w	#$FF80,d0
00015226 3238 F700                  		move.w	($FFFFF700).w,d1
0001522A 0441 0080                  		subi.w	#$80,d1
0001522E 0241 FF80                  		andi.w	#$FF80,d1
00015232 9041                       		sub.w	d1,d0
00015234 0C40 0280                  		cmpi.w	#$280,d0
00015238 6200 0000                  		bhi.w	Obj60_ChkGone
0001523C 6000 B79E                  		bra.w	DisplaySprite
00015240                            ; ===========================================================================
00015240                            
00015240                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00015240 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015244 7000                       		moveq	#0,d0
00015246 1028 0023                  		move.b	$23(a0),d0
0001524A 6700                       		beq.s	loc_11E34
0001524C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015252                            
00015252                            loc_11E34:
00015252 45E8 0037                  		lea	$37(a0),a2
00015256 7400                       		moveq	#0,d2
00015258 141A                       		move.b	(a2)+,d2
0001525A 5342                       		subq.w	#1,d2
0001525C 6500                       		bcs.s	Obj60_Delete
0001525E                            
0001525E                            loc_11E40:
0001525E 7000                       		moveq	#0,d0
00015260 101A                       		move.b	(a2)+,d0
00015262 ED48                       		lsl.w	#6,d0
00015264 0680 00FF D000             		addi.l	#$FFD000,d0
0001526A 2240                       		movea.l	d0,a1
0001526C 6100 B7AC                  		bsr.w	DeleteObject2
00015270 51CA FFEC                  		dbf	d2,loc_11E40
00015274                            
00015274                            Obj60_Delete:
00015274 6000 B7A2                  		bra.w	DeleteObject
00015278                            ; ===========================================================================
00015278                            
00015278                            Obj60_MoveOrb:				; XREF: Obj60_Index
00015278 2268 003C                  		movea.l	$3C(a0),a1
0001527C 0C11 0060                  		cmpi.b	#$60,0(a1)
00015280 6600 B796                  		bne.w	DeleteObject
00015284 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001528A 6600                       		bne.s	Obj60_Circle
0001528C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00015292 6600                       		bne.s	Obj60_Circle
00015294 5428 0024                  		addq.b	#2,$24(a0)
00015298 5329 0037                  		subq.b	#1,$37(a1)
0001529C 6600                       		bne.s	Obj60_FireOrb
0001529E 5429 0024                  		addq.b	#2,$24(a1)
000152A2                            
000152A2                            Obj60_FireOrb:
000152A2 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000152A8 0829 0000 0022             		btst	#0,$22(a1)
000152AE 6700                       		beq.s	Obj60_Display2
000152B0 4468 0010                  		neg.w	$10(a0)
000152B4                            
000152B4                            Obj60_Display2:
000152B4 6000 B726                  		bra.w	DisplaySprite
000152B8                            ; ===========================================================================
000152B8                            
000152B8                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000152B8 1028 0026                  		move.b	$26(a0),d0
000152BC 4EB9 0000 3736             		jsr	(CalcSine).l
000152C2 E841                       		asr.w	#4,d1
000152C4 D269 0008                  		add.w	8(a1),d1
000152C8 3141 0008                  		move.w	d1,8(a0)
000152CC E840                       		asr.w	#4,d0
000152CE D069 000C                  		add.w	$C(a1),d0
000152D2 3140 000C                  		move.w	d0,$C(a0)
000152D6 1029 0036                  		move.b	$36(a1),d0
000152DA D128 0026                  		add.b	d0,$26(a0)
000152DE 6000 B6FC                  		bra.w	DisplaySprite
000152E2                            ; ===========================================================================
000152E2                            
000152E2                            Obj60_ChkDel2:				; XREF: Obj60_Index
000152E2 6100 B6DE                  		bsr.w	SpeedToPos
000152E6 4A28 0001                  		tst.b	1(a0)
000152EA 6A00 B72C                  		bpl.w	DeleteObject
000152EE 6000 B6EC                  		bra.w	DisplaySprite
000152F2                            ; ===========================================================================
000152F2                            Ani_obj60:
000152F2                            	include "_anim\obj60.asm"
000152F2                            ; ---------------------------------------------------------------------------
000152F2                            ; Animation script - Orbinaut enemy
000152F2                            ; ---------------------------------------------------------------------------
000152F2 0000                       		dc.w byte_11EDA-Ani_obj60
000152F4 0000                       		dc.w byte_11EDE-Ani_obj60
000152F6 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000152FA 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00015300                            		even
00015300                            		even
00015300                            
00015300                            ; ---------------------------------------------------------------------------
00015300                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00015300                            ; ---------------------------------------------------------------------------
00015300                            Map_obj60:
00015300                            	include "_maps\obj60.asm"
00015300                            ; ---------------------------------------------------------------------------
00015300                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00015300                            ; ---------------------------------------------------------------------------
00015300 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00015304 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00015308 01                         byte_11EEC:	dc.b 1
00015309 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001530E 01                         byte_11EF2:	dc.b 1
0001530F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00015314 01                         byte_11EF8:	dc.b 1
00015315 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001531A 01                         byte_11EFE:	dc.b 1
0001531B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00015320                            		even
00015320                            		even
00015320                            
00015320                            ; ===========================================================================
00015320                            ; ---------------------------------------------------------------------------
00015320                            ; Object 16 - harpoon (LZ)
00015320                            ; ---------------------------------------------------------------------------
00015320                            
00015320                            Obj16:					; XREF: Obj_Index
00015320 7000                       		moveq	#0,d0
00015322 1028 0024                  		move.b	$24(a0),d0
00015326 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001532A 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001532E                            ; ===========================================================================
0001532E 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00015330 0000                       		dc.w Obj16_Move-Obj16_Index
00015332 0000                       		dc.w Obj16_Wait-Obj16_Index
00015334                            ; ===========================================================================
00015334                            
00015334                            Obj16_Main:				; XREF: Obj16_Index
00015334 5428 0024                  		addq.b	#2,$24(a0)
00015338 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00015340 317C 03CC 0002             		move.w	#$3CC,2(a0)
00015346 0028 0004 0001             		ori.b	#4,1(a0)
0001534C 117C 0004 0018             		move.b	#4,$18(a0)
00015352 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00015358 117C 0014 0019             		move.b	#$14,$19(a0)
0001535E 317C 003C 0030             		move.w	#60,$30(a0)
00015364                            
00015364                            Obj16_Move:				; XREF: Obj16_Index
00015364 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001536A 6100 846E                  		bsr.w	AnimateSprite
0001536E 7000                       		moveq	#0,d0
00015370 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00015374 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001537A 6000 D738                  		bra.w	MarkObjGone
0001537E                            ; ===========================================================================
0001537E 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00015384                            ; ===========================================================================
00015384                            
00015384                            Obj16_Wait:				; XREF: Obj16_Index
00015384 5368 0030                  		subq.w	#1,$30(a0)
00015388 6A00                       		bpl.s	Obj16_ChkDel
0001538A 317C 003C 0030             		move.w	#60,$30(a0)
00015390 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00015394 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001539A                            
0001539A                            Obj16_ChkDel:
0001539A 6000 D718                  		bra.w	MarkObjGone
0001539E                            ; ===========================================================================
0001539E                            Ani_obj16:
0001539E                            	include "_anim\obj16.asm"
0001539E                            ; ---------------------------------------------------------------------------
0001539E                            ; Animation script - harpoon (LZ)
0001539E                            ; ---------------------------------------------------------------------------
0001539E 0000                       		dc.w byte_11F8A-Ani_obj16
000153A0 0000                       		dc.w byte_11F8E-Ani_obj16
000153A2 0000                       		dc.w byte_11F92-Ani_obj16
000153A4 0000                       		dc.w byte_11F96-Ani_obj16
000153A6 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000153AA 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000153AE 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000153B2 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000153B6                            		even
000153B6                            		even
000153B6                            
000153B6                            ; ---------------------------------------------------------------------------
000153B6                            ; Sprite mappings - harpoon (LZ)
000153B6                            ; ---------------------------------------------------------------------------
000153B6                            Map_obj16:
000153B6                            	include "_maps\obj16.asm"
000153B6                            ; ---------------------------------------------------------------------------
000153B6                            ; Sprite mappings - harpoon (LZ)
000153B6                            ; ---------------------------------------------------------------------------
000153B6 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000153BA 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000153BE 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000153C2 01                         byte_11FA6:	dc.b 1
000153C3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000153C8 01                         byte_11FAC:	dc.b 1
000153C9 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000153CE 02                         byte_11FB2:	dc.b 2
000153CF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000153D4 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000153D9 01                         byte_11FBD:	dc.b 1
000153DA F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000153DF 01                         byte_11FC3:	dc.b 1
000153E0 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000153E5 02                         byte_11FC9:	dc.b 2
000153E6 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000153EB F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000153F0                            		even
000153F0                            		even
000153F0                            
000153F0                            ; ===========================================================================
000153F0                            ; ---------------------------------------------------------------------------
000153F0                            ; Object 61 - blocks (LZ)
000153F0                            ; ---------------------------------------------------------------------------
000153F0                            
000153F0                            Obj61:					; XREF: Obj_Index
000153F0 7000                       		moveq	#0,d0
000153F2 1028 0024                  		move.b	$24(a0),d0
000153F6 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000153FA 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000153FE                            ; ===========================================================================
000153FE 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00015400 0000                       		dc.w Obj61_Action-Obj61_Index
00015402                            
00015402 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00015404 200C                       		dc.b $20, $C
00015406 1010                       		dc.b $10, $10
00015408 1010                       		dc.b $10, $10
0001540A                            ; ===========================================================================
0001540A                            
0001540A                            Obj61_Main:				; XREF: Obj61_Index
0001540A 5428 0024                  		addq.b	#2,$24(a0)
0001540E 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00015416 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001541C 117C 0004 0001             		move.b	#4,1(a0)
00015422 117C 0003 0018             		move.b	#3,$18(a0)
00015428 7000                       		moveq	#0,d0
0001542A 1028 0028                  		move.b	$28(a0),d0
0001542E E648                       		lsr.w	#3,d0
00015430 0240 000E                  		andi.w	#$E,d0
00015434 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00015438 115A 0019                  		move.b	(a2)+,$19(a0)
0001543C 1152 0016                  		move.b	(a2),$16(a0)
00015440 E248                       		lsr.w	#1,d0
00015442 1140 001A                  		move.b	d0,$1A(a0)
00015446 3168 0008 0034             		move.w	8(a0),$34(a0)
0001544C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015452 1028 0028                  		move.b	$28(a0),d0
00015456 0200 000F                  		andi.b	#$F,d0
0001545A 6700                       		beq.s	Obj61_Action
0001545C 0C00 0007                  		cmpi.b	#7,d0
00015460 6700                       		beq.s	Obj61_Action
00015462 117C 0001 0038             		move.b	#1,$38(a0)
00015468                            
00015468                            Obj61_Action:				; XREF: Obj61_Index
00015468 3F28 0008                  		move.w	8(a0),-(sp)
0001546C 7000                       		moveq	#0,d0
0001546E 1028 0028                  		move.b	$28(a0),d0
00015472 0240 000F                  		andi.w	#$F,d0
00015476 D040                       		add.w	d0,d0
00015478 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001547C 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00015480 381F                       		move.w	(sp)+,d4
00015482 4A28 0001                  		tst.b	1(a0)
00015486 6A00                       		bpl.s	Obj61_ChkDel
00015488 7200                       		moveq	#0,d1
0001548A 1228 0019                  		move.b	$19(a0),d1
0001548E 0641 000B                  		addi.w	#$B,d1
00015492 7400                       		moveq	#0,d2
00015494 1428 0016                  		move.b	$16(a0),d2
00015498 3602                       		move.w	d2,d3
0001549A 5243                       		addq.w	#1,d3
0001549C 6100 D93E                  		bsr.w	SolidObject
000154A0 1144 003F                  		move.b	d4,$3F(a0)
000154A4 6100 0000                  		bsr.w	loc_12180
000154A8                            
000154A8                            Obj61_ChkDel:
000154A8 3028 0034                  		move.w	$34(a0),d0
000154AC 0240 FF80                  		andi.w	#$FF80,d0
000154B0 3238 F700                  		move.w	($FFFFF700).w,d1
000154B4 0441 0080                  		subi.w	#$80,d1
000154B8 0241 FF80                  		andi.w	#$FF80,d1
000154BC 9041                       		sub.w	d1,d0
000154BE 0C40 0280                  		cmpi.w	#$280,d0
000154C2 6200 B554                  		bhi.w	DeleteObject
000154C6 6000 B514                  		bra.w	DisplaySprite
000154CA                            ; ===========================================================================
000154CA 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000154CE 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000154D2 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000154D6 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000154DA                            ; ===========================================================================
000154DA                            
000154DA                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000154DA 4E75                       		rts	
000154DC                            ; ===========================================================================
000154DC                            
000154DC                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000154DC 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000154E0 6600                       		bne.s	loc_120D6	; if yes, branch
000154E2 0828 0003 0022             		btst	#3,$22(a0)
000154E8 6700                       		beq.s	locret_120D4
000154EA 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
000154F0                            
000154F0                            locret_120D4:
000154F0 4E75                       		rts	
000154F2                            ; ===========================================================================
000154F2                            
000154F2                            loc_120D6:
000154F2 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000154F6 66F8                       		bne.s	locret_120D4	; if time remains, branch
000154F8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000154FC 4228 0038                  		clr.b	$38(a0)
00015500 4E75                       		rts	
00015502                            ; ===========================================================================
00015502                            
00015502                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00015502 6100 B4BE                  		bsr.w	SpeedToPos
00015506 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001550A 6100 0000                  		bsr.w	ObjHitFloor
0001550E 4A41                       		tst.w	d1
00015510 6A00 0000                  		bpl.w	locret_12106
00015514 5241                       		addq.w	#1,d1
00015516 D368 000C                  		add.w	d1,$C(a0)
0001551A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001551E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00015522                            
00015522                            locret_12106:
00015522 4E75                       		rts	
00015524                            ; ===========================================================================
00015524                            
00015524                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00015524 6100 B49C                  		bsr.w	SpeedToPos
00015528 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001552C 6100 0000                  		bsr.w	ObjHitCeiling
00015530 4A41                       		tst.w	d1
00015532 6A00 0000                  		bpl.w	locret_12126
00015536 9368 000C                  		sub.w	d1,$C(a0)
0001553A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001553E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00015542                            
00015542                            locret_12126:
00015542 4E75                       		rts	
00015544                            ; ===========================================================================
00015544                            
00015544                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00015544 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001554A 6600                       		bne.s	locret_12138	; if not, branch
0001554C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00015550 4228 0038                  		clr.b	$38(a0)
00015554                            
00015554                            locret_12138:
00015554 4E75                       		rts	
00015556                            ; ===========================================================================
00015556                            
00015556                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00015556 3038 F646                  		move.w	($FFFFF646).w,d0
0001555A 9068 000C                  		sub.w	$C(a0),d0
0001555E 6700                       		beq.s	locret_1217E
00015560 6400                       		bcc.s	loc_12162
00015562 0C40 FFFE                  		cmpi.w	#-2,d0
00015566 6C00                       		bge.s	loc_1214E
00015568 70FE                       		moveq	#-2,d0
0001556A                            
0001556A                            loc_1214E:
0001556A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001556E 6100 0000                  		bsr.w	ObjHitCeiling
00015572 4A41                       		tst.w	d1
00015574 6A00 0000                  		bpl.w	locret_12160
00015578 9368 000C                  		sub.w	d1,$C(a0)
0001557C                            
0001557C                            locret_12160:
0001557C 4E75                       		rts	
0001557E                            ; ===========================================================================
0001557E                            
0001557E                            loc_12162:				; XREF: Obj61_Type07
0001557E 0C40 0002                  		cmpi.w	#2,d0
00015582 6F00                       		ble.s	loc_1216A
00015584 7002                       		moveq	#2,d0
00015586                            
00015586                            loc_1216A:
00015586 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001558A 6100 0000                  		bsr.w	ObjHitFloor
0001558E 4A41                       		tst.w	d1
00015590 6A00 0000                  		bpl.w	locret_1217E
00015594 5241                       		addq.w	#1,d1
00015596 D368 000C                  		add.w	d1,$C(a0)
0001559A                            
0001559A                            locret_1217E:
0001559A 4E75                       		rts	
0001559C                            ; ===========================================================================
0001559C                            
0001559C                            loc_12180:				; XREF: Obj61_Action
0001559C 4A28 0038                  		tst.b	$38(a0)
000155A0 6700                       		beq.s	locret_121C0
000155A2 0828 0003 0022             		btst	#3,$22(a0)
000155A8 6600                       		bne.s	loc_1219A
000155AA 4A28 003E                  		tst.b	$3E(a0)
000155AE 6700                       		beq.s	locret_121C0
000155B0 5928 003E                  		subq.b	#4,$3E(a0)
000155B4 6000                       		bra.s	loc_121A6
000155B6                            ; ===========================================================================
000155B6                            
000155B6                            loc_1219A:
000155B6 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000155BC 6700                       		beq.s	locret_121C0
000155BE 5828 003E                  		addq.b	#4,$3E(a0)
000155C2                            
000155C2                            loc_121A6:
000155C2 1028 003E                  		move.b	$3E(a0),d0
000155C6 4EB9 0000 3736             		jsr	(CalcSine).l
000155CC 323C 0400                  		move.w	#$400,d1
000155D0 C1C1                       		muls.w	d1,d0
000155D2 4840                       		swap	d0
000155D4 D068 0030                  		add.w	$30(a0),d0
000155D8 3140 000C                  		move.w	d0,$C(a0)
000155DC                            
000155DC                            locret_121C0:
000155DC 4E75                       		rts	
000155DE                            ; ===========================================================================
000155DE                            ; ---------------------------------------------------------------------------
000155DE                            ; Sprite mappings - blocks (LZ)
000155DE                            ; ---------------------------------------------------------------------------
000155DE                            Map_obj61:
000155DE                            	include "_maps\obj61.asm"
000155DE                            ; ---------------------------------------------------------------------------
000155DE                            ; Sprite mappings - blocks (LZ)
000155DE                            ; ---------------------------------------------------------------------------
000155DE 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000155E2 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000155E6 01                         byte_121CA:	dc.b 1
000155E7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000155EC 02                         byte_121D0:	dc.b 2
000155ED F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000155F2 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000155F7 01                         byte_121DB:	dc.b 1
000155F8 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000155FD 01                         byte_121E1:	dc.b 1
000155FE F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00015604 00                         		even
00015604 00                         		even
00015604                            
00015604                            ; ===========================================================================
00015604                            ; ---------------------------------------------------------------------------
00015604                            ; Object 62 - gargoyle head (LZ)
00015604                            ; ---------------------------------------------------------------------------
00015604                            
00015604                            Obj62:					; XREF: Obj_Index
00015604 7000                       		moveq	#0,d0
00015606 1028 0024                  		move.b	$24(a0),d0
0001560A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001560E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00015612 6000 D4A0                  		bra.w	MarkObjGone
00015616                            ; ===========================================================================
00015616 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00015618 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001561A 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001561C 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001561E                            
0001561E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00015626                            ; ===========================================================================
00015626                            
00015626                            Obj62_Main:				; XREF: Obj62_Index
00015626 5428 0024                  		addq.b	#2,$24(a0)
0001562A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00015632 317C 42E9 0002             		move.w	#$42E9,2(a0)
00015638 0028 0004 0001             		ori.b	#4,1(a0)
0001563E 117C 0003 0018             		move.b	#3,$18(a0)
00015644 117C 0010 0019             		move.b	#$10,$19(a0)
0001564A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001564E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015652 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00015658 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001565E 0228 000F 0028             		andi.b	#$F,$28(a0)
00015664                            
00015664                            Obj62_MakeFire:				; XREF: Obj62_Index
00015664 5328 001E                  		subq.b	#1,$1E(a0)
00015668 6600                       		bne.s	Obj62_NoFire
0001566A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00015670 6100 B5E6                  		bsr.w	ChkObjOnScreen
00015674 6600                       		bne.s	Obj62_NoFire
00015676 6100 B7FA                  		bsr.w	SingleObjLoad
0001567A 6600                       		bne.s	Obj62_NoFire
0001567C 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00015680 5829 0024                  		addq.b	#4,$24(a1)
00015684 3368 0008 0008             		move.w	8(a0),8(a1)
0001568A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015690 1368 0001 0001             		move.b	1(a0),1(a1)
00015696 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001569C                            
0001569C                            Obj62_NoFire:
0001569C 4E75                       		rts	
0001569E                            ; ===========================================================================
0001569E                            
0001569E                            Obj62_FireBall:				; XREF: Obj62_Index
0001569E 5428 0024                  		addq.b	#2,$24(a0)
000156A2 117C 0008 0016             		move.b	#8,$16(a0)
000156A8 117C 0008 0017             		move.b	#8,$17(a0)
000156AE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000156B6 317C 02E9 0002             		move.w	#$2E9,2(a0)
000156BC 0028 0004 0001             		ori.b	#4,1(a0)
000156C2 117C 0004 0018             		move.b	#4,$18(a0)
000156C8 117C 0098 0020             		move.b	#$98,$20(a0)
000156CE 117C 0008 0019             		move.b	#8,$19(a0)
000156D4 117C 0002 001A             		move.b	#2,$1A(a0)
000156DA 5068 000C                  		addq.w	#8,$C(a0)
000156DE 317C 0200 0010             		move.w	#$200,$10(a0)
000156E4 0828 0000 0022             		btst	#0,$22(a0)
000156EA 6600                       		bne.s	Obj62_Sound
000156EC 4468 0010                  		neg.w	$10(a0)
000156F0                            
000156F0                            Obj62_Sound:
000156F0 303C 00AE                  		move.w	#$AE,d0
000156F4 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play lava ball sound
000156FA                            
000156FA                            Obj62_AniFire:				; XREF: Obj62_Index
000156FA 1038 FE05                  		move.b	($FFFFFE05).w,d0
000156FE 0200 0007                  		andi.b	#7,d0
00015702 6600                       		bne.s	Obj62_StopFire
00015704 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001570A                            
0001570A                            Obj62_StopFire:
0001570A 6100 B2B6                  		bsr.w	SpeedToPos
0001570E 0828 0000 0022             		btst	#0,$22(a0)
00015714 6600                       		bne.s	Obj62_StopFire2
00015716 76F8                       		moveq	#-8,d3
00015718 6100 0000                  		bsr.w	ObjHitWallLeft
0001571C 4A41                       		tst.w	d1
0001571E 6B00 B2F8                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00015722 4E75                       		rts	
00015724                            ; ===========================================================================
00015724                            
00015724                            Obj62_StopFire2:
00015724 7608                       		moveq	#8,d3
00015726 6100 0000                  		bsr.w	ObjHitWallRight
0001572A 4A41                       		tst.w	d1
0001572C 6B00 B2EA                  		bmi.w	DeleteObject
00015730 4E75                       		rts	
00015732                            ; ===========================================================================
00015732                            ; ---------------------------------------------------------------------------
00015732                            ; Sprite mappings - gargoyle head (LZ)
00015732                            ; ---------------------------------------------------------------------------
00015732                            Map_obj62:
00015732                            	include "_maps\obj62.asm"
00015732                            ; ---------------------------------------------------------------------------
00015732                            ; Sprite mappings - gargoyle head (LZ)
00015732                            ; ---------------------------------------------------------------------------
00015732 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00015736 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001573A 03                         byte_12320:	dc.b 3
0001573B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00015740 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00015745 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001574A 01                         byte_12330:	dc.b 1
0001574B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00015750 01                         byte_12336:	dc.b 1
00015751 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00015756                            		even
00015756                            		even
00015756                            
00015756                            ; ===========================================================================
00015756                            ; ---------------------------------------------------------------------------
00015756                            ; Object 63 - platforms	on a conveyor belt (LZ)
00015756                            ; ---------------------------------------------------------------------------
00015756                            
00015756                            Obj63:					; XREF: Obj_Index
00015756 7000                       		moveq	#0,d0
00015758 1028 0024                  		move.b	$24(a0),d0
0001575C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00015760 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00015764 3028 0030                  		move.w	$30(a0),d0
00015768 0240 FF80                  		andi.w	#$FF80,d0
0001576C 3238 F700                  		move.w	($FFFFF700).w,d1
00015770 0441 0080                  		subi.w	#$80,d1
00015774 0241 FF80                  		andi.w	#$FF80,d1
00015778 9041                       		sub.w	d1,d0
0001577A 0C40 0280                  		cmpi.w	#$280,d0
0001577E 6200                       		bhi.s	loc_1236A
00015780                            
00015780                            Obj63_Display:				; XREF: loc_1236A
00015780 6000 B25A                  		bra.w	DisplaySprite
00015784                            ; ===========================================================================
00015784                            
00015784                            loc_1236A:				; XREF: Obj63
00015784 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001578A 6600                       		bne.s	loc_12378
0001578C 0C40 FF80                  		cmpi.w	#-$80,d0
00015790 64EE                       		bcc.s	Obj63_Display
00015792                            
00015792                            loc_12378:
00015792 1028 002F                  		move.b	$2F(a0),d0
00015796 6A00 B280                  		bpl.w	DeleteObject
0001579A 0240 007F                  		andi.w	#$7F,d0
0001579E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000157A2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000157A8 6000 B26E                  		bra.w	DeleteObject
000157AC                            ; ===========================================================================
000157AC 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000157AE 0000                       		dc.w loc_124B2-Obj63_Index
000157B0 0000                       		dc.w loc_124C2-Obj63_Index
000157B2 0000                       		dc.w loc_124DE-Obj63_Index
000157B4                            ; ===========================================================================
000157B4                            
000157B4                            Obj63_Main:				; XREF: Obj63_Index
000157B4 1028 0028                  		move.b	$28(a0),d0
000157B8 6B00 0000                  		bmi.w	loc_12460
000157BC 5428 0024                  		addq.b	#2,$24(a0)
000157C0 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000157C8 317C 43F6 0002             		move.w	#$43F6,2(a0)
000157CE 0028 0004 0001             		ori.b	#4,1(a0)
000157D4 117C 0010 0019             		move.b	#$10,$19(a0)
000157DA 117C 0004 0018             		move.b	#4,$18(a0)
000157E0 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
000157E6 6600                       		bne.s	loc_123E2
000157E8 5828 0024                  		addq.b	#4,$24(a0)
000157EC 317C 03F6 0002             		move.w	#$3F6,2(a0)
000157F2 117C 0001 0018             		move.b	#1,$18(a0)
000157F8 6000 0000                  		bra.w	loc_124DE
000157FC                            ; ===========================================================================
000157FC                            
000157FC                            loc_123E2:
000157FC 117C 0004 001A             		move.b	#4,$1A(a0)
00015802 7000                       		moveq	#0,d0
00015804 1028 0028                  		move.b	$28(a0),d0
00015808 3200                       		move.w	d0,d1
0001580A E648                       		lsr.w	#3,d0
0001580C 0240 001E                  		andi.w	#$1E,d0
00015810 45FA 0000                  		lea	Obj63_Data(pc),a2
00015814 D4F2 0000                  		adda.w	(a2,d0.w),a2
00015818 315A 0038                  		move.w	(a2)+,$38(a0)
0001581C 315A 0030                  		move.w	(a2)+,$30(a0)
00015820 214A 003C                  		move.l	a2,$3C(a0)
00015824 0241 000F                  		andi.w	#$F,d1
00015828 E549                       		lsl.w	#2,d1
0001582A 1141 0038                  		move.b	d1,$38(a0)
0001582E 117C 0004 003A             		move.b	#4,$3A(a0)
00015834 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00015838 6700                       		beq.s	loc_1244C
0001583A 117C 0001 003B             		move.b	#1,$3B(a0)
00015840 4428 003A                  		neg.b	$3A(a0)
00015844 7200                       		moveq	#0,d1
00015846 1228 0038                  		move.b	$38(a0),d1
0001584A D228 003A                  		add.b	$3A(a0),d1
0001584E B228 0039                  		cmp.b	$39(a0),d1
00015852 6500                       		bcs.s	loc_12448
00015854 1001                       		move.b	d1,d0
00015856 7200                       		moveq	#0,d1
00015858 4A00                       		tst.b	d0
0001585A 6A00                       		bpl.s	loc_12448
0001585C 1228 0039                  		move.b	$39(a0),d1
00015860 5901                       		subq.b	#4,d1
00015862                            
00015862                            loc_12448:
00015862 1141 0038                  		move.b	d1,$38(a0)
00015866                            
00015866                            loc_1244C:
00015866 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001586C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00015872 6100 0000                  		bsr.w	Obj63_ChangeDir
00015876 6000 0000                  		bra.w	loc_124B2
0001587A                            ; ===========================================================================
0001587A                            
0001587A                            loc_12460:				; XREF: Obj63_Main
0001587A 1140 002F                  		move.b	d0,$2F(a0)
0001587E 0240 007F                  		andi.w	#$7F,d0
00015882 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00015886 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001588C 6600 B18A                  		bne.w	DeleteObject
00015890 D040                       		add.w	d0,d0
00015892 0240 001E                  		andi.w	#$1E,d0
00015896 0640 0070                  		addi.w	#$70,d0
0001589A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000158A0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000158A4 321A                       		move.w	(a2)+,d1
000158A6 2248                       		movea.l	a0,a1
000158A8 6000                       		bra.s	Obj63_MakePtfms
000158AA                            ; ===========================================================================
000158AA                            
000158AA                            Obj63_Loop:
000158AA 6100 B5C6                  		bsr.w	SingleObjLoad
000158AE 6600                       		bne.s	loc_124AA
000158B0                            
000158B0                            Obj63_MakePtfms:			; XREF: loc_12460
000158B0 12BC 0063                  		move.b	#$63,0(a1)
000158B4 335A 0008                  		move.w	(a2)+,8(a1)
000158B8 335A 000C                  		move.w	(a2)+,$C(a1)
000158BC 301A                       		move.w	(a2)+,d0
000158BE 1340 0028                  		move.b	d0,$28(a1)
000158C2                            
000158C2                            loc_124AA:
000158C2 51C9 FFE6                  		dbf	d1,Obj63_Loop
000158C6                            
000158C6 588F                       		addq.l	#4,sp
000158C8 4E75                       		rts	
000158CA                            ; ===========================================================================
000158CA                            
000158CA                            loc_124B2:				; XREF: Obj63_Index
000158CA 7200                       		moveq	#0,d1
000158CC 1228 0019                  		move.b	$19(a0),d1
000158D0 4EB9 0000 A47A             		jsr	(PlatformObject).l
000158D6 6000 0000                  		bra.w	sub_12502
000158DA                            ; ===========================================================================
000158DA                            
000158DA                            loc_124C2:				; XREF: Obj63_Index
000158DA 7200                       		moveq	#0,d1
000158DC 1228 0019                  		move.b	$19(a0),d1
000158E0 4EB9 0000 A5EE             		jsr	(ExitPlatform).l
000158E6 3F28 0008                  		move.w	8(a0),-(sp)
000158EA 6100 0000                  		bsr.w	sub_12502
000158EE 341F                       		move.w	(sp)+,d2
000158F0 4EF9 0000 AB58             		jmp	(MvSonicOnPtfm2).l
000158F6                            ; ===========================================================================
000158F6                            
000158F6                            loc_124DE:				; XREF: Obj63_Index
000158F6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000158FA 0240 0003                  		andi.w	#3,d0
000158FE 6600                       		bne.s	loc_124FC
00015900 7201                       		moveq	#1,d1
00015902 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00015906 6700                       		beq.s	loc_124F2
00015908 4401                       		neg.b	d1
0001590A                            
0001590A                            loc_124F2:
0001590A D328 001A                  		add.b	d1,$1A(a0)
0001590E 0228 0003 001A             		andi.b	#3,$1A(a0)
00015914                            
00015914                            loc_124FC:
00015914 588F                       		addq.l	#4,sp
00015916 6000 D19C                  		bra.w	MarkObjGone
0001591A                            
0001591A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001591A                            
0001591A                            
0001591A                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001591A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001591E 6700                       		beq.s	loc_12520
00015920 4A28 003B                  		tst.b	$3B(a0)
00015924 6600                       		bne.s	loc_12520
00015926 117C 0001 003B             		move.b	#1,$3B(a0)
0001592C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00015932 4428 003A                  		neg.b	$3A(a0)
00015936 6000                       		bra.s	loc_12534
00015938                            ; ===========================================================================
00015938                            
00015938                            loc_12520:
00015938 3028 0008                  		move.w	8(a0),d0
0001593C B068 0034                  		cmp.w	$34(a0),d0
00015940 6600                       		bne.s	loc_1256A
00015942 3028 000C                  		move.w	$C(a0),d0
00015946 B068 0036                  		cmp.w	$36(a0),d0
0001594A 6600                       		bne.s	loc_1256A
0001594C                            
0001594C                            loc_12534:
0001594C 7200                       		moveq	#0,d1
0001594E 1228 0038                  		move.b	$38(a0),d1
00015952 D228 003A                  		add.b	$3A(a0),d1
00015956 B228 0039                  		cmp.b	$39(a0),d1
0001595A 6500                       		bcs.s	loc_12552
0001595C 1001                       		move.b	d1,d0
0001595E 7200                       		moveq	#0,d1
00015960 4A00                       		tst.b	d0
00015962 6A00                       		bpl.s	loc_12552
00015964 1228 0039                  		move.b	$39(a0),d1
00015968 5901                       		subq.b	#4,d1
0001596A                            
0001596A                            loc_12552:
0001596A 1141 0038                  		move.b	d1,$38(a0)
0001596E 2268 003C                  		movea.l	$3C(a0),a1
00015972 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00015978 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001597E 6100 0000                  		bsr.w	Obj63_ChangeDir
00015982                            
00015982                            loc_1256A:
00015982 6100 B03E                  		bsr.w	SpeedToPos
00015986 4E75                       		rts	
00015988                            ; End of function sub_12502
00015988                            
00015988                            
00015988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015988                            
00015988                            
00015988                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00015988 7000                       		moveq	#0,d0
0001598A 343C FF00                  		move.w	#-$100,d2
0001598E 3028 0008                  		move.w	8(a0),d0
00015992 9068 0034                  		sub.w	$34(a0),d0
00015996 6400                       		bcc.s	loc_12584
00015998 4440                       		neg.w	d0
0001599A 4442                       		neg.w	d2
0001599C                            
0001599C                            loc_12584:
0001599C 7200                       		moveq	#0,d1
0001599E 363C FF00                  		move.w	#-$100,d3
000159A2 3228 000C                  		move.w	$C(a0),d1
000159A6 9268 0036                  		sub.w	$36(a0),d1
000159AA 6400                       		bcc.s	loc_12598
000159AC 4441                       		neg.w	d1
000159AE 4443                       		neg.w	d3
000159B0                            
000159B0                            loc_12598:
000159B0 B240                       		cmp.w	d0,d1
000159B2 6500                       		bcs.s	loc_125C2
000159B4 3028 0008                  		move.w	8(a0),d0
000159B8 9068 0034                  		sub.w	$34(a0),d0
000159BC 6700                       		beq.s	loc_125AE
000159BE 48C0                       		ext.l	d0
000159C0 E180                       		asl.l	#8,d0
000159C2 81C1                       		divs.w	d1,d0
000159C4 4440                       		neg.w	d0
000159C6                            
000159C6                            loc_125AE:
000159C6 3140 0010                  		move.w	d0,$10(a0)
000159CA 3143 0012                  		move.w	d3,$12(a0)
000159CE 4840                       		swap	d0
000159D0 3140 000A                  		move.w	d0,$A(a0)
000159D4 4268 000E                  		clr.w	$E(a0)
000159D8 4E75                       		rts	
000159DA                            ; ===========================================================================
000159DA                            
000159DA                            loc_125C2:				; XREF: Obj63_ChangeDir
000159DA 3228 000C                  		move.w	$C(a0),d1
000159DE 9268 0036                  		sub.w	$36(a0),d1
000159E2 6700                       		beq.s	loc_125D4
000159E4 48C1                       		ext.l	d1
000159E6 E181                       		asl.l	#8,d1
000159E8 83C0                       		divs.w	d0,d1
000159EA 4441                       		neg.w	d1
000159EC                            
000159EC                            loc_125D4:
000159EC 3141 0012                  		move.w	d1,$12(a0)
000159F0 3142 0010                  		move.w	d2,$10(a0)
000159F4 4841                       		swap	d1
000159F6 3141 000E                  		move.w	d1,$E(a0)
000159FA 4268 000A                  		clr.w	$A(a0)
000159FE 4E75                       		rts	
00015A00                            ; End of function Obj63_ChangeDir
00015A00                            
00015A00                            ; ===========================================================================
00015A00 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00015A02 0000                       		dc.w word_12610-Obj63_Data
00015A04 0000                       		dc.w word_12628-Obj63_Data
00015A06 0000                       		dc.w word_1263C-Obj63_Data
00015A08 0000                       		dc.w word_12650-Obj63_Data
00015A0A 0000                       		dc.w word_12668-Obj63_Data
00015A0C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00015A1C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00015A28 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00015A38 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00015A40 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00015A54 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00015A68 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00015A80 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00015A94                            
00015A94                            ; ---------------------------------------------------------------------------
00015A94                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00015A94                            ; ---------------------------------------------------------------------------
00015A94                            Map_obj63:
00015A94                            	include "_maps\obj63.asm"
00015A94                            ; ---------------------------------------------------------------------------
00015A94                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00015A94                            ; ---------------------------------------------------------------------------
00015A94 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00015A98 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00015A9C 0000                       		dc.w byte_1269E-Map_obj63
00015A9E 01                         byte_12686:	dc.b 1
00015A9F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00015AA4 01                         byte_1268C:	dc.b 1
00015AA5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00015AAA 01                         byte_12692:	dc.b 1
00015AAB F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00015AB0 01                         byte_12698:	dc.b 1
00015AB1 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00015AB6 01                         byte_1269E:	dc.b 1
00015AB7 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00015ABC                            		even
00015ABC                            		even
00015ABC                            
00015ABC                            ; ===========================================================================
00015ABC                            ; ---------------------------------------------------------------------------
00015ABC                            ; Object 64 - bubbles (LZ)
00015ABC                            ; ---------------------------------------------------------------------------
00015ABC                            
00015ABC                            Obj64:					; XREF: Obj_Index
00015ABC 7000                       		moveq	#0,d0
00015ABE 1028 0024                  		move.b	$24(a0),d0
00015AC2 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00015AC6 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00015ACA                            ; ===========================================================================
00015ACA 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00015ACC 0000                       		dc.w Obj64_Animate-Obj64_Index
00015ACE 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00015AD0 0000                       		dc.w Obj64_Display2-Obj64_Index
00015AD2 0000                       		dc.w Obj64_Delete3-Obj64_Index
00015AD4 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00015AD6                            ; ===========================================================================
00015AD6                            
00015AD6                            Obj64_Main:				; XREF: Obj64_Index
00015AD6 5428 0024                  		addq.b	#2,$24(a0)
00015ADA 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00015AE2 317C 8348 0002             		move.w	#$8348,2(a0)
00015AE8 117C 0084 0001             		move.b	#$84,1(a0)
00015AEE 117C 0010 0019             		move.b	#$10,$19(a0)
00015AF4 117C 0001 0018             		move.b	#1,$18(a0)
00015AFA 1028 0028                  		move.b	$28(a0),d0	; get object type
00015AFE 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00015B00 5028 0024                  		addq.b	#8,$24(a0)
00015B04 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00015B08 1140 0032                  		move.b	d0,$32(a0)
00015B0C 1140 0033                  		move.b	d0,$33(a0)
00015B10 117C 0006 001C             		move.b	#6,$1C(a0)
00015B16 6000 0000                  		bra.w	Obj64_BblMaker
00015B1A                            ; ===========================================================================
00015B1A                            
00015B1A                            Obj64_Bubble:				; XREF: Obj64_Main
00015B1A 1140 001C                  		move.b	d0,$1C(a0)
00015B1E 3168 0008 0030             		move.w	8(a0),$30(a0)
00015B24 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00015B2A 4EB9 0000 3710             		jsr	(RandomNumber).l
00015B30 1140 0026                  		move.b	d0,$26(a0)
00015B34                            
00015B34                            Obj64_Animate:				; XREF: Obj64_Index
00015B34 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00015B3A 4EB9 0000 D7DA             		jsr	AnimateSprite
00015B40 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00015B46 6600                       		bne.s	Obj64_ChkWater
00015B48 117C 0001 002E             		move.b	#1,$2E(a0)
00015B4E                            
00015B4E                            Obj64_ChkWater:				; XREF: Obj64_Index
00015B4E 3038 F646                  		move.w	($FFFFF646).w,d0
00015B52 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00015B56 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00015B58                            
00015B58                            Obj64_Burst:				; XREF: Obj64_Wobble
00015B58 117C 0006 0024             		move.b	#6,$24(a0)
00015B5E 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00015B62 6000 0000                  		bra.w	Obj64_Display2
00015B66                            ; ===========================================================================
00015B66                            
00015B66                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00015B66 1028 0026                  		move.b	$26(a0),d0
00015B6A 5228 0026                  		addq.b	#1,$26(a0)
00015B6E 0240 007F                  		andi.w	#$7F,d0
00015B72 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015B78 1031 0000                  		move.b	(a1,d0.w),d0
00015B7C 4880                       		ext.w	d0
00015B7E D068 0030                  		add.w	$30(a0),d0
00015B82 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00015B86 4A28 002E                  		tst.b	$2E(a0)
00015B8A 6700                       		beq.s	Obj64_Display
00015B8C 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00015B90 6700                       		beq.s	Obj64_Display	; if not, branch
00015B92                            
00015B92 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00015B96 303C 00AD                  		move.w	#$AD,d0
00015B9A 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00015BA0 43F8 D000                  		lea	($FFFFD000).w,a1
00015BA4 4269 0010                  		clr.w	$10(a1)
00015BA8 4269 0012                  		clr.w	$12(a1)
00015BAC 4269 0014                  		clr.w	$14(a1)
00015BB0 137C 0015 001C             		move.b	#$15,$1C(a1)
00015BB6 337C 0023 003E             		move.w	#$23,$3E(a1)
00015BBC 137C 0000 003C             		move.b	#0,$3C(a1)
00015BC2 08A9 0005 0022             		bclr	#5,$22(a1)
00015BC8 08A9 0004 0022             		bclr	#4,$22(a1)
00015BCE 0829 0002 0022             		btst	#2,$22(a1)
00015BD4 6700 FF82                  		beq.w	Obj64_Burst
00015BD8 08A9 0002 0022             		bclr	#2,$22(a1)
00015BDE 137C 0013 0016             		move.b	#$13,$16(a1)
00015BE4 137C 0009 0017             		move.b	#9,$17(a1)
00015BEA 5B69 000C                  		subq.w	#5,$C(a1)
00015BEE 6000 FF68                  		bra.w	Obj64_Burst
00015BF2                            ; ===========================================================================
00015BF2                            
00015BF2                            Obj64_Display:				; XREF: Obj64_Wobble
00015BF2 6100 ADCE                  		bsr.w	SpeedToPos
00015BF6 4A28 0001                  		tst.b	1(a0)
00015BFA 6A00                       		bpl.s	Obj64_Delete
00015BFC 4EFA ADDE                  		jmp	DisplaySprite
00015C00                            ; ===========================================================================
00015C00                            
00015C00                            Obj64_Delete:
00015C00 4EFA AE16                  		jmp	DeleteObject
00015C04                            ; ===========================================================================
00015C04                            
00015C04                            Obj64_Display2:				; XREF: Obj64_Index
00015C04 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00015C0A 4EB9 0000 D7DA             		jsr	AnimateSprite
00015C10 4A28 0001                  		tst.b	1(a0)
00015C14 6A00                       		bpl.s	Obj64_Delete2
00015C16 4EFA ADC4                  		jmp	DisplaySprite
00015C1A                            ; ===========================================================================
00015C1A                            
00015C1A                            Obj64_Delete2:
00015C1A 4EFA ADFC                  		jmp	DeleteObject
00015C1E                            ; ===========================================================================
00015C1E                            
00015C1E                            Obj64_Delete3:				; XREF: Obj64_Index
00015C1E 6000 ADF8                  		bra.w	DeleteObject
00015C22                            ; ===========================================================================
00015C22                            
00015C22                            Obj64_BblMaker:				; XREF: Obj64_Index
00015C22 4A68 0036                  		tst.w	$36(a0)
00015C26 6600                       		bne.s	loc_12874
00015C28 3038 F646                  		move.w	($FFFFF646).w,d0
00015C2C B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00015C30 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00015C34 4A28 0001                  		tst.b	1(a0)
00015C38 6A00 0000                  		bpl.w	Obj64_ChkDel
00015C3C 5368 0038                  		subq.w	#1,$38(a0)
00015C40 6A00 0000                  		bpl.w	loc_12914
00015C44 317C 0001 0036             		move.w	#1,$36(a0)
00015C4A                            
00015C4A                            loc_1283A:
00015C4A 4EB9 0000 3710             		jsr	(RandomNumber).l
00015C50 3200                       		move.w	d0,d1
00015C52 0240 0007                  		andi.w	#7,d0
00015C56 0C40 0006                  		cmpi.w	#6,d0
00015C5A 64EE                       		bcc.s	loc_1283A
00015C5C                            
00015C5C 1140 0034                  		move.b	d0,$34(a0)
00015C60 0241 000C                  		andi.w	#$C,d1
00015C64 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00015C6A D2C1                       		adda.w	d1,a1
00015C6C 2149 003C                  		move.l	a1,$3C(a0)
00015C70 5328 0032                  		subq.b	#1,$32(a0)
00015C74 6A00                       		bpl.s	loc_12872
00015C76 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015C7C 08E8 0007 0036             		bset	#7,$36(a0)
00015C82                            
00015C82                            loc_12872:
00015C82 6000                       		bra.s	loc_1287C
00015C84                            ; ===========================================================================
00015C84                            
00015C84                            loc_12874:				; XREF: Obj64_BblMaker
00015C84 5368 0038                  		subq.w	#1,$38(a0)
00015C88 6A00 0000                  		bpl.w	loc_12914
00015C8C                            
00015C8C                            loc_1287C:
00015C8C 4EB9 0000 3710             		jsr	(RandomNumber).l
00015C92 0240 001F                  		andi.w	#$1F,d0
00015C96 3140 0038                  		move.w	d0,$38(a0)
00015C9A 6100 B1D6                  		bsr.w	SingleObjLoad
00015C9E 6600                       		bne.s	loc_128F8
00015CA0 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00015CA4 3368 0008 0008             		move.w	8(a0),8(a1)
00015CAA 4EB9 0000 3710             		jsr	(RandomNumber).l
00015CB0 0240 000F                  		andi.w	#$F,d0
00015CB4 5140                       		subq.w	#8,d0
00015CB6 D169 0008                  		add.w	d0,8(a1)
00015CBA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015CC0 7000                       		moveq	#0,d0
00015CC2 1028 0034                  		move.b	$34(a0),d0
00015CC6 2468 003C                  		movea.l	$3C(a0),a2
00015CCA 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00015CD0 0828 0007 0036             		btst	#7,$36(a0)
00015CD6 6700                       		beq.s	loc_128F8
00015CD8 4EB9 0000 3710             		jsr	(RandomNumber).l
00015CDE 0240 0003                  		andi.w	#3,d0
00015CE2 6600                       		bne.s	loc_128E4
00015CE4 08E8 0006 0036             		bset	#6,$36(a0)
00015CEA 6600                       		bne.s	loc_128F8
00015CEC 137C 0002 0028             		move.b	#2,$28(a1)
00015CF2                            
00015CF2                            loc_128E4:
00015CF2 4A28 0034                  		tst.b	$34(a0)
00015CF6 6600                       		bne.s	loc_128F8
00015CF8 08E8 0006 0036             		bset	#6,$36(a0)
00015CFE 6600                       		bne.s	loc_128F8
00015D00 137C 0002 0028             		move.b	#2,$28(a1)
00015D06                            
00015D06                            loc_128F8:
00015D06 5328 0034                  		subq.b	#1,$34(a0)
00015D0A 6A00                       		bpl.s	loc_12914
00015D0C 4EB9 0000 3710             		jsr	(RandomNumber).l
00015D12 0240 007F                  		andi.w	#$7F,d0
00015D16 0640 0080                  		addi.w	#$80,d0
00015D1A D168 0038                  		add.w	d0,$38(a0)
00015D1E 4268 0036                  		clr.w	$36(a0)
00015D22                            
00015D22                            loc_12914:
00015D22 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00015D28 4EB9 0000 D7DA             		jsr	AnimateSprite
00015D2E                            
00015D2E                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00015D2E 3028 0008                  		move.w	8(a0),d0
00015D32 0240 FF80                  		andi.w	#$FF80,d0
00015D36 3238 F700                  		move.w	($FFFFF700).w,d1
00015D3A 0441 0080                  		subi.w	#$80,d1
00015D3E 0241 FF80                  		andi.w	#$FF80,d1
00015D42 9041                       		sub.w	d1,d0
00015D44 0C40 0280                  		cmpi.w	#$280,d0
00015D48 6200 ACCE                  		bhi.w	DeleteObject
00015D4C 3038 F646                  		move.w	($FFFFF646).w,d0
00015D50 B068 000C                  		cmp.w	$C(a0),d0
00015D54 6500 AC86                  		bcs.w	DisplaySprite
00015D58 4E75                       		rts	
00015D5A                            ; ===========================================================================
00015D5A                            ; bubble production sequence
00015D5A                            
00015D5A                            ; 0 = small bubble, 1 =	large bubble
00015D5A                            
00015D5A 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00015D6C                            
00015D6C                            ; ===========================================================================
00015D6C                            
00015D6C                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00015D6C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00015D70 6B00                       		bmi.s	loc_12998
00015D72 43F8 D000                  		lea	($FFFFD000).w,a1
00015D76 3029 0008                  		move.w	8(a1),d0
00015D7A 3228 0008                  		move.w	8(a0),d1
00015D7E 0441 0010                  		subi.w	#$10,d1
00015D82 B240                       		cmp.w	d0,d1
00015D84 6400                       		bcc.s	loc_12998
00015D86 0641 0020                  		addi.w	#$20,d1
00015D8A B240                       		cmp.w	d0,d1
00015D8C 6500                       		bcs.s	loc_12998
00015D8E 3029 000C                  		move.w	$C(a1),d0
00015D92 3228 000C                  		move.w	$C(a0),d1
00015D96 B240                       		cmp.w	d0,d1
00015D98 6400                       		bcc.s	loc_12998
00015D9A 0641 0010                  		addi.w	#$10,d1
00015D9E B240                       		cmp.w	d0,d1
00015DA0 6500                       		bcs.s	loc_12998
00015DA2 7001                       		moveq	#1,d0
00015DA4 4E75                       		rts	
00015DA6                            ; ===========================================================================
00015DA6                            
00015DA6                            loc_12998:
00015DA6 7000                       		moveq	#0,d0
00015DA8 4E75                       		rts	
00015DAA                            ; ===========================================================================
00015DAA                            Ani_obj64:
00015DAA                            	include "_anim\obj64.asm"
00015DAA                            ; ---------------------------------------------------------------------------
00015DAA                            ; Animation script - bubbles (LZ)
00015DAA                            ; ---------------------------------------------------------------------------
00015DAA 0000                       		dc.w byte_129AA-Ani_obj64
00015DAC 0000                       		dc.w byte_129B0-Ani_obj64
00015DAE 0000                       		dc.w byte_129B6-Ani_obj64
00015DB0 0000                       		dc.w byte_129BE-Ani_obj64
00015DB2 0000                       		dc.w byte_129BE-Ani_obj64
00015DB4 0000                       		dc.w byte_129C0-Ani_obj64
00015DB6 0000                       		dc.w byte_129C6-Ani_obj64
00015DB8 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00015DBE 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00015DC4 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00015DCC 04FC                       byte_129BE:	dc.b 4,	$FC
00015DCE 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00015DD4 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00015DDA 00                         		even
00015DDA 00                         		even
00015DDA                            
00015DDA                            ; ---------------------------------------------------------------------------
00015DDA                            ; Sprite mappings - bubbles (LZ)
00015DDA                            ; ---------------------------------------------------------------------------
00015DDA                            Map_obj64:
00015DDA                            	include "_maps\obj64.asm"
00015DDA                            ; ---------------------------------------------------------------------------
00015DDA                            ; Sprite mappings - bubbles (LZ)
00015DDA                            ; ---------------------------------------------------------------------------
00015DDA 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00015DDE 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00015DE2 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00015DE6 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00015DEA 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00015DEE 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00015DF2 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00015DF6 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00015DFA 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00015DFE 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00015E02 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00015E06 0000                       		dc.w byte_12A9C-Map_obj64
00015E08 01                         byte_129FA:	dc.b 1
00015E09 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00015E0E 01                         byte_12A00:	dc.b 1
00015E0F FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00015E14 01                         byte_12A06:	dc.b 1
00015E15 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00015E1A 01                         byte_12A0C:	dc.b 1
00015E1B F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00015E20 01                         byte_12A12:	dc.b 1
00015E21 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00015E26 01                         byte_12A18:	dc.b 1
00015E27 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00015E2C 01                         byte_12A1E:	dc.b 1
00015E2D F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00015E32 04                         byte_12A24:	dc.b 4
00015E33 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00015E38 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00015E3D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00015E42 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00015E47 04                         byte_12A39:	dc.b 4
00015E48 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00015E4D F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00015E52 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00015E57 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00015E5C 01                         byte_12A4E:	dc.b 1
00015E5D F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00015E62 01                         byte_12A54:	dc.b 1
00015E63 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00015E68 01                         byte_12A5A:	dc.b 1
00015E69 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00015E6E 01                         byte_12A60:	dc.b 1
00015E6F F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00015E74 01                         byte_12A66:	dc.b 1
00015E75 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00015E7A 01                         byte_12A6C:	dc.b 1
00015E7B F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00015E80 01                         byte_12A72:	dc.b 1
00015E81 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00015E86 01                         byte_12A78:	dc.b 1
00015E87 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00015E8C 01                         byte_12A7E:	dc.b 1
00015E8D F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00015E92 01                         byte_12A84:	dc.b 1
00015E93 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00015E98 01                         byte_12A8A:	dc.b 1
00015E99 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00015E9E 01                         byte_12A90:	dc.b 1
00015E9F F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00015EA4 01                         byte_12A96:	dc.b 1
00015EA5 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00015EAA 00                         byte_12A9C:	dc.b 0
00015EAC 00                         		even
00015EAC 00                         		even
00015EAC                            
00015EAC                            ; ===========================================================================
00015EAC                            ; ---------------------------------------------------------------------------
00015EAC                            ; Object 65 - waterfalls (LZ)
00015EAC                            ; ---------------------------------------------------------------------------
00015EAC                            
00015EAC                            Obj65:					; XREF: Obj_Index
00015EAC 7000                       		moveq	#0,d0
00015EAE 1028 0024                  		move.b	$24(a0),d0
00015EB2 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00015EB6 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00015EBA                            ; ===========================================================================
00015EBA 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00015EBC 0000                       		dc.w Obj65_Animate-Obj65_Index
00015EBE 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00015EC0 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00015EC2 0000                       		dc.w loc_12B36-Obj65_Index
00015EC4                            ; ===========================================================================
00015EC4                            
00015EC4                            Obj65_Main:				; XREF: Obj65_Index
00015EC4 5828 0024                  		addq.b	#4,$24(a0)
00015EC8 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00015ED0 317C 4259 0002             		move.w	#$4259,2(a0)
00015ED6 0028 0004 0001             		ori.b	#4,1(a0)
00015EDC 117C 0018 0019             		move.b	#$18,$19(a0)
00015EE2 117C 0001 0018             		move.b	#1,$18(a0)
00015EE8 1028 0028                  		move.b	$28(a0),d0	; get object type
00015EEC 6A00                       		bpl.s	loc_12AE6
00015EEE 08E8 0007 0002             		bset	#7,2(a0)
00015EF4                            
00015EF4                            loc_12AE6:
00015EF4 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00015EF8 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00015EFC 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00015F00 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00015F02 4228 0018                  		clr.b	$18(a0)
00015F06 5528 0024                  		subq.b	#2,$24(a0)
00015F0A 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00015F10 6700                       		beq.s	loc_12B0A	; if not, branch
00015F12 117C 0006 0024             		move.b	#6,$24(a0)
00015F18                            
00015F18                            loc_12B0A:
00015F18 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00015F1E 6700                       		beq.s	Obj65_Animate	; if not, branch
00015F20 117C 0008 0024             		move.b	#8,$24(a0)
00015F26                            
00015F26                            Obj65_Animate:				; XREF: Obj65_Index
00015F26 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00015F2C 4EB9 0000 D7DA             		jsr	AnimateSprite
00015F32                            
00015F32                            Obj65_ChkDel:				; XREF: Obj65_Index
00015F32 6000 CB80                  		bra.w	MarkObjGone
00015F36                            ; ===========================================================================
00015F36                            
00015F36                            Obj65_FixHeight:			; XREF: Obj65_Index
00015F36 3038 F646                  		move.w	($FFFFF646).w,d0
00015F3A 0440 0010                  		subi.w	#$10,d0
00015F3E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00015F42 60E2                       		bra.s	Obj65_Animate
00015F44                            ; ===========================================================================
00015F44                            
00015F44                            loc_12B36:				; XREF: Obj65_Index
00015F44 08A8 0007 0002             		bclr	#7,2(a0)
00015F4A 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00015F50 6600                       		bne.s	Obj65_Animate2
00015F52 08E8 0007 0002             		bset	#7,2(a0)
00015F58                            
00015F58                            Obj65_Animate2:
00015F58 60CC                       		bra.s	Obj65_Animate
00015F5A                            ; ===========================================================================
00015F5A                            Ani_obj65:
00015F5A                            	include "_anim\obj65.asm"
00015F5A                            ; ---------------------------------------------------------------------------
00015F5A                            ; Animation script - waterfall (LZ)
00015F5A                            ; ---------------------------------------------------------------------------
00015F5A 0000                       		dc.w byte_12B4E-Ani_obj65
00015F5C 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00015F62 00                         		even
00015F62 00                         		even
00015F62                            
00015F62                            ; ---------------------------------------------------------------------------
00015F62                            ; Sprite mappings - waterfalls (LZ)
00015F62                            ; ---------------------------------------------------------------------------
00015F62                            Map_obj65:
00015F62                            	include "_maps\obj65.asm"
00015F62                            ; ---------------------------------------------------------------------------
00015F62                            ; Sprite mappings - waterfalls (LZ)
00015F62                            ; ---------------------------------------------------------------------------
00015F62 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00015F66 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00015F6A 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00015F6E 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00015F72 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00015F76 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00015F7A 01                         byte_12B6C:	dc.b 1
00015F7B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00015F80 02                         byte_12B72:	dc.b 2
00015F81 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00015F86 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00015F8B 02                         byte_12B7D:	dc.b 2
00015F8C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00015F91 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00015F96 01                         byte_12B88:	dc.b 1
00015F97 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00015F9C 02                         byte_12B8E:	dc.b 2
00015F9D F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00015FA2 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00015FA7 01                         byte_12B99:	dc.b 1
00015FA8 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00015FAD 01                         byte_12B9F:	dc.b 1
00015FAE F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00015FB3 01                         byte_12BA5:	dc.b 1
00015FB4 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00015FB9 02                         byte_12BAB:	dc.b 2
00015FBA F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00015FBF 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00015FC4 02                         byte_12BB6:	dc.b 2
00015FC5 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00015FCA F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00015FCF 02                         byte_12BC1:	dc.b 2
00015FD0 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00015FD5 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00015FDA 02                         byte_12BCC:	dc.b 2
00015FDB F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00015FE0 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00015FE6 00                         		even
00015FE6 00                         		even
00015FE6                            
00015FE6                            ; ===========================================================================
00015FE6                            
00015FE6                            SpinDash_dust:
00015FE6                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00015FE6 7000                       		moveq	#0,d0
00015FE8 1028 0024                  		move.b	$24(a0),d0
00015FEC 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00015FF0 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00015FF4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015FF4 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00015FF6 0000                       		dc loc_1DD90-off_1DD2E; 1
00015FF8 0000                       		dc loc_1DE46-off_1DD2E; 2
00015FFA 0000                       		dc loc_1DE4A-off_1DD2E; 3
00015FFC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015FFC                            
00015FFC                            loc_1DD36:				; DATA XREF: h+6DBA?o
00015FFC 5428 0024                  		addq.b	#2,$24(a0)
00016000 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00016008 0028 0004 0001             		or.b	#4,1(a0)
0001600E 117C 0001 0018             		move.b	#1,$18(a0)
00016014 117C 0010 0019             		move.b	#$10,$19(a0)
0001601A 317C 07A0 0002             		move	#$7A0,2(a0)
00016020 317C D000 003E             		move	#-$3000,$3E(a0)
00016026 317C F400 003C             		move	#$F400,$3C(a0)
0001602C B0FC D1C0                  		cmp	#-$2E40,a0
00016030 6700                       		beq.s	loc_1DD8C
00016032 117C 0001 0034             		move.b	#1,$34(a0)
00016038                            ;		cmp	#2,($FFFFFF70).w
00016038                            ;		beq.s	loc_1DD8C
00016038                            ;		move	#$48C,2(a0)
00016038                            ;		move	#-$4FC0,$3E(a0)
00016038                            ;		move	#-$6E80,$3C(a0)
00016038                            
00016038                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00016038                            ;		bsr.w	sub_16D6E
00016038                            
00016038                            loc_1DD90:				; DATA XREF: h+6DBA?o
00016038 3468 003E                  		movea.w	$3E(a0),a2
0001603C 7000                       		moveq	#0,d0
0001603E 1028 001C                  		move.b	$1C(a0),d0
00016042 D040                       		add	d0,d0
00016044 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00016048 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
0001604C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001604C 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
0001604E 0000                       		dc loc_1DDAC-off_1DDA4; 1
00016050 0000                       		dc loc_1DDCC-off_1DDA4; 2
00016052 0000                       		dc loc_1DE20-off_1DDA4; 3
00016054                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00016054                            
00016054                            loc_1DDAC:				; DATA XREF: h+6E30?o
00016054 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
0001605A 4A28 001D                  		tst.b	$1D(a0)
0001605E 6600                       		bne.s	loc_1DE28
00016060 316A 0008 0008             		move	8(a2),8(a0)
00016066 117C 0000 0022             		move.b	#0,$22(a0)
0001606C 0268 7FFF 0002             		and	#$7FFF,2(a0)
00016072 6000                       		bra.s	loc_1DE28
00016074                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00016074                            
00016074                            loc_1DDCC:				; DATA XREF: h+6E30?o
00016074                            ;		cmp.b	#$C,$28(a2)
00016074                            ;		bcs.s	loc_1DE3E
00016074 0C2A 0004 0024             		cmp.b	#4,$24(a2)
0001607A 6400                       		bcc.s	loc_1DE3E
0001607C 4A2A 0039                  		tst.b	$39(a2)
00016080 6700                       		beq.s	loc_1DE3E
00016082 316A 0008 0008             		move	8(a2),8(a0)
00016088 316A 000C 000C             		move	$C(a2),$C(a0)
0001608E 116A 0022 0022             		move.b	$22(a2),$22(a0)
00016094 0228 0001 0022             		and.b	#1,$22(a0)
0001609A 4A28 0034                  		tst.b	$34(a0)
0001609E 6700                       		beq.s	loc_1DE06
000160A0 5968 000C                  		sub	#4,$C(a0)
000160A4                            
000160A4                            loc_1DE06:				; CODE XREF: h+6E8A?j
000160A4 4A28 001D                  		tst.b	$1D(a0)
000160A8 6600                       		bne.s	loc_1DE28
000160AA 0268 7FFF 0002             		and	#$7FFF,2(a0)
000160B0 4A6A 0002                  		tst	2(a2)
000160B4 6A00                       		bpl.s	loc_1DE28
000160B6 0068 8000 0002             		or	#-$8000,2(a0)
000160BC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000160BC                            
000160BC                            loc_1DE20:				; DATA XREF: h+6E30?o
000160BC                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
000160BC 43F9 0000 0000             		lea	(off_1DF38).l,a1
000160C2 4EB9 0000 D7DA             		jsr	AnimateSprite
000160C8 6100 0000                  		bsr.w	loc_1DEE4
000160CC 4EFA A90E                  		jmp	DisplaySprite
000160D0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000160D0                            
000160D0                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
000160D0 117C 0000 001C             		move.b	#0,$1C(a0)
000160D6 4E75                       		rts	
000160D8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000160D8                            
000160D8                            loc_1DE46:				; DATA XREF: h+6DBA?o
000160D8 6000 A93E                  		bra.w	DeleteObject
000160DC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000160DC                            
000160DC                            
000160DC                            
000160DC                            loc_1DE4A:
000160DC 3468 003E                  	movea.w	$3E(a0),a2
000160E0 7210                       	moveq	#$10,d1
000160E2 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
000160E8 6700                       	beq.s	loc_1DE64
000160EA 7206                       	moveq	#$6,d1
000160EC 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
000160F2 6700                       	beq.s	loc_1DE64
000160F4 117C 0002 0024             	move.b	#2,$24(a0)
000160FA 117C 0000 0032             	move.b	#0,$32(a0)
00016100 4E75                       	rts
00016102                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00016102                            
00016102                            loc_1DE64:				; CODE XREF: h+6EE0?j
00016102 5328 0032                  		subq.b	#1,$32(a0)
00016106 6A00                       		bpl.s	loc_1DEE0
00016108 117C 0003 0032             		move.b	#3,$32(a0)
0001610E 4EBA AD62                  		jsr	SingleObjLoad
00016112 6600                       		bne.s	loc_1DEE0
00016114 1290                       		move.b	0(a0),0(a1)
00016116 336A 0008 0008             		move	8(a2),8(a1)
0001611C 336A 000C 000C             		move	$C(a2),$C(a1)
00016122 4A28 0034                  		tst.b	$34(a0)
00016126 6700                       		beq.s	loc_1DE9A
00016128 5941                       		sub	#4,d1
0001612A                            
0001612A                            loc_1DE9A:				; CODE XREF: h+6F1E?j
0001612A D369 000C                  		add	d1,$C(a1)
0001612E 137C 0000 0022             		move.b	#0,$22(a1)
00016134 137C 0003 001C             		move.b	#3,$1C(a1)
0001613A 5429 0024                  		addq.b	#2,$24(a1)
0001613E 2368 0004 0004             		move.l	4(a0),4(a1)
00016144 1368 0001 0001             		move.b	1(a0),1(a1)
0001614A 137C 0001 0018             		move.b	#1,$18(a1)
00016150 137C 0004 0019             		move.b	#4,$19(a1)
00016156 3368 0002 0002             		move	2(a0),2(a1)
0001615C 3368 003E 003E             		move	$3E(a0),$3E(a1)
00016162 0269 7FFF 0002             		and	#$7FFF,2(a1)
00016168 4A6A 0002                  		tst	2(a2)
0001616C 6A00                       		bpl.s	loc_1DEE0
0001616E 0069 8000 0002             		or	#-$8000,2(a1)
00016174                            
00016174                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00016174 6100                       		bsr.s	loc_1DEE4
00016176 4E75                       		rts	
00016178                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00016178                            
00016178                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00016178 7000                       		moveq	#0,d0
0001617A 1028 001A                  		move.b	$1A(a0),d0
0001617E B028 0030                  		cmp.b	$30(a0),d0
00016182 6700 0000                  		beq.w	locret_1DF36
00016186 1140 0030                  		move.b	d0,$30(a0)
0001618A 45F9 0000 0000             		lea	(off_1E074).l,a2
00016190 D040                       		add	d0,d0
00016192 D4F2 0000                  		add	(a2,d0.w),a2
00016196 3A1A                       		move	(a2)+,d5
00016198 5345                       		subq	#1,d5
0001619A 6B00 0000                  		bmi.w	locret_1DF36
0001619E 3828 003C                  		move $3C(a0),d4
000161A2                            
000161A2                            loc_1DF0A:				; CODE XREF: h+6FBE?j
000161A2 7200                       		moveq	#0,d1
000161A4 321A                       		move	(a2)+,d1
000161A6 3601                       		move	d1,d3
000161A8 E04B                       		lsr.w	#8,d3
000161AA 0243 00F0                  		and	#$F0,d3	; 'ð'
000161AE 0643 0010                  		add	#$10,d3
000161B2 0241 0FFF                  		and	#$FFF,d1
000161B6 EB89                       		lsl.l	#5,d1
000161B8 0681 0000 0000             		add.l	#Art_Dust,d1
000161BE 3404                       		move	d4,d2
000161C0 D843                       		add	d3,d4
000161C2 D843                       		add	d3,d4
000161C4 4EB9 0000 11B2             		jsr	(QueueDMATransfer).l
000161CA 51CD FFD6                  		dbf	d5,loc_1DF0A
000161CE 4E75                           rts
000161D0                            
000161D0                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
000161D0 4E75                       		rts	
000161D2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000161D2 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
000161D4 0000                       		dc byte_1DF43-off_1DF38; 1
000161D6 0000                       		dc byte_1DF4F-off_1DF38; 2
000161D8 0000                       		dc byte_1DF58-off_1DF38; 3
000161DA 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
000161DD 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
000161E9 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000161F2 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000161F8                            ; -------------------------------------------------------------------------------
000161F8                            ; Unknown Sprite Mappings
000161F8                            ; -------------------------------------------------------------------------------
000161F8                            MapUnc_1DF5E:
000161F8 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000161FA 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000161FC 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000161FE 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00016200 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00016202 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00016204 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00016206 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00016208 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
0001620A 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
0001620C 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
0001620E 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00016210 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00016212 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00016214 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00016216 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00016218 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
0001621A 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
0001621C 0000                       	dc word_1E056-MapUnc_1DF5E; 18
0001621E 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00016220 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00016222 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00016224 00                         word_1DF8A:	dc.b 0
00016225 01                         word_1DF8C:	dc.b 1
00016226 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001622B 01                         word_1DF96:	dc.b 1
0001622C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00016231 01                         word_1DFA0:	dc.b 1
00016232 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00016237 01                         word_1DFAA:	dc.b 1
00016238 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001623D 01                         word_1DFB4:	dc.b 1
0001623E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00016243 01                         word_1DFBE:	dc.b 1
00016244 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00016249 01                         word_1DFC8:	dc.b 1
0001624A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001624F 01                         word_1DFD2:	dc.b 1
00016250 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00016255 01                         word_1DFDC:	dc.b 1
00016256 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001625B 01                         word_1DFE6:	dc.b 1
0001625C 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00016261 01                         word_1DFF0:	dc.b 1
00016262 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00016267 01                         word_1DFFA:	dc.b 1
00016268 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001626D 02                         word_1E004:	dc.b 2
0001626E F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00016273 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00016278 02                         word_1E016:	dc.b 2
00016279 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
0001627E 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00016283 02                         word_1E028:	dc.b 2
00016284 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00016289 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001628E 02                         word_1E03A:	dc.b 2
0001628F F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00016294 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00016299 01                         word_1E04C:	dc.b 1
0001629A F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
0001629F 01                         word_1E056:	dc.b 1
000162A0 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
000162A5 01                         word_1E060:	dc.b 1
000162A6 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
000162AB 01                         word_1E06A:	dc.b 1
000162AC F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
000162B1 00                         	dc.b 0
000162B2 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
000162B4 0000                       	dc word_1E0A2-off_1E074; 1
000162B6 0000                       	dc word_1E0A6-off_1E074; 2
000162B8 0000                       	dc word_1E0AA-off_1E074; 3
000162BA 0000                       	dc word_1E0AE-off_1E074; 4
000162BC 0000                       	dc word_1E0B2-off_1E074; 5
000162BE 0000                       	dc word_1E0B6-off_1E074; 6
000162C0 0000                       	dc word_1E0BA-off_1E074; 7
000162C2 0000                       	dc word_1E0BE-off_1E074; 8
000162C4 0000                       	dc word_1E0C2-off_1E074; 9
000162C6 0000                       	dc word_1E0C6-off_1E074; 10
000162C8 0000                       	dc word_1E0CA-off_1E074; 11
000162CA 0000                       	dc word_1E0CE-off_1E074; 12
000162CC 0000                       	dc word_1E0D2-off_1E074; 13
000162CE 0000                       	dc word_1E0D8-off_1E074; 14
000162D0 0000                       	dc word_1E0DE-off_1E074; 15
000162D2 0000                       	dc word_1E0E4-off_1E074; 16
000162D4 0000                       	dc word_1E0EA-off_1E074; 17
000162D6 0000                       	dc word_1E0EA-off_1E074; 18
000162D8 0000                       	dc word_1E0EA-off_1E074; 19
000162DA 0000                       	dc word_1E0EA-off_1E074; 20
000162DC 0000                       	dc word_1E0EC-off_1E074; 21
000162DE 0000                       word_1E0A0:	dc 0
000162E0 0001                       word_1E0A2:	dc 1
000162E2 7000                       	dc $7000
000162E4 0001                       word_1E0A6:	dc 1
000162E6 F008                       	dc $F008
000162E8 0001                       word_1E0AA:	dc 1
000162EA F018                       	dc $F018
000162EC 0001                       word_1E0AE:	dc 1
000162EE F028                       	dc $F028
000162F0 0001                       word_1E0B2:	dc 1
000162F2 F038                       	dc $F038
000162F4 0001                       word_1E0B6:	dc 1
000162F6 F048                       	dc $F048
000162F8 0001                       word_1E0BA:	dc 1
000162FA 7058                       	dc $7058
000162FC 0001                       word_1E0BE:	dc 1
000162FE 7060                       	dc $7060
00016300 0001                       word_1E0C2:	dc 1
00016302 7068                       	dc $7068
00016304 0001                       word_1E0C6:	dc 1
00016306 7070                       	dc $7070
00016308 0001                       word_1E0CA:	dc 1
0001630A 7078                       	dc $7078
0001630C 0001                       word_1E0CE:	dc 1
0001630E 7080                       	dc $7080
00016310 0002                       word_1E0D2:	dc 2
00016312 1088                       	dc $1088
00016314 708A                       	dc $708A
00016316 0002                       word_1E0D8:	dc 2
00016318 3092                       	dc $3092
0001631A 7096                       	dc $7096
0001631C 0002                       word_1E0DE:	dc 2
0001631E 509E                       	dc $509E
00016320 70A4                       	dc $70A4
00016322 0002                       word_1E0E4:	dc 2
00016324 50AC                       	dc $50AC
00016326 70B2                       	dc $70B2
00016328 0000                       word_1E0EA:	dc 0
0001632A 0001                       word_1E0EC:	dc 1
0001632C F0BA                       	dc $F0BA
0001632E                            	even
0001632E                            
0001632E                            ; ---------------------------------------------------------------------------
0001632E                            ; Object 01 - Sonic
0001632E                            ; ---------------------------------------------------------------------------
0001632E                            
0001632E                            Obj01:					; XREF: Obj_Index
0001632E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00016332 6700                       		beq.s	Obj01_Normal	; if not, branch
00016334 4EF9 0000 0000             		jmp	DebugMode
0001633A                            ; ===========================================================================
0001633A                            
0001633A                            Obj01_Normal:
0001633A 7000                       		moveq	#0,d0
0001633C 1028 0024                  		move.b	$24(a0),d0
00016340 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00016344 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00016348                            ; ===========================================================================
00016348 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001634A 0000                       		dc.w Obj01_Control-Obj01_Index
0001634C 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001634E 0000                       		dc.w Obj01_Death-Obj01_Index
00016350 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00016352 0000                       		dc.w Sonic_Drowned-Obj01_Index
00016354                            ; ===========================================================================
00016354                            
00016354                            Obj01_Main:				; XREF: Obj01_Index
00016354 5428 0024                  		addq.b	#2,$24(a0)
00016358 117C 0013 0016             		move.b	#$13,$16(a0)
0001635E 117C 0009 0017             		move.b	#9,$17(a0)
00016364 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001636C 0C38 0000 FFF6             		cmpi.b	#$00, ($FFFFFFF6).w ; if player flag set?
00016372 6700                               beq.s   Obj01_Main_cont
00016374 217C 0000 0000 0004                move.l  #Map_Shadow,4(a0)
0001637C 0C38 0001 FFF6             		cmpi.b	#$01, ($FFFFFFF6).w ; if player flag set?
00016382 6700                               beq.s   Obj01_Main_cont
00016384 217C 0000 0000 0004                move.l  #Map_Metal,4(a0)
0001638C 0C38 0002 FFF6             		cmpi.b	#$02, ($FFFFFFF6).w ; if player flag set?
00016392 6700                               beq.s   Obj01_Main_cont
00016394 217C 0000 0000 0004                move.l  #Map_Mighty,4(a0)
0001639C                            ;		move.b	#0,(Super_Sonic_flag).w
0001639C                                 
0001639C                            Obj01_Main_cont:
0001639C 317C 0780 0002             		move.w	#$780,2(a0)
000163A2 117C 0002 0018             		move.b	#2,$18(a0)
000163A8 117C 0018 0019             		move.b	#$18,$19(a0)
000163AE 117C 0004 0001             		move.b	#4,1(a0)
000163B4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000163BA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000163C0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000163C6 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000163CC 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
000163D2                            
000163D2                            Obj01_Control:				; XREF: Obj01_Index
000163D2 0C38 0003 FFF6             		cmpi.b	#$03, ($FFFFFFF6).w ; if player flag set?
000163D8 6600                       		bne.s	@nodec
000163DA 4A28 002C                  		tst.b	obWallJump(a0)
000163DE 6700                       		beq.s	@nodec
000163E0 5328 002C                  		subq.b	#1,obWallJump(a0)
000163E4 6600                       		bne.s	@chkLR
000163E6 117C 0002 001C             		move.b	#2,anim(a0) ; use "jumping" animation
000163EC                            		
000163EC                            	@chkLR:
000163EC 1038 F602                  		move.b	(v_jpadhold2).w,d0	; get jpad
000163F0 C028 002D                  		and.b	(obWallJump+1)(a0),d0	; compare jpad to stored L,R button states
000163F4 6600                       		bne.s	@skip		; if still held, branch
000163F6 317C 0000 002C             		move.w	#0,obWallJump(a0)	; clear wall jump flag and button states
000163FC 117C 0002 001C             		move.b	#2,anim(a0) ; use "jumping" animation
00016402                            	
00016402                            	@skip:
00016402                            		;Mercury Wall Jump Smoke Puff
00016402                            		;USES Smoke Puff
00016402                            	;	move.b	(v_framebyte).w,d0
00016402                            	;	andi.b	#7,d0
00016402                            	;	cmpi.b	#7,d0
00016402                            	;	bne.s	@nodec
00016402                            	;create puff
00016402                            	;	bsr.w	FindFreeObj
00016402                            	;	bne.s	@nodec
00016402                            	;	move.b	#id_SmokePuff,0(a1) ; load missile object
00016402                            	;	move.w	obX(a0),obX(a1)
00016402                            	;	move.w	obY(a0),obY(a1)
00016402                            	;	addi.w	#$1C,obY(a1)
00016402                            	;	move.b	#1,obSubtype(a1)
00016402                            		;end Wall Jump Smoke Puff
00016402                            		
00016402                            	@nodec:
00016402 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00016406 6700                       		beq.s	loc_12C58	; if not, branch
00016408 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001640E 6700                       		beq.s	loc_12C58	; if not, branch
00016410 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00016416 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001641A 4E75                       		rts	
0001641C                            ; ===========================================================================
0001641C                            
0001641C                            loc_12C58:
0001641C 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00016420 6600                       		bne.s	loc_12C64	; if yes, branch
00016422 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00016428                            
00016428                            loc_12C64:
00016428 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001642E 6600                       		bne.s	loc_12C7E	; if yes, branch
00016430 7000                       		moveq	#0,d0
00016432 1028 0022                  		move.b	$22(a0),d0
00016436 0240 0006                  		andi.w	#6,d0
0001643A 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001643E 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00016442                            
00016442                            loc_12C7E:
00016442 6100                       		bsr.s	Sonic_Display
00016444 6100 0000                  		bsr.w 	Sonic_Super
00016448 6100 0000                  		bsr.w	Sonic_RecordPos
0001644C 6100 0000                  		bsr.w	Sonic_Water
00016450 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00016456 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001645C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00016460 6700                       		beq.s	loc_12CA6
00016462 4A28 001C                  		tst.b	$1C(a0)
00016466 6600                       		bne.s	loc_12CA6
00016468 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001646E                            
0001646E                            loc_12CA6:
0001646E 6100 0000                  		bsr.w	Sonic_Animate
00016472 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016476 6B00                       		bmi.s	loc_12CB6
00016478 4EB9 0000 0000             		jsr	TouchResponse
0001647E                            
0001647E                            loc_12CB6:
0001647E 6100 0000                  		bsr.w	Sonic_Loops
00016482 6100 0000                  		bsr.w	LoadSonicDynPLC
00016486 4E75                       		rts	
00016488                            ; ===========================================================================
00016488 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001648A 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001648C 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001648E 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00016490                            ; ---------------------------------------------------------------------------
00016490                            ; Music	to play	after invincibility wears off
00016490                            ; ---------------------------------------------------------------------------
00016490                            
00016490                            ; ===========================================================================
00016490                            
00016490                            Sonic_Display:				; XREF: loc_12C7E
00016490 3028 0030                  		move.w	$30(a0),d0
00016494 6700                       		beq.s	Obj01_Display
00016496 5368 0030                  		subq.w	#1,$30(a0)
0001649A E648                       		lsr.w	#3,d0
0001649C 6400                       		bcc.s	Obj01_ChkInvin
0001649E                            
0001649E                            Obj01_Display:
0001649E 4EBA A53C                  		jsr	DisplaySprite
000164A2                            
000164A2                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000164A2                             
000164A2                            Obj01_ChkInvin:
000164A2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000164A6 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000164AA 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000164AE 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000164B2 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000164B6 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000164BA 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000164BE 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000164C2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000164C8 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000164CC 7000                       		moveq	#0,d0
000164CE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000164D2                             
000164D2 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000164D8 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000164DA 43F9 0000 5E8C             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000164E0 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000164E2                            		
000164E2                            Obj01_ChkShoes:
000164E2 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000164E6 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000164E8 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000164EC 6700                       		beq.s	Obj01_ExitChk
000164EE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000164F2 6600                       		bne.s	Obj01_ExitChk
000164F4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000164FA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00016500 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00016506 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
0001650C 7000                       		moveq	#0,d0
0001650E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00016512 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00016518 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001651A 43F9 0000 5E8C             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00016520 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00016522                             
00016522                            Obj01_GetBgm2:
00016522 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00016528 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001652A 43F9 0000 5E94             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00016530 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00016532                             
00016532                            Obj01_GetBgm3:
00016532 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00016538 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001653A 43F9 0000 5E9A             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00016540 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00016542                             
00016542                            Obj01_GetBgm4:
00016542 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00016548 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001654A 43F9 0000 5EA0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00016550                             
00016550                            Obj01_PlayMusic:
00016550 1031 0000                  		move.b	(a1,d0.w),d0
00016554 4EB9 0000 1108             		jsr	(PlaySound).l	; play normal music
0001655A                             
0001655A                            ; NineKode ends here.
0001655A                            
0001655A                            
0001655A                            
0001655A                            Obj01_RmvInvin:
0001655A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00016560                            
00016560                            ; ===========================================================================
00016560                            
00016560                            Obj01_ExitChk:
00016560 4E75                       		rts	
00016562                            
00016562                            ; ---------------------------------------------------------------------------
00016562                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00016562                            ; ---------------------------------------------------------------------------
00016562                            
00016562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016562                            
00016562                            
00016562                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00016562 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00016566 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001656A 43F1 0000                  		lea	(a1,d0.w),a1
0001656E 32E8 0008                  		move.w	8(a0),(a1)+
00016572 32E8 000C                  		move.w	$C(a0),(a1)+
00016576 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001657A 4E75                       		rts	
0001657C                            ; End of function Sonic_RecordPos
0001657C                            
0001657C                            ; ---------------------------------------------------------------------------
0001657C                            ; Subroutine for Sonic when he's underwater
0001657C                            ; ---------------------------------------------------------------------------
0001657C                            
0001657C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001657C                            
0001657C                            
0001657C                            Sonic_Water:				; XREF: loc_12C7E
0001657C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00016582 6700                       		beq.s	Obj01_InWater	; if yes, branch
00016584                            
00016584                            locret_12D80:
00016584 4E75                       		rts	
00016586                            ; ===========================================================================
00016586                            
00016586                            Obj01_InWater:
00016586 3038 F646                  		move.w	($FFFFF646).w,d0
0001658A B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001658E 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00016590 08E8 0006 0022             		bset	#6,$22(a0)
00016596 66EC                       		bne.s	locret_12D80
00016598 6100 0000                  		bsr.w	ResumeMusic
0001659C 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000165A2 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000165A8 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000165AE 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000165B4 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000165BA 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
000165BE 6700                       	beq.s	@Skip			; If not branch
000165C0 31FC 0500 F760             	move.w	#$500,(Sonic_top_speed).w
000165C6 31FC 0018 F762             	move.w	#$18,(Sonic_acceleration).w
000165CC 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
000165D2                            @Skip
000165D2 E0E8 0010                  		asr	$10(a0)
000165D6 E0E8 0012                  		asr	$12(a0)
000165DA E0E8 0012                  		asr	$12(a0)
000165DE 67A4                       		beq.s	locret_12D80
000165E0 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000165E6 303C 00AA                  		move.w	#$AA,d0
000165EA 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play splash sound
000165F0                            ; ===========================================================================
000165F0                            
000165F0                            Obj01_OutWater:
000165F0 08A8 0006 0022             		bclr	#6,$22(a0)
000165F6 678C                       		beq.s	locret_12D80
000165F8 6100 0000                  		bsr.w	ResumeMusic
000165FC 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00016602 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00016608 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001660E 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00016612 6700                       	beq.s	@Skip			; If not branch
00016614 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
0001661A 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
00016620 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
00016626                            @Skip
00016626 E1E8 0012                  		asl	$12(a0)
0001662A 6700 FF58                  		beq.w	locret_12D80
0001662E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00016634 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001663A 6E00                       		bgt.s	loc_12E0E
0001663C 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00016642                            
00016642                            loc_12E0E:
00016642 303C 00AA                  		move.w	#$AA,d0
00016646 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play splash sound
0001664C                            ; End of function Sonic_Water
0001664C                            
0001664C                            ; ===========================================================================
0001664C                            ; ---------------------------------------------------------------------------
0001664C                            ; Modes	for controlling	Sonic
0001664C                            ; ---------------------------------------------------------------------------
0001664C                            
0001664C                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001664C 6100 0000                  		bsr.w	ShadowSpear
00016650 6100 0000                  		bsr.w	Sonic_AirRoll
00016654 6100 0000                  		bsr.w	Sonic_Peelout
00016658 6100 0000                  		bsr.w 	Metal_Spindash
0001665C 6100 0000                  		bsr.w	Sonic_SpinDash
00016660 6100 0000                  		bsr.w	Sonic_Jump
00016664 6100 0000                  		bsr.w	Sonic_SlopeResist
00016668 6100 0000                  		bsr.w	Sonic_Move
0001666C 6100 0000                  		bsr.w	Sonic_Roll
00016670 6100 0000                  		bsr.w	Sonic_LevelBound
00016674 4EBA A34C                  		jsr	SpeedToPos
00016678 6100 0000                  		bsr.w	Sonic_AnglePos
0001667C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00016680 4E75                       		rts	
00016682                            ; ===========================================================================
00016682                            
00016682                            Obj01_MdJump:				; XREF: Obj01_Modes
00016682 6100 0000                  		bsr.w	ShadowSpear
00016686 4228 0039                  		clr.b	$39(a0)
0001668A 6100 0000                          bsr.w   Sonic_AirRoll
0001668E 6100 0000                  		bsr.w	Sonic_JumpHeight
00016692 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00016696 6100 0000                  		bsr.w	Sonic_LevelBound
0001669A 4EBA A306                  		jsr	ObjectFall
0001669E 0C38 0003 FFF6             		cmpi.b	#$03, ($FFFFFFF6).w ; if player flag set?
000166A4 6600                       		bne.s	@nowalljump
000166A6 4A28 002C                  		tst.b	obWallJump(a0)
000166AA 6700                       		beq.s	@nowalljump
000166AC 0468 0030 0012             		subi.w	#$30,y_vel(a0)
000166B2                            		
000166B2                            	@nowalljump:
000166B2 0828 0006 0022             		btst	#6,status(a0)
000166B8 6700                       		beq.s	loc_12E5C
000166BA 0468 0028 0012             		subi.w	#$28,y_vel(a0)	
000166C0                            
000166C0                            loc_12E5C:
000166C0 6100 0000                  		bsr.w	Sonic_JumpAngle
000166C4 6100 0000                  		bsr.w	Sonic_Floor
000166C8 4E75                       		rts	
000166CA                            ; ===========================================================================
000166CA                            
000166CA                            Obj01_MdRoll:				; XREF: Obj01_Modes
000166CA 6100 0000                  		bsr.w	ShadowSpear
000166CE 6100 0000                  		bsr.w	Sonic_Jump
000166D2 6100 0000                  		bsr.w	Sonic_RollRepel
000166D6 6100 0000                  		bsr.w	Sonic_RollSpeed
000166DA 6100 0000                  		bsr.w	Sonic_LevelBound
000166DE 4EBA A2E2                  		jsr	SpeedToPos
000166E2 6100 0000                  		bsr.w	Sonic_AnglePos
000166E6 6100 0000                  		bsr.w	Sonic_SlopeRepel
000166EA 4E75                       		rts	
000166EC                            ; ===========================================================================
000166EC                            
000166EC                            Obj01_MdJump2:				; XREF: Obj01_Modes
000166EC 6100 0000                  		bsr.w	ShadowSpear
000166F0 4228 0039                  		clr.b	$39(a0)
000166F4 6100 0000                  		bsr.w   Sonic_stomp
000166F8 6100 0000                  		bsr.w	Sonic_DownKick
000166FC 6100 0000                  		bsr.w	Sonic_DoubleJump
00016700 6100 0000                  		bsr.w	Sonic_JumpHeight
00016704 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00016708 6100 0000                  		bsr.w	Sonic_LevelBound
0001670C 4EBA A294                  		jsr	ObjectFall
00016710 0C38 0003 FFF6             		cmpi.b	#$03, ($FFFFFFF6).w ; if player flag set?
00016716 6600                       		bne.s	@nowalljump
00016718 4A28 002C                  		tst.b	obWallJump(a0)
0001671C 6700                       		beq.s	@nowalljump
0001671E 0468 0030 0012             		subi.w	#$30,y_vel(a0)
00016724                            		
00016724                            	@nowalljump:
00016724 0828 0006 0022             		btst	#6,status(a0)
0001672A 6700                       		beq.s	loc_12EA6
0001672C 0468 0028 0012             		subi.w	#$28,y_vel(a0)	
00016732                            
00016732                            loc_12EA6:
00016732 6100 0000                  		bsr.w	Sonic_JumpAngle
00016736 6100 0000                  		bsr.w	Sonic_Floor
0001673A 4E75                       		rts	
0001673C                            ; ---------------------------------------------------------------------------
0001673C                            ; Subroutine to	make Sonic walk/run
0001673C                            ; ---------------------------------------------------------------------------
0001673C                            
0001673C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001673C                            
0001673C                            
0001673C                            Sonic_Move:				; XREF: Obj01_MdNormal
0001673C 3C38 F760                  		move.w	($FFFFF760).w,d6
00016740 3A38 F762                  		move.w	($FFFFF762).w,d5
00016744 3838 F764                  		move.w	($FFFFF764).w,d4
00016748 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001674C 6600 0000                  		bne.w	loc_12FEE
00016750 4A68 003E                  		tst.w	$3E(a0)
00016754 6600 0000                  		bne.w	Obj01_ResetScr
00016758 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001675E 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00016760 6100 0000                  		bsr.w	Sonic_MoveLeft
00016764                            
00016764                            Obj01_NotLeft:
00016764 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001676A 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001676C 6100 0000                  		bsr.w	Sonic_MoveRight
00016770                            
00016770                            Obj01_NotRight:
00016770 1028 0026                  		move.b	$26(a0),d0
00016774 0600 0020                  		addi.b	#$20,d0
00016778 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001677C 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00016780 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00016784 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00016788 08A8 0005 0022             		bclr	#5,$22(a0)
0001678E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00016794 0828 0003 0022             		btst	#3,$22(a0)
0001679A 6700                       		beq.s	Sonic_Balance
0001679C 7000                       		moveq	#0,d0
0001679E 1028 003D                  		move.b	$3D(a0),d0
000167A2 ED48                       		lsl.w	#6,d0
000167A4 43F8 D000                  		lea	($FFFFD000).w,a1
000167A8 43F1 0000                  		lea	(a1,d0.w),a1
000167AC 4A29 0022                  		tst.b	$22(a1)
000167B0 6B00                       		bmi.s	Sonic_LookUp
000167B2 7200                       		moveq	#0,d1
000167B4 1229 0019                  		move.b	$19(a1),d1
000167B8 3401                       		move.w	d1,d2
000167BA D442                       		add.w	d2,d2
000167BC 5942                       		subq.w	#4,d2
000167BE D268 0008                  		add.w	8(a0),d1
000167C2 9269 0008                  		sub.w	8(a1),d1
000167C6 0C41 0004                  		cmpi.w	#4,d1
000167CA 6D00                       		blt.s	loc_12F6A
000167CC B242                       		cmp.w	d2,d1
000167CE 6C00                       		bge.s	loc_12F5A
000167D0 6000                       		bra.s	Sonic_LookUp
000167D2                            ; ===========================================================================
000167D2                            
000167D2                            Sonic_Balance:
000167D2 4EB9 0000 0000             		jsr	ObjHitFloor
000167D8 0C41 000C                  		cmpi.w	#$C,d1
000167DC 6D00                       		blt.s	Sonic_LookUp
000167DE 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000167E4 6600                       		bne.s	loc_12F62
000167E6                            
000167E6                            loc_12F5A:
000167E6 08A8 0000 0022             		bclr	#0,$22(a0)
000167EC 6000                       		bra.s	loc_12F70
000167EE                            ; ===========================================================================
000167EE                            
000167EE                            loc_12F62:
000167EE 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000167F4 6600                       		bne.s	Sonic_LookUp
000167F6                            
000167F6                            loc_12F6A:
000167F6 08E8 0000 0022             		bset	#0,$22(a0)
000167FC                            
000167FC                            loc_12F70:
000167FC 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00016802 6000                       		bra.s	Obj01_ResetScr
00016804                            ; ===========================================================================
00016804                            
00016804                            Sonic_LookUp:
00016804 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001680A 6700                       		beq.s	Sonic_Duck	; if not, branch
0001680C 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00016812 5238 C903                  		addq.b	#1,($FFFFC903).w
00016816 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
0001681C 6500                       		bcs.s	Obj01_ResetScr_Part2
0001681E 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00016824 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001682A 6700                       		beq.s	loc_12FC2
0001682C 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00016830 6000                       		bra.s	loc_12FC2
00016832                            ; ===========================================================================
00016832                            
00016832                            Sonic_Duck:
00016832 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00016838 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001683A 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00016840 5238 C903                  		addq.b	#1,($FFFFC903).w
00016844 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
0001684A 6500                       		bcs.s	Obj01_ResetScr_Part2
0001684C 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00016852 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00016858 6700                       		beq.s	loc_12FC2
0001685A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001685E 6000                       		bra.s	loc_12FC2
00016860                            ; ===========================================================================
00016860                            
00016860                            Obj01_ResetScr:
00016860 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00016866                            		
00016866                            Obj01_ResetScr_Part2:
00016866 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001686C 6700                       		beq.s	loc_12FC2	; if yes, branch
0001686E 6400                       		bcc.s	loc_12FBE
00016870 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00016874                            
00016874                            loc_12FBE:
00016874 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00016878                            
00016878                            loc_12FC2:
00016878 1038 F602                  		move.b	($FFFFF602).w,d0
0001687C 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00016880 6600                       		bne.s	loc_12FEE	; if yes, branch
00016882 3028 0014                  		move.w	$14(a0),d0
00016886 6700                       		beq.s	loc_12FEE
00016888 6B00                       		bmi.s	loc_12FE2
0001688A 9045                       		sub.w	d5,d0
0001688C 6400                       		bcc.s	loc_12FDC
0001688E 303C 0000                  		move.w	#0,d0
00016892                            
00016892                            loc_12FDC:
00016892 3140 0014                  		move.w	d0,$14(a0)
00016896 6000                       		bra.s	loc_12FEE
00016898                            ; ===========================================================================
00016898                            
00016898                            loc_12FE2:
00016898 D045                       		add.w	d5,d0
0001689A 6400                       		bcc.s	loc_12FEA
0001689C 303C 0000                  		move.w	#0,d0
000168A0                            
000168A0                            loc_12FEA:
000168A0 3140 0014                  		move.w	d0,$14(a0)
000168A4                            
000168A4                            loc_12FEE:
000168A4 1028 0026                  		move.b	$26(a0),d0
000168A8 4EB9 0000 3736             		jsr	(CalcSine).l
000168AE C3E8 0014                  		muls.w	$14(a0),d1
000168B2 E081                       		asr.l	#8,d1
000168B4 3141 0010                  		move.w	d1,$10(a0)
000168B8 C1E8 0014                  		muls.w	$14(a0),d0
000168BC E080                       		asr.l	#8,d0
000168BE 3140 0012                  		move.w	d0,$12(a0)
000168C2                            
000168C2                            loc_1300C:
000168C2 1028 0026                  		move.b	$26(a0),d0
000168C6 0600 0040                  		addi.b	#$40,d0
000168CA 6B00                       		bmi.s	locret_1307C
000168CC 123C 0040                  		move.b	#$40,d1
000168D0 4A68 0014                  		tst.w	$14(a0)
000168D4 6700                       		beq.s	locret_1307C
000168D6 6B00                       		bmi.s	loc_13024
000168D8 4441                       		neg.w	d1
000168DA                            
000168DA                            loc_13024:
000168DA 1028 0026                  		move.b	$26(a0),d0
000168DE D001                       		add.b	d1,d0
000168E0 3F00                       		move.w	d0,-(sp)
000168E2 6100 0000                  		bsr.w	Sonic_WalkSpeed
000168E6 301F                       		move.w	(sp)+,d0
000168E8 4A41                       		tst.w	d1
000168EA 6A00                       		bpl.s	locret_1307C
000168EC E141                       		asl.w	#8,d1
000168EE 0600 0020                  		addi.b	#$20,d0
000168F2 0200 00C0                  		andi.b	#$C0,d0
000168F6 6700                       		beq.s	loc_13078
000168F8 0C00 0040                  		cmpi.b	#$40,d0
000168FC 6700                       		beq.s	loc_13066
000168FE 0C00 0080                  		cmpi.b	#$80,d0
00016902 6700                       		beq.s	loc_13060
00016904 D368 0010                  		add.w	d1,$10(a0)
00016908 08E8 0005 0022             		bset	#5,$22(a0)
0001690E 317C 0000 0014             		move.w	#0,$14(a0)
00016914 4E75                       		rts	
00016916                            ; ===========================================================================
00016916                            
00016916                            loc_13060:
00016916 9368 0012                  		sub.w	d1,$12(a0)
0001691A 4E75                       		rts	
0001691C                            ; ===========================================================================
0001691C                            
0001691C                            loc_13066:
0001691C 9368 0010                  		sub.w	d1,$10(a0)
00016920 08E8 0005 0022             		bset	#5,$22(a0)
00016926 317C 0000 0014             		move.w	#0,$14(a0)
0001692C 4E75                       		rts	
0001692E                            ; ===========================================================================
0001692E                            
0001692E                            loc_13078:
0001692E D368 0012                  		add.w	d1,$12(a0)
00016932                            
00016932                            locret_1307C:
00016932 4E75                       		rts	
00016934                            ; End of function Sonic_Move
00016934                            
00016934                            
00016934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016934                            
00016934                            
00016934                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00016934 3028 0014                  		move.w	$14(a0),d0
00016938 6700                       		beq.s	loc_13086
0001693A 6A00                       		bpl.s	loc_130B2
0001693C                            
0001693C                            loc_13086:
0001693C 08E8 0000 0022             		bset	#0,$22(a0)
00016942 6600                       		bne.s	loc_1309A
00016944 08A8 0005 0022             		bclr	#5,$22(a0)
0001694A 117C 0001 001D             		move.b	#1,$1D(a0)
00016950                            
00016950                            loc_1309A:
00016950 9045                       		sub.w	d5,d0
00016952 3206                       		move.w	d6,d1
00016954 4441                       		neg.w	d1
00016956 B041                       		cmp.w	d1,d0
00016958 6E00                       		bgt.s	loc_130A6
0001695A D045                       		add.w	d5,d0
0001695C B041                       		cmp.w	d1,d0
0001695E 6F00                       		ble.s	loc_130A6
00016960 3001                       		move.w	d1,d0
00016962                            
00016962                            loc_130A6:
00016962 3140 0014                  		move.w	d0,$14(a0)
00016966 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001696C 4E75                       		rts
0001696E                            ; ===========================================================================
0001696E                            
0001696E                            loc_130B2:				; XREF: Sonic_MoveLeft
0001696E 9044                       		sub.w	d4,d0
00016970 6400                       		bcc.s	loc_130BA
00016972 303C FF80                  		move.w	#-$80,d0
00016976                            
00016976                            loc_130BA:
00016976 3140 0014                  		move.w	d0,$14(a0)
0001697A 1028 0026                  		move.b	$26(a0),d0
0001697E 0600 0020                  		addi.b	#$20,d0
00016982 0200 00C0                  		andi.b	#$C0,d0
00016986 6600                       		bne.s	locret_130E8
00016988 0C40 0400                  		cmpi.w	#$400,d0
0001698C 6D00                       		blt.s	locret_130E8
0001698E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00016994 08A8 0000 0022             		bclr	#0,$22(a0)
0001699A 303C 00A4                  		move.w	#$A4,d0
0001699E 4EB9 0000 110E             		jsr	(PlaySound_Special).l
000169A4                            
000169A4                            locret_130E8:
000169A4 4E75                       		rts	
000169A6                            ; End of function Sonic_MoveLeft
000169A6                            
000169A6                            
000169A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169A6                            
000169A6                            
000169A6                            Sonic_MoveRight:	   ; XREF: Sonic_Move
000169A6 3028 0014                  		move.w	$14(a0),d0
000169AA 6B00                       		bmi.s	loc_13118
000169AC 08A8 0000 0022             		bclr	#0,$22(a0)
000169B2 6700                       		beq.s	loc_13104
000169B4 08A8 0005 0022             		bclr	#5,$22(a0)
000169BA 117C 0001 001D             		move.b	#1,$1D(a0)
000169C0                            
000169C0                            loc_13104:
000169C0 D045                       		add.w	d5,d0
000169C2 B046                       		cmp.w	d6,d0
000169C4 6D00                       		blt.s	loc_1310C
000169C6 9045                       		sub.w	d5,d0
000169C8 B046                       		cmp.w	d6,d0
000169CA 6C00                       		bge.s	loc_1310C
000169CC 3006                       		move.w	d6,d0
000169CE                            
000169CE                            loc_1310C:
000169CE 3140 0014                  		move.w	d0,$14(a0)
000169D2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000169D8 4E75                       		rts
000169DA                            ; ===========================================================================
000169DA                            
000169DA                            loc_13118:				; XREF: Sonic_MoveRight
000169DA D044                       		add.w	d4,d0
000169DC 6400                       		bcc.s	loc_13120
000169DE 303C 0080                  		move.w	#$80,d0
000169E2                            
000169E2                            loc_13120:
000169E2 3140 0014                  		move.w	d0,$14(a0)
000169E6 1028 0026                  		move.b	$26(a0),d0
000169EA 0600 0020                  		addi.b	#$20,d0
000169EE 0200 00C0                  		andi.b	#$C0,d0
000169F2 6600                       		bne.s	locret_1314E
000169F4 0C40 FC00                  		cmpi.w	#-$400,d0
000169F8 6E00                       		bgt.s	locret_1314E
000169FA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00016A00 08E8 0000 0022             		bset	#0,$22(a0)
00016A06 303C 00A4                  		move.w	#$A4,d0
00016A0A 4EB9 0000 110E             		jsr	(PlaySound_Special).l
00016A10                            
00016A10                            locret_1314E:
00016A10 4E75                       		rts	
00016A12                            ; End of function Sonic_MoveRight
00016A12                            
00016A12                            ; ---------------------------------------------------------------------------
00016A12                            ; Subroutine to	change Sonic's speed as he rolls
00016A12                            ; ---------------------------------------------------------------------------
00016A12                            
00016A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A12                            
00016A12                            
00016A12                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00016A12 3C38 F760                  		move.w	($FFFFF760).w,d6
00016A16 E346                       		asl.w	#1,d6
00016A18 3A38 F762                  		move.w	($FFFFF762).w,d5
00016A1C E245                       		asr.w	#1,d5
00016A1E 3838 F764                  		move.w	($FFFFF764).w,d4
00016A22 E444                       		asr.w	#2,d4
00016A24 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00016A28 6600 0000                  		bne.w	loc_131CC
00016A2C 4A68 003E                  		tst.w	$3E(a0)
00016A30 6600                       		bne.s	loc_13188
00016A32 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00016A38 6700                       		beq.s	loc_1317C	; if not, branch
00016A3A 6100 0000                  		bsr.w	Sonic_RollLeft
00016A3E                            
00016A3E                            loc_1317C:
00016A3E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00016A44 6700                       		beq.s	loc_13188	; if not, branch
00016A46 6100 0000                  		bsr.w	Sonic_RollRight
00016A4A                            
00016A4A                            loc_13188:
00016A4A 3028 0014                  		move.w	$14(a0),d0
00016A4E 6700                       		beq.s	loc_131AA
00016A50 6B00                       		bmi.s	loc_1319E
00016A52 9045                       		sub.w	d5,d0
00016A54 6400                       		bcc.s	loc_13198
00016A56 303C 0000                  		move.w	#0,d0
00016A5A                            
00016A5A                            loc_13198:
00016A5A 3140 0014                  		move.w	d0,$14(a0)
00016A5E 6000                       		bra.s	loc_131AA
00016A60                            ; ===========================================================================
00016A60                            
00016A60                            loc_1319E:				; XREF: Sonic_RollSpeed
00016A60 D045                       		add.w	d5,d0
00016A62 6400                       		bcc.s	loc_131A6
00016A64 303C 0000                  		move.w	#0,d0
00016A68                            
00016A68                            loc_131A6:
00016A68 3140 0014                  		move.w	d0,$14(a0)
00016A6C                            
00016A6C                            loc_131AA:
00016A6C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00016A70 6600                       		bne.s	loc_131CC	; if yes, branch
00016A72 08A8 0002 0022             		bclr	#2,$22(a0)
00016A78 117C 0013 0016             		move.b	#$13,$16(a0)
00016A7E 117C 0009 0017             		move.b	#9,$17(a0)
00016A84 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00016A8A 5B68 000C                  		subq.w	#5,$C(a0)
00016A8E                            
00016A8E                            loc_131CC:
00016A8E 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00016A94 6700                       		beq.s	@cont2
00016A96 6400                       		bcc.s	@cont1
00016A98 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00016A9C                            		
00016A9C                            @cont1:
00016A9C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00016AA0                            		
00016AA0                            @cont2:
00016AA0 1028 0026                  		move.b	$26(a0),d0
00016AA4 4EB9 0000 3736             		jsr	(CalcSine).l
00016AAA C1E8 0014                  		muls.w	$14(a0),d0
00016AAE E080                       		asr.l	#8,d0
00016AB0 3140 0012                  		move.w	d0,$12(a0)
00016AB4 C3E8 0014                  		muls.w	$14(a0),d1
00016AB8 E081                       		asr.l	#8,d1
00016ABA 0C41 1000                  		cmpi.w	#$1000,d1
00016ABE 6F00                       		ble.s	loc_131F0
00016AC0 323C 1000                  		move.w	#$1000,d1
00016AC4                            
00016AC4                            loc_131F0:
00016AC4 0C41 F000                  		cmpi.w	#-$1000,d1
00016AC8 6C00                       		bge.s	loc_131FA
00016ACA 323C F000                  		move.w	#-$1000,d1
00016ACE                            
00016ACE                            loc_131FA:
00016ACE 3141 0010                  		move.w	d1,$10(a0)
00016AD2 6000 FDEE                  		bra.w	loc_1300C
00016AD6                            ; End of function Sonic_RollSpeed
00016AD6                            
00016AD6                            
00016AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AD6                            
00016AD6                            
00016AD6                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00016AD6 3028 0014                  		move.w	$14(a0),d0
00016ADA 6700                       		beq.s	loc_1320A
00016ADC 6A00                       		bpl.s	loc_13218
00016ADE                            
00016ADE                            loc_1320A:
00016ADE 08E8 0000 0022             		bset	#0,$22(a0)
00016AE4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00016AEA 4E75                       		rts	
00016AEC                            ; ===========================================================================
00016AEC                            
00016AEC                            loc_13218:
00016AEC 9044                       		sub.w	d4,d0
00016AEE 6400                       		bcc.s	loc_13220
00016AF0 303C FF80                  		move.w	#-$80,d0
00016AF4                            
00016AF4                            loc_13220:
00016AF4 3140 0014                  		move.w	d0,$14(a0)
00016AF8 4E75                       		rts	
00016AFA                            ; End of function Sonic_RollLeft
00016AFA                            
00016AFA                            
00016AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AFA                            
00016AFA                            
00016AFA                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00016AFA 3028 0014                  		move.w	$14(a0),d0
00016AFE 6B00                       		bmi.s	loc_1323A
00016B00 08A8 0000 0022             		bclr	#0,$22(a0)
00016B06 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00016B0C 4E75                       		rts	
00016B0E                            ; ===========================================================================
00016B0E                            
00016B0E                            loc_1323A:
00016B0E D044                       		add.w	d4,d0
00016B10 6400                       		bcc.s	loc_13242
00016B12 303C 0080                  		move.w	#$80,d0
00016B16                            
00016B16                            loc_13242:
00016B16 3140 0014                  		move.w	d0,$14(a0)
00016B1A 4E75                       		rts	
00016B1C                            ; End of function Sonic_RollRight
00016B1C                            
00016B1C                            ; ---------------------------------------------------------------------------
00016B1C                            ; Subroutine to	change Sonic's direction while jumping
00016B1C                            ; ---------------------------------------------------------------------------
00016B1C                            
00016B1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016B1C                            
00016B1C                            
00016B1C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00016B1C 3C38 F760                  		move.w	($FFFFF760).w,d6
00016B20 3A38 F762                  		move.w	($FFFFF762).w,d5
00016B24 E345                       		asl.w	#1,d5
00016B26 0828 0004 0022             		btst	#4,$22(a0)
00016B2C 6600                       		bne.s	Obj01_ResetScr2
00016B2E 3028 0010                  		move.w	$10(a0),d0
00016B32 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00016B38 6700                       		beq.s	loc_13278	; if not, branch
00016B3A 08E8 0000 0022             		bset	#0,$22(a0)
00016B40 9045                       		sub.w	d5,d0
00016B42 3206                       		move.w	d6,d1
00016B44 4441                       		neg.w	d1
00016B46 B041                       		cmp.w	d1,d0
00016B48 6E00                       		bgt.s	loc_13278
00016B4A D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00016B4C B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00016B4E 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00016B50 3001                       		move.w	d1,d0
00016B52                            
00016B52                            loc_13278:
00016B52 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00016B58 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00016B5A 08A8 0000 0022             		bclr	#0,$22(a0)	
00016B60 D045                       		add.w	d5,d0	
00016B62 B046                       		cmp.w	d6,d0	
00016B64 6D00                       		blt.s	Obj01_JumpMove
00016B66 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00016B68 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00016B6A 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00016B6C 3006                       		move.w	d6,d0
00016B6E                            
00016B6E                            Obj01_JumpMove:
00016B6E 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00016B72                            
00016B72                            Obj01_ResetScr2:
00016B72 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00016B78 6700                       		beq.s	loc_132A4	; if yes, branch
00016B7A 6400                       		bcc.s	loc_132A0
00016B7C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00016B80                            
00016B80                            loc_132A0:
00016B80 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00016B84                            
00016B84                            loc_132A4:
00016B84 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00016B8A 6500                       		bcs.s	locret_132D2	; if yes, branch
00016B8C 3028 0010                  		move.w	$10(a0),d0
00016B90 3200                       		move.w	d0,d1
00016B92 EA41                       		asr.w	#5,d1
00016B94 6700                       		beq.s	locret_132D2
00016B96 6B00                       		bmi.s	loc_132C6
00016B98 9041                       		sub.w	d1,d0
00016B9A 6400                       		bcc.s	loc_132C0
00016B9C 303C 0000                  		move.w	#0,d0
00016BA0                            
00016BA0                            loc_132C0:
00016BA0 3140 0010                  		move.w	d0,$10(a0)
00016BA4 4E75                       		rts	
00016BA6                            ; ===========================================================================
00016BA6                            
00016BA6                            loc_132C6:
00016BA6 9041                       		sub.w	d1,d0
00016BA8 6500                       		bcs.s	loc_132CE
00016BAA 303C 0000                  		move.w	#0,d0
00016BAE                            
00016BAE                            loc_132CE:
00016BAE 3140 0010                  		move.w	d0,$10(a0)
00016BB2                            
00016BB2                            locret_132D2:
00016BB2 4E75                       		rts	
00016BB4                            ; End of function Sonic_ChgJumpDir
00016BB4                            
00016BB4                            ; ===========================================================================
00016BB4                            ; ---------------------------------------------------------------------------
00016BB4                            ; Unused subroutine to squash Sonic
00016BB4                            ; ---------------------------------------------------------------------------
00016BB4 1028 0026                  		move.b	$26(a0),d0
00016BB8 0600 0020                  		addi.b	#$20,d0
00016BBC 0200 00C0                  		andi.b	#$C0,d0
00016BC0 6600                       		bne.s	locret_13302
00016BC2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016BC6 4A41                       		tst.w	d1
00016BC8 6A00                       		bpl.s	locret_13302
00016BCA 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00016BD0 317C 0000 0010             		move.w	#0,$10(a0)
00016BD6 317C 0000 0012             		move.w	#0,$12(a0)
00016BDC 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00016BE2                            
00016BE2                            locret_13302:
00016BE2 4E75                       		rts	
00016BE4                            ; ---------------------------------------------------------------------------
00016BE4                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00016BE4                            ; ---------------------------------------------------------------------------
00016BE4                            
00016BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BE4                            
00016BE4                            
00016BE4                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00016BE4 2228 0008                  		move.l	8(a0),d1
00016BE8 3028 0010                  		move.w	$10(a0),d0
00016BEC 48C0                       		ext.l	d0
00016BEE E180                       		asl.l	#8,d0
00016BF0 D280                       		add.l	d0,d1
00016BF2 4841                       		swap	d1
00016BF4 3038 F728                  		move.w	($FFFFF728).w,d0
00016BF8 0640 0010                  		addi.w	#$10,d0
00016BFC B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00016BFE 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00016C00 3038 F72A                  		move.w	($FFFFF72A).w,d0
00016C04 0640 0128                  		addi.w	#$128,d0
00016C08 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00016C0C 6600                       		bne.s	loc_13332
00016C0E 0640 0040                  		addi.w	#$40,d0
00016C12                            
00016C12                            loc_13332:
00016C12 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00016C14 6300                       		bls.s	Boundary_Sides	; if yes, branch
00016C16                            
00016C16                            loc_13336:
00016C16 3038 F72E                  		move.w	($FFFFF72E).w,d0
00016C1A 0640 00E0                  		addi.w	#$E0,d0
00016C1E B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00016C22 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00016C24 4E75                       		rts	
00016C26                            ; ===========================================================================
00016C26                            
00016C26                            Boundary_Bottom:
00016C26 3038 F726                  		move.w	($FFFFF726).w,d0
00016C2A 3238 F72E                  		move.w	($FFFFF72E).w,d1
00016C2E B240                       		cmp.w	d0,d1
00016C30 6D00                       		blt.s	Boundary_Bottom_locret
00016C32 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00016C38 6600 0000                  		bne.w	KillThatBlueBastard	; if not, kill Sonic
00016C3C 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00016C42                            
00016C42 6500 0000                  		bcs.w	KillThatBlueBastard
00016C46                            
00016C46 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00016C4A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00016C50 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00016C56                            
00016C56                            Boundary_Bottom_locret:
00016C56 4E75                       		rts	
00016C58                            KillThatBlueBastard:
00016C58 4EF9 0000 0000             		jmp	KillSonic
00016C5E 4E75                       		rts
00016C60                            ; ===========================================================================
00016C60                            
00016C60                            Boundary_Sides:
00016C60 3140 0008                  		move.w	d0,8(a0)
00016C64 317C 0000 000A             		move.w	#0,$A(a0)
00016C6A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00016C70 317C 0000 0014             		move.w	#0,$14(a0)
00016C76 609E                       		bra.s	loc_13336
00016C78                            ; End of function Sonic_LevelBound
00016C78                            
00016C78                            
00016C78                            ; ---------------------------------------------------------------------------
00016C78                            ; Subroutine allowing Sonic to roll when he's moving
00016C78                            ; ---------------------------------------------------------------------------
00016C78                            
00016C78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C78                            
00016C78                            
00016C78                            Sonic_Roll:				; XREF: Obj01_MdNormal
00016C78 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00016C7C 6600                       		bne.s	Obj01_NoRoll
00016C7E 3028 0014                  		move.w	$14(a0),d0
00016C82 6A00                       		bpl.s	loc_13392
00016C84 4440                       		neg.w	d0
00016C86                            
00016C86                            loc_13392:
00016C86 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00016C8A 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00016C8C 1038 F602                  		move.b	($FFFFF602).w,d0
00016C90 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00016C94 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00016C96 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00016C9C 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00016C9E                            
00016C9E                            Obj01_NoRoll:
00016C9E 4E75                       		rts	
00016CA0                            ; ===========================================================================
00016CA0                            
00016CA0                            Obj01_ChkRoll:
00016CA0 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00016CA6 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00016CA8 4E75                       		rts	
00016CAA                            ; ===========================================================================
00016CAA                            
00016CAA                            Obj01_DoRoll:
00016CAA 08E8 0002 0022             		bset	#2,$22(a0)
00016CB0 117C 000E 0016             		move.b	#$E,$16(a0)
00016CB6 117C 0007 0017             		move.b	#7,$17(a0)
00016CBC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00016CC2 5A68 000C                  		addq.w	#5,$C(a0)
00016CC6 303C 00BE                  		move.w	#$BE,d0
00016CCA 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play rolling sound
00016CD0 4A68 0014                  		tst.w	$14(a0)
00016CD4 6600                       		bne.s	locret_133E8
00016CD6 317C 0200 0014             		move.w	#$200,$14(a0)
00016CDC                            
00016CDC                            locret_133E8:
00016CDC 4E75                       		rts	
00016CDE                            ; End of function Sonic_Roll
00016CDE                            
00016CDE                            Sonic_stomp:
00016CDE                            		include "Stomp.asm"
00016CDE 0C38 0003 FFF6             		cmpi.b	 #$03, ($FFFFFFF6).w
00016CE4 6600 0000                  		bne.w	Stomp_rts
00016CE8 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
00016CEE 6700 0000                          beq.w    Stomp_rts                ; if not, branch
00016CF2 4A38 FF89                          tst.b    ($FFFFFF89).w        ; was Stomp flag set?
00016CF6 6600 0000                          bne.w    Stomp_rts                ; if yes, branch
00016CFA 11FC 0001 FF89                     move.b    #1,($FFFFFF89).w    ; if not, set Stomp flag
00016D00 08A8 0004 0022                     bclr    #4,$22(a0)            ; clear double jump flag
00016D06                            
00016D06                            ; ---------------------------------------------------------------------------
00016D06                            ; Stomp vars
00016D06                            ; ---------------------------------------------------------------------------
00016D06                            
00016D06                            Stomp_Stomp:
00016D06 303C 0A00                          move.w    #$A00,d0        ; set normal Stomp speed
00016D0A                            
00016D0A                            Stomp_Move:
00016D0A 1438 F604                          move.b    ($FFFFF604).w,d2
00016D0E 0C02 0040                          cmpi.b    #$40,d2            
00016D12 6600                               bne.s    Stomp    
00016D14 4E75                               rts
00016D16                            Stomp:
00016D16 0C02 0042                          cmpi.b    #$42,d2            ; are buttons a,down pressed
00016D1A 6700 0000                          beq.w    downstomp        ; If true branch 
00016D1E                            ;--------------------------------------------------------------------------------
00016D1E                            downstomp:
00016D1E 117C 0024 001C                     move.b    #$24,$1C(a0)    ; use stomp animation
00016D24 4268 0010                          clr.w    $10(a0)            ;clr
00016D28 3140 0012                          move.w    d0,$12(a0)        ;d0 to Y
00016D2C 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00016D30 4EB9 0000 110E             		jsr	(PlaySound_Special).l	; play it!
00016D36                            
00016D36                            Stomp_rts:
00016D36 4E75                               rts                        ; return
00016D36 4E75                               rts                        ; return
00016D38                            
00016D38                            Sonic_DownKick:
00016D38                            		include "DownKick.asm"
00016D38 4A38 FFF6                  		tst.b   ($FFFFFFF6).w ; if player flag set?
00016D3C 6600 0000                  		bne.w	ReturnDK
00016D40 4A38 FF89                          tst.b    ($FFFFFF89).w        ; was Stomp flag set?
00016D44 6600                               bne.s	ReturnDK                ; EB: was it set? if not, branch
00016D46 1238 F603                          move.b    ($FFFFF603).w,d1    ; read controller
00016D4A 0201 0010                          andi.b    #$10,d1                ; is A pressed?
00016D4E 6700 0000                  		beq.w	ReturnDK
00016D52 11FC 0001 FF89                     move.b    #1,($FFFFFF89).w    ; if not, set Stomp flag
00016D58 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00016D5C 4EB9 0000 110E             		jsr	(PlaySound_Special).l	; play it!
00016D62 117C 0024 001C             		move.b	#$24,$1C(a0)	; use Sonic's DK animation
00016D68 0828 0000 0022                     btst	#0,$22(a0)        ; is sonic facing left?
00016D6E 6600                               bne.s	DK_NoFlip        ; if not, branch
00016D70 317C 0850 0010                     move.w	#$850, $10(a0)            ; EB: set X speed
00016D76                            ;		move.b  #5, ($FFFFFF89).w
00016D76                            
00016D76                            DK_SetY:
00016D76                            ;		subi 	#5, ($FFFFFF89).w
00016D76 317C 0500 0012             		move.w	#$500,$12(a0)
00016D7C 4E75                       		rts
00016D7E                            
00016D7E                            DK_NoFlip:
00016D7E 317C F7B0 0010                     move.w	#-$850, $10(a0)            ; EB: set X speed
00016D84                            ;		move.b  #5, ($FFFFFF89).w
00016D84 60F0                       		bra.s	DK_SetY
00016D86                            
00016D86                            ReturnDK:
00016D86 4E75                       		rts                             ; EB: return
00016D86 4E75                       		rts                             ; EB: return
00016D88                            ; ---------------------------------------------------------------------------
00016D88                            ; Subroutine allowing Sonic to jump
00016D88                            ; ---------------------------------------------------------------------------
00016D88                            
00016D88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D88                            
00016D88                            
00016D88                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00016D88 1038 F603                  		move.b	($FFFFF603).w,d0
00016D8C 0C38 0001 FFF6             		cmpi.b	 #$01, ($FFFFFFF6).w
00016D92 6600                       		bne.s	JumpAllButtons
00016D94 0200 0060                  		andi.b	#$60,d0		; is A,	B or C pressed?
00016D98 6700 0000                  		beq.w	locret_1348E	; if not, branch
00016D9C 4EF9 0000 0000             		jmp		Jump_Continue
00016DA2                            
00016DA2                            JumpAllButtons:
00016DA2 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00016DA6 6700 0000                  		beq.w	locret_1348E	; if not, branch
00016DAA                            
00016DAA                            Jump_Continue:
00016DAA 7000                       		moveq	#0,d0
00016DAC 1028 0026                  		move.b	$26(a0),d0
00016DB0 0600 0080                  		addi.b	#$80,d0
00016DB4 6100 0000                  		bsr.w	sub_14D48
00016DB8 0C41 0006                  		cmpi.w	#6,d1
00016DBC 6D00 0000                  		blt.w	locret_1348E
00016DC0 343C 0680                  		move.w	#$680,d2
00016DC4 0828 0006 0022             		btst	#6,$22(a0)
00016DCA 6700                       		beq.s	loc_1341C
00016DCC 343C 0380                  		move.w	#$380,d2
00016DD0                            
00016DD0                            loc_1341C:
00016DD0 7000                       		moveq	#0,d0
00016DD2 1028 0026                  		move.b	$26(a0),d0
00016DD6 0400 0040                  		subi.b	#$40,d0
00016DDA 4EB9 0000 3736             		jsr	(CalcSine).l
00016DE0 C3C2                       		muls.w	d2,d1
00016DE2 E081                       		asr.l	#8,d1
00016DE4 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00016DE8 C1C2                       		muls.w	d2,d0
00016DEA E080                       		asr.l	#8,d0
00016DEC D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00016DF0 08E8 0001 0022             		bset	#1,$22(a0)
00016DF6 08A8 0005 0022             		bclr	#5,$22(a0)
00016DFC 588F                       		addq.l	#4,sp
00016DFE 117C 0001 003C             		move.b	#1,$3C(a0)
00016E04 4228 0038                  		clr.b	$38(a0)
00016E08 303C 00A0                  		move.w	#$A0,d0
00016E0C 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play jumping sound
00016E12 117C 0013 0016             		move.b	#$13,$16(a0)
00016E18 117C 0009 0017             		move.b	#9,$17(a0)
00016E1E 0828 0002 0022             		btst	#2,$22(a0)
00016E24 6600                       		bne.s	loc_13490
00016E26 117C 000E 0016             		move.b	#$E,$16(a0)
00016E2C 117C 0007 0017             		move.b	#7,$17(a0)
00016E32 3038 D008                  		move.w	($FFFFD008).w,d0
00016E36 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00016E3C 08E8 0002 0022             		bset	#2,$22(a0)
00016E42 5A68 000C                  		addq.w	#5,$C(a0)
00016E46                            
00016E46                            
00016E46                            locret_1348E:
00016E46 4E75                       		rts	
00016E48                            
00016E48                            ; ===========================================================================
00016E48                            
00016E48                            loc_13490:
00016E48 08E8 0004 0022             		bset	#4,$22(a0)
00016E4E 4E75                       		rts	
00016E50                            ; End of function Sonic_Jump
00016E50                            
00016E50                            Sonic_DoubleJump:
00016E50 4A38 FF8F                          tst.b    ($FFFFFF8F).w        ; was Stomp flag set?
00016E54 6600 0000                          bne.w 	endofdoublejump
00016E58 1038 F605                          move.b ($FFFFF605).w,d0
00016E5C 0200 0020                          andi.b #$20,d0; is C button pressed?
00016E60 6700                               beq.s 	endofdoublejump; if not, branch    
00016E62 4268 0012                          clr.w    $12(a0)            ;clr
00016E66 0468 0600 0012                     sub.w #$600,$12(a0); move Sonic upwards
00016E6C 0C38 0001 FFF6             		cmpi.b	 #$01, ($FFFFFFF6).w
00016E72 6600                               bne.s	Sonic_DJ_Anim
00016E74 117C 0020 001C             		move.b	#$20,$1C(a0)
00016E7A 4EF9 0000 0000             		jmp		ContinueDJ
00016E80                            		
00016E80                            Sonic_DJ_Anim:
00016E80 117C 0010 001C             		move.b #$10,$1C(a0); use "springing" animation
00016E86                            
00016E86                            ContinueDJ:	
00016E86 0C38 0001 FFF6             	    cmp.b    #1,($FFFFFFF6).w    ; is the character actually shadow?
00016E8C 6600                               bne.s    @son_djsound   ; if not, branch
00016E8E 303C 00BC                          move.w    #$BC,d0
00016E92 4EB9 0000 110E                     jsr    (PlaySound_Special).l 
00016E98 11FC 0001 FF8F                     move.b #1,($FFFFFF8F).w; set the double-jump flag
00016E9E 4EF9 0000 0000             		jmp 	endofdoublejump
00016EA4                            @son_djsound:
00016EA4 303C 00A9                          move.w    #$A9,d0
00016EA8 4EB9 0000 110E                     jsr    (PlaySound_Special).l 
00016EAE 11FC 0001 FF8F                     move.b #1,($FFFFFF8F).w; set the double-jump flag		
00016EB4                                    
00016EB4                            endofdoublejump:
00016EB4 4E75                               rts
00016EB6                            
00016EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016EB6                            
00016EB6                            
00016EB6                            Sonic_JumpHeight:        ; XREF: Obj01_MdJump; Obj01_MdJump2
00016EB6                                ;Mercury Wall Jump        
00016EB6 4A28 002C                  		tst.b    $2C(a0); on wall?
00016EBA 6700                               beq.s    JmpToWJskip
00016EBC 1038 F602                          move.b    ($FFFFF602).w,d0; get jpad
00016EC0 C028 002D                          and.b    $2D(a0),d0; compare jpad to stored L,R button states
00016EC4 6700                               beq.s    WJAnyway    ; if still held, branch
00016EC6 1038 F602                          move.b    ($FFFFF602).w,d0
00016ECA 0200 0070                          andi.b    #$70,d0
00016ECE 6600                               bne.s    JmpToWJskip; if yes, branch
00016ED0 4A38 FFA8                          tst.b    ($FFFFFFA8).w    ; was jumpdash flag set?        
00016ED4 6600 0000                          bne.w    WJAnyway        ; if yes, branch
00016ED8 11FC 0001 FFA8                     move.b    #1,($FFFFFFA8).w; if not, set jumpdash flag
00016EDE                            WJAnyway:
00016EDE 317C 0000 002C                     move.w    #0,$2C(a0); clear Wall Jump data
00016EE4 117C 0001 003C                     move.b    #1,$3C(a0)
00016EEA 117C 0002 001C                     move.b    #2,$1C(a0); use "jumping" animation
00016EF0 0828 0006 0022                     btst    #6,$22(a0)    ; is player underwater?
00016EF6 6700                               beq.s    WJNotUnderwater    ; if not, branch
00016EF8 303C FC00                          move.w    #-$400,d0
00016EFC 0838 0000 F602                     btst    #0,($FFFFF602).w
00016F02 6600                               bne.s    JmpToWJuponly
00016F04 303C FD00                          move.w    #-$300,d0
00016F08 317C FB00 0010                     move.w    #-$500,$10(a0)
00016F0E 4EF9 0000 0000                     jmp    WJ_Animate
00016F14                            JmpToWJskip:
00016F14 4EF9 0000 0000                     jmp    WJskip
00016F1A                            JmpToWJuponly:
00016F1A 4EF9 0000 0000                     jmp    WJuponly
00016F20                            WJNotUnderwater:
00016F20 303C FA00                          move.w    #-$600,d0
00016F24 0838 0000 F602                     btst    #0,($FFFFF602).w
00016F2A 6600                               bne.s    WJuponly
00016F2C 303C FC00                          move.w    #-$400,d0
00016F30 317C F900 0010                     move.w    #-$700,$10(a0)
00016F36                            WJ_Animate:
00016F36 0828 0000 0022                     btst    #0,$22(a0)
00016F3C 6700                               beq.s    WJuponly
00016F3E 4468 0010                          neg.w    $10(a0)
00016F42                                    
00016F42                            WJuponly:
00016F42 3140 0012                          move.w    d0,$12(a0)
00016F46 303C 00A0                          move.w    #$A0,d0
00016F4A 4EB9 0000 110E                     jsr    (PlaySound_Special).l;    play jumping sound
00016F50                                    
00016F50                            WJskip:
00016F50                                ;end Wall Jump
00016F50 4A28 003C                          tst.b    $3C(a0)
00016F54 6700                               beq.s    loc_134C4
00016F56 323C FC00                          move.w    #-$400,d1
00016F5A 0828 0006 0022                     btst    #6,$22(a0)
00016F60 6700                               beq.s    loc_134AE
00016F62 323C FE00                          move.w    #-$200,d1
00016F66                            
00016F66                            loc_134AE:
00016F66 B268 0012                          cmp.w    $12(a0),d1
00016F6A 6F00                               ble.s    locret_134C2
00016F6C 0C38 0001 FFA8                     cmp.b     #1,($FFFFFFA8).w; check if bit 2 of the Air Attack flag is set
00016F72 6700                               beq.s    locret_134C2; if yes, branch
00016F74 1038 F602                          move.b    ($FFFFF602).w,d0
00016F78 0200 0070                          andi.b    #$70,d0    ; is A,    B or C pressed?
00016F7C 6600                               bne.s    locret_134C2; if yes, branch
00016F7E 3141 0012                          move.w    d1,$12(a0)
00016F82                            
00016F82                            locret_134C2:
00016F82 0838 0006 F604             	btst	#6,($FFFFF604).w ; is button A pressed?
00016F88 6600                       	bne.s	Sonic_CheckGoSuper	; if yes, test for turning into Super Sonic.
00016F8A 4E75                       		rts	
00016F8C                            ; ===========================================================================
00016F8C                            
00016F8C                            loc_134C4:
00016F8C 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00016F92 6C00                       		bge.s	locret_134D2
00016F94 317C F040 0012             		move.w	#-$FC0,$12(a0)
00016F9A                            
00016F9A                            locret_134D2:
00016F9A 4E75                       		rts	
00016F9C                            ; End of function Sonic_JumpHeight
00016F9C                            
00016F9C                            ; ---------------------------------------------------------------------------
00016F9C                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
00016F9C                            ; if he has enough rings and emeralds
00016F9C                            ; ---------------------------------------------------------------------------
00016F9C                            
00016F9C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00016F9C                            
00016F9C                            ; loc_1AB38: test_set_SS:
00016F9C                            Sonic_CheckGoSuper:
00016F9C 0C38 0001 FFF6             	cmpi.b 	#$01, ($FFFFFFF6).w ; if player flag set?
00016FA2 6700 0000                      beq.w 	return_1ABA4
00016FA6 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
00016FAA 6600 0000                  	bne.w	return_1ABA4		; if yes, branch
00016FAE 0C38 0006 FE57             	cmpi.b	#6,($FFFFFE57).w
00016FB4 6600 0000                  	bne.w	return_1ABA4		; if not, branch
00016FB8 0C78 0032 FE20             	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
00016FBE 6500 0000                  	bcs.w	return_1ABA4		; if not, branch
00016FC2 11C0 FE2E                  	move.b	d0,($FFFFFE2E).w ; clear speed shoes
00016FC6                            	
00016FC6 303C 00B7                  	move.w	#$B7,d0
00016FCA 4EB9 0000 110E             	jsr	(PlaySound_Special).l
00016FD0 11FC 0001 F65F             	move.b	#1,(Super_Sonic_palette).w
00016FD6 11FC 000F F65E             	move.b	#$F,(Palette_frame_count).w
00016FDC 11FC 0001 FE19             	move.b	#1,(Super_Sonic_flag).w
00016FE2 117C 0081 002A             	move.b	#$81,obj_control(a0)
00016FE8 117C 0025 001C             	move.b  #$25,$1C(a0)    ; use transformation animation
00016FEE 0C38 0000 FFF6             	cmpi.b	#$00, ($FFFFFFF6).w
00016FF4 6700                       	beq.s	Sonic_CheckGoSuper_Cont
00016FF6 117C 0022 001C             	move.b	#$22,$1C(a0)
00016FFC                            ;	move.b	#$7E,(Object_RAM+$2040).w	; Obj7E is the ending sonic which is why it's commented out
00016FFC                            Sonic_CheckGoSuper_Cont:
00016FFC 317C 0000 0010             	move.w	#0,x_vel(a0) ; clear X speed
00017002 317C 0000 0012             	move.w	#0,y_vel(a0) ; clear Y speed
00017008 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
0001700E 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
00017014 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
0001701A 317C 0000 0032             	move.w	#0,invincibility_time(a0)
00017020 11FC 0001 FE2D             	move.b #1,($FFFFFE2D).w ; make Sonic invincible
00017026                            ;	move.w	#$C3,d0         ; 
00017026                            ;	jsr	(PlaySound).l	; Play special ring sound effect.
00017026 303C 0099                  	move.w	#$99,d0         
0001702A 4EF9 0000 110E             	jmp	(PlaySound_Special).l	; load the super theme and return also playmusic doesn't exist
00017030                            
00017030                            ; ---------------------------------------------------------------------------
00017030                            return_1ABA4:
00017030 4E75                       	rts
00017032                            ; End of subroutine Sonic_CheckGoSuper
00017032                            
00017032                            
00017032                            ; ---------------------------------------------------------------------------
00017032                            ; Subroutine doing the extra logic for Super Sonic
00017032                            ; ---------------------------------------------------------------------------
00017032                            
00017032                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00017032                            
00017032                            ; loc_1ABA6:
00017032                            Sonic_Super:
00017032 0C38 0001 FFF6             	cmpi.b 	#$01, ($FFFFFFF6).w ; if player flag set?
00017038 6700 0000                      beq.w 	return_1AC3C
0001703C 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
00017040 6700 0000                  	beq.w	return_1AC3C
00017044 4A38 FE1E                  	tst.b	(Update_HUD_timer).w
00017048 6700                       	beq.s	Sonic_RevertToNormal ; ?
0001704A 5378 F670                  	subq.w	#1,(Super_Sonic_frame_count).w
0001704E 6A00 0000                  	bpl.w	return_1AC3C
00017052 31FC 003C F670             	move.w	#60,(Super_Sonic_frame_count).w	; Reset frame counter to 60
00017058 4A78 FE20                  	tst.w	(Ring_count).w
0001705C 6700                       	beq.s	Sonic_RevertToNormal
0001705E 0038 0001 FE1D             	ori.b	#1,(Update_HUD_rings).w
00017064 0C78 0001 FE20             	cmpi.w	#1,(Ring_count).w
0001706A 6700                       	beq.s	@update
0001706C 0C78 000A FE20             	cmpi.w	#10,(Ring_count).w
00017072 6700                       	beq.s	@update
00017074 0C78 0064 FE20             	cmpi.w	#100,(Ring_count).w
0001707A 6600                       	bne.s	@update2
0001707C                            @update
0001707C 0038 0080 FE1D             	ori.b	#$80,(Update_HUD_rings).w
00017082                            @update2
00017082 5378 FE20                  	subq.w	#1,(Ring_count).w
00017086 6600                       	bne.s	return_1AC3C
00017088                            ; loc_1ABF2:
00017088                            Sonic_RevertToNormal:
00017088 11FC 0002 F65F             	move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
0001708E 31FC 0028 F65C             	move.w	#$28,($FFFFF65C).w	; Unknown
00017094 11FC 0000 FE19             	move.b	#0,(Super_Sonic_flag).w
0001709A 117C 0001 001D             	move.b	#1,next_anim(a0)	; Change animation back to normal ?
000170A0 317C 0001 0032             	move.w	#1,invincibility_time(a0)	; Remove invincibility
000170A6 31FC 0600 F760             	move.w	#$600,(Sonic_top_speed).w
000170AC 31FC 000C F762             	move.w	#$C,(Sonic_acceleration).w
000170B2 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
000170B8 0828 0006 0022             	btst	#6,status(a0)	; Check if underwater, return if not
000170BE 6700                       	beq.s	return_1AC3C
000170C0 31FC 0300 F760             	move.w	#$300,(Sonic_top_speed).w
000170C6 31FC 0006 F762             	move.w	#6,(Sonic_acceleration).w
000170CC 31FC 0040 F764             	move.w	#$40,(Sonic_deceleration).w
000170D2                            
000170D2                            return_1AC3C:
000170D2 4E75                       	rts
000170D4                            ; End of subroutine Sonic_Super
000170D4                            
000170D4                            Sonic_AirRoll:
000170D4                            	include "AirRoll.asm"
000170D4 4A38 FFF6                  	tst.b	($FFFFFFF6).w ; is the player flag set?
000170D8 6700 0000                  	beq.w	AR_Valid
000170DC 4E75                       	rts
000170DE                            
000170DE                            AR_Valid:
000170DE 0828 0001 0022                 btst    #1,$22(a0)   ; is Sonic in the air?
000170E4 6700                           beq.s   ARnope   ; if not, branch
000170E6 1038 F602                      move.b  ($FFFFF602).w,d0
000170EA 0200 0060                  	andi.b	#$60,d0			; pressing A/B/C ?
000170EE 6700                           beq.s   ARnope   ; if not, branch
000170F0 117C 0022 001C                 move.b  #$22,$1C(a0)   ; use "rolling"   animation
000170F6 08E8 0002 0022             	bset   #2,$22(a0)   ; force Sonic to roll
000170FC 11FC 0001 FFF9                 move.b    #1,($FFFFFFF9).w
00017102                            
00017102                            ARnope:
00017102 11FC 0000 FFF9                 move.b     #0,($FFFFFFF9).w
00017108 4E75                           rts
0001710A                            
0001710A                            
0001710A                            ; End of function Sonic_AirRoll
0001710A                            ; End of function Sonic_AirRoll
0001710A                            
0001710A                            ; ---------------------------------------------------------------------------
0001710A                            ; Subroutine to make Sonic perform a spindash
0001710A                            ; ---------------------------------------------------------------------------
0001710A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001710A                            Sonic_SpinDash:
0001710A                            	include "Spindash.asm"
0001710A 0C38 0002 FFF6                     cmp.b    #2,($FFFFFFF6).w    ; is the character actually metal?
00017110 6600                       		bne.s 	SDCont
00017112 4EF9 0000 0000             		jmp		Endofspindash
00017118                            SDCont:
00017118 4A28 0039                  		tst.b	$39(a0)			; already spindashing?
0001711C 6600                       		bne.s	loc2_1AC8E		; if set, branch
0001711E 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is anim duck
00017124 6600                       		bne.s	locret2_1AC8C		; if not, return
00017126 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
0001712A 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
0001712E 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00017132 117C 001F 001C             		move.b	#$1F,$1C(a0)		; set spindash anim (9 in s2)
00017138 303C 00D1                  		move.w	#$D1,d0			; spin sound ($E0 in s2)
0001713C 4EB9 0000 110E             		jsr	(PlaySound_Special).l	; play spin sound
00017142 588F                       		addq.l	#4,sp			; increment stack ptr
00017144 117C 0001 0039             		move.b	#1,$39(a0)		; set spindash flag
0001714A 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00017150 0C28 000C 0028             		cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00017156 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; ??? $D11C only seems
0001715C                            						; to be used in spindash
0001715C                            loc2_1AC84:
0001715C 6100 FA86                  		bsr.w	Sonic_LevelBound
00017160 6100 0000                  		bsr.w	Sonic_AnglePos
00017164                             
00017164                            locret2_1AC8C:
00017164 4E75                       		rts	
00017166                            ; ---------------------------------------------------------------------------
00017166                             
00017166                            loc2_1AC8E:
00017166 117C 001F 001C             		move.b	#$1F,$1C(a0)
0001716C 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
00017170 0800 0001                  		btst	#1,d0			; check down button
00017174 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00017178 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
0001717E 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00017184 117C 0002 001C             		move.b	#2,$1C(a0)		; set animation to roll
0001718A 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
0001718E 117C 0000 0039             		move.b	#0,$39(a0)		; clear spindash flag
00017194 7000                       		moveq	#0,d0
00017196 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
0001719A D040                       		add.w	d0,d0			; double it
0001719C 317B 0000 0014             		move.w	spdsh_norm(pc,d0.w),$14(a0) ; get normal speed
000171A2 4A38 FE19                  		tst.b	(Super_Sonic_flag).w		; is sonic super?
000171A6 6700                       		beq.s	loc2_1ACD0		; if no, branch
000171A8 317B 0000 0014             		move.w	spdsh_super(pc,d0.w),$14(a0) ; get super speed
000171AE                             
000171AE                            loc2_1ACD0:					; TODO: figure this out
000171AE 3028 0014                  		move.w	$14(a0),d0		; get inertia
000171B2 0440 0800                  		subi.w	#$800,d0		; subtract $800
000171B6 D040                       		add.w	d0,d0			; double it
000171B8 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
000171BC 4440                       		neg.w	d0			; negate it
000171BE 0640 2000                  		addi.w	#$2000,d0		; add $2000
000171C2 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $C904
000171C6 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
000171CC 6700                       		beq.s	loc2_1ACF4		; if not, branch
000171CE 4468 0014                  		neg.w	$14(a0)			; negate inertia
000171D2                             
000171D2                            loc2_1ACF4:
000171D2 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
000171D8 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear $D11C (unused?)
000171DE 303C 00BC                  		move.w	#$BC,d0			; spin release sound
000171E2 4EB9 0000 110E             		jsr	(PlaySound_Special).l	; play it!
000171E8 1028 0026                  		move.b	$26(a0),d0
000171EC 4EB9 0000 3736             		jsr	(CalcSine).l
000171F2 C3E8 0014                  		muls.w	$14(a0),d1
000171F6 E081                       		asr.l	#8,d1
000171F8 3141 0010                  		move.w	d1,$10(a0)
000171FC C1E8 0014                  		muls.w	$14(a0),d0
00017200 E080                       		asr.l	#8,d0
00017202 3140 0012                  		move.w	d0,$12(a0)
00017206                            
00017206 6000                       		bra.s	loc2_1AD78
00017208                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
00017208                            spdsh_norm:
00017208 0800                       		dc.w  $800		; 0
0001720A 0880                       		dc.w  $880		; 1
0001720C 0900                       		dc.w  $900		; 2
0001720E 0980                       		dc.w  $980		; 3
00017210 0A00                       		dc.w  $A00		; 4
00017212 0A80                       		dc.w  $A80		; 5
00017214 0B00                       		dc.w  $B00		; 6
00017216 0B80                       		dc.w  $B80		; 7
00017218 0C00                       		dc.w  $C00		; 8
0001721A                             
0001721A                            spdsh_super:
0001721A 0B00                       		dc.w  $B00		; 0
0001721C 0B80                       		dc.w  $B80		; 1
0001721E 0C00                       		dc.w  $C00		; 2
00017220 0C80                       		dc.w  $C80		; 3
00017222 0D00                       		dc.w  $D00		; 4
00017224 0D80                       		dc.w  $D80		; 5
00017226 0E00                       		dc.w  $E00		; 6
00017228 0E80                       		dc.w  $E80		; 7
0001722A 0F00                       		dc.w  $F00		; 8
0001722C                            ; ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ
0001722C                             
0001722C                            loc2_1AD30:				; If still charging the dash...
0001722C 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00017230 6700                       		beq.s	loc2_1AD48	; if zero, branch
00017232 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00017236 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00017238 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
0001723C 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
0001723E 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00017244                             
00017244                            loc2_1AD48:
00017244 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
00017248 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
0001724C 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00017250 317C 1F00 001C             		move.w	#$1F00,$1C(a0)		; reset spdsh animation
00017256 303C 00D1                  		move.w	#$D1,d0			; was $E0 in sonic 2
0001725A 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w	; Set the spindash dust animation to $2.
00017260 4EB9 0000 110E             		jsr	(PlaySound_Special).l	; play charge sound	
00017266 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
0001726C 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00017272 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00017274 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
0001727A                             
0001727A                            loc2_1AD78:
0001727A 588F                       		addq.l	#4,sp			; increase stack ptr
0001727C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00017282 6700                       		beq.s	loc2_1AD8C
00017284 6400                       		bcc.s	loc2_1AD88
00017286 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001728A                            
0001728A                            loc2_1AD88:
0001728A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001728E                            
0001728E                            loc2_1AD8C:
0001728E 6100 F954                  		bsr.w	Sonic_LevelBound
00017292 6100 0000                  		bsr.w	Sonic_AnglePos
00017296                            		;move.w	#$60,($FFFFF73E).w	; reset looking up/down
00017296                            Endofspindash:
00017296 4E75                       		rts
00017298                            ; End of subroutine Sonic_Spindash
00017298                            
00017298                            
00017298                            	
00017298                            Metal_SpinDash:
00017298                            	include "SCDSpindash.asm"
00017298 0C38 0002 FFF6                     cmp.b    #2,($FFFFFFF6).w    ; is the character actually metal?
0001729E 6600                       		bne.s	Return
000172A0                            Metal_Dash:
000172A0 0828 0000 0039             		btst	#0,$39(a0)
000172A6 6600                       		bne.s	Sonic_SpinDashLaunch
000172A8 0C28 0008 001C             		cmpi.b	#8,$1C(a0) ;check to see if your ducking
000172AE 6600                       		bne.s	Return
000172B0 1038 F603                  		move.b	($FFFFF603).w,d0
000172B4 0200 0070                  		andi.b	#%01110000,d0
000172B8 6700 0000                  		beq.w	Return
000172BC 117C 0001 001C             		move.b	#1,$1C(a0)
000172C2 317C 0000 003A             		move.w	#0,$3A(a0)
000172C8 303C 00D2                  		move.w	#$D2,d0
000172CC 4EB9 0000 110E             		jsr		(PlaySound_Special).l ; Play spindash charge sound
000172D2 588F                       		addq.l	#4,sp
000172D4 08E8 0000 0039             		bset	#0,$39(a0)
000172DA                             
000172DA 6100 F908                  		bsr.w	Sonic_LevelBound
000172DE 6100 0000                  		bsr.w	Sonic_AnglePos
000172E2                             
000172E2                            	Return:
000172E2 4E75                       		rts	
000172E4                            ; ---------------------------------------------------------------------------
000172E4                             
000172E4                            Sonic_SpinDashLaunch:
000172E4 117C 0024 001C             		move.b	#$24,$1C(a0) ;charging spindash animation (walking to running to spindash sprites)
000172EA 117C 000E 0016             		move.b	#$E,$16(a0)			; Setup collision range
000172F0 1038 F602                  		move.b	($FFFFF602).w,d0
000172F4 0800 0001                  		btst	#1,d0
000172F8 6600 0000                  		bne.w	Sonic_SpinDashCharge
000172FC 08A8 0000 0039             		bclr	#0,$39(a0)	; stop Dashing
00017302 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00017308 6600                       		bne.s	Sonic_SpinDash_Stop_Sound
0001730A                            	;	move.b	#2,$1C(a0)	; launches here (spindash sprites)
0001730A 08E8 0002 0022             		bset	#2,$22(a0)			; set rolling bit
00017310 117C 000E 0016             		move.b	#$E,$16(a0)			; Setup collision range
00017316 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
0001731C 317C 0A00 0014             		move.w	#$0A00,$14(a0)	;Set sonic's speed
00017322 3028 0014                  		move.w	$14(a0),d0
00017326 0440 0800                  		subi.w	#$800,d0
0001732A D040                       		add.w	d0,d0
0001732C 0240 1F00                  		andi.w	#$1F00,d0
00017330 4440                       		neg.w	d0
00017332 0640 2000                  		addi.w	#$2000,d0
00017336                            		;move.w	d0,(v_cameralag).w
00017336 0828 0000 0022             		btst	#0,$22(a0)
0001733C 6700                       		beq.s	@dontflip
0001733E 4468 0014                  		neg.w	$14(a0)
00017342                            	;	jmp 	Obj01_DoRoll
00017342                            	
00017342                             
00017342                            @dontflip:
00017342                            		;bset	#2,$22(a0)
00017342 08A8 0007 0022             		bclr	#7,$22(a0)
00017348 303C 00D3                  		move.w	#$D3,d0
0001734C 4EB9 0000 110E             		jsr		(PlaySound_Special).l
00017352 303C 00D4                  		move.w	#$D4,d0
00017356 4EB9 0000 110E             		jsr		(PlaySound_Special).l
0001735C 6000 0000                  		bra.w	Sonic_SpinDashResetScr
00017360                            ; ---------------------------------------------------------------------------
00017360                             
00017360                            Sonic_SpinDashCharge:				; If still charging the dash...
00017360 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00017366 6700                       		beq.s	Sonic_SpinDashResetScr
00017368 5228 003A                  		addi.b	#1,$3A(a0)
0001736C 4EF9 0000 0000             		jmp 	Sonic_SpinDashResetScr
00017372                            		
00017372                            Sonic_SpinDash_Stop_Sound:
00017372 303C 00D3                  		move.w	#$D3,d0
00017376 4EB9 0000 110E             		jsr		(PlaySound_Special).l
0001737C 117C 0013 0016             		move.b	#$13,$16(a0)
00017382                            
00017382                            Sonic_SpinDashResetScr:
00017382 588F                       		addq.l	#4,sp			; increase stack ptr
00017384 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0001738A 6700                       		beq.s	End
0001738C 6400                       		bcc.s	@skip
0001738E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00017392                             
00017392                            	@skip:
00017392 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00017396                            End:
00017396 6100 F84C                  		bsr.w	Sonic_LevelBound
0001739A 6100 0000                  		bsr.w	Sonic_AnglePos
0001739E 4E75                       		rts 
0001739E 4E75                       		rts 
000173A0                            
000173A0                            ; ---------------------------------------------------------------------------
000173A0                            ; Subroutine to make Sonic perform a peelout
000173A0                            ; ---------------------------------------------------------------------------
000173A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000173A0                            Sonic_Peelout:
000173A0                            	include "peelout.asm"
000173A0                            ;Sonic_Dash:
000173A0 0C38 0001 FFF6             		cmpi.b	#$01, ($FFFFFFF6).w ; if player flag set?
000173A6 6700                       		beq.s	@return
000173A8 0828 0001 0039             		btst	#1,$39(a0)
000173AE 6600                       		bne.s	Sonic_DashLaunch
000173B0 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
000173B6 6600                       		bne.s	@return
000173B8 1038 F603                  		move.b	($FFFFF603).w,d0
000173BC 0200 0070                  		andi.b	#%01110000,d0
000173C0 6700 0000                  		beq.w	@return
000173C4 117C 0001 001C             		move.b	#1,$1C(a0)
000173CA 317C 0000 003A             		move.w	#0,$3A(a0)
000173D0 303C 00D2                  		move.w	#$D2,d0
000173D4 4EB9 0000 110E             	jsr	(PlaySound_Special).l ; Play peelout charge sound
000173DA 588F                       		addq.l	#4,sp
000173DC 08E8 0001 0039             		bset	#1,$39(a0)
000173E2                             
000173E2 6100 F800                  		bsr.w	Sonic_LevelBound
000173E6 6100 0000                  		bsr.w	Sonic_AnglePos
000173EA                             
000173EA                            	@return:
000173EA 4E75                       		rts	
000173EC                            ; ---------------------------------------------------------------------------
000173EC                             
000173EC                            Sonic_DashLaunch:
000173EC 117C 0021 001C             		move.b	#$21,$1C(a0) ;charging peelout animation (walking to running to peelout sprites)
000173F2 1038 F602                  		move.b	($FFFFF602).w,d0
000173F6 0800 0000                  		btst	#0,d0
000173FA 6600 0000                  		bne.w	Sonic_DashCharge
000173FE 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00017404 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
0001740A 6600                       		bne.s	Sonic_Dash_Stop_Sound
0001740C 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00017412 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00017418 317C 0C00 0014             		move.w	#$0C00,$14(a0)	;Set sonic's speed
0001741E 3028 0014                  		move.w	$14(a0),d0
00017422 0440 0800                  		subi.w	#$800,d0
00017426 D040                       		add.w	d0,d0
00017428 0240 1F00                  		andi.w	#$1F00,d0
0001742C 4440                       		neg.w	d0
0001742E 0640 2000                  		addi.w	#$2000,d0
00017432                            		;move.w	d0,(v_cameralag).w
00017432 0828 0000 0022             		btst	#0,$22(a0)
00017438 6700                       		beq.s	@dontflip
0001743A 4468 0014                  		neg.w	$14(a0)
0001743E                             
0001743E                            @dontflip:
0001743E                            		;bset	#2,$22(a0)
0001743E 08A8 0007 0022             		bclr	#7,$22(a0)
00017444 303C 00D4                  		move.w	#$D4,d0
00017448 4EB9 0000 110E             		jsr	(PlaySound_Special).l
0001744E 6000 0000                  		bra.w	Sonic_DashResetScr
00017452                            ; ---------------------------------------------------------------------------
00017452                             
00017452                            Sonic_DashCharge:				; If still charging the dash...
00017452 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00017458 6700                       		beq.s	Sonic_DashResetScr
0001745A 5228 003A                  		addi.b	#1,$3A(a0)
0001745E 4EF9 0000 0000             		jmp 	Sonic_DashResetScr
00017464                            		
00017464                            Sonic_Dash_Stop_Sound:
00017464 303C 00D3                  		move.w	#$D3,d0
00017468 4EB9 0000 110E             		jsr		(PlaySound_Special).l
0001746E                            
0001746E                            Sonic_DashResetScr:
0001746E 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00017470 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00017476 6700                       		beq.s	@finish
00017478 6400                       		bcc.s	@skip
0001747A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001747E                             
0001747E                            	@skip:
0001747E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00017482                             
00017482                            	@finish:
00017482 6100 F760                  		bsr.w	Sonic_LevelBound
00017486 6100 0000                  		bsr.w	Sonic_AnglePos
0001748A 4E75                       		rts
0001748C                            		
0001748C                            		
0001748C                            
0001748C                            ; ---------------------------------------------------------------------------
0001748C                            ; Subroutine to make Shadow throw a Chaos Spear
0001748C                            ; ---------------------------------------------------------------------------
0001748C                            ShadowSpear:
0001748C                            	include "shadowSpear.asm"
0001748C 0C38 0001 FFF6             		cmpi.b	 #$01, ($FFFFFFF6).w
00017492 6600                       		bne.s	@end
00017494 0838 0004 F605                     btst    #4,($FFFFF605).w     ; is button B pressed?
0001749A 6700                               beq.s   @end              ; if not, branch
0001749C 6100 99D4                          bsr.w    SingleObjLoad
000174A0 12BC 0002                          move.b    #2,0(a1)            ; load missile object
000174A4 303C 00B8                  		move.w	#$B8,d0
000174A8 4EB9 0000 110E             		jsr	(PlaySound_Special).l
000174AE 3368 0008 0008                     move.w    8(a0),8(a1)
000174B4 3368 000C 000C                     move.w    $C(a0),$C(a1)
000174BA 337C 0A00 0010                     move.w    #$A00,$10(a1)        ; move the projectile to the right
000174C0 0828 0000 0022                     btst    #0,$22(a0)           ; is Sonic actually facing the left?
000174C6 6700                               beq.s    @end            ; if not, branch
000174C8 4469 0010                          neg.w    $10(a1)            ; negate the projectile's velocity, moving it to the left
000174CC                            
000174CC                            @end:
000174CC 4E75                           rts
000174CC 4E75                           rts
000174CE                            ; ---------------------------------------------------------------------------
000174CE                            ; Subroutine to	slow Sonic walking up a	slope
000174CE                            ; ---------------------------------------------------------------------------
000174CE                            
000174CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000174CE                            
000174CE                            
000174CE                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000174CE 1028 0026                  		move.b	$26(a0),d0
000174D2 0600 0060                  		addi.b	#$60,d0
000174D6 0C00 00C0                  		cmpi.b	#$C0,d0
000174DA 6400                       		bcc.s	locret_13508
000174DC 1028 0026                  		move.b	$26(a0),d0
000174E0 4EB9 0000 3736             		jsr	(CalcSine).l
000174E6 C1FC 0020                  		muls.w	#$20,d0
000174EA E080                       		asr.l	#8,d0
000174EC 4A68 0014                  		tst.w	$14(a0)
000174F0 6700                       		beq.s	locret_13508
000174F2 6B00                       		bmi.s	loc_13504
000174F4 4A40                       		tst.w	d0
000174F6 6700                       		beq.s	locret_13502
000174F8 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000174FC                            
000174FC                            locret_13502:
000174FC 4E75                       		rts	
000174FE                            ; ===========================================================================
000174FE                            
000174FE                            loc_13504:
000174FE D168 0014                  		add.w	d0,$14(a0)
00017502                            
00017502                            locret_13508:
00017502 4E75                       		rts	
00017504                            ; End of function Sonic_SlopeResist
00017504                            
00017504                            ; ---------------------------------------------------------------------------
00017504                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00017504                            ; ---------------------------------------------------------------------------
00017504                            
00017504                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017504                            
00017504                            
00017504                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00017504 1028 0026                  		move.b	$26(a0),d0
00017508 0600 0060                  		addi.b	#$60,d0
0001750C 0C00 00C0                  		cmpi.b	#-$40,d0
00017510 6400                       		bcc.s	locret_13544
00017512 1028 0026                  		move.b	$26(a0),d0
00017516 4EB9 0000 3736             		jsr	(CalcSine).l
0001751C C1FC 0050                  		muls.w	#$50,d0
00017520 E080                       		asr.l	#8,d0
00017522 4A68 0014                  		tst.w	$14(a0)
00017526 6B00                       		bmi.s	loc_1353A
00017528 4A40                       		tst.w	d0
0001752A 6A00                       		bpl.s	loc_13534
0001752C E480                       		asr.l	#2,d0
0001752E                            
0001752E                            loc_13534:
0001752E D168 0014                  		add.w	d0,$14(a0)
00017532 4E75                       		rts	
00017534                            ; ===========================================================================
00017534                            
00017534                            loc_1353A:
00017534 4A40                       		tst.w	d0
00017536 6B00                       		bmi.s	loc_13540
00017538 E480                       		asr.l	#2,d0
0001753A                            
0001753A                            loc_13540:
0001753A D168 0014                  		add.w	d0,$14(a0)
0001753E                            
0001753E                            locret_13544:
0001753E 4E75                       		rts	
00017540                            ; End of function Sonic_RollRepel
00017540                            
00017540                            ; ---------------------------------------------------------------------------
00017540                            ; Subroutine to	push Sonic down	a slope
00017540                            ; ---------------------------------------------------------------------------
00017540                            
00017540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017540                            
00017540                            
00017540                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00017540 4E71                       		nop	
00017542 4A28 0038                  		tst.b	$38(a0)
00017546 6600                       		bne.s	locret_13580
00017548 4A68 003E                  		tst.w	$3E(a0)
0001754C 6600                       		bne.s	loc_13582
0001754E 1028 0026                  		move.b	$26(a0),d0
00017552 0600 0020                  		addi.b	#$20,d0
00017556 0200 00C0                  		andi.b	#$C0,d0
0001755A 6700                       		beq.s	locret_13580
0001755C 3028 0014                  		move.w	$14(a0),d0
00017560 6A00                       		bpl.s	loc_1356A
00017562 4440                       		neg.w	d0
00017564                            
00017564                            loc_1356A:
00017564 0C40 0280                  		cmpi.w	#$280,d0
00017568 6400                       		bcc.s	locret_13580
0001756A 4268 0014                  		clr.w	$14(a0)
0001756E 08E8 0001 0022             		bset	#1,$22(a0)
00017574 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001757A                            
0001757A                            locret_13580:
0001757A 4E75                       		rts	
0001757C                            ; ===========================================================================
0001757C                            
0001757C                            loc_13582:
0001757C 5368 003E                  		subq.w	#1,$3E(a0)
00017580 4E75                       		rts	
00017582                            ; End of function Sonic_SlopeRepel
00017582                            
00017582                            ; ---------------------------------------------------------------------------
00017582                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00017582                            ; ---------------------------------------------------------------------------
00017582                            
00017582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017582                            
00017582                            
00017582                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00017582 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00017586 6700                       		beq.s	locret_135A2	; if already 0,	branch
00017588 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001758A                            
0001758A 5400                       		addq.b	#2,d0		; increase angle
0001758C 6400                       		bcc.s	loc_13596
0001758E 7000                       		moveq	#0,d0
00017590                            
00017590                            loc_13596:
00017590 6000                       		bra.s	loc_1359E
00017592                            ; ===========================================================================
00017592                            
00017592                            loc_13598:
00017592 5500                       		subq.b	#2,d0		; decrease angle
00017594 6400                       		bcc.s	loc_1359E
00017596 7000                       		moveq	#0,d0
00017598                            
00017598                            loc_1359E:
00017598 1140 0026                  		move.b	d0,$26(a0)
0001759C                            
0001759C                            locret_135A2:
0001759C 4E75                       		rts	
0001759E                            ; End of function Sonic_JumpAngle
0001759E                            
0001759E                            ; ---------------------------------------------------------------------------
0001759E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001759E                            ; ---------------------------------------------------------------------------
0001759E                            
0001759E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001759E                            
0001759E                            
0001759E                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001759E 3228 0010                  		move.w	$10(a0),d1
000175A2 3428 0012                  		move.w	$12(a0),d2
000175A6 4EB9 0000 3A04             		jsr	(CalcAngle).l
000175AC 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000175B0 0400 0020                  		subi.b	#$20,d0
000175B4 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000175B8 0200 00C0                  		andi.b	#$C0,d0
000175BC 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000175C0 0C00 0040                  		cmpi.b	#$40,d0
000175C4 6700 0000                  		beq.w	loc_13680
000175C8 0C00 0080                  		cmpi.b	#$80,d0
000175CC 6700 0000                  		beq.w	loc_136E2
000175D0 0C00 00C0                  		cmpi.b	#-$40,d0
000175D4 6700 0000                  		beq.w	loc_1373E
000175D8 6100 0000                  		bsr.w	Sonic_HitWall
000175DC 4A41                       		tst.w	d1
000175DE 6A00                       		bpl.s	loc_135F0
000175E0 9368 0008                  		sub.w	d1,8(a0)
000175E4 317C 0000 0010             		move.w	#0,$10(a0)
000175EA 123C 0004                  		move.b	#btnL,d1
000175EE 6100 0000                  		bsr.w	WallJump
000175F2                            
000175F2                            loc_135F0:
000175F2 6100 0000                  		bsr.w	sub_14EB4
000175F6 4A41                       		tst.w	d1
000175F8 6A00                       		bpl.s	loc_13602
000175FA D368 0008                  		add.w	d1,8(a0)
000175FE 317C 0000 0010             		move.w	#0,$10(a0)
00017604 123C 0008                  		move.b	#btnR,d1
00017608 6100 0000                  		bsr.w	WallJump
0001760C                            
0001760C                            loc_13602:
0001760C 6100 0000                  		bsr.w	Sonic_HitFloor
00017610 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00017614 4A41                       		tst.w	d1
00017616 6A00                       		bpl.s	locret_1367E
00017618 1428 0012                  		move.b	$12(a0),d2
0001761C 5002                       		addq.b	#8,d2
0001761E 4402                       		neg.b	d2
00017620 B202                       		cmp.b	d2,d1
00017622 6C00                       		bge.s	loc_1361E
00017624 B002                       		cmp.b	d2,d0
00017626 6D00                       		blt.s	locret_1367E
00017628                            
00017628                            loc_1361E:
00017628 D368 000C                  		add.w	d1,$C(a0)
0001762C 1143 0026                  		move.b	d3,$26(a0)
00017630 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00017634 117C 0000 001C             		move.b	#0,$1C(a0)
0001763A 1003                       		move.b	d3,d0
0001763C 0600 0020                  		addi.b	#$20,d0
00017640 0200 0040                  		andi.b	#$40,d0
00017644 6600                       		bne.s	loc_1365C
00017646 1003                       		move.b	d3,d0
00017648 0600 0010                  		addi.b	#$10,d0
0001764C 0200 0020                  		andi.b	#$20,d0
00017650 6700                       		beq.s	loc_1364E
00017652 E0E8 0012                  		asr	$12(a0)
00017656 6000                       		bra.s	loc_13670
00017658                            ; ===========================================================================
00017658                            
00017658                            loc_1364E:
00017658 317C 0000 0012             		move.w	#0,$12(a0)
0001765E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00017664 4E75                       		rts	
00017666                            ; ===========================================================================
00017666                            
00017666                            loc_1365C:
00017666 317C 0000 0010             		move.w	#0,$10(a0)
0001766C 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00017672 6F00                       		ble.s	loc_13670
00017674 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001767A                            
0001767A                            loc_13670:
0001767A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00017680 4A03                       		tst.b	d3
00017682 6A00                       		bpl.s	locret_1367E
00017684 4468 0014                  		neg.w	$14(a0)
00017688                            
00017688                            locret_1367E:
00017688 4E75                       		rts	
0001768A                            ; ===========================================================================
0001768A                            
0001768A                            loc_13680:
0001768A 6100 0000                  		bsr.w	Sonic_HitWall
0001768E 4A41                       		tst.w	d1
00017690 6A00                       		bpl.s	loc_1369A
00017692 9368 0008                  		sub.w	d1,8(a0)
00017696 317C 0000 0010             		move.w	#0,$10(a0)
0001769C 3168 0012 0014             		move.w	$12(a0),$14(a0)
000176A2 4E75                       		rts	
000176A4                            ; ===========================================================================
000176A4                            
000176A4                            loc_1369A:
000176A4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000176A8 4A41                       		tst.w	d1
000176AA 6A00                       		bpl.s	loc_136B4
000176AC 9368 000C                  		sub.w	d1,$C(a0)
000176B0 4A68 0012                  		tst.w	$12(a0)
000176B4 6A00                       		bpl.s	locret_136B2
000176B6 317C 0000 0012             		move.w	#0,$12(a0)
000176BC                            
000176BC                            locret_136B2:
000176BC 4E75                       		rts	
000176BE                            ; ===========================================================================
000176BE                            
000176BE                            loc_136B4:
000176BE 4A68 0012                  		tst.w	$12(a0)
000176C2 6B00                       		bmi.s	locret_136E0
000176C4 6100 0000                  		bsr.w	Sonic_HitFloor
000176C8 4A41                       		tst.w	d1
000176CA 6A00                       		bpl.s	locret_136E0
000176CC D368 000C                  		add.w	d1,$C(a0)
000176D0 1143 0026                  		move.b	d3,$26(a0)
000176D4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000176D8 117C 0000 001C             		move.b	#0,$1C(a0)
000176DE 317C 0000 0012             		move.w	#0,$12(a0)
000176E4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000176EA                            
000176EA                            locret_136E0:
000176EA 4E75                       		rts	
000176EC                            ; ===========================================================================
000176EC                            
000176EC                            loc_136E2:
000176EC 6100 0000                  		bsr.w	Sonic_HitWall
000176F0 4A41                       		tst.w	d1
000176F2 6A00                       		bpl.s	loc_136F4
000176F4 9368 0008                  		sub.w	d1,8(a0)
000176F8 317C 0000 0010             		move.w	#0,$10(a0)
000176FE 123C 0004                  		move.b	#btnL,d1
00017702 6100 0000                  		bsr.w	WallJump
00017706                            
00017706                            loc_136F4:
00017706 6100 0000                  		bsr.w	sub_14EB4
0001770A 4A41                       		tst.w	d1
0001770C 6A00                       		bpl.s	loc_13706
0001770E D368 0008                  		add.w	d1,8(a0)
00017712 317C 0000 0010             		move.w	#0,$10(a0)
00017718 123C 0008                  		move.b	#btnR,d1
0001771C 6100 0000                  		bsr.w	WallJump
00017720                            
00017720                            loc_13706:
00017720 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00017724 4A41                       		tst.w	d1
00017726 6A00                       		bpl.s	locret_1373C
00017728 9368 000C                  		sub.w	d1,$C(a0)
0001772C 1003                       		move.b	d3,d0
0001772E 0600 0020                  		addi.b	#$20,d0
00017732 0200 0040                  		andi.b	#$40,d0
00017736 6600                       		bne.s	loc_13726
00017738 317C 0000 0012             		move.w	#0,$12(a0)
0001773E 4E75                       		rts	
00017740                            ; ===========================================================================
00017740                            
00017740                            loc_13726:
00017740 1143 0026                  		move.b	d3,$26(a0)
00017744 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00017748 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001774E 4A03                       		tst.b	d3
00017750 6A00                       		bpl.s	locret_1373C
00017752 4468 0014                  		neg.w	$14(a0)
00017756                            
00017756                            locret_1373C:
00017756 4E75                       		rts	
00017758                            ; ===========================================================================
00017758                            
00017758                            loc_1373E:
00017758 6100 0000                  		bsr.w	sub_14EB4
0001775C 4A41                       		tst.w	d1
0001775E 6A00                       		bpl.s	loc_13758
00017760 D368 0008                  		add.w	d1,8(a0)
00017764 317C 0000 0010             		move.w	#0,$10(a0)
0001776A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00017770 4E75                       		rts	
00017772                            ; ===========================================================================
00017772                            
00017772                            loc_13758:
00017772 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00017776 4A41                       		tst.w	d1
00017778 6A00                       		bpl.s	loc_13772
0001777A 9368 000C                  		sub.w	d1,$C(a0)
0001777E 4A68 0012                  		tst.w	$12(a0)
00017782 6A00                       		bpl.s	locret_13770
00017784 317C 0000 0012             		move.w	#0,$12(a0)
0001778A                            
0001778A                            locret_13770:
0001778A 4E75                       		rts	
0001778C                            ; ===========================================================================
0001778C                            
0001778C                            loc_13772:
0001778C 4A68 0012                  		tst.w	$12(a0)
00017790 6B00                       		bmi.s	locret_1379E
00017792 6100 0000                  		bsr.w	Sonic_HitFloor
00017796 4A41                       		tst.w	d1
00017798 6A00                       		bpl.s	locret_1379E
0001779A D368 000C                  		add.w	d1,$C(a0)
0001779E 1143 0026                  		move.b	d3,$26(a0)
000177A2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000177A6 117C 0000 001C             		move.b	#0,$1C(a0)
000177AC 317C 0000 0012             		move.w	#0,$12(a0)
000177B2 3168 0010 0014             		move.w	$10(a0),$14(a0)
000177B8                            
000177B8                            locret_1379E:
000177B8 4E75                       		rts	
000177BA                            ; End of function Sonic_Floor
000177BA                            
000177BA                            WallJump:
000177BA 0C38 0003 FFF6             		cmpi.b	#$03, ($FFFFFFF6).w ; if player flag set?
000177C0 6600                       		bne.s	@return
000177C2 4A28 003C                  		tst.b	$3C(a0)	;Mercury Constants
000177C6 6700                       		beq.s	@return
000177C8 4A28 0012                  		tst.b	y_vel(a0)
000177CC 6B00                       		bmi.s	@return
000177CE 1038 F602                          move.b    ($FFFFF602).w,d0; get jpad
000177D2 0200 0070                          andi.b    #$70,d0; keep just L and R state
000177D6 6700                               beq.s    @return        ; fail if neither are pressed
000177D8 1038 F602                          move.b    ($FFFFF602).w,d0; get jpad
000177DC 0200 000C                          andi.b    #$C,d0; keep just L and R state
000177E0 6700                               beq.s    @return        ; fail if neither are pressed
000177E2 0C00 000C                          cmpi.b    #$C,d0; fail if both are pressed
000177E6 6700                               beq.s    @return
000177E8 C001                       		and.b	d1,d0			; keep only L or R depending on d1
000177EA 6700                       		beq.s	@return			; fail if not pressed
000177EC 1140 002D                  		move.b	d0,(obWallJump+1)(a0)	; remember them
000177F0 317C 0000 0012             		move.w	#0,y_vel(a0)
000177F6 117C 0018 002C             		move.b	#$18,obWallJump(a0)	;Mercury Constants
000177FC 4228 003C                  		clr.b	$3C(a0)
00017800 117C 0023 001C             		move.b	#$23,anim(a0)
00017806                            
00017806                            @return:
00017806 4E75                       		rts
00017808                            
00017808                            ; ---------------------------------------------------------------------------
00017808                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00017808                            ; ---------------------------------------------------------------------------
00017808                            
00017808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017808                            
00017808                            
00017808                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00017808 0828 0004 0022             		btst	#4,$22(a0)
0001780E 6700                       		beq.s	loc_137AE
00017810 4E71                       		nop	
00017812 4E71                       		nop	
00017814 4E71                       		nop	
00017816                            
00017816                            loc_137AE:
00017816 4238 FFA8                  		clr.b	 ($FFFFFFA8).w
0001781A 4238 FF89                          clr.b    ($FFFFFF89).w    ; clr downjump/stomp flag
0001781E 4238 FF8F                          clr.b    ($FFFFFF8F).w    ; clr downjump/stomp flag
00017822 08A8 0005 0022             		bclr	#5,$22(a0)
00017828 08A8 0001 0022             		bclr	#1,$22(a0)
0001782E 08A8 0004 0022             		bclr	#4,$22(a0)
00017834 0828 0002 0022             		btst	#2,$22(a0)
0001783A 6700                       		beq.s	loc_137E4
0001783C 08A8 0002 0022             		bclr	#2,$22(a0)
00017842 117C 0013 0016             		move.b	#$13,$16(a0)
00017848 117C 0009 0017             		move.b	#9,$17(a0)
0001784E 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00017854 5B68 000C                  		subq.w	#5,$C(a0)
00017858                            
00017858                            loc_137E4:
00017858 117C 0000 003C             		move.b	#0,$3C(a0)
0001785E 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00017864 4E75                       		rts	
00017866                            ; End of function Sonic_ResetOnFloor
00017866                            
00017866                            ; ===========================================================================
00017866                            ; ---------------------------------------------------------------------------
00017866                            ; Sonic	when he	gets hurt
00017866                            ; ---------------------------------------------------------------------------
00017866                            
00017866                            Obj01_Hurt:				; XREF: Obj01_Index
00017866 4EBA 915A                  		jsr	SpeedToPos
0001786A 0668 0030 0012             		addi.w	#$30,$12(a0)
00017870 0828 0006 0022             		btst	#6,$22(a0)
00017876 6700                       		beq.s	loc_1380C
00017878 0468 0020 0012             		subi.w	#$20,$12(a0)
0001787E                            
0001787E                            loc_1380C:
0001787E 6100 0000                  		bsr.w	Sonic_HurtStop
00017882 6100 F360                  		bsr.w	Sonic_LevelBound
00017886 6100 ECDA                  		bsr.w	Sonic_RecordPos
0001788A 6100 0000                  		bsr.w	Sonic_Animate
0001788E 6100 0000                  		bsr.w	LoadSonicDynPLC
00017892 4EFA 9148                  		jmp	DisplaySprite
00017896                            
00017896                            ; ---------------------------------------------------------------------------
00017896                            ; Subroutine to	stop Sonic falling after he's been hurt
00017896                            ; ---------------------------------------------------------------------------
00017896                            
00017896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017896                            
00017896                            
00017896                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00017896 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001789A 0640 00E0                  		addi.w	#$E0,d0
0001789E B068 000C                  		cmp.w	$C(a0),d0
000178A2 6500 0000                  		bcs.w	KillSonicHurtStop
000178A6 6100 FCF6                  		bsr.w	Sonic_Floor
000178AA 0828 0001 0022             		btst	#1,$22(a0)
000178B0 6600                       		bne.s	locret_13860
000178B2 7000                       		moveq	#0,d0
000178B4 3140 0012                  		move.w	d0,$12(a0)
000178B8 3140 0010                  		move.w	d0,$10(a0)
000178BC 3140 0014                  		move.w	d0,$14(a0)
000178C0 117C 0000 001C             		move.b	#0,$1C(a0)
000178C6 5528 0024                  		subq.b	#2,$24(a0)
000178CA 317C 0078 0030             		move.w	#$78,$30(a0)
000178D0                            
000178D0                            locret_13860:
000178D0 4E75                       		rts	
000178D2                            
000178D2                            KillSonicHurtStop:
000178D2 4EF9 0000 0000             		jmp	KillSonic
000178D8 4E75                       		rts
000178DA                            ; End of function Sonic_HurtStop
000178DA                            
000178DA                            ; ===========================================================================
000178DA                            ; ---------------------------------------------------------------------------
000178DA                            ; Sonic	when he	dies
000178DA                            ; ---------------------------------------------------------------------------
000178DA                            
000178DA                            Obj01_Death:				; XREF: Obj01_Index
000178DA 6100 0000                  		bsr.w	GameOver
000178DE 4EBA 90C2                  		jsr	ObjectFall
000178E2 6100 EC7E                  		bsr.w	Sonic_RecordPos
000178E6 6100 0000                  		bsr.w	Sonic_Animate
000178EA 6100 0000                  		bsr.w	LoadSonicDynPLC
000178EE 4EFA 90EC                  		jmp	DisplaySprite
000178F2                            
000178F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178F2                            
000178F2                            
000178F2                            GameOver:				; XREF: Obj01_Death
000178F2 3038 F704                  		move.w	($FFFFF704).w,d0
000178F6 0640 0100                  		addi.w	#$100,d0
000178FA B068 000C                  		cmp.w	$C(a0),d0
000178FE 6C00 0000                  		bge.w	locret_13900
00017902 317C FFC8 0012             		move.w	#-$38,$12(a0)
00017908 5428 0024                  		addq.b	#2,$24(a0)
0001790C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00017910 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00017914 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00017918 6600                       		bne.s	loc_138D4
0001791A 317C 0000 003A             		move.w	#0,$3A(a0)
00017920 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00017926 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001792C 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00017932 4238 FE1A                  		clr.b	($FFFFFE1A).w
00017936                            
00017936                            loc_138C2:
00017936 303C 008F                  		move.w	#$8F,d0
0001793A 4EB9 0000 1108             		jsr	(PlaySound).l	; play game over music
00017940 7003                       		moveq	#3,d0
00017942 4EF9 0000 13A2             		jmp	(LoadPLC).l	; load game over patterns
00017948                            ; ===========================================================================
00017948                            
00017948                            loc_138D4:
00017948 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001794E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00017952 6700                       		beq.s	locret_13900	; if not, branch
00017954 317C 0000 003A             		move.w	#0,$3A(a0)
0001795A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00017960 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00017966 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001796C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00017972 60C2                       		bra.s	loc_138C2
00017974                            ; ===========================================================================
00017974                            
00017974                            locret_13900:
00017974 4E75                       		rts	
00017976                            ; End of function GameOver
00017976                            
00017976                            ; ===========================================================================
00017976                            ; ---------------------------------------------------------------------------
00017976                            ; Sonic	when the level is restarted
00017976                            ; ---------------------------------------------------------------------------
00017976                            
00017976                            Obj01_ResetLevel:			; XREF: Obj01_Index
00017976 4A68 003A                  		tst.w	$3A(a0)
0001797A 6700                       		beq.s	locret_13914
0001797C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00017980 6600                       		bne.s	locret_13914
00017982 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00017988                            
00017988                            locret_13914:
00017988 4E75                       		rts	
0001798A                            
0001798A                            ; ---------------------------------------------------------------------------
0001798A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001798A                            ; ---------------------------------------------------------------------------
0001798A                            
0001798A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001798A                            
0001798A                            
0001798A                            Sonic_Loops:				; XREF: Obj01_Control
0001798A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00017990 6700                       		beq.s	loc_13926	; if yes, branch
00017992 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00017996 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001799A                            
0001799A                            loc_13926:
0001799A 3028 000C                  		move.w	$C(a0),d0
0001799E E248                       		lsr.w	#1,d0
000179A0 0240 0380                  		andi.w	#$380,d0
000179A4 1228 0008                  		move.b	8(a0),d1
000179A8 0241 007F                  		andi.w	#$7F,d1
000179AC D041                       		add.w	d1,d0
000179AE 43F8 A400                  		lea	($FFFFA400).w,a1
000179B2 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000179B6 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000179BA 6700 F2E4                  		beq.w	Obj01_ChkRoll
000179BE B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000179C2 6700 F2DC                  		beq.w	Obj01_ChkRoll
000179C6 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000179CA 6700                       		beq.s	loc_13976
000179CC B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000179D0 6700                       		beq.s	loc_13966
000179D2 08A8 0006 0001             		bclr	#6,1(a0)
000179D8 4E75                       		rts	
000179DA                            ; ===========================================================================
000179DA                            
000179DA                            loc_13966:
000179DA 0828 0001 0022             		btst	#1,$22(a0)
000179E0 6700                       		beq.s	loc_13976
000179E2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000179E8 4E75                       		rts	
000179EA                            ; ===========================================================================
000179EA                            
000179EA                            loc_13976:
000179EA 3428 0008                  		move.w	8(a0),d2
000179EE 0C02 002C                  		cmpi.b	#$2C,d2
000179F2 6400                       		bcc.s	loc_13988
000179F4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000179FA 4E75                       		rts	
000179FC                            ; ===========================================================================
000179FC                            
000179FC                            loc_13988:
000179FC 0C02 00E0                  		cmpi.b	#-$20,d2
00017A00 6500                       		bcs.s	loc_13996
00017A02 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00017A08 4E75                       		rts	
00017A0A                            ; ===========================================================================
00017A0A                            
00017A0A                            loc_13996:
00017A0A 0828 0006 0001             		btst	#6,1(a0)
00017A10 6600                       		bne.s	loc_139B2
00017A12 1228 0026                  		move.b	$26(a0),d1
00017A16 6700                       		beq.s	locret_139C2
00017A18 0C01 0080                  		cmpi.b	#-$80,d1
00017A1C 6200                       		bhi.s	locret_139C2
00017A1E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00017A24 4E75                       		rts	
00017A26                            ; ===========================================================================
00017A26                            
00017A26                            loc_139B2:
00017A26 1228 0026                  		move.b	$26(a0),d1
00017A2A 0C01 0080                  		cmpi.b	#-$80,d1
00017A2E 6300                       		bls.s	locret_139C2
00017A30 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00017A36                            
00017A36                            locret_139C2:
00017A36 4E75                       		rts	
00017A38                            ; End of function Sonic_Loops
00017A38                            
00017A38                            ; ---------------------------------------------------------------------------
00017A38                            ; Sonic when he's drowning
00017A38                            ; ---------------------------------------------------------------------------
00017A38                             
00017A38                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00017A38                             
00017A38                             
00017A38                            Sonic_Drowned:
00017A38 6100 8F88                  		bsr.w   SpeedToPos		; Make Sonic able to move
00017A3C 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
00017A42 6100 EB1E                  		bsr.w   Sonic_RecordPos	; Record position
00017A46 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00017A48 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
00017A4C 6000 8F8E                  		bra.w   DisplaySprite	; And finally, display Sonic
00017A50                            
00017A50                            ; ---------------------------------------------------------------------------
00017A50                            ; Subroutine to	animate	Sonic's sprites
00017A50                            ; ---------------------------------------------------------------------------
00017A50                            
00017A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A50                            
00017A50                            
00017A50                            Sonic_Animate:				; XREF: Obj01_Control; et al
00017A50 0C38 0001 FFF6             		cmpi.b	 #$01, ($FFFFFFF6).w
00017A56 6700                               beq.s	Shadow_AnimJumpTo
00017A58 0C38 0002 FFF6             		cmpi.b	 #$02, ($FFFFFFF6).w
00017A5E 6700                       		beq.s	MetalAnim_JumpTo
00017A60 0C38 0003 FFF6             		cmpi.b	 #$03, ($FFFFFFF6).w
00017A66 6600                       		bne.s	SonAniContinueThis
00017A68                            
00017A68                            MightyAnim_JumpTo:
00017A68 4EF9 0000 0000             		jmp Mighty_Animate
00017A6E                            
00017A6E                            MetalAnim_JumpTo:
00017A6E 4EF9 0000 0000             		jmp	Metal_Animate
00017A74                            
00017A74                            Shadow_AnimJumpTo:
00017A74 4EF9 0000 0000             		jmp	Shadow_Animate
00017A7A                            
00017A7A                            SonAniContinueThis:
00017A7A 43F9 0000 0000             		lea	(SonicAniData).l,a1
00017A80 7000                       		moveq	#0,d0
00017A82 1028 001C                  		move.b	$1C(a0),d0
00017A86 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00017A8A 6700                       		beq.s	SAnim_Do	; if not, branch
00017A8C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00017A90 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00017A96 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00017A9C                            
00017A9C                            SAnim_Do:
00017A9C D040                       		add.w	d0,d0
00017A9E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00017AA2 1011                       		move.b	(a1),d0
00017AA4 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00017AA6 1228 0022                  		move.b	$22(a0),d1
00017AAA 0201 0001                  		andi.b	#1,d1
00017AAE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017AB4 8328 0001                  		or.b	d1,1(a0)
00017AB8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00017ABC 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00017ABE 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00017AC2                            
00017AC2                            SAnim_Do2:
00017AC2 7200                       		moveq	#0,d1
00017AC4 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00017AC8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00017ACC 0C00 00FD                  		cmp.b	#$FD,d0					; MJ: is it a flag from FD to FF?
00017AD0 6400 0000                  		bhs	SAnim_End_FF				; MJ: if so, branch to flag routines
00017AD4                            
00017AD4                            SAnim_Next:
00017AD4 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00017AD8 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00017ADC                            
00017ADC                            SAnim_Delay:
00017ADC 4E75                       		rts	
00017ADE                            ; ===========================================================================
00017ADE                            
00017ADE                            SAnim_End_FF:
00017ADE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00017AE0 6600                       		bne.s	SAnim_End_FE	; if not, branch
00017AE2 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00017AE8 1029 0001                  		move.b	1(a1),d0	; read sprite number
00017AEC 60E6                       		bra.s	SAnim_Next
00017AEE                            ; ===========================================================================
00017AEE                            
00017AEE                            SAnim_End_FE:
00017AEE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00017AF0 6600                       		bne.s	SAnim_End_FD	; if not, branch
00017AF2 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00017AF6 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00017AFA 9200                       		sub.b	d0,d1
00017AFC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00017B00 60D2                       		bra.s	SAnim_Next
00017B02                            ; ===========================================================================
00017B02                            
00017B02                            SAnim_End_FD:
00017B02 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00017B04 6600                       		bne.s	SAnim_End	; if not, branch
00017B06 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00017B0C                            
00017B0C                            SAnim_End:
00017B0C 4E75                       		rts	
00017B0E                            ; ===========================================================================
00017B0E                            
00017B0E                            SAnim_WalkRun:				; XREF: SAnim_Do
00017B0E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00017B12 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00017B14 5200                       		addq.b	#1,d0		; is animation walking/running?
00017B16 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00017B1A 7200                       		moveq	#0,d1
00017B1C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00017B20 1428 0022                  		move.b	$22(a0),d2
00017B24 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00017B28 6600                       		bne.s	loc_13A70	; if yes, branch
00017B2A 4600                       		not.b	d0		; reverse angle
00017B2C                            
00017B2C                            loc_13A70:
00017B2C 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00017B30 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00017B32 7203                       		moveq	#3,d1
00017B34                            
00017B34                            loc_13A78:
00017B34 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017B3A B302                       		eor.b	d1,d2
00017B3C 8528 0001                  		or.b	d2,1(a0)
00017B40 0828 0005 0022             		btst	#5,$22(a0)
00017B46 6600 0000                  		bne.w	SAnim_Push
00017B4A E808                       		lsr.b	#4,d0		; divide angle by $10
00017B4C 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00017B50 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00017B54 6A00                       		bpl.s	loc_13A9C
00017B56 4442                       		neg.w	d2
00017B58                            
00017B58                            loc_13A9C:
00017B58 43F9 0000 0000             		lea (SonAni_3rdRun).l,a1
00017B5E 0C42 0A00                  		cmpi.w #$A00,d2 ; is Sonic at super speed?
00017B62 6400                       		bcc.s loc_13AB4 ; if yes, branch
00017B64 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00017B6A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00017B6E 6400                       		bcc.s	loc_13AB4	; if yes, branch
00017B70 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00017B76 D000                       		add.b d0,d0
00017B78                            
00017B78                            loc_13AB4:
00017B78 D000                       		add.b	d0,d0
00017B7A 1600                       		move.b	d0,d3
00017B7C 4442                       		neg.w	d2
00017B7E 0642 0800                  		addi.w	#$800,d2
00017B82 6A00                       		bpl.s	loc_13AC2
00017B84 7400                       		moveq	#0,d2
00017B86                            
00017B86                            loc_13AC2:
00017B86 E04A                       		lsr.w	#8,d2
00017B88 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00017B8C 6100 FF34                  		bsr.w	SAnim_Do2
00017B90 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00017B94 4E75                       		rts	
00017B96                            ; ===========================================================================
00017B96                            
00017B96                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00017B96 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00017B98 6600                       		bne.s	SAnim_Push	; if not, branch
00017B9A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00017B9E 6A00                       		bpl.s	loc_13ADE
00017BA0 4442                       		neg.w	d2
00017BA2                            
00017BA2                            loc_13ADE:
00017BA2 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00017BA8 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00017BAC 6400                       		bcc.s	loc_13AF0	; if yes, branch
00017BAE 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00017BB4                            
00017BB4                            loc_13AF0:
00017BB4 4442                       		neg.w	d2
00017BB6 0642 0400                  		addi.w	#$400,d2
00017BBA 6A00                       		bpl.s	loc_13AFA
00017BBC 7400                       		moveq	#0,d2
00017BBE                            
00017BBE                            loc_13AFA:
00017BBE E04A                       		lsr.w	#8,d2
00017BC0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00017BC4 1228 0022                  		move.b	$22(a0),d1
00017BC8 0201 0001                  		andi.b	#1,d1
00017BCC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017BD2 8328 0001                  		or.b	d1,1(a0)
00017BD6 6000 FEEA                  		bra.w	SAnim_Do2
00017BDA                            ; ===========================================================================
00017BDA                            
00017BDA                            SAnim_Push:				; XREF: SAnim_RollJump
00017BDA 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00017BDE 6B00                       		bmi.s	loc_13B1E
00017BE0 4442                       		neg.w	d2
00017BE2                            
00017BE2                            loc_13B1E:
00017BE2 0642 0800                  		addi.w	#$800,d2
00017BE6 6A00                       		bpl.s	loc_13B26
00017BE8 7400                       		moveq	#0,d2
00017BEA                            
00017BEA                            loc_13B26:
00017BEA EC4A                       		lsr.w	#6,d2
00017BEC 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00017BF0 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00017BF6 1228 0022                  		move.b	$22(a0),d1
00017BFA 0201 0001                  		andi.b	#1,d1
00017BFE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017C04 8328 0001                  		or.b	d1,1(a0)
00017C08 6000 FEB8                  		bra.w	SAnim_Do2
00017C0C                            ; End of function Sonic_Animate
00017C0C                            
00017C0C                            ; ===========================================================================
00017C0C                            SonicAniData:
00017C0C                            	include "_anim\Sonic.asm"
00017C0C                            ; ---------------------------------------------------------------------------
00017C0C                            ; Animation script - Sonic
00017C0C                            ; ---------------------------------------------------------------------------
00017C0C 0000                       		dc.w SonAni_Walk-SonicAniData;???
00017C0E 0000                       		dc.w SonAni_Run-SonicAniData;1
00017C10 0000                       		dc.w SonAni_Roll-SonicAniData;2
00017C12 0000                       		dc.w SonAni_Roll2-SonicAniData;3
00017C14 0000                       		dc.w SonAni_Push-SonicAniData;4
00017C16 0000                       		dc.w SonAni_Wait-SonicAniData;5
00017C18 0000                       		dc.w SonAni_Balance-SonicAniData;6
00017C1A 0000                       		dc.w SonAni_LookUp-SonicAniData;7
00017C1C 0000                       		dc.w SonAni_Duck-SonicAniData;8
00017C1E 0000                       		dc.w SonAni_Warp1-SonicAniData;9
00017C20 0000                       		dc.w SonAni_Warp2-SonicAniData;A
00017C22 0000                       		dc.w SonAni_Warp3-SonicAniData;B
00017C24 0000                       		dc.w SonAni_Warp4-SonicAniData;C
00017C26 0000                       		dc.w SonAni_Stop-SonicAniData;D
00017C28 0000                       		dc.w SonAni_Float1-SonicAniData;E
00017C2A 0000                       		dc.w SonAni_Float2-SonicAniData;F
00017C2C 0000                       		dc.w SonAni_Spring-SonicAniData;10
00017C2E 0000                       		dc.w SonAni_LZHang-SonicAniData;11
00017C30 0000                       		dc.w SonAni_Leap1-SonicAniData;12
00017C32 0000                       		dc.w SonAni_Leap2-SonicAniData;13
00017C34 0000                       		dc.w SonAni_Surf-SonicAniData;14
00017C36 0000                       		dc.w SonAni_Bubble-SonicAniData;15
00017C38 0000                       		dc.w SonAni_Death1-SonicAniData;16
00017C3A 0000                       		dc.w SonAni_Drown-SonicAniData;17
00017C3C 0000                       		dc.w SonAni_Death2-SonicAniData;18
00017C3E 0000                       		dc.w SonAni_Shrink-SonicAniData;19
00017C40 0000                       		dc.w SonAni_Hurt-SonicAniData;1A
00017C42 0000                       		dc.w SonAni_LZSlide-SonicAniData;1B
00017C44 0000                       		dc.w SonAni_Blank-SonicAniData;1C
00017C46 0000                       		dc.w SonAni_Float3-SonicAniData;1D
00017C48 0000                       		dc.w SonAni_Float4-SonicAniData;1E
00017C4A 0000                       		dc.w SonAni_SpinDash-SonicAniData	;1F
00017C4C 0000                       		dc.w SonAni_3rdRun-SonicAniData 	;20
00017C4E 0000                       		dc.w SonAni_DashCharge-SonicAniData	;21
00017C50 0000                       		dc.w SonAni_AirRoll-SonicAniData	;22
00017C52 0000                       		dc.w SonAni_Blank2-SonicAniData	;23
00017C54 0000                       		dc.w SonAni_DiagKick-SonicAniData		;24
00017C56 0000                       		dc.w SonAni_DarkTrans-SonicAniData	;25
00017C58 0000                       		dc.w SonAni_Falling-SonicAniData	;26
00017C5A FF07 0801 0203 0405 06FF   SonAni_Walk:	dc.b  $FF,   7,	  8,   1,   2,	 3,   4,   5,	6, $FF
00017C64 FF21 2223 24FF FFFF FFFF   SonAni_Run:	dc.b $FF, $21, $22, $23, $24, $FF,$FF,$FF,$FF,$FF
00017C6E FE3A 3B3C 3D3E FFFF        SonAni_Roll:	dc.b $FE, $3A, $3B, $3C, $3D, $3E, $FF,	$FF
00017C76 FE3A 3B3C 3D3E FFFF        SonAni_Roll2:	dc.b $FE, $3A, $3B, $3C, $3D, $3E, $FF,	$FF
00017C7E FD51 5253 54FF FFFF        SonAni_Push:	dc.b  $FD, $51,	$52, $53, $54, $FF, $FF, $FF
00017C86 0555 5555 5555 5555 5555+  SonAni_Wait:	dc.b    5, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55
00017C9A 5555 5555 5555 5555 5555+  		dc.b  $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55
00017CAE 5555 5555 5555 5555 5555+  		dc.b  $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $56, $57, $57, $58, $58, $59, $59, $58, $58
00017CC2 5959 5858 5959 5858 5959+  		dc.b  $59, $59, $58, $58, $59, $59, $58, $58, $59, $59, $58, $58, $59, $59, $58, $58, $59, $59, $58, $58
00017CD6 5959 5858 5959 4E4E 4E4E+  		dc.b  $59, $59, $58, $58, $59, $59, $4E, $4E, $4E, $4E, $4E, $4E, $4F, $4F, $4F, $4F, $4F, $4F, $50, $66
00017CEA 6666 6666 6650 50FE 35     		dc.b  $66, $66, $66, $66, $66, $50, $50, $FE, $35
00017CF3 0545 4647 FF               SonAni_Balance:	dc.b	5, $45, $46, $47, $FF
00017CF8 055A 5BFE 01               SonAni_LookUp:	dc.b	5, $5A,	$5B, $FE,   1
00017CFD 053F 40FE 01               SonAni_Duck:	dc.b	5, $3F,	$40, $FE,   1
00017D02 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00017D06 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00017D0A 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00017D0E 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00017D12 0741 4243 FF               SonAni_Stop:	dc.b 7,	$41, $42, $43, $FF
00017D17 075C 6BFF                  SonAni_Float1:	dc.b 7,	$5C, $6B, $FF
00017D1B 075C 5D5E 5F61 6263 FF00   SonAni_Float2:	dc.b 7,	$5C, $5D, $5E, $5F, $61, $62, $63, $FF, 0
00017D25 036D 3939 39FD 26          SonAni_Spring:	dc.b $3, $6D, $39, $39, $39, $FD, $26
00017D2C 044B 4CFF                  SonAni_LZHang:	dc.b 4,	$4B, $4C, $FF
00017D30 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00017D36 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00017D3C 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00017D40 0B4D 4D01 02FD 0000        SonAni_Bubble:	dc.b $B, $4D, $4D, $1, $2, $FD,	0, 0
00017D48 2048 FF00                  SonAni_Death1:	dc.b $20, $48, $FF, 0
00017D4C 2F4A FF00                  SonAni_Drown:	dc.b $2F, $4A, $FF, 0
00017D50 0348 FF00                  SonAni_Death2:	dc.b 3,	$48, $FF, 0
00017D54 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00017D5E 0338 FF00                  SonAni_Hurt:	dc.b 3,	$38, $FF, 0
00017D62 0737 38FF                  SonAni_LZSlide:	dc.b 7, $37, $38, $FF
00017D66 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00017D6A 035C 5D5E 5F60 3E54 FF00   SonAni_Float3:	dc.b 3,	$5C, $5D, $5E, $5F, $60, $3E, $54, $FF, 0
00017D74 035C FD00                  SonAni_Float4:	dc.b 3,	$5C, $FD, 0
00017D78 0031 3231 3331 3431 3531+  SonAni_SpinDash:	dc.b 0, $31, $32, $31, $33, $31, $34, $31, $35, $31, $36, $FF
00017D84 FF75 7677 74FF FFFF FFFF   SonAni_3rdRun:	dc.b  $FF, $75, $76, $77, $74, $FF,$FF,$FF,$FF,$FF
00017D8E 0073 7373 736A 6A6A 6A     SonAni_DashCharge:	dc.b 0,  $73, $73, $73, $73, $6A, $6A, $6A, $6A
00017D97 6B6B 6B6B 6B6B 6B6B        		dc.b	$6B, $6B, $6B, $6B, $6B, $6B, $6B, $6B
00017D9F 6B6B 6B6B 6B6B 6B6C        		dc.b	$6B,  $6B,  $6B,  $6B, $6B,  $6B,  $6B,  $6C
00017DA7 6B6C 6B6C FE04 FE          		dc.b	$6B,	$6C, $6B, $6C, -2, 4, $FE
00017DAE 0467 6869 FD02             SonAni_AirRoll:	dc.b 4, $67, $68, $69, $FD, 2
00017DB4 0341 FF                    SonAni_Blank2:	dc.b 3,	$41, $FF
00017DB7 2044 FF00                  SonAni_DiagKick:	dc.b $20, $44, $FF, 0
00017DBB 0284 8485 8586 8788 8788+  SonAni_DarkTrans:	dc.b 2,$84,$84,$85,$85,$86,$87,$88,$87,$88,$87,$88,$87,$88,$FD,  0
00017DCB 036D 6E6F 70FE 02FE        SonAni_Falling:	dc.b 3, $6D, $6E, $6F, $70, -2, 2, $FE
00017DD4 00                         		even
00017DD4 00                         		even
00017DD4                            ShadowAniData:
00017DD4                            	include "_anim\Shadow.asm"
00017DD4                            ; ---------------------------------------------------------------------------
00017DD4                            ; Animation script - Shadow
00017DD4                            ; ---------------------------------------------------------------------------
00017DD4 0000                       		dc.w ShadAni_Walk-ShadowAniData
00017DD6 0000                       		dc.w ShadAni_Run-ShadowAniData
00017DD8 0000                       		dc.w ShadAni_Roll-ShadowAniData
00017DDA 0000                       		dc.w ShadAni_Roll2-ShadowAniData
00017DDC 0000                       		dc.w ShadAni_Push-ShadowAniData
00017DDE 0000                       		dc.w ShadAni_Wait-ShadowAniData
00017DE0 0000                       		dc.w ShadAni_Balance-ShadowAniData
00017DE2 0000                       		dc.w ShadAni_LookUp-ShadowAniData
00017DE4 0000                       		dc.w ShadAni_Duck-ShadowAniData
00017DE6 0000                       		dc.w ShadAni_Warp1-ShadowAniData
00017DE8 0000                       		dc.w ShadAni_Warp2-ShadowAniData
00017DEA 0000                       		dc.w ShadAni_Warp3-ShadowAniData
00017DEC 0000                       		dc.w ShadAni_Warp4-ShadowAniData
00017DEE 0000                       		dc.w ShadAni_Stop-ShadowAniData
00017DF0 0000                       		dc.w ShadAni_Float1-ShadowAniData
00017DF2 0000                       		dc.w ShadAni_Float2-ShadowAniData
00017DF4 0000                       		dc.w ShadAni_Spring-ShadowAniData
00017DF6 0000                       		dc.w ShadAni_LZHang-ShadowAniData
00017DF8 0000                       		dc.w ShadAni_Leap1-ShadowAniData
00017DFA 0000                       		dc.w ShadAni_Leap2-ShadowAniData
00017DFC 0000                       		dc.w ShadAni_Surf-ShadowAniData
00017DFE 0000                       		dc.w ShadAni_Bubble-ShadowAniData
00017E00 0000                       		dc.w ShadAni_Death1-ShadowAniData
00017E02 0000                       		dc.w ShadAni_Drown-ShadowAniData
00017E04 0000                       		dc.w ShadAni_Death2-ShadowAniData
00017E06 0000                       		dc.w ShadAni_Shrink-ShadowAniData
00017E08 0000                       		dc.w ShadAni_Hurt-ShadowAniData
00017E0A 0000                       		dc.w ShadAni_LZSlide-ShadowAniData
00017E0C 0000                       		dc.w ShadAni_Blank-ShadowAniData
00017E0E 0000                       		dc.w ShadAni_Float3-ShadowAniData
00017E10 0000                       		dc.w ShadAni_Float4-ShadowAniData
00017E12 0000                       		dc.w ShadAni_SpinDash-ShadowAniData ; 1f
00017E14 0000                       		dc.w ShadAni_DoubleJump-ShadowAniData ; 20
00017E16 0000                       		dc.w ShadAni_Falling-ShadowAniData ; 21
00017E18 0000                       		dc.w ShadAni_Blank2-ShadowAniData ; 22
00017E1A FF08 090A 0B06 07FF        ShadAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00017E22 FF1E 1F20 2122 2324 25FF+  ShadAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $22, $23, $24, $25, $FF, $FF,	$FF
00017E2E FE3E 3F40 4142 FFFF        ShadAni_Roll:	dc.b $FE, $3E, $3F, $40, $41, $42, $FF,	$FF
00017E36 FE3E 3F42 4041 42FF        ShadAni_Roll2:	dc.b $FE, $3E, $3F, $42, $40, $41, $42,	$FF
00017E3E FD4F 5051 52FF FFFF        ShadAni_Push:	dc.b $FD, $4F, $50, $51, $52, $FF, $FF,	$FF
00017E46 1701 0101 0101 0101 0101+  ShadAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2
00017E57 0304 0304 0304 0304 0304+  		dc.b 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4 
00017E69 0202 0203 0101 0101 0101+  		dc.b 2, 2, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
00017E7B 6667 6767 6767 6767 6767+  		dc.b $66, $67, $67, $67, $67, $67, $67, $67, $67, $67, $67
00017E86 6768 6768 6768 6768 6768+  		dc.b $67, $68, $67, $68, $67, $68, $67, $68, $67, $68, $67
00017E91 6867 6867 6867 6869 6969+  		dc.b $68, $67, $68, $67, $68, $67, $68, $69, $69, $69, $69
00017E9C 6A6B 6B6B 6B6B 6C6B 6C6B+  		dc.b $6A, $6B, $6B, $6B, $6B, $6B, $6C, $6B, $6C, $6B, $6C
00017EA7 6B6B 6C6B 6C6B 6C6B 6B6C+  		dc.b $6B, $6B, $6C, $6B, $6C, $6B, $6C, $6B, $6B, $6C, $6B, -2, 2, $FE
00017EB5 1F46 47FF                  ShadAni_Balance:	dc.b $1F, $46, $47, $FF
00017EB9 3F05 FF00                  ShadAni_LookUp:	dc.b $3F, 5, $FF, 0
00017EBD 3F45 FF00                  ShadAni_Duck:	dc.b $3F, $45, $FF, 0
00017EC1 3F33 FF00                  ShadAni_Warp1:	dc.b $3F, $33, $FF, 0
00017EC5 3F34 FF00                  ShadAni_Warp2:	dc.b $3F, $34, $FF, 0
00017EC9 3F35 FF00                  ShadAni_Warp3:	dc.b $3F, $35, $FF, 0
00017ECD 3F36 FF00                  ShadAni_Warp4:	dc.b $3F, $36, $FF, 0
00017ED1 0743 44FF                  ShadAni_Stop:	dc.b 7,	$43, $44, $FF
00017ED5 0748 4BFF                  ShadAni_Float1:	dc.b 7,	$48, $4B, $FF
00017ED9 0748 4955 4A56 FF00        ShadAni_Float2:	dc.b 7,	$48, $49, $55, $4A, $56, $FF, 0
00017EE1 2F4C FD21                  ShadAni_Spring:	dc.b $2F, $4C, $FD, $21
00017EE5 044D 4EFF                  ShadAni_LZHang:	dc.b 4,	$4D, $4E, $FF
00017EE9 0F43 4343 FE01             ShadAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00017EEF 0F43 44FE 0100             ShadAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00017EF5 3F49 FF00                  ShadAni_Surf:	dc.b $3F, $49, $FF, 0
00017EF9 0B58 580A 0BFD 0000        ShadAni_Bubble:	dc.b $B, $58, $58, $A, $B, $FD,	0, 0
00017F01 204B FF00                  ShadAni_Death1:	dc.b $20, $4B, $FF, 0
00017F05 2F53 FF00                  ShadAni_Drown:	dc.b $2F, $53, $FF, 0
00017F09 0354 FF00                  ShadAni_Death2:	dc.b 3,	$54, $FF, 0
00017F0D 034E 4F50 5152 00FE 0100   ShadAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00017F17 0357 FF00                  ShadAni_Hurt:	dc.b 3,	$57, $FF, 0
00017F1B 0757 59FF                  ShadAni_LZSlide:	dc.b 7, $57, $59, $FF
00017F1F 7700 FD00                  ShadAni_Blank:	dc.b $77, 0, $FD, 0
00017F23 0348 4955 4A56 FF00        ShadAni_Float3:	dc.b 3,	$48, $49, $55, $4A, $56, $FF, 0
00017F2B 0338 FD00                  ShadAni_Float4:	dc.b 3,	$38, $FD, 0
00017F2F 005A 5B5A 5C5A 5D5A 5E5A+  ShadAni_SpinDash:	dc.b 0, $5A, $5B, $5A, $5C, $5A, $5D, $5A, $5E, $5A, $5F, $FF
00017F3B 0160 6160 6160 6160 6160+  ShadAni_DoubleJump:	dc.b 1, $60, $61, $60, $61, $60, $61, $60, $61, $60, $61, $60, $61, $FD, $21
00017F4A 0362 63FF                  ShadAni_Falling:	dc.b 3, $62, $63, $FF
00017F4E 7700 FD00                  ShadAni_Blank2:	dc.b $77, 0, $FD, 0
00017F52                            		even
00017F52                            		even
00017F52                            MetalAniData:
00017F52                            	include "_anim\Metal.asm"
00017F52                            ; ---------------------------------------------------------------------------
00017F52                            ; Animation script - Metal
00017F52                            ; ---------------------------------------------------------------------------
00017F52 0000                       		dc.w MetAni_Walk-MetalAniData
00017F54 0000                       		dc.w MetAni_Run-MetalAniData
00017F56 0000                       		dc.w MetAni_Roll-MetalAniData
00017F58 0000                       		dc.w MetAni_Roll2-MetalAniData
00017F5A 0000                       		dc.w MetAni_Push-MetalAniData
00017F5C 0000                       		dc.w MetAni_Wait-MetalAniData
00017F5E 0000                       		dc.w MetAni_Balance-MetalAniData
00017F60 0000                       		dc.w MetAni_LookUp-MetalAniData
00017F62 0000                       		dc.w MetAni_Duck-MetalAniData
00017F64 0000                       		dc.w MetAni_Warp1-MetalAniData
00017F66 0000                       		dc.w MetAni_Warp2-MetalAniData
00017F68 0000                       		dc.w MetAni_Warp3-MetalAniData
00017F6A 0000                       		dc.w MetAni_Warp4-MetalAniData
00017F6C 0000                       		dc.w MetAni_Stop-MetalAniData
00017F6E 0000                       		dc.w MetAni_Float1-MetalAniData
00017F70 0000                       		dc.w MetAni_Float2-MetalAniData
00017F72 0000                       		dc.w MetAni_Spring-MetalAniData
00017F74 0000                       		dc.w MetAni_LZHang-MetalAniData
00017F76 0000                       		dc.w MetAni_Leap1-MetalAniData
00017F78 0000                       		dc.w MetAni_Leap2-MetalAniData
00017F7A 0000                       		dc.w MetAni_Surf-MetalAniData
00017F7C 0000                       		dc.w MetAni_Bubble-MetalAniData
00017F7E 0000                       		dc.w MetAni_Death1-MetalAniData
00017F80 0000                       		dc.w MetAni_Drown-MetalAniData
00017F82 0000                       		dc.w MetAni_Death2-MetalAniData
00017F84 0000                       		dc.w MetAni_Shrink-MetalAniData
00017F86 0000                       		dc.w MetAni_Hurt-MetalAniData
00017F88 0000                       		dc.w MetAni_LZSlide-MetalAniData
00017F8A 0000                       		dc.w MetAni_Blank-MetalAniData
00017F8C 0000                       		dc.w MetAni_Float3-MetalAniData
00017F8E 0000                       		dc.w MetAni_Float4-MetalAniData
00017F90 0000                       		dc.w MetAni_SpinDash-MetalAniData	;1F
00017F92 0000                       		dc.w MetAni_3rdRun-MetalAniData 	;20
00017F94 0000                       		dc.w MetAni_DashCharge-MetalAniData	;21
00017F96 0000                       		dc.w MetAni_Super-MetalAniData		;22
00017F98 0000                       		dc.w MetAni_Filler-MetalAniData		;23
00017F9A 0000                       		dc.w MetAni_CDDash-MetalAniData
00017F9C FF08 090A 0B06 07FF        MetAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00017FA4 FF1E 1F20 21FF FFFF        MetAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00017FAC FE2E 2F30 3132 FFFF        MetAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00017FB4 FE2E 2F32 3031 32FF        MetAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00017FBC FD45 4647 48FF FFFF        MetAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00017FC4 0B01 0101 0101 0101 0101+  MetAni_Wait:	dc.b $B, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 1, 1,	1
00017FD4 0101 0101 0101 0101 0103+  		dc.b 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 3, 2, 2, 2, 2, 2, 2
00017FE5 0303 0404 0303 0404 0303+  		dc.b 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3
00017FF7 0404 0303 0404 0303 0404+  		dc.b 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 4, 4
00018009 0202 0202 0202 0303 0101+  		dc.b 2, 2, 2, 2, 2, 2, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
0001801B 0101 0101 0101 0101 0101+  		dc.b 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
0001802D 7273 7373 7475 7675 FE04+  		dc.b $72, $73, $73, $73, $74, $75, $76, $75, -2, 4, $FE
00018038 1F3A 3BFF                  MetAni_Balance:	dc.b $1F, $3A, $3B, $FF
0001803C 3F05 FF00                  MetAni_LookUp:	dc.b $3F, 5, $FF, 0
00018040 3F39 FF00                  MetAni_Duck:	dc.b $3F, $39, $FF, 0
00018044 3F33 FF00                  MetAni_Warp1:	dc.b $3F, $33, $FF, 0
00018048 3F34 FF00                  MetAni_Warp2:	dc.b $3F, $34, $FF, 0
0001804C 3F35 FF00                  MetAni_Warp3:	dc.b $3F, $35, $FF, 0
00018050 3F36 FF00                  MetAni_Warp4:	dc.b $3F, $36, $FF, 0
00018054 0737 38FF                  MetAni_Stop:	dc.b 7,	$37, $38, $FF
00018058 073C 3FFF                  MetAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001805C 073C 3D53 3E54 FF00        MetAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00018064 2F40 FD00                  MetAni_Spring:	dc.b $2F, $40, $FD, 0
00018068 0441 42FF                  MetAni_LZHang:	dc.b 4,	$41, $42, $FF
0001806C 0F43 4343 FE01             MetAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00018072 0F43 44FE 0100             MetAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00018078 3F49 FF00                  MetAni_Surf:	dc.b $3F, $49, $FF, 0
0001807C 0B56 560A 0BFD 0000        MetAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00018084 204B FF00                  MetAni_Death1:	dc.b $20, $4B, $FF, 0
00018088 2F4C FF00                  MetAni_Drown:	dc.b $2F, $4C, $FF, 0
0001808C 034D FF00                  MetAni_Death2:	dc.b 3,	$4D, $FF, 0
00018090 034E 4F50 5152 00FE 0100   MetAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001809A 0355 FF00                  MetAni_Hurt:	dc.b 3,	$55, $FF, 0
0001809E 0755 57FF                  MetAni_LZSlide:	dc.b 7, $55, $57, $FF
000180A2 7700 FD00                  MetAni_Blank:	dc.b $77, 0, $FD, 0
000180A6 033C 3D53 3E54 FF00        MetAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000180AE 033C FD00                  MetAni_Float4:	dc.b 3,	$3C, $FD, 0
000180B2 0058 5958 5A58 5B58 5C58+  MetAni_SpinDash:	dc.b 0, $58, $59, $58, $5A, $58, $5B, $58, $5C, $58, $5D, $FF
000180BE FF5E 5F60 61FF FFFF        MetAni_3rdRun:	dc.b $FF, $5E, $5F, $60, $61, $FF, $FF,	$FF
000180C6 0008 0808 0808 0808 08     MetAni_DashCharge:	dc.b 0,  8, 8, 8, 8, 8, 8, 8, 8
000180CF 0909 0909 0A0A 2121        		dc.b	9, 9, 9, 9, $A, $A, $21, $21
000180D7 1E1F 2021 1E1F 2021        		dc.b	$1E,  $1F,  $20,  $21, $1E,  $1F,  $20,  $21
000180DF 5E5F 6061 FE04 FE          		dc.b	$5E,  $5F,  $60,  $61, -2, 4, $FE
000180E6 026E 6E6F 6F70 7171 7170+  MetAni_Super:	dc.b 2,$6E,$6E,$6F,$6F,$70,$71,$71,$71,$70,$70,$FD,  0
000180F3 7700 FD00                  MetAni_Filler:	dc.b $77, 0, $FD, 0
000180F7 FE2E 2F30 3132 2E2F 3230+  MetAni_CDDash:	dc.b $FE, $2E, $2F, $30, $31, $32, $2E, $2F, $32, $30, $31, $32, -2, 5, $FE
00018106                            		even
00018106                            		even
00018106                            MightyAniData:
00018106                            	include "_anim\Mighty.asm"
00018106                            ; ---------------------------------------------------------------------------
00018106                            ; Animation script - Mighty
00018106                            ; ---------------------------------------------------------------------------
00018106 0000                       		dc.w MtyAni_Walk-MightyAniData
00018108 0000                       		dc.w MtyAni_Run-MightyAniData
0001810A 0000                       		dc.w MtyAni_Roll-MightyAniData
0001810C 0000                       		dc.w MtyAni_Roll2-MightyAniData
0001810E 0000                       		dc.w MtyAni_Push-MightyAniData
00018110 0000                       		dc.w MtyAni_Wait-MightyAniData
00018112 0000                       		dc.w MtyAni_Balance-MightyAniData
00018114 0000                       		dc.w MtyAni_LookUp-MightyAniData
00018116 0000                       		dc.w MtyAni_Duck-MightyAniData
00018118 0000                       		dc.w MtyAni_Warp1-MightyAniData
0001811A 0000                       		dc.w MtyAni_Warp2-MightyAniData
0001811C 0000                       		dc.w MtyAni_Warp3-MightyAniData
0001811E 0000                       		dc.w MtyAni_Warp4-MightyAniData
00018120 0000                       		dc.w MtyAni_Stop-MightyAniData
00018122 0000                       		dc.w MtyAni_Float1-MightyAniData
00018124 0000                       		dc.w MtyAni_Float2-MightyAniData
00018126 0000                       		dc.w MtyAni_Spring-MightyAniData
00018128 0000                       		dc.w MtyAni_LZHang-MightyAniData
0001812A 0000                       		dc.w MtyAni_Leap1-MightyAniData
0001812C 0000                       		dc.w MtyAni_Leap2-MightyAniData
0001812E 0000                       		dc.w MtyAni_Surf-MightyAniData
00018130 0000                       		dc.w MtyAni_Bubble-MightyAniData
00018132 0000                       		dc.w MtyAni_Death1-MightyAniData
00018134 0000                       		dc.w MtyAni_Drown-MightyAniData
00018136 0000                       		dc.w MtyAni_Death2-MightyAniData
00018138 0000                       		dc.w MtyAni_Shrink-MightyAniData
0001813A 0000                       		dc.w MtyAni_Hurt-MightyAniData
0001813C 0000                       		dc.w MtyAni_LZSlide-MightyAniData
0001813E 0000                       		dc.w MtyAni_Blank-MightyAniData
00018140 0000                       		dc.w MtyAni_Float3-MightyAniData
00018142 0000                       		dc.w MtyAni_Float4-MightyAniData
00018144 0000                       		dc.w MtyAni_SpinDash-MightyAniData	;1F
00018146 0000                       		dc.w MtyAni_3rdRun-MightyAniData 	;20
00018148 0000                       		dc.w MtyAni_DashCharge-MightyAniData ;21
0001814A 0000                       		dc.w MtyAni_Placeholder-MightyAniData ;22
0001814C 0000                       		dc.w MtyAni_WallJump-MightyAniData ;23
0001814E 0000                       		dc.w MtyAni_HammDrop-MightyAniData	;24
00018150 FF08 090A 0B06 07FF        MtyAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00018158 FF1E 1F20 21FF FFFF        MtyAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00018160 FE2E 2F30 3132 FFFF        MtyAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00018168 FE2E 2F32 3031 32FF        MtyAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00018170 FD45 4647 48FF FFFF        MtyAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00018178 1701 0101 0101 0101 0101+  MtyAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001818E 1F3A 3BFF                  MtyAni_Balance:	dc.b $1F, $3A, $3B, $FF
00018192 3F05 FF00                  MtyAni_LookUp:	dc.b $3F, 5, $FF, 0
00018196 3F39 FF00                  MtyAni_Duck:	dc.b $3F, $39, $FF, 0
0001819A 3F33 FF00                  MtyAni_Warp1:	dc.b $3F, $33, $FF, 0
0001819E 3F34 FF00                  MtyAni_Warp2:	dc.b $3F, $34, $FF, 0
000181A2 3F35 FF00                  MtyAni_Warp3:	dc.b $3F, $35, $FF, 0
000181A6 3F36 FF00                  MtyAni_Warp4:	dc.b $3F, $36, $FF, 0
000181AA 0737 38FF                  MtyAni_Stop:	dc.b 7,	$37, $38, $FF
000181AE 073C 3FFF                  MtyAni_Float1:	dc.b 7,	$3C, $3F, $FF
000181B2 073C 3D53 3E54 FF00        MtyAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000181BA 2F40 FD00                  MtyAni_Spring:	dc.b $2F, $40, $FD, 0
000181BE 0441 42FF                  MtyAni_LZHang:	dc.b 4,	$41, $42, $FF
000181C2 0F43 4343 FE01             MtyAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000181C8 0F43 44FE 0100             MtyAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000181CE 3F49 FF00                  MtyAni_Surf:	dc.b $3F, $49, $FF, 0
000181D2 0B56 560A 0BFD 0000        MtyAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000181DA 204B FF00                  MtyAni_Death1:	dc.b $20, $4B, $FF, 0
000181DE 2F4C FF00                  MtyAni_Drown:	dc.b $2F, $4C, $FF, 0
000181E2 034D FF00                  MtyAni_Death2:	dc.b 3,	$4D, $FF, 0
000181E6 034E 4F50 5152 00FE 0100   MtyAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000181F0 0355 FF00                  MtyAni_Hurt:	dc.b 3,	$55, $FF, 0
000181F4 0755 57FF                  MtyAni_LZSlide:	dc.b 7, $55, $57, $FF
000181F8 7700 FD00                  MtyAni_Blank:	dc.b $77, 0, $FD, 0
000181FC 033C 3D53 3E54 FF00        MtyAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00018204 033C FD00                  MtyAni_Float4:	dc.b 3,	$3C, $FD, 0
00018208 0058 5958 5A58 5B58 5C58+  MtyAni_SpinDash:	dc.b 0, $58, $59, $58, $5A, $58, $5B, $58, $5C, $58, $5D, $FF
00018214 FF5E 5F60 61FF FFFF        MtyAni_3rdRun:	dc.b $FF, $5E, $5F, $60, $61, $FF, $FF,	$FF
0001821C 0008 0808 0808 0808 08     MtyAni_DashCharge:	dc.b 0,  8, 8, 8, 8, 8, 8, 8, 8
00018225 0909 0909 0A0A 2121        		dc.b	9, 9, 9, 9, $A, $A, $21, $21
0001822D 1E1F 2021 1E1F 2021        		dc.b	$1E,  $1F,  $20,  $21, $1E,  $1F,  $20,  $21
00018235 5E5F 6061 FE04 FE          		dc.b	$5E,  $5F,  $60,  $61, -2, 4, $FE
0001823C 0300 FF                    MtyAni_Placeholder:	dc.b 3, 0, $FF
0001823F 036E FF                    MtyAni_WallJump:	dc.b 3,	$6E, $FF
00018242 0335 FF                    MtyAni_HammDrop:	dc.b 3, $35, $FF
00018246 00                         		even
00018246 00                         		even
00018246                            
00018246                            ; ---------------------------------------------------------------------------
00018246                            ; Subroutine to	animate	Shadow's sprites
00018246                            ; ---------------------------------------------------------------------------
00018246                            
00018246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018246                            
00018246                            
00018246                            Shadow_Animate:				; XREF: Obj01_Control; et al
00018246                            	include "Shadow_Animate.asm"
00018246 43F9 0001 7DD4             		lea	(ShadowAniData).l,a1
0001824C 7000                       		moveq	#0,d0
0001824E 1028 001C                  		move.b	$1C(a0),d0
00018252 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00018256 6700                       		beq.s	ShAnim_Do	; if not, branch
00018258 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0001825C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00018262 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00018268                            
00018268                            ShAnim_Do:
00018268 D040                       		add.w	d0,d0
0001826A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001826E 1011                       		move.b	(a1),d0
00018270 6B00                       		bmi.s	ShAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00018272 1228 0022                  		move.b	$22(a0),d1
00018276 0201 0001                  		andi.b	#1,d1
0001827A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018280 8328 0001                  		or.b	d1,1(a0)
00018284 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00018288 6A00                       		bpl.s	ShAnim_Delay	; if time remains, branch
0001828A 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001828E                            
0001828E                            ShAnim_Do2:
0001828E 7200                       		moveq	#0,d1
00018290 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00018294 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00018298 6B00                       		bmi.s	ShAnim_End_FF	; if animation is complete, branch
0001829A                            
0001829A                            ShAnim_Next:
0001829A 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001829E 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000182A2                            
000182A2                            ShAnim_Delay:
000182A2 4E75                       		rts	
000182A4                            ; ===========================================================================
000182A4                            
000182A4                            ShAnim_End_FF:
000182A4 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000182A6 6600                       		bne.s	ShAnim_End_FE	; if not, branch
000182A8 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000182AE 1029 0001                  		move.b	1(a1),d0	; read sprite number
000182B2 60E6                       		bra.s	ShAnim_Next
000182B4                            ; ===========================================================================
000182B4                            
000182B4                            ShAnim_End_FE:
000182B4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000182B6 6600                       		bne.s	ShAnim_End_FD	; if not, branch
000182B8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000182BC 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000182C0 9200                       		sub.b	d0,d1
000182C2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000182C6 60D2                       		bra.s	ShAnim_Next
000182C8                            ; ===========================================================================
000182C8                            
000182C8                            ShAnim_End_FD:
000182C8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000182CA 6600                       		bne.s	ShAnim_End	; if not, branch
000182CC 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000182D2                            
000182D2                            ShAnim_End:
000182D2 4E75                       		rts	
000182D4                            ; ===========================================================================
000182D4                            
000182D4                            ShAnim_WalkRun:				; XREF: ShAnim_Do
000182D4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000182D8 6AC8                       		bpl.s	ShAnim_Delay	; if time remains, branch
000182DA 5200                       		addq.b	#1,d0		; is animation walking/running?
000182DC 6600 0000                  		bne.w	ShAnim_RollJump	; if not, branch
000182E0 7200                       		moveq	#0,d1
000182E2 1028 0026                  		move.b	$26(a0),d0	; get Shadow's angle
000182E6 1428 0022                  		move.b	$22(a0),d2
000182EA 0202 0001                  		andi.b	#1,d2		; is Shadow mirrored horizontally?
000182EE 6600                       		bne.s	loc2_13A70	; if yes, branch
000182F0 4600                       		not.b	d0		; reverse angle
000182F2                            
000182F2                            loc2_13A70:
000182F2 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000182F6 6A00                       		bpl.s	loc2_13A78	; if angle is $0-$7F, branch
000182F8 7203                       		moveq	#3,d1
000182FA                            
000182FA                            loc2_13A78:
000182FA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018300 B302                       		eor.b	d1,d2
00018302 8528 0001                  		or.b	d2,1(a0)
00018306 0828 0005 0022             		btst	#5,$22(a0)
0001830C 6600 0000                  		bne.w	ShAnim_Push
00018310 E808                       		lsr.b	#4,d0		; divide angle by $10
00018312 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00018316 3428 0014                  		move.w	$14(a0),d2	; get Shadow's speed
0001831A 6A00                       		bpl.s	loc2_13A9C
0001831C 4442                       		neg.w	d2
0001831E                            
0001831E                            loc2_13A9C:
0001831E 43F9 0001 7E22                     lea    (ShadAni_Run).l,a1 ; use    running    animation
00018324 0C42 0600                          cmpi.w    #$600,d2    ; is Shadow at running speed?
00018328 6400                               bcc.s    loc2_13AB4    ; if yes, branch
0001832A 43F9 0001 7E1A                     lea    (ShadAni_Walk).l,a1 ; use walking animation
00018330 1200                               move.b    d0,d1
00018332 E209                               lsr.b    #1,d1
00018334 D001                               add.b    d1,d0
00018336 D000                               add.b    d0,d0
00018338 6000                               bra.s   name_this_whatever_you_want
0001833A                            
0001833A                            loc2_13AB4:
0001833A D000                               add.b    d0,d0
0001833C D000                               add.b    d0,d0
0001833E                            
0001833E                            name_this_whatever_you_want:
0001833E 1600                               move.b    d0,d3
00018340 4442                       		neg.w	d2
00018342 0642 0800                  		addi.w	#$800,d2
00018346 6A00                       		bpl.s	loc2_13AC2
00018348 7400                       		moveq	#0,d2
0001834A                            
0001834A                            loc2_13AC2:
0001834A E04A                       		lsr.w	#8,d2
0001834C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00018350 6100 FF3C                  		bsr.w	ShAnim_Do2
00018354 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00018358 4E75                       		rts	
0001835A                            ; ===========================================================================
0001835A                            
0001835A                            ShAnim_RollJump:				; XREF: ShAnim_WalkRun
0001835A 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001835C 6600                       		bne.s	ShAnim_Push	; if not, branch
0001835E 3428 0014                  		move.w	$14(a0),d2	; get Shadow's speed
00018362 6A00                       		bpl.s	loc2_13ADE
00018364 4442                       		neg.w	d2
00018366                            
00018366                            loc2_13ADE:
00018366 43F9 0001 7E36             		lea	(ShadAni_Roll2).l,a1 ; use fast animation
0001836C 0C42 0600                  		cmpi.w	#$600,d2	; is Shadow moving fast?
00018370 6400                       		bcc.s	loc2_13AF0	; if yes, branch
00018372 43F9 0001 7E2E             		lea	(ShadAni_Roll).l,a1 ; use slower	animation
00018378                            
00018378                            loc2_13AF0:
00018378 4442                       		neg.w	d2
0001837A 0642 0400                  		addi.w	#$400,d2
0001837E 6A00                       		bpl.s	loc2_13AFA
00018380 7400                       		moveq	#0,d2
00018382                            
00018382                            loc2_13AFA:
00018382 E04A                       		lsr.w	#8,d2
00018384 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00018388 1228 0022                  		move.b	$22(a0),d1
0001838C 0201 0001                  		andi.b	#1,d1
00018390 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018396 8328 0001                  		or.b	d1,1(a0)
0001839A 6000 FEF2                  		bra.w	ShAnim_Do2
0001839E                            ; ===========================================================================
0001839E                            
0001839E                            ShAnim_Push:				; XREF: ShAnim_RollJump
0001839E 3428 0014                  		move.w	$14(a0),d2	; get Shadow's speed
000183A2 6B00                       		bmi.s	loc2_13B1E
000183A4 4442                       		neg.w	d2
000183A6                            
000183A6                            loc2_13B1E:
000183A6 0642 0800                  		addi.w	#$800,d2
000183AA 6A00                       		bpl.s	loc2_13B26
000183AC 7400                       		moveq	#0,d2
000183AE                            
000183AE                            loc2_13B26:
000183AE EC4A                       		lsr.w	#6,d2
000183B0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000183B4 43F9 0001 7E3E             		lea	(ShadAni_Push).l,a1
000183BA 1228 0022                  		move.b	$22(a0),d1
000183BE 0201 0001                  		andi.b	#1,d1
000183C2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000183C8 8328 0001                  		or.b	d1,1(a0)
000183CC 6000 FEC0                  		bra.w	ShAnim_Do2
000183D0                            
000183D0                            ; ===========================================================================
000183D0                            ; ===========================================================================
000183D0 4E75                       	rts
000183D2                            
000183D2                            ; ---------------------------------------------------------------------------
000183D2                            ; Subroutine to	animate	Metal's sprites
000183D2                            ; ---------------------------------------------------------------------------
000183D2                            
000183D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183D2                            
000183D2                            
000183D2                            Metal_Animate:				; XREF: Obj01_Control; et al
000183D2                            	include "Metal_Animate.asm"
000183D2 43F9 0001 7F52             		lea	(MetalAniData).l,a1
000183D8 7000                       		moveq	#0,d0
000183DA 1028 001C                  		move.b	$1C(a0),d0
000183DE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000183E2 6700                       		beq.s	MSAnim_Do	; if not, branch
000183E4 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000183E8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000183EE 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000183F4                            
000183F4                            MSAnim_Do:
000183F4 D040                       		add.w	d0,d0
000183F6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000183FA 1011                       		move.b	(a1),d0
000183FC 6B00                       		bmi.s	MSAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000183FE 1228 0022                  		move.b	$22(a0),d1
00018402 0201 0001                  		andi.b	#1,d1
00018406 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001840C 8328 0001                  		or.b	d1,1(a0)
00018410 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00018414 6A00                       		bpl.s	MSAnim_Delay	; if time remains, branch
00018416 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001841A                            
0001841A                            MSAnim_Do2:
0001841A 7200                       		moveq	#0,d1
0001841C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00018420 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00018424 6B00                       		bmi.s	MSAnim_End_FF	; if animation is complete, branch
00018426                            
00018426                            MSAnim_Next:
00018426 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001842A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001842E                            
0001842E                            MSAnim_Delay:
0001842E 4E75                       		rts	
00018430                            ; ===========================================================================
00018430                            
00018430                            MSAnim_End_FF:
00018430 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00018432 6600                       		bne.s	MSAnim_End_FE	; if not, branch
00018434 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001843A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001843E 60E6                       		bra.s	MSAnim_Next
00018440                            ; ===========================================================================
00018440                            
00018440                            MSAnim_End_FE:
00018440 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00018442 6600                       		bne.s	MSAnim_End_FD	; if not, branch
00018444 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00018448 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001844C 9200                       		sub.b	d0,d1
0001844E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00018452 60D2                       		bra.s	MSAnim_Next
00018454                            ; ===========================================================================
00018454                            
00018454                            MSAnim_End_FD:
00018454 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00018456 6600                       		bne.s	MSAnim_End	; if not, branch
00018458 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001845E                            
0001845E                            MSAnim_End:
0001845E 4E75                       		rts	
00018460                            ; ===========================================================================
00018460                            
00018460                            MSAnim_WalkRun:				; XREF: MSAnim_Do
00018460 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00018464 6AC8                       		bpl.s	MSAnim_Delay	; if time remains, branch
00018466 5200                       		addq.b	#1,d0		; is animation walking/running?
00018468 6600 0000                  		bne.w	MSAnim_RollJump	; if not, branch
0001846C 7200                       		moveq	#0,d1
0001846E 1028 0026                  		move.b	$26(a0),d0	; get Metal's angle
00018472 1428 0022                  		move.b	$22(a0),d2
00018476 0202 0001                  		andi.b	#1,d2		; is Metal mirrored horizontally?
0001847A 6600                       		bne.s	loc3_13A70	; if yes, branch
0001847C 4600                       		not.b	d0		; reverse angle
0001847E                            
0001847E                            loc3_13A70:
0001847E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00018482 6A00                       		bpl.s	loc3_13A78	; if angle is $0-$7F, branch
00018484 7203                       		moveq	#3,d1
00018486                            
00018486                            loc3_13A78:
00018486 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001848C B302                       		eor.b	d1,d2
0001848E 8528 0001                  		or.b	d2,1(a0)
00018492 0828 0005 0022             		btst	#5,$22(a0)
00018498 6600 0000                  		bne.w	MSAnim_Push
0001849C E808                       		lsr.b	#4,d0		; divide angle by $10
0001849E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000184A2 3428 0014                  		move.w	$14(a0),d2	; get Metal's speed
000184A6 6A00                       		bpl.s	loc3_13A9C
000184A8 4442                       		neg.w	d2
000184AA                            
000184AA                            loc3_13A9C:
000184AA 43F9 0001 80BE             		lea (MetAni_3rdRun).l,a1
000184B0 0C42 0A00                  		cmpi.w #$A00,d2 ; is Metal at super speed?
000184B4 6400                       		bcc.s loc3_13AB4 ; if yes, branch
000184B6 43F9 0001 7FA4             		lea	(MetAni_Run).l,a1 ; use	running	animation
000184BC 0C42 0600                  		cmpi.w	#$600,d2	; is Metal at running speed?
000184C0 6400                       		bcc.s	loc3_13AB4	; if yes, branch
000184C2 43F9 0001 7F9C             		lea	(MetAni_Walk).l,a1 ; use walking animation
000184C8 1200                       		move.b	d0,d1
000184CA E209                       		lsr.b	#1,d1
000184CC D001                       		add.b	d1,d0
000184CE                            
000184CE                            loc3_13AB4:
000184CE D000                       		add.b	d0,d0
000184D0 1600                       		move.b	d0,d3
000184D2 4442                       		neg.w	d2
000184D4 0642 0800                  		addi.w	#$800,d2
000184D8 6A00                       		bpl.s	loc3_13AC2
000184DA 7400                       		moveq	#0,d2
000184DC                            
000184DC                            loc3_13AC2:
000184DC E04A                       		lsr.w	#8,d2
000184DE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000184E2 6100 FF36                  		bsr.w	MSAnim_Do2
000184E6 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000184EA 4E75                       		rts	
000184EC                            ; ===========================================================================
000184EC                            
000184EC                            MSAnim_RollJump:				; XREF: MSAnim_WalkRun
000184EC 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000184EE 6600                       		bne.s	MSAnim_Push	; if not, branch
000184F0 3428 0014                  		move.w	$14(a0),d2	; get Metal's speed
000184F4 6A00                       		bpl.s	loc3_13ADE
000184F6 4442                       		neg.w	d2
000184F8                            
000184F8                            loc3_13ADE:
000184F8 43F9 0001 7FB4             		lea	(MetAni_Roll2).l,a1 ; use fast animation
000184FE 0C42 0600                  		cmpi.w	#$600,d2	; is Metal moving fast?
00018502 6400                       		bcc.s	loc3_13AF0	; if yes, branch
00018504 43F9 0001 7FAC             		lea	(MetAni_Roll).l,a1 ; use slower	animation
0001850A                            
0001850A                            loc3_13AF0:
0001850A 4442                       		neg.w	d2
0001850C 0642 0400                  		addi.w	#$400,d2
00018510 6A00                       		bpl.s	loc3_13AFA
00018512 7400                       		moveq	#0,d2
00018514                            
00018514                            loc3_13AFA:
00018514 E04A                       		lsr.w	#8,d2
00018516 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001851A 1228 0022                  		move.b	$22(a0),d1
0001851E 0201 0001                  		andi.b	#1,d1
00018522 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018528 8328 0001                  		or.b	d1,1(a0)
0001852C 6000 FEEC                  		bra.w	MSAnim_Do2
00018530                            ; ===========================================================================
00018530                            
00018530                            MSAnim_Push:				; XREF: MSAnim_RollJump
00018530 3428 0014                  		move.w	$14(a0),d2	; get Metal's speed
00018534 6B00                       		bmi.s	loc3_13B1E
00018536 4442                       		neg.w	d2
00018538                            
00018538                            loc3_13B1E:
00018538 0642 0800                  		addi.w	#$800,d2
0001853C 6A00                       		bpl.s	loc3_13B26
0001853E 7400                       		moveq	#0,d2
00018540                            
00018540                            loc3_13B26:
00018540 EC4A                       		lsr.w	#6,d2
00018542 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00018546 43F9 0001 7FBC             		lea	(MetAni_Push).l,a1
0001854C 1228 0022                  		move.b	$22(a0),d1
00018550 0201 0001                  		andi.b	#1,d1
00018554 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001855A 8328 0001                  		or.b	d1,1(a0)
0001855E 6000 FEBA                  		bra.w	MSAnim_Do2
00018562                            
00018562                            ; ===========================================================================
00018562                            ; ===========================================================================
00018562 4E75                       	rts
00018564                            
00018564                            ; ---------------------------------------------------------------------------
00018564                            ; Subroutine to	animate	Metal's sprites
00018564                            ; ---------------------------------------------------------------------------
00018564                            
00018564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018564                            
00018564                            
00018564                            Mighty_Animate:				; XREF: Obj01_Control; et al
00018564                            	include "Mighty_Animate.asm"
00018564 43F9 0001 8106             		lea	(MightyAniData).l,a1
0001856A 7000                       		moveq	#0,d0
0001856C 1028 001C                  		move.b	$1C(a0),d0
00018570 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00018574 6700                       		beq.s	MTYAnim_Do	; if not, branch
00018576 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0001857A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00018580 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00018586                            
00018586                            MTYAnim_Do:
00018586 D040                       		add.w	d0,d0
00018588 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001858C 1011                       		move.b	(a1),d0
0001858E 6B00                       		bmi.s	MTYAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00018590 1228 0022                  		move.b	$22(a0),d1
00018594 0201 0001                  		andi.b	#1,d1
00018598 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001859E 8328 0001                  		or.b	d1,1(a0)
000185A2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000185A6 6A00                       		bpl.s	MTYAnim_Delay	; if time remains, branch
000185A8 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000185AC                            
000185AC                            MTYAnim_Do2:
000185AC 7200                       		moveq	#0,d1
000185AE 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000185B2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000185B6 6B00                       		bmi.s	MTYAnim_End_FF	; if animation is complete, branch
000185B8                            
000185B8                            MTYAnim_Next:
000185B8 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000185BC 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000185C0                            
000185C0                            MTYAnim_Delay:
000185C0 4E75                       		rts	
000185C2                            ; ===========================================================================
000185C2                            
000185C2                            MTYAnim_End_FF:
000185C2 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000185C4 6600                       		bne.s	MTYAnim_End_FE	; if not, branch
000185C6 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000185CC 1029 0001                  		move.b	1(a1),d0	; read sprite number
000185D0 60E6                       		bra.s	MTYAnim_Next
000185D2                            ; ===========================================================================
000185D2                            
000185D2                            MTYAnim_End_FE:
000185D2 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000185D4 6600                       		bne.s	MTYAnim_End_FD	; if not, branch
000185D6 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000185DA 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000185DE 9200                       		sub.b	d0,d1
000185E0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000185E4 60D2                       		bra.s	MTYAnim_Next
000185E6                            ; ===========================================================================
000185E6                            
000185E6                            MTYAnim_End_FD:
000185E6 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000185E8 6600                       		bne.s	MTYAnim_End	; if not, branch
000185EA 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000185F0                            
000185F0                            MTYAnim_End:
000185F0 4E75                       		rts	
000185F2                            ; ===========================================================================
000185F2                            
000185F2                            MTYAnim_WalkRun:				; XREF: MTYAnim_Do
000185F2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000185F6 6AC8                       		bpl.s	MTYAnim_Delay	; if time remains, branch
000185F8 5200                       		addq.b	#1,d0		; is animation walking/running?
000185FA 6600 0000                  		bne.w	MTYAnim_RollJump	; if not, branch
000185FE 7200                       		moveq	#0,d1
00018600 1028 0026                  		move.b	$26(a0),d0	; get Mighty's angle
00018604 1428 0022                  		move.b	$22(a0),d2
00018608 0202 0001                  		andi.b	#1,d2		; is Mighty mirrored horizontally?
0001860C 6600                       		bne.s	loc4_13A70	; if yes, branch
0001860E 4600                       		not.b	d0		; reverse angle
00018610                            
00018610                            loc4_13A70:
00018610 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00018614 6A00                       		bpl.s	loc4_13A78	; if angle is $0-$7F, branch
00018616 7203                       		moveq	#3,d1
00018618                            
00018618                            loc4_13A78:
00018618 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001861E B302                       		eor.b	d1,d2
00018620 8528 0001                  		or.b	d2,1(a0)
00018624 0828 0005 0022             		btst	#5,$22(a0)
0001862A 6600 0000                  		bne.w	MTYAnim_Push
0001862E E808                       		lsr.b	#4,d0		; divide angle by $10
00018630 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00018634 3428 0014                  		move.w	$14(a0),d2	; get Mighty's speed
00018638 6A00                       		bpl.s	loc4_13A9C
0001863A 4442                       		neg.w	d2
0001863C                            
0001863C                            loc4_13A9C:
0001863C 43F9 0001 8214             		lea (MtyAni_3rdRun).l,a1
00018642 0C42 0A00                  		cmpi.w #$A00,d2 ; is Mighty at super speed?
00018646 6400                       		bcc.s loc4_13AB4 ; if yes, branch
00018648 43F9 0001 8158             		lea	(MtyAni_Run).l,a1 ; use	running	animation
0001864E 0C42 0600                  		cmpi.w	#$600,d2	; is Mighty at running speed?
00018652 6400                       		bcc.s	loc4_13AB4	; if yes, branch
00018654 43F9 0001 8150             		lea	(MtyAni_Walk).l,a1 ; use walking animation
0001865A 1200                       		move.b	d0,d1
0001865C E209                       		lsr.b	#1,d1
0001865E D001                       		add.b	d1,d0
00018660                            
00018660                            loc4_13AB4:
00018660 D000                       		add.b	d0,d0
00018662 1600                       		move.b	d0,d3
00018664 4442                       		neg.w	d2
00018666 0642 0800                  		addi.w	#$800,d2
0001866A 6A00                       		bpl.s	loc4_13AC2
0001866C 7400                       		moveq	#0,d2
0001866E                            
0001866E                            loc4_13AC2:
0001866E E04A                       		lsr.w	#8,d2
00018670 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00018674 6100 FF36                  		bsr.w	MTYAnim_Do2
00018678 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001867C 4E75                       		rts	
0001867E                            ; ===========================================================================
0001867E                            
0001867E                            MTYAnim_RollJump:				; XREF: MTYAnim_WalkRun
0001867E 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00018680 6600                       		bne.s	MTYAnim_Push	; if not, branch
00018682 3428 0014                  		move.w	$14(a0),d2	; get Mighty's speed
00018686 6A00                       		bpl.s	loc4_13ADE
00018688 4442                       		neg.w	d2
0001868A                            
0001868A                            loc4_13ADE:
0001868A 43F9 0001 8168             		lea	(MtyAni_Roll2).l,a1 ; use fast animation
00018690 0C42 0600                  		cmpi.w	#$600,d2	; is Mighty moving fast?
00018694 6400                       		bcc.s	loc4_13AF0	; if yes, branch
00018696 43F9 0001 8160             		lea	(MtyAni_Roll).l,a1 ; use slower	animation
0001869C                            
0001869C                            loc4_13AF0:
0001869C 4442                       		neg.w	d2
0001869E 0642 0400                  		addi.w	#$400,d2
000186A2 6A00                       		bpl.s	loc4_13AFA
000186A4 7400                       		moveq	#0,d2
000186A6                            
000186A6                            loc4_13AFA:
000186A6 E04A                       		lsr.w	#8,d2
000186A8 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000186AC 1228 0022                  		move.b	$22(a0),d1
000186B0 0201 0001                  		andi.b	#1,d1
000186B4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000186BA 8328 0001                  		or.b	d1,1(a0)
000186BE 6000 FEEC                  		bra.w	MTYAnim_Do2
000186C2                            ; ===========================================================================
000186C2                            
000186C2                            MTYAnim_Push:				; XREF: MTYAnim_RollJump
000186C2 3428 0014                  		move.w	$14(a0),d2	; get Mighty's speed
000186C6 6B00                       		bmi.s	loc4_13B1E
000186C8 4442                       		neg.w	d2
000186CA                            
000186CA                            loc4_13B1E:
000186CA 0642 0800                  		addi.w	#$800,d2
000186CE 6A00                       		bpl.s	loc4_13B26
000186D0 7400                       		moveq	#0,d2
000186D2                            
000186D2                            loc4_13B26:
000186D2 EC4A                       		lsr.w	#6,d2
000186D4 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000186D8 43F9 0001 8170             		lea	(MtyAni_Push).l,a1
000186DE 1228 0022                  		move.b	$22(a0),d1
000186E2 0201 0001                  		andi.b	#1,d1
000186E6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000186EC 8328 0001                  		or.b	d1,1(a0)
000186F0 6000 FEBA                  		bra.w	MTYAnim_Do2
000186F4                            
000186F4                            ; ===========================================================================
000186F4                            ; ===========================================================================
000186F4 4E75                       	rts
000186F6                            
000186F6                            ; ---------------------------------------------------------------------------
000186F6                            ; Sonic	pattern	loading	subroutine
000186F6                            ; ---------------------------------------------------------------------------
000186F6                            
000186F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000186F6                            
000186F6                            
000186F6                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000186F6 0C38 0001 FFF6             		cmpi.b	 #$01, ($FFFFFFF6).w
000186FC 6700 0000                  		beq.w	LoadShadowDynPLC
00018700 0C38 0002 FFF6             		cmpi.b	 #$02, ($FFFFFFF6).w
00018706 6700 0000                  		beq.w	LoadMetalDynPLC
0001870A 0C38 0003 FFF6             		cmpi.b	 #$03, ($FFFFFFF6).w
00018710 6700 0000                  		beq.w	LoadMightyDynPLC
00018714                            
00018714                            LoadSonicDynPLC_Cont:
00018714 7000                       		moveq	#0,d0
00018716 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001871A B038 F766                  		cmp.b	($FFFFF766).w,d0
0001871E 6700                       		beq.s	locret_13C96
00018720 11C0 F766                  		move.b	d0,($FFFFF766).w
00018724 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001872A D040                       		add.w	d0,d0
0001872C D4F2 0000                  		adda.w	(a2,d0.w),a2
00018730 7A00                       		moveq	#0,d5
00018732 1A1A                       		move.b	(a2)+,d5
00018734 5345                       		subq.w	#1,d5
00018736 6B00                       		bmi.s	locret_13C96
00018738 383C F000                  		move.w	#$F000,d4
0001873C 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00018742                            
00018742                            SPLC_ReadEntry:
00018742 7200                       		moveq	#0,d1
00018744 121A                       		move.b	(a2)+,d1
00018746 E149                       		lsl.w	#8,d1
00018748 121A                       		move.b	(a2)+,d1
0001874A                            
0001874A 3601                       		move.w	d1,d3
0001874C E04B                       		lsr.w	#8,d3
0001874E 0243 00F0                  		andi.w	#$F0,d3
00018752 0643 0010                  		addi.w	#$10,d3
00018756 0241 0FFF                  		andi.w	#$FFF,d1
0001875A EB89                       		lsl.l	#5,d1
0001875C D286                       		add.l	d6,d1
0001875E 3404                       		move.w	d4,d2
00018760 D843                       		add.w	d3,d4
00018762 D843                       		add.w	d3,d4
00018764 4EB9 0000 11B2             		jsr	(QueueDMATransfer).l
0001876A 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
0001876E                            
0001876E                            locret_13C96:
0001876E 4E75                       		rts	
00018770                            ; End of function LoadSonicDynPLC
00018770                            
00018770                            LoadShadowDynPLC:
00018770                            		include "ShadowDynPLC.asm"
00018770 7000                       		moveq	#0,d0
00018772 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00018776 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001877A 6700                       		beq.s	loc2ret_13C96
0001877C 11C0 F766                  		move.b	d0,($FFFFF766).w
00018780 45F9 0000 0000             		lea	(ShadowDynPLC).l,a2
00018786 D040                       		add.w	d0,d0
00018788 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001878C 7A00                       		moveq	#0,d5
0001878E 1A1A                       		move.b	(a2)+,d5
00018790 5345                       		subq.w	#1,d5
00018792 6B00                       		bmi.s	loc2ret_13C96
00018794 383C F000                  		move.w	#$F000,d4
00018798 2C3C 0000 0000             		move.l	#Art_Shadow,d6
0001879E                            
0001879E                            ShPLC_ReadEntry:
0001879E 7200                       		moveq	#0,d1
000187A0 121A                       		move.b	(a2)+,d1
000187A2 E149                       		lsl.w	#8,d1
000187A4 121A                       		move.b	(a2)+,d1
000187A6                            
000187A6 3601                       		move.w	d1,d3
000187A8 E04B                       		lsr.w	#8,d3
000187AA 0243 00F0                  		andi.w	#$F0,d3
000187AE 0643 0010                  		addi.w	#$10,d3
000187B2 0241 0FFF                  		andi.w	#$FFF,d1
000187B6 EB89                       		lsl.l	#5,d1
000187B8 D286                       		add.l	d6,d1
000187BA 3404                       		move.w	d4,d2
000187BC D843                       		add.w	d3,d4
000187BE D843                       		add.w	d3,d4
000187C0 4EB9 0000 11B2             		jsr	(QueueDMATransfer).l
000187C6 51CD FFD6                  		dbf	d5,ShPLC_ReadEntry	; repeat for number of entries
000187CA                            
000187CA                            loc2ret_13C96:
000187CA 4E75                       		rts	
000187CC                            ; End of function LoadShadowDynPLC
000187CC                            ; End of function LoadShadowDynPLC
000187CC 4E75                       		rts
000187CE                            
000187CE                            LoadMetalDynPLC:
000187CE                            		include "MetalDynPLC.asm"
000187CE 7000                       		moveq	#0,d0
000187D0 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000187D4 B038 F766                  		cmp.b	($FFFFF766).w,d0
000187D8 6700                       		beq.s	loc3ret_13C96
000187DA 11C0 F766                  		move.b	d0,($FFFFF766).w
000187DE 45F9 0000 0000             		lea	(MetalDynPLC).l,a2
000187E4 D040                       		add.w	d0,d0
000187E6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000187EA 7A00                       		moveq	#0,d5
000187EC 1A1A                       		move.b	(a2)+,d5
000187EE 5345                       		subq.w	#1,d5
000187F0 6B00                       		bmi.s	loc3ret_13C96
000187F2 383C F000                  		move.w	#$F000,d4
000187F6 2C3C 0000 0000             		move.l	#Art_Metal,d6
000187FC                            
000187FC                            MetPLC_ReadEntry:
000187FC 7200                       		moveq	#0,d1
000187FE 121A                       		move.b	(a2)+,d1
00018800 E149                       		lsl.w	#8,d1
00018802 121A                       		move.b	(a2)+,d1
00018804                            
00018804 3601                       		move.w	d1,d3
00018806 E04B                       		lsr.w	#8,d3
00018808 0243 00F0                  		andi.w	#$F0,d3
0001880C 0643 0010                  		addi.w	#$10,d3
00018810 0241 0FFF                  		andi.w	#$FFF,d1
00018814 EB89                       		lsl.l	#5,d1
00018816 D286                       		add.l	d6,d1
00018818 3404                       		move.w	d4,d2
0001881A D843                       		add.w	d3,d4
0001881C D843                       		add.w	d3,d4
0001881E 4EB9 0000 11B2             		jsr	(QueueDMATransfer).l
00018824 51CD FFD6                  		dbf	d5,MetPLC_ReadEntry	; repeat for number of entries
00018828                            
00018828                            loc3ret_13C96:
00018828 4E75                       		rts	
0001882A                            ; End of function LoadMetalDynPLC
0001882A                            ; End of function LoadMetalDynPLC
0001882A 4E75                       		rts
0001882C                            
0001882C                            LoadMightyDynPLC:
0001882C                            		include "MightyDynPLC.asm"
0001882C 7000                       		moveq	#0,d0
0001882E 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00018832 B038 F766                  		cmp.b	($FFFFF766).w,d0
00018836 6700                       		beq.s	loc4ret_13C96
00018838 11C0 F766                  		move.b	d0,($FFFFF766).w
0001883C 45F9 0000 0000             		lea	(MightyDynPLC).l,a2
00018842 D040                       		add.w	d0,d0
00018844 D4F2 0000                  		adda.w	(a2,d0.w),a2
00018848 7A00                       		moveq	#0,d5
0001884A 1A1A                       		move.b	(a2)+,d5
0001884C 5345                       		subq.w	#1,d5
0001884E 6B00                       		bmi.s	loc4ret_13C96
00018850 383C F000                  		move.w	#$F000,d4
00018854 2C3C 0000 0000             		move.l	#Art_Mighty,d6
0001885A                            
0001885A                            MtyPLC_ReadEntry:
0001885A 7200                       		moveq	#0,d1
0001885C 121A                       		move.b	(a2)+,d1
0001885E E149                       		lsl.w	#8,d1
00018860 121A                       		move.b	(a2)+,d1
00018862                            
00018862 3601                       		move.w	d1,d3
00018864 E04B                       		lsr.w	#8,d3
00018866 0243 00F0                  		andi.w	#$F0,d3
0001886A 0643 0010                  		addi.w	#$10,d3
0001886E 0241 0FFF                  		andi.w	#$FFF,d1
00018872 EB89                       		lsl.l	#5,d1
00018874 D286                       		add.l	d6,d1
00018876 3404                       		move.w	d4,d2
00018878 D843                       		add.w	d3,d4
0001887A D843                       		add.w	d3,d4
0001887C 4EB9 0000 11B2             		jsr	(QueueDMATransfer).l
00018882 51CD FFD6                  		dbf	d5,MtyPLC_ReadEntry	; repeat for number of entries
00018886                            
00018886                            loc4ret_13C96:
00018886 4E75                       		rts	
00018888                            ; End of function LoadMightyDynPLC
00018888                            ; End of function LoadMightyDynPLC
00018888 4E75                       		rts
0001888A                            ; ===========================================================================
0001888A                            ; ---------------------------------------------------------------------------
0001888A                            ; Object 02 - Sonic's projectile
0001888A                            ; ---------------------------------------------------------------------------
0001888A                            Obj_ShadowProjectile:
0001888A                            		include "shadowProjectile.asm"
0001888A 7000                               moveq	#0,d0
0001888C 1028 0024                          move.b	$24(a0),d0
00018890 323B 0000                          move.w	Obj_ShadowProjectile_Index(pc,d0.w),d1
00018894 4EFB 1000                          jmp		Obj_ShadowProjectile_Index(pc,d1.w)
00018898                            ; ===========================================================================
00018898                            Obj_ShadowProjectile_Index:
00018898 0000                               dc.w Obj_ShadowProjectile_Init-Obj_ShadowProjectile_Index
0001889A 0000                       		dc.w Obj_ShadowProjectile_Main-Obj_ShadowProjectile_Index
0001889C                            ; ===========================================================================
0001889C                            Obj_ShadowProjectile_Init:
0001889C 5428 0024                          addq.b    #2,$24(a0)        ; go to the next routine
000188A0 217C 0000 0000 0004                move.l    #Map_Obj02,4(a0)    ; set mappings
000188A8 317C 1799 0002                     move.w    #$1799,2(a0)        ; set VRAM tile
000188AE 117C 0004 0001                     move.b    #4,1(a0)        ; set render flags
000188B4 117C 0003 0018                     move.b    #3,$18(a0)        ; set priority
000188BA 117C 0008 0019                     move.b    #8,$19(a0)        ; set horizontal radius
000188C0 117C 0008 0016                     move.b    #8,$16(a0)        ; set horizontal radius
000188C6 0838 0000 D022                 btst    #0,($FFFFD022).w    ; which way is Shadow facing?
000188CC 6600                           bne.s    @blehg
000188CE 08A8 0000 0001                 bclr    #0,1(a0)
000188D4 6000                           bra.s    Obj_ShadowProjectile_Main
000188D6                            @blehg:
000188D6 08E8 0000 0001                 bset    #0,1(a0)    
000188DC                            ; ===========================================================================
000188DC                            Obj_ShadowProjectile_Main:
000188DC 1029 0026                          move.b  $26(a1),d0  ; get Shadow's angle (?)
000188E0                             
000188E0                            continueSpear:
000188E0 4EB9 0001 0C58                     jsr     (ChkObjOnScreen).l ; is the projectile off-screen?
000188E6 6600                               bne.s   @delete            ; if so, branch
000188E8 4EB9 0000 0000                     jsr     ObjHitFloor
000188EE 4A41                               tst.w   d1
000188F0 6F00                               ble.s   @delete    
000188F2 4EB9 0000 0000                     jsr     (TouchResponse).l
000188F8 4EB9 0001 09C2                     jsr     (SpeedToPos).l
000188FE 4EF9 0001 09DC                     jmp     (DisplaySprite).l
00018904                             
00018904                            @delete:
00018904 4EF9 0001 0A18                     jmp     (DeleteObject).l
0001890A                            ; ===========================================================================
0001890A                            ; ---------------------------------------------------------------------------
0001890A                            ; Art - Chaos Spear
0001890A                            ; ---------------------------------------------------------------------------
0001890A                            Nem_ShadProj:	incbin	artnem\chaos_spear.bin ; Sonic's bullets!
00018934                            		even
00018934                            ; ---------------------------------------------------------------------------
00018934                            ; Mappings - Chaos Spear
00018934                            ; ---------------------------------------------------------------------------
00018934                            Map_Obj02:
00018934                            	include	"_maps\Chaos_Spear.asm"
00018934                            ; ================================================================================
00018934                            ; Sprite Mappings - generated by Flex 2 Sun Apr 15 2018 04:02:04 GMT-0700 (Pacific Daylight Time)
00018934                            ; ================================================================================
00018934                            
00018934                            DATAY4YT03U38I:
00018934 0000                       	dc.w DATAY4YT03U38I_0-DATAY4YT03U38I
00018936 02                         DATAY4YT03U38I_0: dc.b $2
00018937 FC00 0000 F8               	dc.b $FC, $0, $0, $0, $F8
0001893C FC00 0001 00               	dc.b $FC, $0, $0, $1, $0
00018942 00                         	even
00018942 00                         	even
00018942 00                         	even
00018942                            ; ---------------------------------------------------------------------------
00018942                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00018942                            ; ---------------------------------------------------------------------------
00018942                            
00018942                            Obj0A:					; XREF: Obj_Index
00018942 7000                       		moveq	#0,d0
00018944 1028 0024                  		move.b	$24(a0),d0
00018948 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001894C 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00018950                            ; ===========================================================================
00018950 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00018954 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00018958 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001895C 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00018960 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00018962                            ; ===========================================================================
00018962                            
00018962                            Obj0A_Main:				; XREF: Obj0A_Index
00018962 5428 0024                  		addq.b	#2,$24(a0)
00018966 217C 0001 5DDA 0004        		move.l	#Map_obj64,4(a0)
0001896E 317C 8348 0002             		move.w	#$8348,2(a0)
00018974 117C 0084 0001             		move.b	#$84,1(a0)
0001897A 117C 0010 0019             		move.b	#$10,$19(a0)
00018980 117C 0001 0018             		move.b	#1,$18(a0)
00018986 1028 0028                  		move.b	$28(a0),d0
0001898A 6A00                       		bpl.s	loc_13D00
0001898C 5028 0024                  		addq.b	#8,$24(a0)
00018990 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00018998 317C 0440 0002             		move.w	#$440,2(a0)
0001899E 0240 007F                  		andi.w	#$7F,d0
000189A2 1140 0033                  		move.b	d0,$33(a0)
000189A6 6000 0000                  		bra.w	Obj0A_Countdown
000189AA                            ; ===========================================================================
000189AA                            
000189AA                            loc_13D00:
000189AA 1140 001C                  		move.b	d0,$1C(a0)
000189AE 3168 0008 0030             		move.w	8(a0),$30(a0)
000189B4 317C FF78 0012             		move.w	#-$88,$12(a0)
000189BA                            
000189BA                            Obj0A_Animate:				; XREF: Obj0A_Index
000189BA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000189C0 4EB9 0000 D7DA             		jsr	AnimateSprite
000189C6                            
000189C6                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000189C6 3038 F646                  		move.w	($FFFFF646).w,d0
000189CA B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000189CE 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000189D0 117C 0006 0024             		move.b	#6,$24(a0)
000189D6 5E28 001C                  		addq.b	#7,$1C(a0)
000189DA 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000189E0 6700                       		beq.s	Obj0A_Display
000189E2 6000                       		bra.s	Obj0A_Display
000189E4                            ; ===========================================================================
000189E4                            
000189E4                            Obj0A_Wobble:
000189E4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000189E8 6700                       		beq.s	loc_13D44
000189EA 5868 0030                  		addq.w	#4,$30(a0)
000189EE                            
000189EE                            loc_13D44:
000189EE 1028 0026                  		move.b	$26(a0),d0
000189F2 5228 0026                  		addq.b	#1,$26(a0)
000189F6 0240 007F                  		andi.w	#$7F,d0
000189FA 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00018A00 1031 0000                  		move.b	(a1,d0.w),d0
00018A04 4880                       		ext.w	d0
00018A06 D068 0030                  		add.w	$30(a0),d0
00018A0A 3140 0008                  		move.w	d0,8(a0)
00018A0E 6100                       		bsr.s	Obj0A_ShowNumber
00018A10 4EB9 0001 09C2             		jsr	SpeedToPos
00018A16 4A28 0001                  		tst.b	1(a0)
00018A1A 6A00                       		bpl.s	Obj0A_Delete
00018A1C 4EF9 0001 09DC             		jmp	DisplaySprite
00018A22                            ; ===========================================================================
00018A22                            
00018A22                            Obj0A_Delete:
00018A22 4EF9 0001 0A18             		jmp	DeleteObject
00018A28                            ; ===========================================================================
00018A28                            
00018A28                            Obj0A_Display:				; XREF: Obj0A_Index
00018A28 6100                       		bsr.s	Obj0A_ShowNumber
00018A2A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00018A30 4EB9 0000 D7DA             		jsr	AnimateSprite
00018A36 4EF9 0001 09DC             		jmp	DisplaySprite
00018A3C                            ; ===========================================================================
00018A3C                            
00018A3C                            Obj0A_Delete2:				; XREF: Obj0A_Index
00018A3C 4EF9 0001 0A18             		jmp	DeleteObject
00018A42                            ; ===========================================================================
00018A42                            
00018A42                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00018A42 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00018A48 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00018A4A 5368 0038                  		subq.w	#1,$38(a0)
00018A4E 6600                       		bne.s	Obj0A_Display2
00018A50 117C 000E 0024             		move.b	#$E,$24(a0)
00018A56 5E28 001C                  		addq.b	#7,$1C(a0)
00018A5A 60CC                       		bra.s	Obj0A_Display
00018A5C                            ; ===========================================================================
00018A5C                            
00018A5C                            Obj0A_Display2:
00018A5C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00018A62 4EB9 0000 D7DA             		jsr	AnimateSprite
00018A68 4A28 0001                  		tst.b	1(a0)
00018A6C 6A00                       		bpl.s	Obj0A_Delete3
00018A6E 4EF9 0001 09DC             		jmp	DisplaySprite
00018A74                            ; ===========================================================================
00018A74                            
00018A74                            Obj0A_Delete3:
00018A74 4EF9 0001 0A18             		jmp	DeleteObject
00018A7A                            ; ===========================================================================
00018A7A                            
00018A7A                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00018A7A 4A68 0038                  		tst.w	$38(a0)
00018A7E 6700                       		beq.s	locret_13E1A
00018A80 5368 0038                  		subq.w	#1,$38(a0)
00018A84 6600                       		bne.s	locret_13E1A
00018A86 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00018A8C 6400                       		bcc.s	locret_13E1A
00018A8E 317C 000F 0038             		move.w	#$F,$38(a0)
00018A94 4268 0012                  		clr.w	$12(a0)
00018A98 117C 0080 0001             		move.b	#$80,1(a0)
00018A9E 3028 0008                  		move.w	8(a0),d0
00018AA2 9078 F700                  		sub.w	($FFFFF700).w,d0
00018AA6 0640 0080                  		addi.w	#$80,d0
00018AAA 3140 0008                  		move.w	d0,8(a0)
00018AAE 3028 000C                  		move.w	$C(a0),d0
00018AB2 9078 F704                  		sub.w	($FFFFF704).w,d0
00018AB6 0640 0080                  		addi.w	#$80,d0
00018ABA 3140 000A                  		move.w	d0,$A(a0)
00018ABE 117C 000C 0024             		move.b	#$C,$24(a0)
00018AC4                            
00018AC4                            locret_13E1A:
00018AC4 4E75                       		rts	
00018AC6                            ; ===========================================================================
00018AC6                            Obj0A_WobbleData:
00018AC6 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00018AD7 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00018AE8 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00018AF9 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00018B09 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00018B16 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00018B23 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00018B30 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00018B3D FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00018B46 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00018B57 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00018B68 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00018B79 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00018B89 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00018B96 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00018BA3 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00018BB0 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00018BBD FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00018BC6                            ; ===========================================================================
00018BC6                            
00018BC6                            Obj0A_Countdown:			; XREF: Obj0A_Index
00018BC6 4A68 002C                  		tst.w	$2C(a0)
00018BCA 6600 0000                  		bne.w	loc_13F86
00018BCE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00018BD4 6400 0000                  		bcc.w	locret_1408C
00018BD8 0838 0006 D022             		btst	#6,($FFFFD022).w
00018BDE 6700 0000                  		beq.w	locret_1408C
00018BE2 5368 0038                  		subq.w	#1,$38(a0)
00018BE6 6A00 0000                  		bpl.w	loc_13FAC
00018BEA 317C 003B 0038             		move.w	#59,$38(a0)
00018BF0 317C 0001 0036             		move.w	#1,$36(a0)
00018BF6 4EB9 0000 3710             		jsr	(RandomNumber).l
00018BFC 0240 0001                  		andi.w	#1,d0
00018C00 1140 0034                  		move.b	d0,$34(a0)
00018C04 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00018C08 0C40 0019                  		cmpi.w	#$19,d0
00018C0C 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00018C0E 0C40 0014                  		cmpi.w	#$14,d0
00018C12 6700                       		beq.s	Obj0A_WarnSound
00018C14 0C40 000F                  		cmpi.w	#$F,d0
00018C18 6700                       		beq.s	Obj0A_WarnSound
00018C1A 0C40 000C                  		cmpi.w	#$C,d0
00018C1E 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00018C20 6600                       		bne.s	loc_13F02
00018C22 303C 0092                  		move.w	#$92,d0
00018C26 4EB9 0000 1108             		jsr	(PlaySound).l	; play countdown music
00018C2C                            
00018C2C                            loc_13F02:
00018C2C 5328 0032                  		subq.b	#1,$32(a0)
00018C30 6A00                       		bpl.s	Obj0A_ReduceAir
00018C32 1168 0033 0032             		move.b	$33(a0),$32(a0)
00018C38 08E8 0007 0036             		bset	#7,$36(a0)
00018C3E 6000                       		bra.s	Obj0A_ReduceAir
00018C40                            ; ===========================================================================
00018C40                            
00018C40                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00018C40 303C 00C2                  		move.w	#$C2,d0
00018C44 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00018C4A                            
00018C4A                            Obj0A_ReduceAir:
00018C4A 4A38 FFA0                  		tst.b	($FFFFFFA0).w	; was a goggle monitor broken?
00018C4E 6600 0000                  		bne	Obj0A_GoMakeItem	; if yes, branch
00018C52 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00018C56 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00018C5A 6100 0000                  		bsr.w	ResumeMusic
00018C5E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00018C64 303C 00B2                  		move.w	#$B2,d0
00018C68 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play drowning sound
00018C6E 117C 000A 0034             		move.b	#$A,$34(a0)
00018C74 317C 0001 0036             		move.w	#1,$36(a0)
00018C7A 317C 0078 002C             		move.w	#$78,$2C(a0)
00018C80 2F08                       		move.l	a0,-(sp)
00018C82 41F8 D000                  		lea	($FFFFD000).w,a0
00018C86 6100 EB80                  		bsr.w	Sonic_ResetOnFloor
00018C8A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00018C90 08E8 0001 0022             		bset	#1,$22(a0)
00018C96 08E8 0007 0002             		bset	#7,2(a0)
00018C9C 317C 0000 0012             		move.w	#0,$12(a0)
00018CA2 317C 0000 0010             		move.w	#0,$10(a0)
00018CA8 317C 0000 0014             		move.w	#0,$14(a0)
00018CAE 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00018CB4 205F                       		movea.l	(sp)+,a0
00018CB6 4E75                       		rts	
00018CB8                            ; ===========================================================================
00018CB8                            
00018CB8                            loc_13F86:
00018CB8 5368 002C                  		subq.w	#1,$2C(a0)
00018CBC 6600                       		bne.s	loc_13F94
00018CBE 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00018CC4 4E75                       		rts	
00018CC6                            ; ===========================================================================
00018CC6                            
00018CC6                            loc_13F94:
00018CC6 2F08                       		move.l	a0,-(sp)
00018CC8 41F8 D000                  		lea	($FFFFD000).w,a0
00018CCC 4EB9 0001 09C2             		jsr	SpeedToPos
00018CD2 0668 0010 0012             		addi.w	#$10,$12(a0)
00018CD8 205F                       		movea.l	(sp)+,a0
00018CDA 6000                       		bra.s	loc_13FAC
00018CDC                            ; ===========================================================================
00018CDC                            
00018CDC                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00018CDC 6000                       		bra.s	Obj0A_MakeItem
00018CDE                            ; ===========================================================================
00018CDE                            
00018CDE                            loc_13FAC:
00018CDE 4A68 0036                  		tst.w	$36(a0)
00018CE2 6700 0000                  		beq.w	locret_1408C
00018CE6 5368 003A                  		subq.w	#1,$3A(a0)
00018CEA 6A00 0000                  		bpl.w	locret_1408C
00018CEE                            
00018CEE                            Obj0A_MakeItem:
00018CEE 4EB9 0000 3710             		jsr	(RandomNumber).l
00018CF4 0240 000F                  		andi.w	#$F,d0
00018CF8 3140 003A                  		move.w	d0,$3A(a0)
00018CFC 4EBA 8174                  		jsr	SingleObjLoad
00018D00 6600 0000                  		bne.w	locret_1408C
00018D04 12BC 000A                  		move.b	#$A,0(a1)	; load object
00018D08 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00018D0E 7006                       		moveq	#6,d0
00018D10 0838 0000 D022             		btst	#0,($FFFFD022).w
00018D16 6700                       		beq.s	loc_13FF2
00018D18 4440                       		neg.w	d0
00018D1A 137C 0040 0026             		move.b	#$40,$26(a1)
00018D20                            
00018D20                            loc_13FF2:
00018D20 D169 0008                  		add.w	d0,8(a1)
00018D24 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00018D2A 137C 0006 0028             		move.b	#6,$28(a1)
00018D30 4A68 002C                  		tst.w	$2C(a0)
00018D34 6700 0000                  		beq.w	loc_1403E
00018D38 0268 0007 003A             		andi.w	#7,$3A(a0)
00018D3E 0668 0000 003A             		addi.w	#0,$3A(a0)
00018D44 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018D48 0440 000C                  		subi.w	#$C,d0
00018D4C 3340 000C                  		move.w	d0,$C(a1)
00018D50 4EB9 0000 3710             		jsr	(RandomNumber).l
00018D56 1340 0026                  		move.b	d0,$26(a1)
00018D5A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018D5E 0200 0003                  		andi.b	#3,d0
00018D62 6600                       		bne.s	loc_14082
00018D64 137C 000E 0028             		move.b	#$E,$28(a1)
00018D6A 6000                       		bra.s	loc_14082
00018D6C                            ; ===========================================================================
00018D6C                            
00018D6C                            loc_1403E:
00018D6C 0828 0007 0036             		btst	#7,$36(a0)
00018D72 6700                       		beq.s	loc_14082
00018D74 3438 FE14                  		move.w	($FFFFFE14).w,d2
00018D78 E24A                       		lsr.w	#1,d2
00018D7A 4EB9 0000 3710             		jsr	(RandomNumber).l
00018D80 0240 0003                  		andi.w	#3,d0
00018D84 6600                       		bne.s	loc_1406A
00018D86 08E8 0006 0036             		bset	#6,$36(a0)
00018D8C 6600                       		bne.s	loc_14082
00018D8E 1342 0028                  		move.b	d2,$28(a1)
00018D92 337C 001C 0038             		move.w	#$1C,$38(a1)
00018D98                            
00018D98                            loc_1406A:
00018D98 4A28 0034                  		tst.b	$34(a0)
00018D9C 6600                       		bne.s	loc_14082
00018D9E 08E8 0006 0036             		bset	#6,$36(a0)
00018DA4 6600                       		bne.s	loc_14082
00018DA6 1342 0028                  		move.b	d2,$28(a1)
00018DAA 337C 001C 0038             		move.w	#$1C,$38(a1)
00018DB0                            
00018DB0                            loc_14082:
00018DB0 5328 0034                  		subq.b	#1,$34(a0)
00018DB4 6A00                       		bpl.s	locret_1408C
00018DB6 4268 0036                  		clr.w	$36(a0)
00018DBA                            
00018DBA                            locret_1408C:
00018DBA 4E75                       		rts	
00018DBC                            
00018DBC                            ; ---------------------------------------------------------------------------
00018DBC                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00018DBC                            ; ---------------------------------------------------------------------------
00018DBC                            
00018DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DBC                            
00018DBC                            
00018DBC                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00018DBC 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00018DC2                             
00018DC2                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00018DC2                             
00018DC2 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00018DC6                             
00018DC6 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00018DCC 6600                       		bne.s	Air_GetBgm2	; if not, branch
00018DCE 43F9 0000 5E8C             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00018DD4 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00018DD6                             
00018DD6                            Air_GetBgm2:
00018DD6 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00018DDC 6600                       		bne.s	Air_GetBgm3	; if not, branch
00018DDE 43F9 0000 5E94             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00018DE4 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00018DE6                             
00018DE6                            Air_GetBgm3:
00018DE6 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00018DEC 6600                       		bne.s	Air_GetBgm4	; if not, branch
00018DEE 43F9 0000 5E9A             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00018DF4 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00018DF6                             
00018DF6                            Air_GetBgm4:
00018DF6 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00018DFC 6600                       		bne.s	Air_PlayMusic	; if not, branch
00018DFE 43F9 0000 5EA0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00018E04                             
00018E04                            Air_PlayMusic:
00018E04 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00018E08                             
00018E08                            loc_140A6:
00018E08 4EB9 0000 1108             		jsr	(PlaySound).l
00018E0E                             
00018E0E                            ; NineKode ends here
00018E0E                            
00018E0E                            
00018E0E                            loc_140AC:
00018E0E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00018E14 4238 D372                  		clr.b	($FFFFD372).w
00018E18 4E75                       		rts	
00018E1A                            ; End of function ResumeMusic
00018E1A                            
00018E1A                            ; ===========================================================================
00018E1A                            Ani_obj0A:
00018E1A                            	include "_anim\obj0A.asm"
00018E1A                            ; ---------------------------------------------------------------------------
00018E1A                            ; Animation script - countdown numbers and bubbles (LZ)
00018E1A                            ; ---------------------------------------------------------------------------
00018E1A 0000                       		dc.w byte_140D6-Ani_obj0A
00018E1C 0000                       		dc.w byte_140E0-Ani_obj0A
00018E1E 0000                       		dc.w byte_140EA-Ani_obj0A
00018E20 0000                       		dc.w byte_140F4-Ani_obj0A
00018E22 0000                       		dc.w byte_140FE-Ani_obj0A
00018E24 0000                       		dc.w byte_14108-Ani_obj0A
00018E26 0000                       		dc.w byte_14112-Ani_obj0A
00018E28 0000                       		dc.w byte_14118-Ani_obj0A
00018E2A 0000                       		dc.w byte_14120-Ani_obj0A
00018E2C 0000                       		dc.w byte_14128-Ani_obj0A
00018E2E 0000                       		dc.w byte_14130-Ani_obj0A
00018E30 0000                       		dc.w byte_14138-Ani_obj0A
00018E32 0000                       		dc.w byte_14140-Ani_obj0A
00018E34 0000                       		dc.w byte_14148-Ani_obj0A
00018E36 0000                       		dc.w byte_1414A-Ani_obj0A
00018E38 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00018E42 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00018E4C 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00018E56 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00018E60 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00018E6A 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00018E74 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00018E7A 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00018E82 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00018E8A 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00018E92 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00018E9A 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00018EA2 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00018EAA 0EFC                       byte_14148:	dc.b $E, $FC
00018EAC 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00018EB2                            		even
00018EB2                            		even
00018EB2                            
00018EB2                            ; ---------------------------------------------------------------------------
00018EB2                            ; Sprite mappings - drowning countdown numbers (LZ)
00018EB2                            ; ---------------------------------------------------------------------------
00018EB2                            Map_obj0A:
00018EB2                            	include "_maps\obj0A.asm"
00018EB2                            ; ---------------------------------------------------------------------------
00018EB2                            ; Sprite mappings - drowning countdown numbers (LZ)
00018EB2                            ; ---------------------------------------------------------------------------
00018EB2 0000                       		dc.w byte_14152-Map_obj0A
00018EB4 01                         byte_14152:	dc.b 1
00018EB5 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00018EBA                            		even
00018EBA                            		even
00018EBA                            
00018EBA                            ; ===========================================================================
00018EBA                            ; ---------------------------------------------------------------------------
00018EBA                            ; Object 38 - shield and invincibility stars
00018EBA                            ; ---------------------------------------------------------------------------
00018EBA                            
00018EBA                            Obj38:					; XREF: Obj_Index
00018EBA 7000                       		moveq	#0,d0
00018EBC 1028 0024                  		move.b	$24(a0),d0
00018EC0 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00018EC4 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00018EC8                            ; ===========================================================================
00018EC8 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00018ECA 0000                       		dc.w Obj38_Shield-Obj38_Index
00018ECC 0000                       		dc.w Obj38_Stars-Obj38_Index
00018ECE                            ; ===========================================================================
00018ECE                            
00018ECE                            Obj38_Main:				; XREF: Obj38_Index
00018ECE 5428 0024                  		addq.b	#2,$24(a0)
00018ED2 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00018EDA 117C 0004 0001             		move.b	#4,1(a0)
00018EE0 117C 0001 0018             		move.b	#1,$18(a0)
00018EE6 117C 0010 0019             		move.b	#$10,$19(a0)
00018EEC 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00018EF0 6600                       		bne.s	Obj38_DoStars	; if not, branch
00018EF2 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00018EF8 4E75                       		rts	
00018EFA                            ; ===========================================================================
00018EFA                            
00018EFA                            Obj38_DoStars:
00018EFA 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00018EFE 317C 055C 0002             		move.w	#$55C,2(a0)
00018F04 4E75                       		rts	
00018F06                            ; ===========================================================================
00018F06                            
00018F06                            Obj38_Shield:				; XREF: Obj38_Index
00018F06 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00018F0A 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00018F0C 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00018F10 6700                       		beq.s	Obj38_Delete	; if not, branch
00018F12 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00018F18 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00018F1E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00018F24 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00018F2A 4EB9 0000 D7DA             		jsr	AnimateSprite
00018F30 4EF9 0001 09DC             		jmp	DisplaySprite
00018F36                            ; ===========================================================================
00018F36                            
00018F36                            Obj38_RmvShield:
00018F36 4E75                       		rts	
00018F38                            ; ===========================================================================
00018F38                            
00018F38                            Obj38_Delete:
00018F38 4EF9 0001 0A18             		jmp	DeleteObject
00018F3E                            ; ===========================================================================
00018F3E                            
00018F3E                            Obj38_Stars:				; XREF: Obj38_Index
00018F3E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00018F42 6700                       		beq.s	Obj38_Delete2	; if not, branch
00018F44 4A38 FE19                  		tst.b	(Super_Sonic_flag).w	; Is Sonic Dark?
00018F48 6600                       		bne.s	Obj38_Delete2	; if yes, branch
00018F4A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00018F4E 1228 001C                  		move.b	$1C(a0),d1
00018F52 5301                       		subq.b	#1,d1
00018F54 6000                       		bra.s	Obj38_StarTrail
00018F56                            ; ===========================================================================
00018F56 E909                       		lsl.b	#4,d1
00018F58 5801                       		addq.b	#4,d1
00018F5A 9001                       		sub.b	d1,d0
00018F5C 1228 0030                  		move.b	$30(a0),d1
00018F60 9001                       		sub.b	d1,d0
00018F62 5801                       		addq.b	#4,d1
00018F64 0201 000F                  		andi.b	#$F,d1
00018F68 1141 0030                  		move.b	d1,$30(a0)
00018F6C 6000                       		bra.s	Obj38_StarTrail2a
00018F6E                            ; ===========================================================================
00018F6E                            
00018F6E                            Obj38_StarTrail:			; XREF: Obj38_Stars
00018F6E E709                       		lsl.b	#3,d1
00018F70 1401                       		move.b	d1,d2
00018F72 D201                       		add.b	d1,d1
00018F74 D202                       		add.b	d2,d1
00018F76 5801                       		addq.b	#4,d1
00018F78 9001                       		sub.b	d1,d0
00018F7A 1228 0030                  		move.b	$30(a0),d1
00018F7E 9001                       		sub.b	d1,d0
00018F80 5801                       		addq.b	#4,d1
00018F82 0C01 0018                  		cmpi.b	#$18,d1
00018F86 6500                       		bcs.s	Obj38_StarTrail2
00018F88 7200                       		moveq	#0,d1
00018F8A                            
00018F8A                            Obj38_StarTrail2:
00018F8A 1141 0030                  		move.b	d1,$30(a0)
00018F8E                            
00018F8E                            Obj38_StarTrail2a:
00018F8E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00018F92 43F1 0000                  		lea	(a1,d0.w),a1
00018F96 3159 0008                  		move.w	(a1)+,8(a0)
00018F9A 3159 000C                  		move.w	(a1)+,$C(a0)
00018F9E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00018FA4 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00018FAA 4EB9 0000 D7DA             		jsr	AnimateSprite
00018FB0 4EF9 0001 09DC             		jmp	DisplaySprite
00018FB6                            ; ===========================================================================
00018FB6                            
00018FB6                            Obj38_Delete2:				; XREF: Obj38_Stars
00018FB6 4EF9 0001 0A18             		jmp	DeleteObject
00018FBC                            ; ===========================================================================
00018FBC                            ; ---------------------------------------------------------------------------
00018FBC                            ; Object 4A - special stage entry from beta
00018FBC                            ; ---------------------------------------------------------------------------
00018FBC                            
00018FBC                            Obj4A:					; XREF: Obj_Index
00018FBC 7000                       		moveq	#0,d0
00018FBE 1028 0024                  		move.b	$24(a0),d0
00018FC2 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00018FC6 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00018FCA                            ; ===========================================================================
00018FCA 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00018FCC 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00018FCE 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00018FD0                            ; ===========================================================================
00018FD0                            
00018FD0                            Obj4A_Main:				; XREF: Obj4A_Index
00018FD0 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00018FD4 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00018FD6 4E75                       		rts	
00018FD8                            ; ===========================================================================
00018FD8                            
00018FD8                            Obj4A_Main2:
00018FD8 5428 0024                  		addq.b	#2,$24(a0)
00018FDC 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00018FE4 117C 0004 0001             		move.b	#4,1(a0)
00018FEA 117C 0001 0018             		move.b	#1,$18(a0)
00018FF0 117C 0038 0019             		move.b	#$38,$19(a0)
00018FF6 317C 0541 0002             		move.w	#$541,2(a0)
00018FFC 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00019002                            
00019002                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00019002 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00019008 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001900E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00019014 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001901A 4EB9 0000 D7DA             		jsr	AnimateSprite
00019020 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00019026 6600                       		bne.s	Obj4A_Display
00019028 4A38 D000                  		tst.b	($FFFFD000).w
0001902C 6700                       		beq.s	Obj4A_Display
0001902E 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00019034 303C 00A8                  		move.w	#$A8,d0
00019038 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001903E                            
0001903E                            Obj4A_Display:
0001903E 4EF9 0001 09DC             		jmp	DisplaySprite
00019044                            ; ===========================================================================
00019044                            
00019044                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00019044 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00019048 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
0001904A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00019050 4EF9 0001 0A18             		jmp	DeleteObject
00019056                            ; ===========================================================================
00019056                            
00019056                            Obj4A_Wait:
00019056 4E75                       		rts	
00019058                            ; ===========================================================================
00019058                            ; ---------------------------------------------------------------------------
00019058                            ; Object 08 - water splash (LZ)
00019058                            ; ---------------------------------------------------------------------------
00019058                            
00019058                            Obj08:					; XREF: Obj_Index
00019058 7000                       		moveq	#0,d0
0001905A 1028 0024                  		move.b	$24(a0),d0
0001905E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00019062 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00019066                            ; ===========================================================================
00019066 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00019068 0000                       		dc.w Obj08_Display-Obj08_Index
0001906A 0000                       		dc.w Obj08_Delete-Obj08_Index
0001906C                            ; ===========================================================================
0001906C                            
0001906C                            Obj08_Main:				; XREF: Obj08_Index
0001906C 5428 0024                  		addq.b	#2,$24(a0)
00019070 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00019078 0028 0004 0001             		ori.b	#4,1(a0)
0001907E 117C 0001 0018             		move.b	#1,$18(a0)
00019084 117C 0010 0019             		move.b	#$10,$19(a0)
0001908A 317C 4259 0002             		move.w	#$4259,2(a0)
00019090 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00019096                            
00019096                            Obj08_Display:				; XREF: Obj08_Index
00019096 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001909C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000190A2 4EB9 0000 D7DA             		jsr	AnimateSprite
000190A8 4EF9 0001 09DC             		jmp	DisplaySprite
000190AE                            ; ===========================================================================
000190AE                            
000190AE                            Obj08_Delete:				; XREF: Obj08_Index
000190AE 4EF9 0001 0A18             		jmp	DeleteObject	; delete when animation	is complete
000190B4                            ; ===========================================================================
000190B4                            Ani_obj38:
000190B4                            	include "_anim\obj38.asm"
000190B4                            ; ---------------------------------------------------------------------------
000190B4                            ; Animation script - shield and invincibility stars
000190B4                            ; ---------------------------------------------------------------------------
000190B4 0000                       		dc.w byte_14356-Ani_obj38
000190B6 0000                       		dc.w byte_1435E-Ani_obj38
000190B8 0000                       		dc.w byte_14364-Ani_obj38
000190BA 0000                       		dc.w byte_1437E-Ani_obj38
000190BC 0000                       		dc.w byte_14398-Ani_obj38
000190BE 0106 0106 0206 0306 0406+  byte_14356:	dc.b 1, 6, 1, 6, 2, 6, 3, 6, 4, 6, 5, $FF
000190CA 0807 0809 0AFF             byte_1435E:	dc.b 8,	7, 8, 9, $A, $FF
000190D0 0007 0700 0707 0008 0800+  byte_14364:	dc.b 0,	7, 7, 0, 7, 7, 0, 8, 8,	0, 8, 8, 0, 9, 9, 0, 9
000190E1 0900 0A0A 000A 0A00 FF     		dc.b 9,	0, $A, $A, 0, $A, $A, 0, $FF
000190EA 0007 0700 0700 0008 0800+  byte_1437E:	dc.b 0,	7, 7, 0, 7, 0, 0, 8, 8,	0, 8, 0, 0, 9, 9, 0, 9
000190FB 0000 0A0A 000A 0000 FF     		dc.b 0,	0, $A, $A, 0, $A, 0, 0, $FF
00019104 0007 0000 0700 0008 0000+  byte_14398:	dc.b 0,	7, 0, 0, 7, 0, 0, 8, 0,	0, 8, 0, 0, 9, 0, 0, 9
00019115 0000 0A00 000A 0000 FF     		dc.b 0,	0, $A, 0, 0, $A, 0, 0, $FF
0001911E                            		even
0001911E                            		even
0001911E                            
0001911E                            ; ---------------------------------------------------------------------------
0001911E                            ; Sprite mappings - shield and invincibility stars
0001911E                            ; ---------------------------------------------------------------------------
0001911E                            Map_obj38:
0001911E                            	include "_maps\obj38.asm"
0001911E                            ; ================================================================================
0001911E                            ; Sprite Mappings - generated by Flex 2 Wed Jan 31 2018 18:31:04 GMT-0500 (Eastern Standard Time)
0001911E                            ; ================================================================================
0001911E                            
0001911E                            DATAY17EXS3PFEL:
0001911E 0000 0000                  	dc.w $0, DATAY17EXS3PFEL_1-DATAY17EXS3PFEL
00019122 0000 0000                  	dc.w DATAY17EXS3PFEL_2-DATAY17EXS3PFEL, DATAY17EXS3PFEL_3-DATAY17EXS3PFEL
00019126 0000 0000                  	dc.w DATAY17EXS3PFEL_4-DATAY17EXS3PFEL, DATAY17EXS3PFEL_5-DATAY17EXS3PFEL
0001912A 0000 0000                  	dc.w DATAY17EXS3PFEL_6-DATAY17EXS3PFEL, DATAY17EXS3PFEL_7-DATAY17EXS3PFEL
0001912E 0000 0000                  	dc.w DATAY17EXS3PFEL_8-DATAY17EXS3PFEL, DATAY17EXS3PFEL_9-DATAY17EXS3PFEL
00019132 0000                       	dc.w DATAY17EXS3PFEL_A-DATAY17EXS3PFEL
00019134 04                         DATAY17EXS3PFEL_1: dc.b $4
00019135 F005 0000 00               	dc.b $F0, $5, $0, $0, $0
0001913A 0005 1000 00               	dc.b $0, $5, $10, $0, $0
0001913F F005 0800 F0               	dc.b $F0, $5, $8, $0, $F0
00019144 0005 1800 F0               	dc.b $0, $5, $18, $0, $F0
00019149 04                         DATAY17EXS3PFEL_2: dc.b $4
0001914A F005 0004 F0               	dc.b $F0, $5, $0, $4, $F0
0001914F 0005 1004 F0               	dc.b $0, $5, $10, $4, $F0
00019154 F005 0804 00               	dc.b $F0, $5, $8, $4, $0
00019159 0005 1804 00               	dc.b $0, $5, $18, $4, $0
0001915E 04                         DATAY17EXS3PFEL_3: dc.b $4
0001915F F005 0808 F0               	dc.b $F0, $5, $8, $8, $F0
00019164 0005 1808 F0               	dc.b $0, $5, $18, $8, $F0
00019169 0005 1008 00               	dc.b $0, $5, $10, $8, $0
0001916E F005 0008 00               	dc.b $F0, $5, $0, $8, $0
00019173 04                         DATAY17EXS3PFEL_4: dc.b $4
00019174 F005 000C F0               	dc.b $F0, $5, $0, $C, $F0
00019179 0005 100C F0               	dc.b $0, $5, $10, $C, $F0
0001917E 0005 180C 00               	dc.b $0, $5, $18, $C, $0
00019183 F005 080C 00               	dc.b $F0, $5, $8, $C, $0
00019188 04                         DATAY17EXS3PFEL_5: dc.b $4
00019189 F005 0010 F0               	dc.b $F0, $5, $0, $10, $F0
0001918E 0005 1010 F0               	dc.b $0, $5, $10, $10, $F0
00019193 0005 1810 00               	dc.b $0, $5, $18, $10, $0
00019198 F005 0810 00               	dc.b $F0, $5, $8, $10, $0
0001919D 10                         DATAY17EXS3PFEL_6: dc.b $10
0001919E E806 0014 E8               	dc.b $E8, $6, $0, $14, $E8
000191A3 E800 001A F8               	dc.b $E8, $0, $0, $1A, $F8
000191A8 EA00 0018 F7               	dc.b $EA, $0, $0, $18, $F7
000191AD E900 1019 FA               	dc.b $E9, $0, $10, $19, $FA
000191B2 E806 0814 08               	dc.b $E8, $6, $8, $14, $8
000191B7 E800 081A 00               	dc.b $E8, $0, $8, $1A, $0
000191BC EA00 0818 01               	dc.b $EA, $0, $8, $18, $1
000191C1 E900 1019 04               	dc.b $E9, $0, $10, $19, $4
000191C6 0006 1014 E8               	dc.b $0, $6, $10, $14, $E8
000191CB 1000 101A F8               	dc.b $10, $0, $10, $1A, $F8
000191D0 0006 1814 08               	dc.b $0, $6, $18, $14, $8
000191D5 1000 181A 00               	dc.b $10, $0, $18, $1A, $0
000191DA 0E00 1018 F7               	dc.b $E, $0, $10, $18, $F7
000191DF 0F00 0019 FA               	dc.b $F, $0, $0, $19, $FA
000191E4 0E00 1818 01               	dc.b $E, $0, $18, $18, $1
000191E9 0F00 0819 FE               	dc.b $F, $0, $8, $19, $FE
000191EE 04                         DATAY17EXS3PFEL_7: dc.b $4
000191EF E80A 0000 E8               	dc.b $E8, $A, $0, $0, $E8
000191F4 E80A 0009 00               	dc.b $E8, $A, $0, $9, $0
000191F9 000A 1809 E8               	dc.b $0, $A, $18, $9, $E8
000191FE 000A 1800 00               	dc.b $0, $A, $18, $0, $0
00019203 04                         DATAY17EXS3PFEL_8: dc.b $4
00019204 E80A 0809 E8               	dc.b $E8, $A, $8, $9, $E8
00019209 E80A 0800 00               	dc.b $E8, $A, $8, $0, $0
0001920E 000A 1000 E8               	dc.b $0, $A, $10, $0, $E8
00019213 000A 1009 00               	dc.b $0, $A, $10, $9, $0
00019218 04                         DATAY17EXS3PFEL_9: dc.b $4
00019219 E80A 0012 E8               	dc.b $E8, $A, $0, $12, $E8
0001921E E80A 001B 00               	dc.b $E8, $A, $0, $1B, $0
00019223 000A 181B E8               	dc.b $0, $A, $18, $1B, $E8
00019228 000A 1812 00               	dc.b $0, $A, $18, $12, $0
0001922D 04                         DATAY17EXS3PFEL_A: dc.b $4
0001922E E80A 081B E8               	dc.b $E8, $A, $8, $1B, $E8
00019233 E80A 0812 00               	dc.b $E8, $A, $8, $12, $0
00019238 000A 1012 E8               	dc.b $0, $A, $10, $12, $E8
0001923D 000A 101B 00               	dc.b $0, $A, $10, $1B, $0
00019242                            	even
00019242                            	even
00019242                            
00019242                            Ani_obj4A:
00019242                            	include "_anim\obj4A.asm"
00019242                            ; ---------------------------------------------------------------------------
00019242                            ; Animation script - special stage entry effect from beta
00019242                            ; ---------------------------------------------------------------------------
00019242 0000                       		dc.w byte_14458-Ani_obj4A
00019244 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00019258                            		even
00019258                            		even
00019258                            
00019258                            ; ---------------------------------------------------------------------------
00019258                            ; Sprite mappings - special stage entry	from beta
00019258                            ; ---------------------------------------------------------------------------
00019258                            Map_obj4A:
00019258                            	include "_maps\obj4A.asm"
00019258                            ; ---------------------------------------------------------------------------
00019258                            ; Sprite mappings - special stage entry	from beta
00019258                            ; ---------------------------------------------------------------------------
00019258 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
0001925C 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00019260 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00019264 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00019268 03                         byte_1447C:	dc.b 3
00019269 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001926E 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00019273 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00019278 03                         byte_1448C:	dc.b 3
00019279 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001927E 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00019283 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00019288 05                         byte_1449C:	dc.b 5
00019289 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001928E EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00019293 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00019298 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001929D 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000192A2 09                         byte_144B6:	dc.b 9
000192A3 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000192A8 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000192AD 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000192B2 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000192B7 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000192BC F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000192C1 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000192C6 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000192CB F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000192D0 12                         byte_144E4:	dc.b $12
000192D1 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000192D6 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000192DB F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000192E0 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000192E5 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000192EA 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000192EF 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000192F4 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000192F9 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000192FE 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00019303 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00019308 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001930D F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00019312 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00019317 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001931C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00019321 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00019326 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001932B 11                         byte_1453F:	dc.b $11
0001932C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00019331 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00019336 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001933B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00019340 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00019345 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001934A 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001934F F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00019354 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00019359 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001935E 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00019363 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00019368 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001936D 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00019372 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00019377 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001937C 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00019381 09                         byte_14595:	dc.b 9
00019382 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00019387 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001938C 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00019391 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00019396 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001939B FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000193A0 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000193A5 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000193AA 04                         		dc.b 4
000193AB 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000193B0                            		even
000193B0                            		even
000193B0                            
000193B0                            Ani_obj08:
000193B0                            	include "_anim\obj08.asm"
000193B0                            ; ---------------------------------------------------------------------------
000193B0                            ; Animation script - water splash (LZ)
000193B0                            ; ---------------------------------------------------------------------------
000193B0 0000                       		dc.w byte_145C6-Ani_obj08
000193B2 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000193B8                            		even
000193B8                            		even
000193B8                            
000193B8                            ; ---------------------------------------------------------------------------
000193B8                            ; Sprite mappings - water splash (LZ)
000193B8                            ; ---------------------------------------------------------------------------
000193B8                            Map_obj08:
000193B8                            	include "_maps\obj08.asm"
000193B8                            ; ---------------------------------------------------------------------------
000193B8                            ; Sprite mappings - water splash (LZ)
000193B8                            ; ---------------------------------------------------------------------------
000193B8 0000                       		dc.w byte_145D2-Map_obj08
000193BA 0000                       		dc.w byte_145DD-Map_obj08
000193BC 0000                       		dc.w byte_145E8-Map_obj08
000193BE 02                         byte_145D2:	dc.b 2
000193BF F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000193C4 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000193C9 02                         byte_145DD:	dc.b 2
000193CA E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000193CF EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000193D4 01                         byte_145E8:	dc.b 1
000193D5 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000193DA                            		even
000193DA                            		even
000193DA                            
000193DA                            ; ---------------------------------------------------------------------------
000193DA                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000193DA                            ; ---------------------------------------------------------------------------
000193DA                            
000193DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000193DA                            
000193DA                            
000193DA                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000193DA 0828 0003 0022             		btst	#3,$22(a0)
000193E0 6700                       		beq.s	loc_14602
000193E2 7000                       		moveq	#0,d0
000193E4 11C0 F768                  		move.b	d0,($FFFFF768).w
000193E8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000193EC 4E75                       		rts	
000193EE                            ; ===========================================================================
000193EE                            
000193EE                            loc_14602:
000193EE 7003                       		moveq	#3,d0
000193F0 11C0 F768                  		move.b	d0,($FFFFF768).w
000193F4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000193F8 1028 0026                  		move.b	$26(a0),d0
000193FC 0600 0020                  		addi.b	#$20,d0
00019400 6A00                       		bpl.s	loc_14624
00019402 1028 0026                  		move.b	$26(a0),d0
00019406 6A00                       		bpl.s	loc_1461E
00019408 5300                       		subq.b	#1,d0
0001940A                            
0001940A                            loc_1461E:
0001940A 0600 0020                  		addi.b	#$20,d0
0001940E 6000                       		bra.s	loc_14630
00019410                            ; ===========================================================================
00019410                            
00019410                            loc_14624:
00019410 1028 0026                  		move.b	$26(a0),d0
00019414 6A00                       		bpl.s	loc_1462C
00019416 5200                       		addq.b	#1,d0
00019418                            
00019418                            loc_1462C:
00019418 0600 001F                  		addi.b	#$1F,d0
0001941C                            
0001941C                            loc_14630:
0001941C 0200 00C0                  		andi.b	#$C0,d0
00019420 0C00 0040                  		cmpi.b	#$40,d0
00019424 6700 0000                  		beq.w	Sonic_WalkVertL
00019428 0C00 0080                  		cmpi.b	#$80,d0
0001942C 6700 0000                  		beq.w	Sonic_WalkCeiling
00019430 0C00 00C0                  		cmpi.b	#$C0,d0
00019434 6700 0000                  		beq.w	Sonic_WalkVertR
00019438 3428 000C                  		move.w	$C(a0),d2
0001943C 3628 0008                  		move.w	8(a0),d3
00019440 7000                       		moveq	#0,d0
00019442 1028 0016                  		move.b	$16(a0),d0
00019446 4880                       		ext.w	d0
00019448 D440                       		add.w	d0,d2
0001944A 1028 0017                  		move.b	$17(a0),d0
0001944E 4880                       		ext.w	d0
00019450 D640                       		add.w	d0,d3
00019452 49F8 F768                  		lea	($FFFFF768).w,a4
00019456 367C 0010                  		movea.w	#$10,a3
0001945A 3C3C 0000                  		move.w	#0,d6
0001945E 7A0D                       		moveq	#$D,d5
00019460 6100 0000                  		bsr.w	FindFloor
00019464 3F01                       		move.w	d1,-(sp)
00019466 3428 000C                  		move.w	$C(a0),d2
0001946A 3628 0008                  		move.w	8(a0),d3
0001946E 7000                       		moveq	#0,d0
00019470 1028 0016                  		move.b	$16(a0),d0
00019474 4880                       		ext.w	d0
00019476 D440                       		add.w	d0,d2
00019478 1028 0017                  		move.b	$17(a0),d0
0001947C 4880                       		ext.w	d0
0001947E 4440                       		neg.w	d0
00019480 D640                       		add.w	d0,d3
00019482 49F8 F76A                  		lea	($FFFFF76A).w,a4
00019486 367C 0010                  		movea.w	#$10,a3
0001948A 3C3C 0000                  		move.w	#0,d6
0001948E 7A0D                       		moveq	#$D,d5
00019490 6100 0000                  		bsr.w	FindFloor
00019494 301F                       		move.w	(sp)+,d0
00019496 6100 0000                  		bsr.w	Sonic_Angle
0001949A 4A41                       		tst.w	d1
0001949C 6700                       		beq.s	locret_146BE
0001949E 6A00                       		bpl.s	loc_146C0
000194A0 0C41 FFF2                  		cmpi.w	#-$E,d1
000194A4 6D00                       		blt.s	locret_146E6
000194A6 D368 000C                  		add.w	d1,$C(a0)
000194AA                            
000194AA                            locret_146BE:
000194AA 4E75                       		rts	
000194AC                            ; ===========================================================================
000194AC                            
000194AC                            loc_146C0:
000194AC 0C41 000E                  		cmpi.w	#$E,d1
000194B0 6E00                       		bgt.s	loc_146CC
000194B2                            
000194B2                            loc_146C6:
000194B2 D368 000C                  		add.w	d1,$C(a0)
000194B6 4E75                       		rts	
000194B8                            ; ===========================================================================
000194B8                            
000194B8                            loc_146CC:
000194B8 4A28 0038                  		tst.b	$38(a0)
000194BC 66F4                       		bne.s	loc_146C6
000194BE 08E8 0001 0022             		bset	#1,$22(a0)
000194C4 08A8 0005 0022             		bclr	#5,$22(a0)
000194CA 117C 0001 001D             		move.b	#1,$1D(a0)
000194D0 4E75                       		rts	
000194D2                            ; ===========================================================================
000194D2                            
000194D2                            locret_146E6:
000194D2 4E75                       		rts	
000194D4                            ; End of function Sonic_AnglePos
000194D4                            
000194D4                            ; ===========================================================================
000194D4 2428 0008                  		move.l	8(a0),d2
000194D8 3028 0010                  		move.w	$10(a0),d0
000194DC 48C0                       		ext.l	d0
000194DE E180                       		asl.l	#8,d0
000194E0 9480                       		sub.l	d0,d2
000194E2 2142 0008                  		move.l	d2,8(a0)
000194E6 303C 0038                  		move.w	#$38,d0
000194EA 48C0                       		ext.l	d0
000194EC E180                       		asl.l	#8,d0
000194EE 9680                       		sub.l	d0,d3
000194F0 2143 000C                  		move.l	d3,$C(a0)
000194F4 4E75                       		rts	
000194F6                            ; ===========================================================================
000194F6                            
000194F6                            locret_1470A:
000194F6 4E75                       		rts	
000194F8                            ; ===========================================================================
000194F8 2628 000C                  		move.l	$C(a0),d3
000194FC 3028 0012                  		move.w	$12(a0),d0
00019500 0440 0038                  		subi.w	#$38,d0
00019504 3140 0012                  		move.w	d0,$12(a0)
00019508 48C0                       		ext.l	d0
0001950A E180                       		asl.l	#8,d0
0001950C 9680                       		sub.l	d0,d3
0001950E 2143 000C                  		move.l	d3,$C(a0)
00019512 4E75                       		rts	
00019514 4E75                       		rts	
00019516                            ; ===========================================================================
00019516 2428 0008                  		move.l	8(a0),d2
0001951A 2628 000C                  		move.l	$C(a0),d3
0001951E 3028 0010                  		move.w	$10(a0),d0
00019522 48C0                       		ext.l	d0
00019524 E180                       		asl.l	#8,d0
00019526 9480                       		sub.l	d0,d2
00019528 3028 0012                  		move.w	$12(a0),d0
0001952C 48C0                       		ext.l	d0
0001952E E180                       		asl.l	#8,d0
00019530 9680                       		sub.l	d0,d3
00019532 2142 0008                  		move.l	d2,8(a0)
00019536 2143 000C                  		move.l	d3,$C(a0)
0001953A 4E75                       		rts	
0001953C                            
0001953C                            ; ---------------------------------------------------------------------------
0001953C                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001953C                            ; ---------------------------------------------------------------------------
0001953C                            
0001953C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001953C                            
0001953C                            
0001953C                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001953C 1438 F76A                  		move.b	($FFFFF76A).w,d2
00019540 B240                       		cmp.w	d0,d1
00019542 6F00                       		ble.s	loc_1475E
00019544 1438 F768                  		move.b	($FFFFF768).w,d2
00019548 3200                       		move.w	d0,d1
0001954A                            
0001954A                            loc_1475E:
0001954A 0802 0000                  		btst	#0,d2
0001954E 6600                       		bne.s	loc_1476A
00019550 1142 0026                  		move.b	d2,$26(a0)
00019554 4E75                       		rts	
00019556                            ; ===========================================================================
00019556                            
00019556                            loc_1476A:
00019556 1428 0026                  		move.b	$26(a0),d2
0001955A 0602 0020                  		addi.b	#$20,d2
0001955E 0202 00C0                  		andi.b	#$C0,d2
00019562 1142 0026                  		move.b	d2,$26(a0)
00019566 4E75                       		rts	
00019568                            ; End of function Sonic_Angle
00019568                            
00019568                            ; ---------------------------------------------------------------------------
00019568                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00019568                            ; ---------------------------------------------------------------------------
00019568                            
00019568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019568                            
00019568                            
00019568                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00019568 3428 000C                  		move.w	$C(a0),d2
0001956C 3628 0008                  		move.w	8(a0),d3
00019570 7000                       		moveq	#0,d0
00019572 1028 0017                  		move.b	$17(a0),d0
00019576 4880                       		ext.w	d0
00019578 4440                       		neg.w	d0
0001957A D440                       		add.w	d0,d2
0001957C 1028 0016                  		move.b	$16(a0),d0
00019580 4880                       		ext.w	d0
00019582 D640                       		add.w	d0,d3
00019584 49F8 F768                  		lea	($FFFFF768).w,a4
00019588 367C 0010                  		movea.w	#$10,a3
0001958C 3C3C 0000                  		move.w	#0,d6
00019590 7A0D                       		moveq	#$D,d5
00019592 6100 0000                  		bsr.w	FindWall
00019596 3F01                       		move.w	d1,-(sp)
00019598 3428 000C                  		move.w	$C(a0),d2
0001959C 3628 0008                  		move.w	8(a0),d3
000195A0 7000                       		moveq	#0,d0
000195A2 1028 0017                  		move.b	$17(a0),d0
000195A6 4880                       		ext.w	d0
000195A8 D440                       		add.w	d0,d2
000195AA 1028 0016                  		move.b	$16(a0),d0
000195AE 4880                       		ext.w	d0
000195B0 D640                       		add.w	d0,d3
000195B2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000195B6 367C 0010                  		movea.w	#$10,a3
000195BA 3C3C 0000                  		move.w	#0,d6
000195BE 7A0D                       		moveq	#$D,d5
000195C0 6100 0000                  		bsr.w	FindWall
000195C4 301F                       		move.w	(sp)+,d0
000195C6 6100 FF74                  		bsr.w	Sonic_Angle
000195CA 4A41                       		tst.w	d1
000195CC 6700                       		beq.s	locret_147F0
000195CE 6A00                       		bpl.s	loc_147F2
000195D0 0C41 FFF2                  		cmpi.w	#-$E,d1
000195D4 6D00 FF20                  		blt.w	locret_1470A
000195D8 D368 0008                  		add.w	d1,8(a0)
000195DC                            
000195DC                            locret_147F0:
000195DC 4E75                       		rts	
000195DE                            ; ===========================================================================
000195DE                            
000195DE                            loc_147F2:
000195DE 0C41 000E                  		cmpi.w	#$E,d1
000195E2 6E00                       		bgt.s	loc_147FE
000195E4                            
000195E4                            loc_147F8:
000195E4 D368 0008                  		add.w	d1,8(a0)
000195E8 4E75                       		rts	
000195EA                            ; ===========================================================================
000195EA                            
000195EA                            loc_147FE:
000195EA 4A28 0038                  		tst.b	$38(a0)
000195EE 66F4                       		bne.s	loc_147F8
000195F0 08E8 0001 0022             		bset	#1,$22(a0)
000195F6 08A8 0005 0022             		bclr	#5,$22(a0)
000195FC 117C 0001 001D             		move.b	#1,$1D(a0)
00019602 4E75                       		rts	
00019604                            ; End of function Sonic_WalkVertR
00019604                            
00019604                            ; ---------------------------------------------------------------------------
00019604                            ; Subroutine allowing Sonic to walk upside-down
00019604                            ; ---------------------------------------------------------------------------
00019604                            
00019604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019604                            
00019604                            
00019604                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00019604 3428 000C                  		move.w	$C(a0),d2
00019608 3628 0008                  		move.w	8(a0),d3
0001960C 7000                       		moveq	#0,d0
0001960E 1028 0016                  		move.b	$16(a0),d0
00019612 4880                       		ext.w	d0
00019614 9440                       		sub.w	d0,d2
00019616 0A42 000F                  		eori.w	#$F,d2
0001961A 1028 0017                  		move.b	$17(a0),d0
0001961E 4880                       		ext.w	d0
00019620 D640                       		add.w	d0,d3
00019622 49F8 F768                  		lea	($FFFFF768).w,a4
00019626 367C FFF0                  		movea.w	#-$10,a3
0001962A 3C3C 1000                  		move.w	#$1000,d6
0001962E 7A0D                       		moveq	#$D,d5
00019630 6100 0000                  		bsr.w	FindFloor
00019634 3F01                       		move.w	d1,-(sp)
00019636 3428 000C                  		move.w	$C(a0),d2
0001963A 3628 0008                  		move.w	8(a0),d3
0001963E 7000                       		moveq	#0,d0
00019640 1028 0016                  		move.b	$16(a0),d0
00019644 4880                       		ext.w	d0
00019646 9440                       		sub.w	d0,d2
00019648 0A42 000F                  		eori.w	#$F,d2
0001964C 1028 0017                  		move.b	$17(a0),d0
00019650 4880                       		ext.w	d0
00019652 9640                       		sub.w	d0,d3
00019654 49F8 F76A                  		lea	($FFFFF76A).w,a4
00019658 367C FFF0                  		movea.w	#-$10,a3
0001965C 3C3C 1000                  		move.w	#$1000,d6
00019660 7A0D                       		moveq	#$D,d5
00019662 6100 0000                  		bsr.w	FindFloor
00019666 301F                       		move.w	(sp)+,d0
00019668 6100 FED2                  		bsr.w	Sonic_Angle
0001966C 4A41                       		tst.w	d1
0001966E 6700                       		beq.s	locret_14892
00019670 6A00                       		bpl.s	loc_14894
00019672 0C41 FFF2                  		cmpi.w	#-$E,d1
00019676 6D00 FE5A                  		blt.w	locret_146E6
0001967A 9368 000C                  		sub.w	d1,$C(a0)
0001967E                            
0001967E                            locret_14892:
0001967E 4E75                       		rts	
00019680                            ; ===========================================================================
00019680                            
00019680                            loc_14894:
00019680 0C41 000E                  		cmpi.w	#$E,d1
00019684 6E00                       		bgt.s	loc_148A0
00019686                            
00019686                            loc_1489A:
00019686 9368 000C                  		sub.w	d1,$C(a0)
0001968A 4E75                       		rts	
0001968C                            ; ===========================================================================
0001968C                            
0001968C                            loc_148A0:
0001968C 4A28 0038                  		tst.b	$38(a0)
00019690 66F4                       		bne.s	loc_1489A
00019692 08E8 0001 0022             		bset	#1,$22(a0)
00019698 08A8 0005 0022             		bclr	#5,$22(a0)
0001969E 117C 0001 001D             		move.b	#1,$1D(a0)
000196A4 4E75                       		rts	
000196A6                            ; End of function Sonic_WalkCeiling
000196A6                            
000196A6                            ; ---------------------------------------------------------------------------
000196A6                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000196A6                            ; ---------------------------------------------------------------------------
000196A6                            
000196A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000196A6                            
000196A6                            
000196A6                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000196A6 3428 000C                  		move.w	$C(a0),d2
000196AA 3628 0008                  		move.w	8(a0),d3
000196AE 7000                       		moveq	#0,d0
000196B0 1028 0017                  		move.b	$17(a0),d0
000196B4 4880                       		ext.w	d0
000196B6 9440                       		sub.w	d0,d2
000196B8 1028 0016                  		move.b	$16(a0),d0
000196BC 4880                       		ext.w	d0
000196BE 9640                       		sub.w	d0,d3
000196C0 0A43 000F                  		eori.w	#$F,d3
000196C4 49F8 F768                  		lea	($FFFFF768).w,a4
000196C8 367C FFF0                  		movea.w	#-$10,a3
000196CC 3C3C 0800                  		move.w	#$800,d6
000196D0 7A0D                       		moveq	#$D,d5
000196D2 6100 0000                  		bsr.w	FindWall
000196D6 3F01                       		move.w	d1,-(sp)
000196D8 3428 000C                  		move.w	$C(a0),d2
000196DC 3628 0008                  		move.w	8(a0),d3
000196E0 7000                       		moveq	#0,d0
000196E2 1028 0017                  		move.b	$17(a0),d0
000196E6 4880                       		ext.w	d0
000196E8 D440                       		add.w	d0,d2
000196EA 1028 0016                  		move.b	$16(a0),d0
000196EE 4880                       		ext.w	d0
000196F0 9640                       		sub.w	d0,d3
000196F2 0A43 000F                  		eori.w	#$F,d3
000196F6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000196FA 367C FFF0                  		movea.w	#-$10,a3
000196FE 3C3C 0800                  		move.w	#$800,d6
00019702 7A0D                       		moveq	#$D,d5
00019704 6100 0000                  		bsr.w	FindWall
00019708 301F                       		move.w	(sp)+,d0
0001970A 6100 FE30                  		bsr.w	Sonic_Angle
0001970E 4A41                       		tst.w	d1
00019710 6700                       		beq.s	locret_14934
00019712 6A00                       		bpl.s	loc_14936
00019714 0C41 FFF2                  		cmpi.w	#-$E,d1
00019718 6D00 FDDC                  		blt.w	locret_1470A
0001971C 9368 0008                  		sub.w	d1,8(a0)
00019720                            
00019720                            locret_14934:
00019720 4E75                       		rts	
00019722                            ; ===========================================================================
00019722                            
00019722                            loc_14936:
00019722 0C41 000E                  		cmpi.w	#$E,d1
00019726 6E00                       		bgt.s	loc_14942
00019728                            
00019728                            loc_1493C:
00019728 9368 0008                  		sub.w	d1,8(a0)
0001972C 4E75                       		rts	
0001972E                            ; ===========================================================================
0001972E                            
0001972E                            loc_14942:
0001972E 4A28 0038                  		tst.b	$38(a0)
00019732 66F4                       		bne.s	loc_1493C
00019734 08E8 0001 0022             		bset	#1,$22(a0)
0001973A 08A8 0005 0022             		bclr	#5,$22(a0)
00019740 117C 0001 001D             		move.b	#1,$1D(a0)
00019746 4E75                       		rts	
00019748                            ; End of function Sonic_WalkVertL
00019748                            
00019748                            ; ---------------------------------------------------------------------------
00019748                            ; Subroutine to	find which tile	the object is standing on
00019748                            ; ---------------------------------------------------------------------------
00019748                            
00019748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019748                            
00019748                            
00019748                            Floor_ChkTile_LocateBlock:
00019748 43F8 A400                  		lea	($FFFFA400).w,a1
0001974C 1231 0000                  		move.b	(a1,d0.w),d1
00019750 6700                       		beq.s	Floor_ChkTile_EmptyChunk	; if the chunk ID is 0 (empty chunk), branch
00019752 6B00                       		bmi.s	loc_1499A
00019754 5301                       		subq.b	#1,d1		; the empty chunk is not included in the chunk mappings, subtract 1 to read the correct data
00019756 4881                       		ext.w	d1
00019758 EE59                       		ror.w	#7,d1
0001975A 3002                       		move.w	d2,d0
0001975C D040                       		add.w	d0,d0
0001975E 0240 01E0                  		andi.w	#$1E0,d0
00019762 D240                       		add.w	d0,d1
00019764 3003                       		move.w	d3,d0
00019766 E648                       		lsr.w	#3,d0
00019768 0240 001E                  		andi.w	#$1E,d0
0001976C D240                       		add.w	d0,d1
0001976E 4E75                       		rts	
00019770                            ; ---------------------------------------------------------------------------
00019770                            
00019770                            loc_1499A:
00019770 0241 007F                  		andi.w	#$7F,d1
00019774 0828 0006 0001             		btst	#6,1(a0)
0001977A 6700                       		beq.s	loc_149B2
0001977C 5241                       		addq.w	#1,d1
0001977E 0C41 0029                  		cmpi.w	#$29,d1
00019782 6600                       		bne.s	loc_149B2
00019784 323C 0051                  		move.w	#$51,d1
00019788                            
00019788                            loc_149B2:
00019788 5301                       		subq.b	#1,d1
0001978A EE59                       		ror.w	#7,d1
0001978C 3002                       		move.w	d2,d0
0001978E D040                       		add.w	d0,d0
00019790 0240 01E0                  		andi.w	#$1E0,d0
00019794 D240                       		add.w	d0,d1
00019796 3003                       		move.w	d3,d0
00019798 E648                       		lsr.w	#3,d0
0001979A 0240 001E                  		andi.w	#$1E,d0
0001979E D240                       		add.w	d0,d1
000197A0 4E75                       		rts	
000197A2                            ; ---------------------------------------------------------------------------
000197A2                            
000197A2                            Floor_ChkTile_EmptyChunk:
000197A2 43F8 FF00                  		lea	($FFFFFF00).w,a1	; override a1
000197A6 584F                       		addq.w	#4,sp			; pop a stack frame to avoid adding the address of the chunk mappings to a1
000197A8 4E75                       		rts	
000197AA                            
000197AA                            ; ---------------------------------------------------------------------------
000197AA                            ; Subroutine to	find which tile	the object is standing on
000197AA                            ; ---------------------------------------------------------------------------
000197AA                            
000197AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000197AA                            
000197AA                            
000197AA                            Floor_ChkTile:				; XREF: FindFloor; et al
000197AA 3002                       		move.w	d2,d0
000197AC E248                       		lsr.w	#1,d0
000197AE 0240 0380                  		andi.w	#$380,d0
000197B2 3203                       		move.w	d3,d1
000197B4 E049                       		lsr.w	#8,d1
000197B6 0241 007F                  		andi.w	#$7F,d1
000197BA D041                       		add.w	d1,d0
000197BC 4A38 FE10                  		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
000197C0 6700                       		beq.s	@ghz		; if yes, branch
000197C2 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
000197C8 6700                       		beq.s	@ghz		; if yes, branch
000197CA 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w	; are we in Green Hill Zone?
000197D0 6700                       		beq.s	@lz		; if yes, branch
000197D2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; are we in the ending sequence?
000197D8 6700                       		beq.s	@mz		; if yes, branch
000197DA 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w	; are we in Green Hill Zone?
000197E0 6700                       		beq.s	@slz		; if yes, branch
000197E2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; are we in the ending sequence?
000197E8 6700                       		beq.s	@syz		; if yes, branch
000197EA 72FF                       		moveq	#-1,d1
000197EC 6100 FF5A                  		bsr.w	Floor_ChkTile_LocateBlock
000197F0 2241                       		movea.l	d1,a1
000197F2 4E75                       		rts	
000197F4                            ; ---------------------------------------------------------------------------
000197F4                            
000197F4                            @ghz:
000197F4 7200                       		moveq	#0,d1
000197F6 6100 FF50                  		bsr.w	Floor_ChkTile_LocateBlock
000197FA 0681 0000 0000             		add.l	#Blk256_GHZ,d1
00019800 2241                       		movea.l	d1,a1
00019802 4EF9 0000 0000             		jmp ChkTilerts
00019808                            @lz:
00019808 7200                       		moveq	#0,d1
0001980A 6100 FF3C                  		bsr.w	Floor_ChkTile_LocateBlock
0001980E 0681 0000 0000             		add.l	#Blk256_LZ,d1
00019814 2241                       		movea.l	d1,a1
00019816 4EF9 0000 0000             		jmp ChkTilerts
0001981C                            @mz:
0001981C 7200                       		moveq	#0,d1
0001981E 6100 FF28                  		bsr.w	Floor_ChkTile_LocateBlock
00019822 0681 0000 0000             		add.l	#Blk256_MZ,d1
00019828 2241                       		movea.l	d1,a1
0001982A 4EF9 0000 0000             		jmp ChkTilerts
00019830                            @slz:
00019830 7200                       		moveq	#0,d1
00019832 6100 FF14                  		bsr.w	Floor_ChkTile_LocateBlock
00019836 0681 0000 0000             		add.l	#Blk256_SLZ,d1
0001983C 2241                       		movea.l	d1,a1
0001983E 4EF9 0000 0000             		jmp ChkTilerts
00019844                            @syz:
00019844 7200                       		moveq	#0,d1
00019846 6100 FF00                  		bsr.w	Floor_ChkTile_LocateBlock
0001984A 0681 0000 0000             		add.l	#Blk256_SYZ,d1
00019850 2241                       		movea.l	d1,a1
00019852 4EF9 0000 0000             		jmp ChkTilerts
00019858                            ChkTilerts:
00019858 4E75                       		rts
0001985A                            ; End of function Floor_ChkTile
0001985A                            
0001985A                            
0001985A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001985A                            
0001985A                            
0001985A                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001985A 4EBA FF4E                  		jsr	Floor_ChkTile
0001985E 3011                       		move.w	(a1),d0
00019860 3800                       		move.w	d0,d4
00019862 0240 07FF                  		andi.w	#$7FF,d0
00019866 6700                       		beq.s	loc_149DE
00019868 0B04                       		btst	d5,d4
0001986A 6600                       		bne.s	loc_149EC
0001986C                            
0001986C                            loc_149DE:
0001986C D44B                       		add.w	a3,d2
0001986E 6100 0000                  		bsr.w	FindFloor2
00019872 944B                       		sub.w	a3,d2
00019874 0641 0010                  		addi.w	#$10,d1
00019878 4E75                       		rts	
0001987A                            ; ===========================================================================
0001987A                            
0001987A                            loc_149EC:
0001987A 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
0001987E 1032 0000                  		move.b	(a2,d0.w),d0
00019882 0240 00FF                  		andi.w	#$FF,d0
00019886 67E4                       		beq.s	loc_149DE
00019888 45F9 0000 0000             		lea	(AngleMap).l,a2
0001988E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00019892 E948                       		lsl.w	#4,d0
00019894 3203                       		move.w	d3,d1
00019896 0804 000B                  		btst	#$B,d4
0001989A 6700                       		beq.s	loc_14A12
0001989C 4641                       		not.w	d1
0001989E 4414                       		neg.b	(a4)
000198A0                            
000198A0                            loc_14A12:
000198A0 0804 000C                  		btst	#$C,d4
000198A4 6700                       		beq.s	loc_14A22
000198A6 0614 0040                  		addi.b	#$40,(a4)
000198AA 4414                       		neg.b	(a4)
000198AC 0414 0040                  		subi.b	#$40,(a4)
000198B0                            
000198B0                            loc_14A22:
000198B0 0241 000F                  		andi.w	#$F,d1
000198B4 D240                       		add.w	d0,d1
000198B6 45F9 0000 0000             		lea	(CollArray1).l,a2
000198BC 1032 1000                  		move.b	(a2,d1.w),d0
000198C0 4880                       		ext.w	d0
000198C2 BD44                       		eor.w	d6,d4
000198C4 0804 000C                  		btst	#$C,d4
000198C8 6700                       		beq.s	loc_14A3E
000198CA 4440                       		neg.w	d0
000198CC                            
000198CC                            loc_14A3E:
000198CC 4A40                       		tst.w	d0
000198CE 679C                       		beq.s	loc_149DE
000198D0 6B00                       		bmi.s	loc_14A5A
000198D2 0C00 0010                  		cmpi.b	#$10,d0
000198D6 6700                       		beq.s	loc_14A66
000198D8 3202                       		move.w	d2,d1
000198DA 0241 000F                  		andi.w	#$F,d1
000198DE D041                       		add.w	d1,d0
000198E0 323C 000F                  		move.w	#$F,d1
000198E4 9240                       		sub.w	d0,d1
000198E6 4E75                       		rts	
000198E8                            ; ===========================================================================
000198E8                            
000198E8                            loc_14A5A:
000198E8 3202                       		move.w	d2,d1
000198EA 0241 000F                  		andi.w	#$F,d1
000198EE D041                       		add.w	d1,d0
000198F0 6A00 FF7A                  		bpl.w	loc_149DE
000198F4                            
000198F4                            loc_14A66:
000198F4 944B                       		sub.w	a3,d2
000198F6 6100 0000                  		bsr.w	FindFloor2
000198FA D44B                       		add.w	a3,d2
000198FC 0441 0010                  		subi.w	#$10,d1
00019900 4E75                       		rts	
00019902                            ; End of function FindFloor
00019902                            
00019902                            
00019902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019902                            
00019902                            
00019902                            FindFloor2:				; XREF: FindFloor
00019902 6100 FEA6                  		bsr.w	Floor_ChkTile
00019906 3011                       		move.w	(a1),d0
00019908 3800                       		move.w	d0,d4
0001990A 0240 07FF                  		andi.w	#$7FF,d0
0001990E 6700                       		beq.s	loc_14A86
00019910 0B04                       		btst	d5,d4
00019912 6600                       		bne.s	loc_14A94
00019914                            
00019914                            loc_14A86:
00019914 323C 000F                  		move.w	#$F,d1
00019918 3002                       		move.w	d2,d0
0001991A 0240 000F                  		andi.w	#$F,d0
0001991E 9240                       		sub.w	d0,d1
00019920 4E75                       		rts	
00019922                            ; ===========================================================================
00019922                            
00019922                            loc_14A94:
00019922 2478 F796                  		movea.l	($FFFFF796).w,a2
00019926 1032 0000                  		move.b	(a2,d0.w),d0
0001992A 0240 00FF                  		andi.w	#$FF,d0
0001992E 67E4                       		beq.s	loc_14A86
00019930 45F9 0000 0000             		lea	(AngleMap).l,a2
00019936 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001993A E948                       		lsl.w	#4,d0
0001993C 3203                       		move.w	d3,d1
0001993E 0804 000B                  		btst	#$B,d4
00019942 6700                       		beq.s	loc_14ABA
00019944 4641                       		not.w	d1
00019946 4414                       		neg.b	(a4)
00019948                            
00019948                            loc_14ABA:
00019948 0804 000C                  		btst	#$C,d4
0001994C 6700                       		beq.s	loc_14ACA
0001994E 0614 0040                  		addi.b	#$40,(a4)
00019952 4414                       		neg.b	(a4)
00019954 0414 0040                  		subi.b	#$40,(a4)
00019958                            
00019958                            loc_14ACA:
00019958 0241 000F                  		andi.w	#$F,d1
0001995C D240                       		add.w	d0,d1
0001995E 45F9 0000 0000             		lea	(CollArray1).l,a2
00019964 1032 1000                  		move.b	(a2,d1.w),d0
00019968 4880                       		ext.w	d0
0001996A BD44                       		eor.w	d6,d4
0001996C 0804 000C                  		btst	#$C,d4
00019970 6700                       		beq.s	loc_14AE6
00019972 4440                       		neg.w	d0
00019974                            
00019974                            loc_14AE6:
00019974 4A40                       		tst.w	d0
00019976 679C                       		beq.s	loc_14A86
00019978 6B00                       		bmi.s	loc_14AFC
0001997A 3202                       		move.w	d2,d1
0001997C 0241 000F                  		andi.w	#$F,d1
00019980 D041                       		add.w	d1,d0
00019982 323C 000F                  		move.w	#$F,d1
00019986 9240                       		sub.w	d0,d1
00019988 4E75                       		rts	
0001998A                            ; ===========================================================================
0001998A                            
0001998A                            loc_14AFC:
0001998A 3202                       		move.w	d2,d1
0001998C 0241 000F                  		andi.w	#$F,d1
00019990 D041                       		add.w	d1,d0
00019992 6A00 FF80                  		bpl.w	loc_14A86
00019996 4641                       		not.w	d1
00019998 4E75                       		rts	
0001999A                            ; End of function FindFloor2
0001999A                            
0001999A                            
0001999A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001999A                            
0001999A                            
0001999A                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001999A 6100 FE0E                  		bsr.w	Floor_ChkTile
0001999E 3011                       		move.w	(a1),d0
000199A0 3800                       		move.w	d0,d4
000199A2 0240 07FF                  		andi.w	#$7FF,d0
000199A6 6700                       		beq.s	loc_14B1E
000199A8 0B04                       		btst	d5,d4
000199AA 6600                       		bne.s	loc_14B2C
000199AC                            
000199AC                            loc_14B1E:
000199AC D64B                       		add.w	a3,d3
000199AE 6100 0000                  		bsr.w	FindWall2
000199B2 964B                       		sub.w	a3,d3
000199B4 0641 0010                  		addi.w	#$10,d1
000199B8 4E75                       		rts	
000199BA                            ; ===========================================================================
000199BA                            
000199BA                            loc_14B2C:
000199BA 2478 F796                  		movea.l	($FFFFF796).w,a2
000199BE 1032 0000                  		move.b	(a2,d0.w),d0
000199C2 0240 00FF                  		andi.w	#$FF,d0
000199C6 67E4                       		beq.s	loc_14B1E
000199C8 45F9 0000 0000             		lea	(AngleMap).l,a2
000199CE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000199D2 E948                       		lsl.w	#4,d0
000199D4 3202                       		move.w	d2,d1
000199D6 0804 000C                  		btst	#$C,d4
000199DA 6700                       		beq.s	loc_14B5A
000199DC 4641                       		not.w	d1
000199DE 0614 0040                  		addi.b	#$40,(a4)
000199E2 4414                       		neg.b	(a4)
000199E4 0414 0040                  		subi.b	#$40,(a4)
000199E8                            
000199E8                            loc_14B5A:
000199E8 0804 000B                  		btst	#$B,d4
000199EC 6700                       		beq.s	loc_14B62
000199EE 4414                       		neg.b	(a4)
000199F0                            
000199F0                            loc_14B62:
000199F0 0241 000F                  		andi.w	#$F,d1
000199F4 D240                       		add.w	d0,d1
000199F6 45F9 0000 0000             		lea	(CollArray2).l,a2
000199FC 1032 1000                  		move.b	(a2,d1.w),d0
00019A00 4880                       		ext.w	d0
00019A02 BD44                       		eor.w	d6,d4
00019A04 0804 000B                  		btst	#$B,d4
00019A08 6700                       		beq.s	loc_14B7E
00019A0A 4440                       		neg.w	d0
00019A0C                            
00019A0C                            loc_14B7E:
00019A0C 4A40                       		tst.w	d0
00019A0E 679C                       		beq.s	loc_14B1E
00019A10 6B00                       		bmi.s	loc_14B9A
00019A12 0C00 0010                  		cmpi.b	#$10,d0
00019A16 6700                       		beq.s	loc_14BA6
00019A18 3203                       		move.w	d3,d1
00019A1A 0241 000F                  		andi.w	#$F,d1
00019A1E D041                       		add.w	d1,d0
00019A20 323C 000F                  		move.w	#$F,d1
00019A24 9240                       		sub.w	d0,d1
00019A26 4E75                       		rts	
00019A28                            ; ===========================================================================
00019A28                            
00019A28                            loc_14B9A:
00019A28 3203                       		move.w	d3,d1
00019A2A 0241 000F                  		andi.w	#$F,d1
00019A2E D041                       		add.w	d1,d0
00019A30 6A00 FF7A                  		bpl.w	loc_14B1E
00019A34                            
00019A34                            loc_14BA6:
00019A34 964B                       		sub.w	a3,d3
00019A36 6100 0000                  		bsr.w	FindWall2
00019A3A D64B                       		add.w	a3,d3
00019A3C 0441 0010                  		subi.w	#$10,d1
00019A40 4E75                       		rts	
00019A42                            ; End of function FindWall
00019A42                            
00019A42                            
00019A42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A42                            
00019A42                            
00019A42                            FindWall2:				; XREF: FindWall
00019A42 6100 FD66                  		bsr.w	Floor_ChkTile
00019A46 3011                       		move.w	(a1),d0
00019A48 3800                       		move.w	d0,d4
00019A4A 0240 07FF                  		andi.w	#$7FF,d0
00019A4E 6700                       		beq.s	loc_14BC6
00019A50 0B04                       		btst	d5,d4
00019A52 6600                       		bne.s	loc_14BD4
00019A54                            
00019A54                            loc_14BC6:
00019A54 323C 000F                  		move.w	#$F,d1
00019A58 3003                       		move.w	d3,d0
00019A5A 0240 000F                  		andi.w	#$F,d0
00019A5E 9240                       		sub.w	d0,d1
00019A60 4E75                       		rts	
00019A62                            ; ===========================================================================
00019A62                            
00019A62                            loc_14BD4:
00019A62 2478 F796                  		movea.l	($FFFFF796).w,a2
00019A66 1032 0000                  		move.b	(a2,d0.w),d0
00019A6A 0240 00FF                  		andi.w	#$FF,d0
00019A6E 67E4                       		beq.s	loc_14BC6
00019A70 45F9 0000 0000             		lea	(AngleMap).l,a2
00019A76 18B2 0000                  		move.b	(a2,d0.w),(a4)
00019A7A E948                       		lsl.w	#4,d0
00019A7C 3202                       		move.w	d2,d1
00019A7E 0804 000C                  		btst	#$C,d4
00019A82 6700                       		beq.s	loc_14C02
00019A84 4641                       		not.w	d1
00019A86 0614 0040                  		addi.b	#$40,(a4)
00019A8A 4414                       		neg.b	(a4)
00019A8C 0414 0040                  		subi.b	#$40,(a4)
00019A90                            
00019A90                            loc_14C02:
00019A90 0804 000B                  		btst	#$B,d4
00019A94 6700                       		beq.s	loc_14C0A
00019A96 4414                       		neg.b	(a4)
00019A98                            
00019A98                            loc_14C0A:
00019A98 0241 000F                  		andi.w	#$F,d1
00019A9C D240                       		add.w	d0,d1
00019A9E 45F9 0000 0000             		lea	(CollArray2).l,a2
00019AA4 1032 1000                  		move.b	(a2,d1.w),d0
00019AA8 4880                       		ext.w	d0
00019AAA BD44                       		eor.w	d6,d4
00019AAC 0804 000B                  		btst	#$B,d4
00019AB0 6700                       		beq.s	loc_14C26
00019AB2 4440                       		neg.w	d0
00019AB4                            
00019AB4                            loc_14C26:
00019AB4 4A40                       		tst.w	d0
00019AB6 679C                       		beq.s	loc_14BC6
00019AB8 6B00                       		bmi.s	loc_14C3C
00019ABA 3203                       		move.w	d3,d1
00019ABC 0241 000F                  		andi.w	#$F,d1
00019AC0 D041                       		add.w	d1,d0
00019AC2 323C 000F                  		move.w	#$F,d1
00019AC6 9240                       		sub.w	d0,d1
00019AC8 4E75                       		rts	
00019ACA                            ; ===========================================================================
00019ACA                            
00019ACA                            loc_14C3C:
00019ACA 3203                       		move.w	d3,d1
00019ACC 0241 000F                  		andi.w	#$F,d1
00019AD0 D041                       		add.w	d1,d0
00019AD2 6A00 FF80                  		bpl.w	loc_14BC6
00019AD6 4641                       		not.w	d1
00019AD8 4E75                       		rts	
00019ADA                            ; End of function FindWall2
00019ADA                            
00019ADA                            ; ---------------------------------------------------------------------------
00019ADA                            ; Unused floor/wall subroutine - logs something	to do with collision
00019ADA                            ; ---------------------------------------------------------------------------
00019ADA                            
00019ADA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019ADA                            
00019ADA                            
00019ADA                            FloorLog_Unk:				; XREF: Level
00019ADA 4E75                       		rts	
00019ADC                            
00019ADC 43F9 0000 0000             		lea	(CollArray1).l,a1
00019AE2 45F9 0000 0000             		lea	(CollArray1).l,a2
00019AE8 363C 00FF                  		move.w	#$FF,d3
00019AEC                            
00019AEC                            loc_14C5E:
00019AEC 7A10                       		moveq	#$10,d5
00019AEE 343C 000F                  		move.w	#$F,d2
00019AF2                            
00019AF2                            loc_14C64:
00019AF2 7800                       		moveq	#0,d4
00019AF4 323C 000F                  		move.w	#$F,d1
00019AF8                            
00019AF8                            loc_14C6A:
00019AF8 3019                       		move.w	(a1)+,d0
00019AFA EAA8                       		lsr.l	d5,d0
00019AFC D944                       		addx.w	d4,d4
00019AFE 51C9 FFF8                  		dbf	d1,loc_14C6A
00019B02                            
00019B02 34C4                       		move.w	d4,(a2)+
00019B04 92FC 0020                  		suba.w	#$20,a1
00019B08 5345                       		subq.w	#1,d5
00019B0A 51CA FFE6                  		dbf	d2,loc_14C64
00019B0E                            
00019B0E D2FC 0020                  		adda.w	#$20,a1
00019B12 51CB FFD8                  		dbf	d3,loc_14C5E
00019B16                            
00019B16 43F9 0000 0000             		lea	(CollArray1).l,a1
00019B1C 45F9 0000 0000             		lea	(CollArray2).l,a2
00019B22 6100                       		bsr.s	FloorLog_Unk2
00019B24 43F9 0000 0000             		lea	(CollArray1).l,a1
00019B2A 45F9 0000 0000             		lea	(CollArray1).l,a2
00019B30                            
00019B30                            ; End of function FloorLog_Unk
00019B30                            
00019B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B30                            
00019B30                            
00019B30                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00019B30 363C 0FFF                  		move.w	#$FFF,d3
00019B34                            
00019B34                            loc_14CA6:
00019B34 7400                       		moveq	#0,d2
00019B36 323C 000F                  		move.w	#$F,d1
00019B3A 3019                       		move.w	(a1)+,d0
00019B3C 6700                       		beq.s	loc_14CD4
00019B3E 6B00                       		bmi.s	loc_14CBE
00019B40                            
00019B40                            loc_14CB2:
00019B40 E248                       		lsr.w	#1,d0
00019B42 6400                       		bcc.s	loc_14CB8
00019B44 5202                       		addq.b	#1,d2
00019B46                            
00019B46                            loc_14CB8:
00019B46 51C9 FFF8                  		dbf	d1,loc_14CB2
00019B4A                            
00019B4A 6000                       		bra.s	loc_14CD6
00019B4C                            ; ===========================================================================
00019B4C                            
00019B4C                            loc_14CBE:
00019B4C 0C40 FFFF                  		cmpi.w	#-1,d0
00019B50 6700                       		beq.s	loc_14CD0
00019B52                            
00019B52                            loc_14CC4:
00019B52 E348                       		lsl.w	#1,d0
00019B54 6400                       		bcc.s	loc_14CCA
00019B56 5302                       		subq.b	#1,d2
00019B58                            
00019B58                            loc_14CCA:
00019B58 51C9 FFF8                  		dbf	d1,loc_14CC4
00019B5C                            
00019B5C 6000                       		bra.s	loc_14CD6
00019B5E                            ; ===========================================================================
00019B5E                            
00019B5E                            loc_14CD0:
00019B5E 303C 0010                  		move.w	#$10,d0
00019B62                            
00019B62                            loc_14CD4:
00019B62 3400                       		move.w	d0,d2
00019B64                            
00019B64                            loc_14CD6:
00019B64 14C2                       		move.b	d2,(a2)+
00019B66 51CB FFCC                  		dbf	d3,loc_14CA6
00019B6A                            
00019B6A 4E75                       		rts	
00019B6C                            
00019B6C                            ; End of function FloorLog_Unk2
00019B6C                            
00019B6C                            
00019B6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B6C                            
00019B6C                            
00019B6C                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00019B6C 2628 0008                  		move.l	8(a0),d3
00019B70 2428 000C                  		move.l	$C(a0),d2
00019B74 3228 0010                  		move.w	$10(a0),d1
00019B78 48C1                       		ext.l	d1
00019B7A E181                       		asl.l	#8,d1
00019B7C D681                       		add.l	d1,d3
00019B7E 3228 0012                  		move.w	$12(a0),d1
00019B82 48C1                       		ext.l	d1
00019B84 E181                       		asl.l	#8,d1
00019B86 D481                       		add.l	d1,d2
00019B88 4842                       		swap	d2
00019B8A 4843                       		swap	d3
00019B8C 11C0 F768                  		move.b	d0,($FFFFF768).w
00019B90 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00019B94 1200                       		move.b	d0,d1
00019B96 0600 0020                  		addi.b	#$20,d0
00019B9A 6A00                       		bpl.s	loc_14D1A
00019B9C 1001                       		move.b	d1,d0
00019B9E 6A00                       		bpl.s	loc_14D14
00019BA0 5300                       		subq.b	#1,d0
00019BA2                            
00019BA2                            loc_14D14:
00019BA2 0600 0020                  		addi.b	#$20,d0
00019BA6 6000                       		bra.s	loc_14D24
00019BA8                            ; ===========================================================================
00019BA8                            
00019BA8                            loc_14D1A:
00019BA8 1001                       		move.b	d1,d0
00019BAA 6A00                       		bpl.s	loc_14D20
00019BAC 5200                       		addq.b	#1,d0
00019BAE                            
00019BAE                            loc_14D20:
00019BAE 0600 001F                  		addi.b	#$1F,d0
00019BB2                            
00019BB2                            loc_14D24:
00019BB2 0200 00C0                  		andi.b	#$C0,d0
00019BB6 6700 0000                  		beq.w	loc_14DF0
00019BBA 0C00 0080                  		cmpi.b	#$80,d0
00019BBE 6700 0000                  		beq.w	loc_14F7C
00019BC2 0201 0038                  		andi.b	#$38,d1
00019BC6 6600                       		bne.s	loc_14D3C
00019BC8 5042                       		addq.w	#8,d2
00019BCA                            
00019BCA                            loc_14D3C:
00019BCA 0C00 0040                  		cmpi.b	#$40,d0
00019BCE 6700 0000                  		beq.w	loc_1504A
00019BD2 6000 0000                  		bra.w	loc_14EBC
00019BD6                            
00019BD6                            ; End of function Sonic_WalkSpeed
00019BD6                            
00019BD6                            
00019BD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019BD6                            
00019BD6                            
00019BD6                            sub_14D48:				; XREF: Sonic_Jump
00019BD6 11C0 F768                  		move.b	d0,($FFFFF768).w
00019BDA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00019BDE 0600 0020                  		addi.b	#$20,d0
00019BE2 0200 00C0                  		andi.b	#$C0,d0
00019BE6 0C00 0040                  		cmpi.b	#$40,d0
00019BEA 6700 0000                  		beq.w	loc_14FD6
00019BEE 0C00 0080                  		cmpi.b	#$80,d0
00019BF2 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00019BF6 0C00 00C0                  		cmpi.b	#$C0,d0
00019BFA 6700 0000                  		beq.w	sub_14E50
00019BFE                            
00019BFE                            ; End of function sub_14D48
00019BFE                            
00019BFE                            ; ---------------------------------------------------------------------------
00019BFE                            ; Subroutine to	make Sonic land	on the floor after jumping
00019BFE                            ; ---------------------------------------------------------------------------
00019BFE                            
00019BFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019BFE                            
00019BFE                            
00019BFE                            Sonic_HitFloor:				; XREF: Sonic_Floor
00019BFE 3428 000C                  		move.w	$C(a0),d2
00019C02 3628 0008                  		move.w	8(a0),d3
00019C06 7000                       		moveq	#0,d0
00019C08 1028 0016                  		move.b	$16(a0),d0
00019C0C 4880                       		ext.w	d0
00019C0E D440                       		add.w	d0,d2
00019C10 1028 0017                  		move.b	$17(a0),d0
00019C14 4880                       		ext.w	d0
00019C16 D640                       		add.w	d0,d3
00019C18 49F8 F768                  		lea	($FFFFF768).w,a4
00019C1C 367C 0010                  		movea.w	#$10,a3
00019C20 3C3C 0000                  		move.w	#0,d6
00019C24 7A0D                       		moveq	#$D,d5
00019C26 6100 FC32                  		bsr.w	FindFloor
00019C2A 3F01                       		move.w	d1,-(sp)
00019C2C 3428 000C                  		move.w	$C(a0),d2
00019C30 3628 0008                  		move.w	8(a0),d3
00019C34 7000                       		moveq	#0,d0
00019C36 1028 0016                  		move.b	$16(a0),d0
00019C3A 4880                       		ext.w	d0
00019C3C D440                       		add.w	d0,d2
00019C3E 1028 0017                  		move.b	$17(a0),d0
00019C42 4880                       		ext.w	d0
00019C44 9640                       		sub.w	d0,d3
00019C46 49F8 F76A                  		lea	($FFFFF76A).w,a4
00019C4A 367C 0010                  		movea.w	#$10,a3
00019C4E 3C3C 0000                  		move.w	#0,d6
00019C52 7A0D                       		moveq	#$D,d5
00019C54 6100 FC04                  		bsr.w	FindFloor
00019C58 301F                       		move.w	(sp)+,d0
00019C5A 143C 0000                  		move.b	#0,d2
00019C5E                            
00019C5E                            loc_14DD0:
00019C5E 1638 F76A                  		move.b	($FFFFF76A).w,d3
00019C62 B240                       		cmp.w	d0,d1
00019C64 6F00                       		ble.s	loc_14DDE
00019C66 1638 F768                  		move.b	($FFFFF768).w,d3
00019C6A C141                       		exg	d0,d1
00019C6C                            
00019C6C                            loc_14DDE:
00019C6C 0803 0000                  		btst	#0,d3
00019C70 6700                       		beq.s	locret_14DE6
00019C72 1602                       		move.b	d2,d3
00019C74                            
00019C74                            locret_14DE6:
00019C74 4E75                       		rts	
00019C76                            
00019C76                            ; End of function Sonic_HitFloor
00019C76                            
00019C76                            ; ===========================================================================
00019C76 3428 000C                  		move.w	$C(a0),d2
00019C7A 3628 0008                  		move.w	8(a0),d3
00019C7E                            
00019C7E                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00019C7E 0642 000A                  		addi.w	#$A,d2
00019C82 49F8 F768                  		lea	($FFFFF768).w,a4
00019C86 367C 0010                  		movea.w	#$10,a3
00019C8A 3C3C 0000                  		move.w	#0,d6
00019C8E 7A0E                       		moveq	#$E,d5
00019C90 6100 FBC8                  		bsr.w	FindFloor
00019C94 143C 0000                  		move.b	#0,d2
00019C98                            
00019C98                            loc_14E0A:				; XREF: sub_14EB4
00019C98 1638 F768                  		move.b	($FFFFF768).w,d3
00019C9C 0803 0000                  		btst	#0,d3
00019CA0 6700                       		beq.s	locret_14E16
00019CA2 1602                       		move.b	d2,d3
00019CA4                            
00019CA4                            locret_14E16:
00019CA4 4E75                       		rts	
00019CA6                            
00019CA6                            ; ---------------------------------------------------------------------------
00019CA6                            ; Subroutine allowing objects to interact with the floor
00019CA6                            ; ---------------------------------------------------------------------------
00019CA6                            
00019CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019CA6                            
00019CA6                            
00019CA6                            ObjHitFloor:
00019CA6 3628 0008                  		move.w	8(a0),d3
00019CAA                            
00019CAA                            ; End of function ObjHitFloor
00019CAA                            
00019CAA                            
00019CAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019CAA                            
00019CAA                            
00019CAA                            ObjHitFloor2:
00019CAA 3428 000C                  		move.w	$C(a0),d2
00019CAE 7000                       		moveq	#0,d0
00019CB0 1028 0016                  		move.b	$16(a0),d0
00019CB4 4880                       		ext.w	d0
00019CB6 D440                       		add.w	d0,d2
00019CB8 49F8 F768                  		lea	($FFFFF768).w,a4
00019CBC 18BC 0000                  		move.b	#0,(a4)
00019CC0 367C 0010                  		movea.w	#$10,a3
00019CC4 3C3C 0000                  		move.w	#0,d6
00019CC8 7A0D                       		moveq	#$D,d5
00019CCA 6100 FB8E                  		bsr.w	FindFloor
00019CCE 1638 F768                  		move.b	($FFFFF768).w,d3
00019CD2 0803 0000                  		btst	#0,d3
00019CD6 6700                       		beq.s	locret_14E4E
00019CD8 163C 0000                  		move.b	#0,d3
00019CDC                            
00019CDC                            locret_14E4E:
00019CDC 4E75                       		rts	
00019CDE                            ; End of function ObjHitFloor2
00019CDE                            
00019CDE                            
00019CDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019CDE                            
00019CDE                            
00019CDE                            sub_14E50:				; XREF: sub_14D48
00019CDE 3428 000C                  		move.w	$C(a0),d2
00019CE2 3628 0008                  		move.w	8(a0),d3
00019CE6 7000                       		moveq	#0,d0
00019CE8 1028 0017                  		move.b	$17(a0),d0
00019CEC 4880                       		ext.w	d0
00019CEE 9440                       		sub.w	d0,d2
00019CF0 1028 0016                  		move.b	$16(a0),d0
00019CF4 4880                       		ext.w	d0
00019CF6 D640                       		add.w	d0,d3
00019CF8 49F8 F768                  		lea	($FFFFF768).w,a4
00019CFC 367C 0010                  		movea.w	#$10,a3
00019D00 3C3C 0000                  		move.w	#0,d6
00019D04 7A0E                       		moveq	#$E,d5
00019D06 6100 FC92                  		bsr.w	FindWall
00019D0A 3F01                       		move.w	d1,-(sp)
00019D0C 3428 000C                  		move.w	$C(a0),d2
00019D10 3628 0008                  		move.w	8(a0),d3
00019D14 7000                       		moveq	#0,d0
00019D16 1028 0017                  		move.b	$17(a0),d0
00019D1A 4880                       		ext.w	d0
00019D1C D440                       		add.w	d0,d2
00019D1E 1028 0016                  		move.b	$16(a0),d0
00019D22 4880                       		ext.w	d0
00019D24 D640                       		add.w	d0,d3
00019D26 49F8 F76A                  		lea	($FFFFF76A).w,a4
00019D2A 367C 0010                  		movea.w	#$10,a3
00019D2E 3C3C 0000                  		move.w	#0,d6
00019D32 7A0E                       		moveq	#$E,d5
00019D34 6100 FC64                  		bsr.w	FindWall
00019D38 301F                       		move.w	(sp)+,d0
00019D3A 143C 00C0                  		move.b	#-$40,d2
00019D3E 6000 FF1E                  		bra.w	loc_14DD0
00019D42                            
00019D42                            ; End of function sub_14E50
00019D42                            
00019D42                            
00019D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D42                            
00019D42                            
00019D42                            sub_14EB4:				; XREF: Sonic_Floor
00019D42 3428 000C                  		move.w	$C(a0),d2
00019D46 3628 0008                  		move.w	8(a0),d3
00019D4A                            
00019D4A                            loc_14EBC:
00019D4A 0643 000A                  		addi.w	#$A,d3
00019D4E 49F8 F768                  		lea	($FFFFF768).w,a4
00019D52 367C 0010                  		movea.w	#$10,a3
00019D56 3C3C 0000                  		move.w	#0,d6
00019D5A 7A0E                       		moveq	#$E,d5
00019D5C 6100 FC3C                  		bsr.w	FindWall
00019D60 143C 00C0                  		move.b	#-$40,d2
00019D64 6000 FF32                  		bra.w	loc_14E0A
00019D68                            
00019D68                            ; End of function sub_14EB4
00019D68                            
00019D68                            ; ---------------------------------------------------------------------------
00019D68                            ; Subroutine to	detect when an object hits a wall to its right
00019D68                            ; ---------------------------------------------------------------------------
00019D68                            
00019D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D68                            
00019D68                            
00019D68                            ObjHitWallRight:
00019D68 D668 0008                  		add.w	8(a0),d3
00019D6C 3428 000C                  		move.w	$C(a0),d2
00019D70 49F8 F768                  		lea	($FFFFF768).w,a4
00019D74 18BC 0000                  		move.b	#0,(a4)
00019D78 367C 0010                  		movea.w	#$10,a3
00019D7C 3C3C 0000                  		move.w	#0,d6
00019D80 7A0E                       		moveq	#$E,d5
00019D82 6100 FC16                  		bsr.w	FindWall
00019D86 1638 F768                  		move.b	($FFFFF768).w,d3
00019D8A 0803 0000                  		btst	#0,d3
00019D8E 6700                       		beq.s	locret_14F06
00019D90 163C 00C0                  		move.b	#-$40,d3
00019D94                            
00019D94                            locret_14F06:
00019D94 4E75                       		rts	
00019D96                            
00019D96                            ; End of function ObjHitWallRight
00019D96                            
00019D96                            ; ---------------------------------------------------------------------------
00019D96                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00019D96                            ; touches them
00019D96                            ; ---------------------------------------------------------------------------
00019D96                            
00019D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D96                            
00019D96                            
00019D96                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00019D96 3428 000C                  		move.w	$C(a0),d2
00019D9A 3628 0008                  		move.w	8(a0),d3
00019D9E 7000                       		moveq	#0,d0
00019DA0 1028 0016                  		move.b	$16(a0),d0
00019DA4 4880                       		ext.w	d0
00019DA6 9440                       		sub.w	d0,d2
00019DA8 0A42 000F                  		eori.w	#$F,d2
00019DAC 1028 0017                  		move.b	$17(a0),d0
00019DB0 4880                       		ext.w	d0
00019DB2 D640                       		add.w	d0,d3
00019DB4 49F8 F768                  		lea	($FFFFF768).w,a4
00019DB8 367C FFF0                  		movea.w	#-$10,a3
00019DBC 3C3C 1000                  		move.w	#$1000,d6
00019DC0 7A0E                       		moveq	#$E,d5
00019DC2 6100 FA96                  		bsr.w	FindFloor
00019DC6 3F01                       		move.w	d1,-(sp)
00019DC8 3428 000C                  		move.w	$C(a0),d2
00019DCC 3628 0008                  		move.w	8(a0),d3
00019DD0 7000                       		moveq	#0,d0
00019DD2 1028 0016                  		move.b	$16(a0),d0
00019DD6 4880                       		ext.w	d0
00019DD8 9440                       		sub.w	d0,d2
00019DDA 0A42 000F                  		eori.w	#$F,d2
00019DDE 1028 0017                  		move.b	$17(a0),d0
00019DE2 4880                       		ext.w	d0
00019DE4 9640                       		sub.w	d0,d3
00019DE6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00019DEA 367C FFF0                  		movea.w	#-$10,a3
00019DEE 3C3C 1000                  		move.w	#$1000,d6
00019DF2 7A0E                       		moveq	#$E,d5
00019DF4 6100 FA64                  		bsr.w	FindFloor
00019DF8 301F                       		move.w	(sp)+,d0
00019DFA 143C 0080                  		move.b	#-$80,d2
00019DFE 6000 FE5E                  		bra.w	loc_14DD0
00019E02                            ; End of function Sonic_DontRunOnWalls
00019E02                            
00019E02                            ; ===========================================================================
00019E02 3428 000C                  		move.w	$C(a0),d2
00019E06 3628 0008                  		move.w	8(a0),d3
00019E0A                            
00019E0A                            loc_14F7C:
00019E0A 0442 000A                  		subi.w	#$A,d2
00019E0E 0A42 000F                  		eori.w	#$F,d2
00019E12 49F8 F768                  		lea	($FFFFF768).w,a4
00019E16 367C FFF0                  		movea.w	#-$10,a3
00019E1A 3C3C 1000                  		move.w	#$1000,d6
00019E1E 7A0E                       		moveq	#$E,d5
00019E20 6100 FA38                  		bsr.w	FindFloor
00019E24 143C 0080                  		move.b	#-$80,d2
00019E28 6000 FE6E                  		bra.w	loc_14E0A
00019E2C                            
00019E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019E2C                            
00019E2C                            
00019E2C                            ObjHitCeiling:
00019E2C 3428 000C                  		move.w	$C(a0),d2
00019E30 3628 0008                  		move.w	8(a0),d3
00019E34 7000                       		moveq	#0,d0
00019E36 1028 0016                  		move.b	$16(a0),d0
00019E3A 4880                       		ext.w	d0
00019E3C 9440                       		sub.w	d0,d2
00019E3E 0A42 000F                  		eori.w	#$F,d2
00019E42 49F8 F768                  		lea	($FFFFF768).w,a4
00019E46 367C FFF0                  		movea.w	#-$10,a3
00019E4A 3C3C 1000                  		move.w	#$1000,d6
00019E4E 7A0E                       		moveq	#$E,d5
00019E50 6100 FA08                  		bsr.w	FindFloor
00019E54 1638 F768                  		move.b	($FFFFF768).w,d3
00019E58 0803 0000                  		btst	#0,d3
00019E5C 6700                       		beq.s	locret_14FD4
00019E5E 163C 0080                  		move.b	#-$80,d3
00019E62                            
00019E62                            locret_14FD4:
00019E62 4E75                       		rts	
00019E64                            ; End of function ObjHitCeiling
00019E64                            
00019E64                            ; ===========================================================================
00019E64                            
00019E64                            loc_14FD6:				; XREF: sub_14D48
00019E64 3428 000C                  		move.w	$C(a0),d2
00019E68 3628 0008                  		move.w	8(a0),d3
00019E6C 7000                       		moveq	#0,d0
00019E6E 1028 0017                  		move.b	$17(a0),d0
00019E72 4880                       		ext.w	d0
00019E74 9440                       		sub.w	d0,d2
00019E76 1028 0016                  		move.b	$16(a0),d0
00019E7A 4880                       		ext.w	d0
00019E7C 9640                       		sub.w	d0,d3
00019E7E 0A43 000F                  		eori.w	#$F,d3
00019E82 49F8 F768                  		lea	($FFFFF768).w,a4
00019E86 367C FFF0                  		movea.w	#-$10,a3
00019E8A 3C3C 0800                  		move.w	#$800,d6
00019E8E 7A0E                       		moveq	#$E,d5
00019E90 6100 FB08                  		bsr.w	FindWall
00019E94 3F01                       		move.w	d1,-(sp)
00019E96 3428 000C                  		move.w	$C(a0),d2
00019E9A 3628 0008                  		move.w	8(a0),d3
00019E9E 7000                       		moveq	#0,d0
00019EA0 1028 0017                  		move.b	$17(a0),d0
00019EA4 4880                       		ext.w	d0
00019EA6 D440                       		add.w	d0,d2
00019EA8 1028 0016                  		move.b	$16(a0),d0
00019EAC 4880                       		ext.w	d0
00019EAE 9640                       		sub.w	d0,d3
00019EB0 0A43 000F                  		eori.w	#$F,d3
00019EB4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00019EB8 367C FFF0                  		movea.w	#-$10,a3
00019EBC 3C3C 0800                  		move.w	#$800,d6
00019EC0 7A0E                       		moveq	#$E,d5
00019EC2 6100 FAD6                  		bsr.w	FindWall
00019EC6 301F                       		move.w	(sp)+,d0
00019EC8 143C 0040                  		move.b	#$40,d2
00019ECC 6000 FD90                  		bra.w	loc_14DD0
00019ED0                            
00019ED0                            ; ---------------------------------------------------------------------------
00019ED0                            ; Subroutine to	stop Sonic when	he jumps at a wall
00019ED0                            ; ---------------------------------------------------------------------------
00019ED0                            
00019ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019ED0                            
00019ED0                            
00019ED0                            Sonic_HitWall:				; XREF: Sonic_Floor
00019ED0 3428 000C                  		move.w	$C(a0),d2
00019ED4 3628 0008                  		move.w	8(a0),d3
00019ED8                            
00019ED8                            loc_1504A:
00019ED8 0443 000A                  		subi.w	#$A,d3
00019EDC 0A43 000F                  		eori.w	#$F,d3
00019EE0 49F8 F768                  		lea	($FFFFF768).w,a4
00019EE4 367C FFF0                  		movea.w	#-$10,a3
00019EE8 3C3C 0800                  		move.w	#$800,d6
00019EEC 7A0E                       		moveq	#$E,d5
00019EEE 6100 FAAA                  		bsr.w	FindWall
00019EF2 143C 0040                  		move.b	#$40,d2
00019EF6 6000 FDA0                  		bra.w	loc_14E0A
00019EFA                            ; End of function Sonic_HitWall
00019EFA                            
00019EFA                            ; ---------------------------------------------------------------------------
00019EFA                            ; Subroutine to	detect when an object hits a wall to its left
00019EFA                            ; ---------------------------------------------------------------------------
00019EFA                            
00019EFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019EFA                            
00019EFA                            
00019EFA                            ObjHitWallLeft:
00019EFA D668 0008                  		add.w	8(a0),d3
00019EFE 3428 000C                  		move.w	$C(a0),d2
00019F02 49F8 F768                  		lea	($FFFFF768).w,a4
00019F06 18BC 0000                  		move.b	#0,(a4)
00019F0A 367C FFF0                  		movea.w	#-$10,a3
00019F0E 3C3C 0800                  		move.w	#$800,d6
00019F12 7A0E                       		moveq	#$E,d5
00019F14 6100 FA84                  		bsr.w	FindWall
00019F18 1638 F768                  		move.b	($FFFFF768).w,d3
00019F1C 0803 0000                  		btst	#0,d3
00019F20 6700                       		beq.s	locret_15098
00019F22 163C 0040                  		move.b	#$40,d3
00019F26                            
00019F26                            locret_15098:
00019F26 4E75                       		rts	
00019F28                            ; End of function ObjHitWallLeft
00019F28                            
00019F28                            ; ===========================================================================
00019F28                            ; ---------------------------------------------------------------------------
00019F28                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00019F28                            ; ---------------------------------------------------------------------------
00019F28                            
00019F28                            Obj66:					; XREF: Obj_Index
00019F28 7000                       		moveq	#0,d0
00019F2A 1028 0024                  		move.b	$24(a0),d0
00019F2E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00019F32 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00019F36                            ; ===========================================================================
00019F36 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00019F38 0000                       		dc.w Obj66_Action-Obj66_Index
00019F3A 0000                       		dc.w Obj66_Display-Obj66_Index
00019F3C 0000                       		dc.w Obj66_Release-Obj66_Index
00019F3E                            ; ===========================================================================
00019F3E                            
00019F3E                            Obj66_Main:				; XREF: Obj66_Index
00019F3E 5428 0024                  		addq.b	#2,$24(a0)
00019F42 323C 0001                  		move.w	#1,d1
00019F46 2248                       		movea.l	a0,a1
00019F48 6000                       		bra.s	Obj66_MakeItem
00019F4A                            ; ===========================================================================
00019F4A                            
00019F4A                            Obj66_Loop:
00019F4A 4EB9 0001 0E72             		jsr	SingleObjLoad
00019F50 6600                       		bne.s	loc_150FE
00019F52 12BC 0066                  		move.b	#$66,0(a1)
00019F56 5829 0024                  		addq.b	#4,$24(a1)
00019F5A 3368 0008 0008             		move.w	8(a0),8(a1)
00019F60 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019F66 137C 0003 0018             		move.b	#3,$18(a1)
00019F6C 137C 0010 001A             		move.b	#$10,$1A(a1)
00019F72                            
00019F72                            Obj66_MakeItem:				; XREF: Obj66_Main
00019F72 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00019F7A 337C 4348 0002             		move.w	#$4348,2(a1)
00019F80 0029 0004 0001             		ori.b	#4,1(a1)
00019F86 137C 0038 0019             		move.b	#$38,$19(a1)
00019F8C                            
00019F8C                            loc_150FE:
00019F8C 51C9 FFBC                  		dbf	d1,Obj66_Loop
00019F90                            
00019F90 117C 0030 0019             		move.b	#$30,$19(a0)
00019F96 117C 0004 0018             		move.b	#4,$18(a0)
00019F9C 317C 003C 0030             		move.w	#$3C,$30(a0)
00019FA2 117C 0001 0034             		move.b	#1,$34(a0)
00019FA8 1168 0028 0038             		move.b	$28(a0),$38(a0)
00019FAE                            
00019FAE                            Obj66_Action:				; XREF: Obj66_Index
00019FAE 6100 0000                  		bsr.w	Obj66_ChkSwitch
00019FB2 4A28 0001                  		tst.b	1(a0)
00019FB6 6A00 0000                  		bpl.w	Obj66_Display
00019FBA 323C 0030                  		move.w	#$30,d1
00019FBE 3401                       		move.w	d1,d2
00019FC0 3602                       		move.w	d2,d3
00019FC2 5243                       		addq.w	#1,d3
00019FC4 3828 0008                  		move.w	8(a0),d4
00019FC8 6100 8E12                  		bsr.w	SolidObject
00019FCC 0828 0005 0022             		btst	#5,$22(a0)
00019FD2 6700 0000                  		beq.w	Obj66_Display
00019FD6 43F8 D000                  		lea	($FFFFD000).w,a1
00019FDA 720E                       		moveq	#$E,d1
00019FDC 3029 0008                  		move.w	8(a1),d0
00019FE0 B068 0008                  		cmp.w	8(a0),d0
00019FE4 6500                       		bcs.s	Obj66_GrabSonic
00019FE6 7207                       		moveq	#7,d1
00019FE8                            
00019FE8                            Obj66_GrabSonic:
00019FE8 B228 001A                  		cmp.b	$1A(a0),d1
00019FEC 6600                       		bne.s	Obj66_Display
00019FEE 1141 0032                  		move.b	d1,$32(a0)
00019FF2 5828 0024                  		addq.b	#4,$24(a0)
00019FF6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00019FFC 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
0001A002 337C 0800 0014             		move.w	#$800,$14(a1)
0001A008 337C 0000 0010             		move.w	#0,$10(a1)
0001A00E 337C 0000 0012             		move.w	#0,$12(a1)
0001A014 08A8 0005 0022             		bclr	#5,$22(a0)
0001A01A 08A9 0005 0022             		bclr	#5,$22(a1)
0001A020 08E9 0001 0022             		bset	#1,$22(a1)
0001A026 3429 0008                  		move.w	8(a1),d2
0001A02A 3629 000C                  		move.w	$C(a1),d3
0001A02E 6100 0000                  		bsr.w	Obj66_ChgPos
0001A032 D569 0008                  		add.w	d2,8(a1)
0001A036 D769 000C                  		add.w	d3,$C(a1)
0001A03A E0E9 0008                  		asr	8(a1)
0001A03E E0E9 000C                  		asr	$C(a1)
0001A042                            
0001A042                            Obj66_Display:				; XREF: Obj66_Index
0001A042 6000 8A70                  		bra.w	MarkObjGone
0001A046                            ; ===========================================================================
0001A046                            
0001A046                            Obj66_Release:				; XREF: Obj66_Index
0001A046 1028 001A                  		move.b	$1A(a0),d0
0001A04A 0C00 0004                  		cmpi.b	#4,d0
0001A04E 6700                       		beq.s	loc_151C8
0001A050 0C00 0007                  		cmpi.b	#7,d0
0001A054 6600                       		bne.s	loc_151F8
0001A056                            
0001A056                            loc_151C8:
0001A056 B028 0032                  		cmp.b	$32(a0),d0
0001A05A 6700                       		beq.s	loc_151F8
0001A05C 43F8 D000                  		lea	($FFFFD000).w,a1
0001A060 337C 0000 0010             		move.w	#0,$10(a1)
0001A066 337C 0800 0012             		move.w	#$800,$12(a1)
0001A06C 0C00 0004                  		cmpi.b	#4,d0
0001A070 6700                       		beq.s	loc_151F0
0001A072 337C 0800 0010             		move.w	#$800,$10(a1)
0001A078 337C 0800 0012             		move.w	#$800,$12(a1)
0001A07E                            
0001A07E                            loc_151F0:
0001A07E 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
0001A082 5928 0024                  		subq.b	#4,$24(a0)
0001A086                            
0001A086                            loc_151F8:
0001A086 6100                       		bsr.s	Obj66_ChkSwitch
0001A088 6100                       		bsr.s	Obj66_ChgPos
0001A08A 6000 8A28                  		bra.w	MarkObjGone
0001A08E                            
0001A08E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A08E                            
0001A08E                            
0001A08E                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001A08E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001A092 7000                       		moveq	#0,d0
0001A094 1028 0038                  		move.b	$38(a0),d0
0001A098 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001A09E 6700                       		beq.s	loc_15224	; if not, branch
0001A0A0 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001A0A4 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001A0A6 4428 0034                  		neg.b	$34(a0)
0001A0AA 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
0001A0B0 6000                       		bra.s	Obj66_Animate
0001A0B2                            ; ===========================================================================
0001A0B2                            
0001A0B2                            loc_15224:
0001A0B2 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001A0B6                            
0001A0B6                            Obj66_Animate:
0001A0B6 5328 001E                  		subq.b	#1,$1E(a0)
0001A0BA 6A00                       		bpl.s	locret_15246
0001A0BC 117C 0007 001E             		move.b	#7,$1E(a0)
0001A0C2 1228 0034                  		move.b	$34(a0),d1
0001A0C6 1028 001A                  		move.b	$1A(a0),d0
0001A0CA D001                       		add.b	d1,d0
0001A0CC 0200 000F                  		andi.b	#$F,d0
0001A0D0 1140 001A                  		move.b	d0,$1A(a0)
0001A0D4                            
0001A0D4                            locret_15246:
0001A0D4 4E75                       		rts	
0001A0D6                            ; End of function Obj66_ChkSwitch
0001A0D6                            
0001A0D6                            
0001A0D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A0D6                            
0001A0D6                            
0001A0D6                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0001A0D6 43F8 D000                  		lea	($FFFFD000).w,a1
0001A0DA 7000                       		moveq	#0,d0
0001A0DC 1028 001A                  		move.b	$1A(a0),d0
0001A0E0 D040                       		add.w	d0,d0
0001A0E2 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0001A0E6 101A                       		move.b	(a2)+,d0
0001A0E8 4880                       		ext.w	d0
0001A0EA D068 0008                  		add.w	8(a0),d0
0001A0EE 3340 0008                  		move.w	d0,8(a1)
0001A0F2 101A                       		move.b	(a2)+,d0
0001A0F4 4880                       		ext.w	d0
0001A0F6 D068 000C                  		add.w	$C(a0),d0
0001A0FA 3340 000C                  		move.w	d0,$C(a1)
0001A0FE 4E75                       		rts	
0001A100                            ; End of function Obj66_ChgPos
0001A100                            
0001A100                            ; ===========================================================================
0001A100 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001A104 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
0001A108 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001A10C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001A110 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001A114 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
0001A118 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001A11C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001A120                            ; ---------------------------------------------------------------------------
0001A120                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001A120                            ; ---------------------------------------------------------------------------
0001A120                            Map_obj66:
0001A120                            	include "_maps\obj66.asm"
0001A120                            ; ---------------------------------------------------------------------------
0001A120                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001A120                            ; ---------------------------------------------------------------------------
0001A120 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0001A124 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
0001A128 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001A12C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001A130 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
0001A134 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
0001A138 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001A13C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001A140 0000                       		dc.w byte_154A4-Map_obj66
0001A142 06                         byte_152B4:	dc.b 6
0001A143 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
0001A148 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001A14D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001A152 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001A157 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001A15C 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001A161 06                         byte_152D3:	dc.b 6
0001A162 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001A167 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001A16C F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001A171 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001A176 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001A17B 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001A180 06                         byte_152F2:	dc.b 6
0001A181 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001A186 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001A18B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001A190 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001A195 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001A19A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001A19F 06                         byte_15311:	dc.b 6
0001A1A0 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001A1A5 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001A1AA 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001A1AF 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001A1B4 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001A1B9 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001A1BE 06                         byte_15330:	dc.b 6
0001A1BF 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001A1C4 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001A1C9 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001A1CE 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001A1D3 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001A1D8 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001A1DD 06                         byte_1534F:	dc.b 6
0001A1DE 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001A1E3 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001A1E8 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001A1ED 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001A1F2 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001A1F7 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001A1FC 06                         byte_1536E:	dc.b 6
0001A1FD 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001A202 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001A207 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001A20C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001A211 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001A216 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001A21B 06                         byte_1538D:	dc.b 6
0001A21C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001A221 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0001A226 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
0001A22B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001A230 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001A235 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001A23A 06                         byte_153AC:	dc.b 6
0001A23B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001A240 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001A245 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001A24A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001A24F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001A254 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
0001A259 06                         byte_153CB:	dc.b 6
0001A25A D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001A25F E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001A264 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
0001A269 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001A26E F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001A273 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
0001A278 06                         byte_153EA:	dc.b 6
0001A279 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001A27E E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001A283 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
0001A288 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001A28D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001A292 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
0001A297 06                         byte_15409:	dc.b 6
0001A298 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001A29D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001A2A2 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0001A2A7 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001A2AC E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001A2B1 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0001A2B6 06                         byte_15428:	dc.b 6
0001A2B7 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001A2BC D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001A2C1 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0001A2C6 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001A2CB E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001A2D0 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001A2D5 06                         byte_15447:	dc.b 6
0001A2D6 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001A2DB D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001A2E0 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001A2E5 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001A2EA E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001A2EF E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001A2F4 06                         byte_15466:	dc.b 6
0001A2F5 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
0001A2FA D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001A2FF D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001A304 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
0001A309 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001A30E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001A313 06                         byte_15485:	dc.b 6
0001A314 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
0001A319 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001A31E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001A323 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
0001A328 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001A32D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001A332 0C                         byte_154A4:	dc.b $C
0001A333 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
0001A338 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001A33D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001A342 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
0001A347 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001A34C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001A351 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001A356 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001A35B 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001A360 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001A365 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001A36A 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001A370 00                         		even
0001A370 00                         		even
0001A370                            
0001A370                            ; ===========================================================================
0001A370                            ; ---------------------------------------------------------------------------
0001A370                            ; Object 67 - disc that	you run	around (SBZ)
0001A370                            ; ---------------------------------------------------------------------------
0001A370                            
0001A370                            Obj67:					; XREF: Obj_Index
0001A370 7000                       		moveq	#0,d0
0001A372 1028 0024                  		move.b	$24(a0),d0
0001A376 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001A37A 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001A37E                            ; ===========================================================================
0001A37E 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
0001A380 0000                       		dc.w Obj67_Action-Obj67_Index
0001A382                            ; ===========================================================================
0001A382                            
0001A382                            Obj67_Main:				; XREF: Obj67_Index
0001A382 5428 0024                  		addq.b	#2,$24(a0)
0001A386 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001A38E 317C C344 0002             		move.w	#$C344,2(a0)
0001A394 117C 0004 0001             		move.b	#4,1(a0)
0001A39A 117C 0004 0018             		move.b	#4,$18(a0)
0001A3A0 117C 0008 0019             		move.b	#8,$19(a0)
0001A3A6 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A3AC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001A3B2 117C 0018 0034             		move.b	#$18,$34(a0)
0001A3B8 117C 0048 0038             		move.b	#$48,$38(a0)
0001A3BE 1228 0028                  		move.b	$28(a0),d1	; get object type
0001A3C2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001A3C6 6700                       		beq.s	loc_15546
0001A3C8 117C 0010 0034             		move.b	#$10,$34(a0)
0001A3CE 117C 0038 0038             		move.b	#$38,$38(a0)
0001A3D4                            
0001A3D4                            loc_15546:
0001A3D4 1228 0028                  		move.b	$28(a0),d1	; get object type
0001A3D8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001A3DC 4881                       		ext.w	d1
0001A3DE E741                       		asl.w	#3,d1
0001A3E0 3141 0036                  		move.w	d1,$36(a0)
0001A3E4 1028 0022                  		move.b	$22(a0),d0
0001A3E8 E418                       		ror.b	#2,d0
0001A3EA 0200 00C0                  		andi.b	#-$40,d0
0001A3EE 1140 0026                  		move.b	d0,$26(a0)
0001A3F2                            
0001A3F2                            Obj67_Action:				; XREF: Obj67_Index
0001A3F2 6100 0000                  		bsr.w	Obj67_MoveSonic
0001A3F6 6100 0000                  		bsr.w	Obj67_MoveSpot
0001A3FA 6000 0000                  		bra.w	Obj67_ChkDel
0001A3FE                            ; ===========================================================================
0001A3FE                            
0001A3FE                            Obj67_MoveSonic:			; XREF: Obj67_Action
0001A3FE 7400                       		moveq	#0,d2
0001A400 1428 0038                  		move.b	$38(a0),d2
0001A404 3602                       		move.w	d2,d3
0001A406 D643                       		add.w	d3,d3
0001A408 43F8 D000                  		lea	($FFFFD000).w,a1
0001A40C 3029 0008                  		move.w	8(a1),d0
0001A410 9068 0032                  		sub.w	$32(a0),d0
0001A414 D042                       		add.w	d2,d0
0001A416 B043                       		cmp.w	d3,d0
0001A418 6400                       		bcc.s	loc_155A8
0001A41A 3229 000C                  		move.w	$C(a1),d1
0001A41E 9268 0030                  		sub.w	$30(a0),d1
0001A422 D242                       		add.w	d2,d1
0001A424 B243                       		cmp.w	d3,d1
0001A426 6400                       		bcc.s	loc_155A8
0001A428 0829 0001 0022             		btst	#1,$22(a1)
0001A42E 6700                       		beq.s	loc_155B8
0001A430 4228 003A                  		clr.b	$3A(a0)
0001A434 4E75                       		rts	
0001A436                            ; ===========================================================================
0001A436                            
0001A436                            loc_155A8:
0001A436 4A28 003A                  		tst.b	$3A(a0)
0001A43A 6700                       		beq.s	locret_155B6
0001A43C 4229 0038                  		clr.b	$38(a1)
0001A440 4228 003A                  		clr.b	$3A(a0)
0001A444                            
0001A444                            locret_155B6:
0001A444 4E75                       		rts	
0001A446                            ; ===========================================================================
0001A446                            
0001A446                            loc_155B8:
0001A446 4A28 003A                  		tst.b	$3A(a0)
0001A44A 6600                       		bne.s	loc_155E2
0001A44C 117C 0001 003A             		move.b	#1,$3A(a0)
0001A452 0829 0002 0022             		btst	#2,$22(a1)
0001A458 6600                       		bne.s	loc_155D0
0001A45A 4229 001C                  		clr.b	$1C(a1)
0001A45E                            
0001A45E                            loc_155D0:
0001A45E 08A9 0005 0022             		bclr	#5,$22(a1)
0001A464 137C 0001 001D             		move.b	#1,$1D(a1)
0001A46A 137C 0001 0038             		move.b	#1,$38(a1)
0001A470                            
0001A470                            loc_155E2:
0001A470 3029 0014                  		move.w	$14(a1),d0
0001A474 4A68 0036                  		tst.w	$36(a0)
0001A478 6A00                       		bpl.s	loc_15608
0001A47A 0C40 FC00                  		cmpi.w	#-$400,d0
0001A47E 6F00                       		ble.s	loc_155FA
0001A480 337C FC00 0014             		move.w	#-$400,$14(a1)
0001A486 4E75                       		rts	
0001A488                            ; ===========================================================================
0001A488                            
0001A488                            loc_155FA:
0001A488 0C40 F100                  		cmpi.w	#-$F00,d0
0001A48C 6C00                       		bge.s	locret_15606
0001A48E 337C F100 0014             		move.w	#-$F00,$14(a1)
0001A494                            
0001A494                            locret_15606:
0001A494 4E75                       		rts	
0001A496                            ; ===========================================================================
0001A496                            
0001A496                            loc_15608:
0001A496 0C40 0400                  		cmpi.w	#$400,d0
0001A49A 6C00                       		bge.s	loc_15616
0001A49C 337C 0400 0014             		move.w	#$400,$14(a1)
0001A4A2 4E75                       		rts	
0001A4A4                            ; ===========================================================================
0001A4A4                            
0001A4A4                            loc_15616:
0001A4A4 0C40 0F00                  		cmpi.w	#$F00,d0
0001A4A8 6F00                       		ble.s	locret_15622
0001A4AA 337C 0F00 0014             		move.w	#$F00,$14(a1)
0001A4B0                            
0001A4B0                            locret_15622:
0001A4B0 4E75                       		rts	
0001A4B2                            ; ===========================================================================
0001A4B2                            
0001A4B2                            Obj67_MoveSpot:				; XREF: Obj67_Action
0001A4B2 3028 0036                  		move.w	$36(a0),d0
0001A4B6 D168 0026                  		add.w	d0,$26(a0)
0001A4BA 1028 0026                  		move.b	$26(a0),d0
0001A4BE 4EB9 0000 3736             		jsr	(CalcSine).l
0001A4C4 3428 0030                  		move.w	$30(a0),d2
0001A4C8 3628 0032                  		move.w	$32(a0),d3
0001A4CC 7800                       		moveq	#0,d4
0001A4CE 1828 0034                  		move.b	$34(a0),d4
0001A4D2 E14C                       		lsl.w	#8,d4
0001A4D4 2A04                       		move.l	d4,d5
0001A4D6 C9C0                       		muls.w	d0,d4
0001A4D8 4844                       		swap	d4
0001A4DA CBC1                       		muls.w	d1,d5
0001A4DC 4845                       		swap	d5
0001A4DE D842                       		add.w	d2,d4
0001A4E0 DA43                       		add.w	d3,d5
0001A4E2 3144 000C                  		move.w	d4,$C(a0)
0001A4E6 3145 0008                  		move.w	d5,8(a0)
0001A4EA 4E75                       		rts	
0001A4EC                            ; ===========================================================================
0001A4EC                            
0001A4EC                            Obj67_ChkDel:				; XREF: Obj67_Action
0001A4EC 3028 0032                  		move.w	$32(a0),d0
0001A4F0 0240 FF80                  		andi.w	#-$80,d0
0001A4F4 3238 F700                  		move.w	($FFFFF700).w,d1
0001A4F8 0441 0080                  		subi.w	#$80,d1
0001A4FC 0241 FF80                  		andi.w	#-$80,d1
0001A500 9041                       		sub.w	d1,d0
0001A502 0C40 0280                  		cmpi.w	#$280,d0
0001A506 6200                       		bhi.s	Obj67_Delete
0001A508 4EF9 0001 09DC             		jmp	DisplaySprite
0001A50E                            ; ===========================================================================
0001A50E                            
0001A50E                            Obj67_Delete:
0001A50E 4EF9 0001 0A18             		jmp	DeleteObject
0001A514                            ; ===========================================================================
0001A514                            ; ---------------------------------------------------------------------------
0001A514                            ; Sprite mappings - disc that you run around (SBZ)
0001A514                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001A514                            ; part of the level tiles.)
0001A514                            ; ---------------------------------------------------------------------------
0001A514                            Map_obj67:
0001A514                            	include "_maps\obj67.asm"
0001A514                            ; ---------------------------------------------------------------------------
0001A514                            ; Sprite mappings - disc that you run around (SBZ)
0001A514                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001A514                            ; part of the level tiles.)
0001A514                            ; ---------------------------------------------------------------------------
0001A514 0000                       		dc.w byte_15688-Map_obj67
0001A516 01                         byte_15688:	dc.b 1
0001A517 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001A51C                            		even
0001A51C                            		even
0001A51C                            
0001A51C                            ; ===========================================================================
0001A51C                            ; ---------------------------------------------------------------------------
0001A51C                            ; Object 68 - conveyor belts (SBZ)
0001A51C                            ; ---------------------------------------------------------------------------
0001A51C                            
0001A51C                            Obj68:					; XREF: Obj_Index
0001A51C 7000                       		moveq	#0,d0
0001A51E 1028 0024                  		move.b	$24(a0),d0
0001A522 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
0001A526 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
0001A52A                            ; ===========================================================================
0001A52A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001A52C 0000                       		dc.w Obj68_Action-Obj68_Index
0001A52E                            ; ===========================================================================
0001A52E                            
0001A52E                            Obj68_Main:				; XREF: Obj68_Index
0001A52E 5428 0024                  		addq.b	#2,$24(a0)
0001A532 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
0001A538 1228 0028                  		move.b	$28(a0),d1	; get object type
0001A53C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001A540 6700                       		beq.s	loc_156BA	; if zero, branch
0001A542 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
0001A548                            
0001A548                            loc_156BA:
0001A548 1228 0028                  		move.b	$28(a0),d1	; get object type
0001A54C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001A550 4881                       		ext.w	d1
0001A552 E841                       		asr.w	#4,d1
0001A554 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
0001A558                            
0001A558                            Obj68_Action:				; XREF: Obj68_Index
0001A558 6100                       		bsr.s	Obj68_MoveSonic
0001A55A 3028 0008                  		move.w	8(a0),d0
0001A55E 0240 FF80                  		andi.w	#$FF80,d0
0001A562 3238 F700                  		move.w	($FFFFF700).w,d1
0001A566 0441 0080                  		subi.w	#$80,d1
0001A56A 0241 FF80                  		andi.w	#$FF80,d1
0001A56E 9041                       		sub.w	d1,d0
0001A570 0C40 0280                  		cmpi.w	#$280,d0
0001A574 6200                       		bhi.s	Obj68_Delete
0001A576 4E75                       		rts	
0001A578                            ; ===========================================================================
0001A578                            
0001A578                            Obj68_Delete:
0001A578 4EF9 0001 0A18             		jmp	DeleteObject
0001A57E                            ; ===========================================================================
0001A57E                            
0001A57E                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001A57E 7400                       		moveq	#0,d2
0001A580 1428 0038                  		move.b	$38(a0),d2
0001A584 3602                       		move.w	d2,d3
0001A586 D643                       		add.w	d3,d3
0001A588 43F8 D000                  		lea	($FFFFD000).w,a1
0001A58C 3029 0008                  		move.w	8(a1),d0
0001A590 9068 0008                  		sub.w	8(a0),d0
0001A594 D042                       		add.w	d2,d0
0001A596 B043                       		cmp.w	d3,d0
0001A598 6400                       		bcc.s	locret_1572E
0001A59A 3229 000C                  		move.w	$C(a1),d1
0001A59E 9268 000C                  		sub.w	$C(a0),d1
0001A5A2 0641 0030                  		addi.w	#$30,d1
0001A5A6 0C41 0030                  		cmpi.w	#$30,d1
0001A5AA 6400                       		bcc.s	locret_1572E
0001A5AC 0829 0001 0022             		btst	#1,$22(a1)
0001A5B2 6600                       		bne.s	locret_1572E
0001A5B4 3028 0036                  		move.w	$36(a0),d0
0001A5B8 D169 0008                  		add.w	d0,8(a1)
0001A5BC                            
0001A5BC                            locret_1572E:
0001A5BC 4E75                       		rts	
0001A5BE                            
0001A5BE                            ; ===========================================================================
0001A5BE                            ; ---------------------------------------------------------------------------
0001A5BE                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001A5BE                            ; ---------------------------------------------------------------------------
0001A5BE                            
0001A5BE                            Obj69:					; XREF: Obj_Index
0001A5BE 7000                       		moveq	#0,d0
0001A5C0 1028 0024                  		move.b	$24(a0),d0
0001A5C4 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001A5C8 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001A5CC                            ; ===========================================================================
0001A5CC 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001A5CE 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001A5D0 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001A5D2                            ; ===========================================================================
0001A5D2                            
0001A5D2                            Obj69_Main:				; XREF: Obj69_Index
0001A5D2 5428 0024                  		addq.b	#2,$24(a0)
0001A5D6 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001A5DE 317C 4492 0002             		move.w	#$4492,2(a0)
0001A5E4 0028 0004 0001             		ori.b	#4,1(a0)
0001A5EA 117C 0080 0019             		move.b	#$80,$19(a0)
0001A5F0 7000                       		moveq	#0,d0
0001A5F2 1028 0028                  		move.b	$28(a0),d0
0001A5F6 0240 000F                  		andi.w	#$F,d0
0001A5FA C0FC 003C                  		mulu.w	#$3C,d0
0001A5FE 3140 0032                  		move.w	d0,$32(a0)
0001A602 4A28 0028                  		tst.b	$28(a0)
0001A606 6A00                       		bpl.s	Obj69_Trapdoor
0001A608 5428 0024                  		addq.b	#2,$24(a0)
0001A60C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001A614 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001A61A 117C 0010 0019             		move.b	#$10,$19(a0)
0001A620 117C 0002 001C             		move.b	#2,$1C(a0)
0001A626 7000                       		moveq	#0,d0
0001A628 1028 0028                  		move.b	$28(a0),d0	; get object type
0001A62C 3200                       		move.w	d0,d1
0001A62E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001A632 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001A636 3140 0030                  		move.w	d0,$30(a0)	; set time delay
0001A63A 3140 0032                  		move.w	d0,$32(a0)
0001A63E 0241 0070                  		andi.w	#$70,d1
0001A642 0641 0010                  		addi.w	#$10,d1
0001A646 E549                       		lsl.w	#2,d1
0001A648 5341                       		subq.w	#1,d1
0001A64A 3141 0036                  		move.w	d1,$36(a0)
0001A64E 6000                       		bra.s	Obj69_Spinner
0001A650                            ; ===========================================================================
0001A650                            
0001A650                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001A650 5368 0030                  		subq.w	#1,$30(a0)
0001A654 6A00                       		bpl.s	Obj69_Animate
0001A656 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001A65C 0868 0000 001C             		bchg	#0,$1C(a0)
0001A662 4A28 0001                  		tst.b	1(a0)
0001A666 6A00                       		bpl.s	Obj69_Animate
0001A668 303C 00BB                  		move.w	#$BB,d0
0001A66C 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play door sound
0001A672                            
0001A672                            Obj69_Animate:
0001A672 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001A678 4EB9 0000 D7DA             		jsr	AnimateSprite
0001A67E 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
0001A682 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001A684 323C 004B                  		move.w	#$4B,d1
0001A688 343C 000C                  		move.w	#$C,d2
0001A68C 3602                       		move.w	d2,d3
0001A68E 5243                       		addq.w	#1,d3
0001A690 3828 0008                  		move.w	8(a0),d4
0001A694 6100 8746                  		bsr.w	SolidObject
0001A698 6000 841A                  		bra.w	MarkObjGone
0001A69C                            ; ===========================================================================
0001A69C                            
0001A69C                            Obj69_NotSolid:
0001A69C 0828 0003 0022             		btst	#3,$22(a0)
0001A6A2 6700                       		beq.s	Obj69_Display
0001A6A4 43F8 D000                  		lea	($FFFFD000).w,a1
0001A6A8 08A9 0003 0022             		bclr	#3,$22(a1)
0001A6AE 08A8 0003 0022             		bclr	#3,$22(a0)
0001A6B4 4228 0025                  		clr.b	$25(a0)
0001A6B8                            
0001A6B8                            Obj69_Display:
0001A6B8 6000 83FA                  		bra.w	MarkObjGone
0001A6BC                            ; ===========================================================================
0001A6BC                            
0001A6BC                            Obj69_Spinner:				; XREF: Obj69_Index
0001A6BC 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001A6C0 C068 0036                  		and.w	$36(a0),d0
0001A6C4 6600                       		bne.s	Obj69_Delay
0001A6C6 117C 0001 0034             		move.b	#1,$34(a0)
0001A6CC                            
0001A6CC                            Obj69_Delay:
0001A6CC 4A28 0034                  		tst.b	$34(a0)
0001A6D0 6700                       		beq.s	Obj69_Animate2
0001A6D2 5368 0030                  		subq.w	#1,$30(a0)
0001A6D6 6A00                       		bpl.s	Obj69_Animate2
0001A6D8 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001A6DE 4228 0034                  		clr.b	$34(a0)
0001A6E2 0868 0000 001C             		bchg	#0,$1C(a0)
0001A6E8                            
0001A6E8                            Obj69_Animate2:
0001A6E8 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001A6EE 4EB9 0000 D7DA             		jsr	AnimateSprite
0001A6F4 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001A6F8 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001A6FA 323C 001B                  		move.w	#$1B,d1
0001A6FE 343C 0007                  		move.w	#7,d2
0001A702 3602                       		move.w	d2,d3
0001A704 5243                       		addq.w	#1,d3
0001A706 3828 0008                  		move.w	8(a0),d4
0001A70A 6100 86D0                  		bsr.w	SolidObject
0001A70E 6000 83A4                  		bra.w	MarkObjGone
0001A712                            ; ===========================================================================
0001A712                            
0001A712                            Obj69_NotSolid2:
0001A712 0828 0003 0022             		btst	#3,$22(a0)
0001A718 6700                       		beq.s	Obj69_Display2
0001A71A 43F8 D000                  		lea	($FFFFD000).w,a1
0001A71E 08A9 0003 0022             		bclr	#3,$22(a1)
0001A724 08A8 0003 0022             		bclr	#3,$22(a0)
0001A72A 4228 0025                  		clr.b	$25(a0)
0001A72E                            
0001A72E                            Obj69_Display2:
0001A72E 6000 8384                  		bra.w	MarkObjGone
0001A732                            ; ===========================================================================
0001A732                            Ani_obj69:
0001A732                            	include "_anim\obj69.asm"
0001A732                            ; ---------------------------------------------------------------------------
0001A732                            ; Animation script - trapdoor (SBZ)
0001A732                            ; ---------------------------------------------------------------------------
0001A732 0000                       		dc.w byte_158AC-Ani_obj69
0001A734 0000                       		dc.w byte_158B2-Ani_obj69
0001A736 0000                       		dc.w byte_158B8-Ani_obj69
0001A738 0000                       		dc.w byte_158CC-Ani_obj69
0001A73A 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001A740 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
0001A746 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001A753 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001A75A 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001A767 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001A76E                            		even
0001A76E                            		even
0001A76E                            
0001A76E                            ; ---------------------------------------------------------------------------
0001A76E                            ; Sprite mappings - trapdoor (SBZ)
0001A76E                            ; ---------------------------------------------------------------------------
0001A76E                            Map_obj69:
0001A76E                            	include "_maps\obj69.asm"
0001A76E                            ; ---------------------------------------------------------------------------
0001A76E                            ; Sprite mappings - trapdoor (SBZ)
0001A76E                            ; ---------------------------------------------------------------------------
0001A76E 0000                       		dc.w byte_158E6-Map_obj69
0001A770 0000                       		dc.w byte_158FB-Map_obj69
0001A772 0000                       		dc.w byte_15924-Map_obj69
0001A774 04                         byte_158E6:	dc.b 4
0001A775 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001A77A F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001A77F F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001A784 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001A789 08                         byte_158FB:	dc.b 8
0001A78A F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001A78F 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001A794 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001A799 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001A79E F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001A7A3 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001A7A8 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001A7AD 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001A7B2 04                         byte_15924:	dc.b 4
0001A7B3 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001A7B8 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001A7BD 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001A7C2 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001A7C8 00                         		even
0001A7C8 00                         		even
0001A7C8                            
0001A7C8                            ; ---------------------------------------------------------------------------
0001A7C8                            ; Sprite mappings - spinning platforms (SBZ)
0001A7C8                            ; ---------------------------------------------------------------------------
0001A7C8                            Map_obj69a:
0001A7C8                            	include "_maps\obj69a.asm"
0001A7C8                            ; ---------------------------------------------------------------------------
0001A7C8                            ; Sprite mappings - spinning platforms (SBZ)
0001A7C8                            ; ---------------------------------------------------------------------------
0001A7C8 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001A7CC 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001A7D0 0000                       		dc.w byte_15970-Map_obj69a
0001A7D2 02                         byte_15944:	dc.b 2
0001A7D3 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001A7D8 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001A7DD 02                         byte_1594F:	dc.b 2
0001A7DE F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001A7E3 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001A7E8 02                         byte_1595A:	dc.b 2
0001A7E9 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001A7EE 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001A7F3 02                         byte_15965:	dc.b 2
0001A7F4 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001A7F9 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001A7FE 02                         byte_15970:	dc.b 2
0001A7FF F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001A804 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001A80A 00                         		even
0001A80A 00                         		even
0001A80A                            
0001A80A                            ; ===========================================================================
0001A80A                            ; ---------------------------------------------------------------------------
0001A80A                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001A80A                            ; ---------------------------------------------------------------------------
0001A80A                            
0001A80A                            Obj6A:					; XREF: Obj_Index
0001A80A 7000                       		moveq	#0,d0
0001A80C 1028 0024                  		move.b	$24(a0),d0
0001A810 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001A814 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0001A818                            ; ===========================================================================
0001A818 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001A81A 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001A81C                            ; ===========================================================================
0001A81C                            
0001A81C                            Obj6A_Main:				; XREF: Obj6A_Index
0001A81C 5428 0024                  		addq.b	#2,$24(a0)
0001A820 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0001A828 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001A82E 117C 0004 0001             		move.b	#4,1(a0)
0001A834 117C 0004 0018             		move.b	#4,$18(a0)
0001A83A 117C 0020 0019             		move.b	#$20,$19(a0)
0001A840 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001A846 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A84C 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001A852 6400                       		bcc.s	Obj6A_Action
0001A854 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001A85A                            
0001A85A                            Obj6A_Action:				; XREF: Obj6A_Index
0001A85A 7000                       		moveq	#0,d0
0001A85C 1028 0028                  		move.b	$28(a0),d0
0001A860 0240 0007                  		andi.w	#7,d0
0001A864 D040                       		add.w	d0,d0
0001A866 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001A86A 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
0001A86E 3028 003A                  		move.w	$3A(a0),d0
0001A872 0240 FF80                  		andi.w	#$FF80,d0
0001A876 3238 F700                  		move.w	($FFFFF700).w,d1
0001A87A 0441 0080                  		subi.w	#$80,d1
0001A87E 0241 FF80                  		andi.w	#$FF80,d1
0001A882 9041                       		sub.w	d1,d0
0001A884 0C40 0280                  		cmpi.w	#$280,d0
0001A888 6200                       		bhi.s	Obj6A_Delete
0001A88A 4EF9 0001 09DC             		jmp	DisplaySprite
0001A890                            ; ===========================================================================
0001A890                            
0001A890                            Obj6A_Delete:
0001A890 4EF9 0001 0A18             		jmp	DeleteObject
0001A896                            ; ===========================================================================
0001A896 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001A89A 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
0001A89E 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
0001A8A0                            ; ===========================================================================
0001A8A0                            
0001A8A0                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
0001A8A0 4E75                       		rts	
0001A8A2                            ; ===========================================================================
0001A8A2                            
0001A8A2                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
0001A8A2 323C 0060                  		move.w	#$60,d1
0001A8A6 7000                       		moveq	#0,d0
0001A8A8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001A8AC 0828 0000 0022             		btst	#0,$22(a0)
0001A8B2 6700                       		beq.s	Obj6A_Animate01
0001A8B4 4440                       		neg.w	d0
0001A8B6 D041                       		add.w	d1,d0
0001A8B8                            
0001A8B8                            Obj6A_Animate01:
0001A8B8 3228 003A                  		move.w	$3A(a0),d1
0001A8BC 9240                       		sub.w	d0,d1
0001A8BE 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0001A8C2 5328 001E                  		subq.b	#1,$1E(a0)
0001A8C6 6A00                       		bpl.s	loc_15A46
0001A8C8 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001A8CE 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001A8D4                            
0001A8D4                            loc_15A46:
0001A8D4 4A28 0001                  		tst.b	1(a0)
0001A8D8 6A00                       		bpl.s	locret_15A60
0001A8DA 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001A8DE 0240 000F                  		andi.w	#$F,d0
0001A8E2 6600                       		bne.s	locret_15A60
0001A8E4 303C 00B0                  		move.w	#$B0,d0
0001A8E8 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play saw sound
0001A8EE                            
0001A8EE                            locret_15A60:
0001A8EE 4E75                       		rts	
0001A8F0                            ; ===========================================================================
0001A8F0                            
0001A8F0                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001A8F0 323C 0030                  		move.w	#$30,d1
0001A8F4 7000                       		moveq	#0,d0
0001A8F6 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001A8FA 0828 0000 0022             		btst	#0,$22(a0)
0001A900 6700                       		beq.s	Obj6A_Animate02
0001A902 4440                       		neg.w	d0
0001A904 0640 0080                  		addi.w	#$80,d0
0001A908                            
0001A908                            Obj6A_Animate02:
0001A908 3228 0038                  		move.w	$38(a0),d1
0001A90C 9240                       		sub.w	d0,d1
0001A90E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001A912 5328 001E                  		subq.b	#1,$1E(a0)
0001A916 6A00                       		bpl.s	loc_15A96
0001A918 117C 0002 001E             		move.b	#2,$1E(a0)
0001A91E 0868 0000 001A             		bchg	#0,$1A(a0)
0001A924                            
0001A924                            loc_15A96:
0001A924 4A28 0001                  		tst.b	1(a0)
0001A928 6A00                       		bpl.s	locret_15AB0
0001A92A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001A92E 0C00 0018                  		cmpi.b	#$18,d0
0001A932 6600                       		bne.s	locret_15AB0
0001A934 303C 00B0                  		move.w	#$B0,d0
0001A938 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play saw sound
0001A93E                            
0001A93E                            locret_15AB0:
0001A93E 4E75                       		rts	
0001A940                            ; ===========================================================================
0001A940                            
0001A940                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001A940 4A28 003D                  		tst.b	$3D(a0)
0001A944 6600                       		bne.s	Obj6A_Animate03
0001A946 3038 D008                  		move.w	($FFFFD008).w,d0
0001A94A 0440 00C0                  		subi.w	#$C0,d0
0001A94E 6500                       		bcs.s	loc_15B02
0001A950 9068 0008                  		sub.w	8(a0),d0
0001A954 6500                       		bcs.s	loc_15B02
0001A956 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001A95A 0440 0080                  		subi.w	#$80,d0
0001A95E B068 000C                  		cmp.w	$C(a0),d0
0001A962 6400                       		bcc.s	locret_15B04
0001A964 0640 0100                  		addi.w	#$100,d0
0001A968 B068 000C                  		cmp.w	$C(a0),d0
0001A96C 6500                       		bcs.s	locret_15B04
0001A96E 117C 0001 003D             		move.b	#1,$3D(a0)
0001A974 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001A97A 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001A980 117C 0002 001A             		move.b	#2,$1A(a0)
0001A986 303C 00B0                  		move.w	#$B0,d0
0001A98A 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play saw sound
0001A990                            
0001A990                            loc_15B02:
0001A990 588F                       		addq.l	#4,sp
0001A992                            
0001A992                            locret_15B04:
0001A992 4E75                       		rts	
0001A994                            ; ===========================================================================
0001A994                            
0001A994                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001A994 4EB9 0001 09C2             		jsr	SpeedToPos
0001A99A 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001A9A0 5328 001E                  		subq.b	#1,$1E(a0)
0001A9A4 6A00                       		bpl.s	locret_15B24
0001A9A6 117C 0002 001E             		move.b	#2,$1E(a0)
0001A9AC 0868 0000 001A             		bchg	#0,$1A(a0)
0001A9B2                            
0001A9B2                            locret_15B24:
0001A9B2 4E75                       		rts	
0001A9B4                            ; ===========================================================================
0001A9B4                            
0001A9B4                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001A9B4 4A28 003D                  		tst.b	$3D(a0)
0001A9B8 6600                       		bne.s	Obj6A_Animate04
0001A9BA 3038 D008                  		move.w	($FFFFD008).w,d0
0001A9BE 0640 00E0                  		addi.w	#$E0,d0
0001A9C2 9068 0008                  		sub.w	8(a0),d0
0001A9C6 6400                       		bcc.s	loc_15B74
0001A9C8 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001A9CC 0440 0080                  		subi.w	#$80,d0
0001A9D0 B068 000C                  		cmp.w	$C(a0),d0
0001A9D4 6400                       		bcc.s	locret_15B76
0001A9D6 0640 0100                  		addi.w	#$100,d0
0001A9DA B068 000C                  		cmp.w	$C(a0),d0
0001A9DE 6500                       		bcs.s	locret_15B76
0001A9E0 117C 0001 003D             		move.b	#1,$3D(a0)
0001A9E6 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001A9EC 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001A9F2 117C 0002 001A             		move.b	#2,$1A(a0)
0001A9F8 303C 00B0                  		move.w	#$B0,d0
0001A9FC 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play saw sound
0001AA02                            
0001AA02                            loc_15B74:
0001AA02 588F                       		addq.l	#4,sp
0001AA04                            
0001AA04                            locret_15B76:
0001AA04 4E75                       		rts	
0001AA06                            ; ===========================================================================
0001AA06                            
0001AA06                            Obj6A_Animate04:
0001AA06 4EB9 0001 09C2             		jsr	SpeedToPos
0001AA0C 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001AA12 5328 001E                  		subq.b	#1,$1E(a0)
0001AA16 6A00                       		bpl.s	locret_15B96
0001AA18 117C 0002 001E             		move.b	#2,$1E(a0)
0001AA1E 0868 0000 001A             		bchg	#0,$1A(a0)
0001AA24                            
0001AA24                            locret_15B96:
0001AA24 4E75                       		rts	
0001AA26                            ; ===========================================================================
0001AA26                            ; ---------------------------------------------------------------------------
0001AA26                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001AA26                            ; ---------------------------------------------------------------------------
0001AA26                            Map_obj6A:
0001AA26                            	include "_maps\obj6A.asm"
0001AA26                            ; ---------------------------------------------------------------------------
0001AA26                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001AA26                            ; ---------------------------------------------------------------------------
0001AA26 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001AA2A 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001AA2E 07                         byte_15BA0:	dc.b 7
0001AA2F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001AA34 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001AA39 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001AA3E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001AA43 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001AA48 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001AA4D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001AA52 07                         byte_15BC4:	dc.b 7
0001AA53 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001AA58 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001AA5D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001AA62 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001AA67 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001AA6C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001AA71 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001AA76 04                         byte_15BE8:	dc.b 4
0001AA77 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001AA7C E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001AA81 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001AA86 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001AA8B 04                         byte_15BFD:	dc.b 4
0001AA8C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001AA91 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001AA96 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001AA9B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001AAA0                            		even
0001AAA0                            		even
0001AAA0                            
0001AAA0                            ; ===========================================================================
0001AAA0                            ; ---------------------------------------------------------------------------
0001AAA0                            ; Object 6B - stomper (SBZ)
0001AAA0                            ; ---------------------------------------------------------------------------
0001AAA0                            
0001AAA0                            Obj6B:					; XREF: Obj_Index
0001AAA0 7000                       		moveq	#0,d0
0001AAA2 1028 0024                  		move.b	$24(a0),d0
0001AAA6 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001AAAA 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001AAAE                            ; ===========================================================================
0001AAAE 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001AAB0 0000                       		dc.w Obj6B_Action-Obj6B_Index
0001AAB2                            
0001AAB2 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001AAB6 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001AABA 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001AABE 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001AAC2 8040 0005                  		dc.b  $80, $40,	  0,   5
0001AAC6                            ; ===========================================================================
0001AAC6                            
0001AAC6                            Obj6B_Main:				; XREF: Obj6B_Index
0001AAC6 5428 0024                  		addq.b	#2,$24(a0)
0001AACA 7000                       		moveq	#0,d0
0001AACC 1028 0028                  		move.b	$28(a0),d0
0001AAD0 E448                       		lsr.w	#2,d0
0001AAD2 0240 001C                  		andi.w	#$1C,d0
0001AAD6 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001AADA 115B 0019                  		move.b	(a3)+,$19(a0)
0001AADE 115B 0016                  		move.b	(a3)+,$16(a0)
0001AAE2 E448                       		lsr.w	#2,d0
0001AAE4 1140 001A                  		move.b	d0,$1A(a0)
0001AAE8 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001AAF0 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001AAF6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001AAFC 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001AAFE 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001AB04 6700                       		beq.s	Obj6B_SBZ3
0001AB06                            
0001AB06                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001AB06 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001AB0A 7000                       		moveq	#0,d0
0001AB0C 1028 0023                  		move.b	$23(a0),d0
0001AB10 6700                       		beq.s	Obj6B_Delete
0001AB12 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001AB18                            
0001AB18                            Obj6B_Delete:
0001AB18 4EF9 0001 0A18             		jmp	DeleteObject
0001AB1E                            ; ===========================================================================
0001AB1E                            
0001AB1E                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001AB1E 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001AB24 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001AB2A 6600                       		bne.s	Obj6B_SBZ12
0001AB2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001AB30 7000                       		moveq	#0,d0
0001AB32 1028 0023                  		move.b	$23(a0),d0
0001AB36 6700                       		beq.s	Obj6B_SBZ12
0001AB38 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001AB3E 6700                       		beq.s	Obj6B_SBZ12
0001AB40 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001AB44 60C0                       		bra.s	Obj6B_ChkGone
0001AB46                            ; ===========================================================================
0001AB46                            
0001AB46                            Obj6B_SBZ12:				; XREF: Obj6B_Main
0001AB46 0028 0004 0001             		ori.b	#4,1(a0)
0001AB4C 117C 0004 0018             		move.b	#4,$18(a0)
0001AB52 3168 0008 0034             		move.w	8(a0),$34(a0)
0001AB58 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001AB5E 7000                       		moveq	#0,d0
0001AB60 101B                       		move.b	(a3)+,d0
0001AB62 3140 003C                  		move.w	d0,$3C(a0)
0001AB66 7000                       		moveq	#0,d0
0001AB68 1028 0028                  		move.b	$28(a0),d0
0001AB6C 6A00                       		bpl.s	Obj6B_Action
0001AB6E 0200 000F                  		andi.b	#$F,d0
0001AB72 1140 003E                  		move.b	d0,$3E(a0)
0001AB76 1153 0028                  		move.b	(a3),$28(a0)
0001AB7A 0C13 0005                  		cmpi.b	#5,(a3)
0001AB7E 6600                       		bne.s	Obj6B_ChkGone2
0001AB80 08E8 0004 0001             		bset	#4,1(a0)
0001AB86                            
0001AB86                            Obj6B_ChkGone2:
0001AB86 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001AB8A 7000                       		moveq	#0,d0
0001AB8C 1028 0023                  		move.b	$23(a0),d0
0001AB90 6700                       		beq.s	Obj6B_Action
0001AB92 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001AB98                            
0001AB98                            Obj6B_Action:				; XREF: Obj6B_Index
0001AB98 3F28 0008                  		move.w	8(a0),-(sp)
0001AB9C 7000                       		moveq	#0,d0
0001AB9E 1028 0028                  		move.b	$28(a0),d0
0001ABA2 0240 000F                  		andi.w	#$F,d0
0001ABA6 D040                       		add.w	d0,d0
0001ABA8 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001ABAC 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0001ABB0 381F                       		move.w	(sp)+,d4
0001ABB2 4A28 0001                  		tst.b	1(a0)
0001ABB6 6A00                       		bpl.s	Obj6B_ChkDel
0001ABB8 7200                       		moveq	#0,d1
0001ABBA 1228 0019                  		move.b	$19(a0),d1
0001ABBE 0641 000B                  		addi.w	#$B,d1
0001ABC2 7400                       		moveq	#0,d2
0001ABC4 1428 0016                  		move.b	$16(a0),d2
0001ABC8 3602                       		move.w	d2,d3
0001ABCA 5243                       		addq.w	#1,d3
0001ABCC 6100 820E                  		bsr.w	SolidObject
0001ABD0                            
0001ABD0                            Obj6B_ChkDel:
0001ABD0 3028 0034                  		move.w	$34(a0),d0
0001ABD4 0240 FF80                  		andi.w	#$FF80,d0
0001ABD8 3238 F700                  		move.w	($FFFFF700).w,d1
0001ABDC 0441 0080                  		subi.w	#$80,d1
0001ABE0 0241 FF80                  		andi.w	#$FF80,d1
0001ABE4 9041                       		sub.w	d1,d0
0001ABE6 0C40 0280                  		cmpi.w	#$280,d0
0001ABEA 6200                       		bhi.s	loc_15D64
0001ABEC 4EF9 0001 09DC             		jmp	DisplaySprite
0001ABF2                            ; ===========================================================================
0001ABF2                            
0001ABF2                            loc_15D64:
0001ABF2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001ABF8 6600                       		bne.s	Obj6B_Delete2
0001ABFA 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001ABFE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001AC02 7000                       		moveq	#0,d0
0001AC04 1028 0023                  		move.b	$23(a0),d0
0001AC08 6700                       		beq.s	Obj6B_Delete2
0001AC0A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001AC10                            
0001AC10                            Obj6B_Delete2:
0001AC10 4EF9 0001 0A18             		jmp	DeleteObject
0001AC16                            ; ===========================================================================
0001AC16 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001AC1A 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001AC1E 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001AC22                            ; ===========================================================================
0001AC22                            
0001AC22                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001AC22 4E75                       		rts	
0001AC24                            ; ===========================================================================
0001AC24                            
0001AC24                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001AC24 4A28 0038                  		tst.b	$38(a0)
0001AC28 6600                       		bne.s	loc_15DB4
0001AC2A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001AC2E 7000                       		moveq	#0,d0
0001AC30 1028 003E                  		move.b	$3E(a0),d0
0001AC34 0832 0000 0000             		btst	#0,(a2,d0.w)
0001AC3A 6700                       		beq.s	loc_15DC2
0001AC3C 117C 0001 0038             		move.b	#1,$38(a0)
0001AC42                            
0001AC42                            loc_15DB4:
0001AC42 3028 003C                  		move.w	$3C(a0),d0
0001AC46 B068 003A                  		cmp.w	$3A(a0),d0
0001AC4A 6700                       		beq.s	loc_15DE0
0001AC4C 5468 003A                  		addq.w	#2,$3A(a0)
0001AC50                            
0001AC50                            loc_15DC2:
0001AC50 3028 003A                  		move.w	$3A(a0),d0
0001AC54 0828 0000 0022             		btst	#0,$22(a0)
0001AC5A 6700                       		beq.s	loc_15DD4
0001AC5C 4440                       		neg.w	d0
0001AC5E 0640 0080                  		addi.w	#$80,d0
0001AC62                            
0001AC62                            loc_15DD4:
0001AC62 3228 0034                  		move.w	$34(a0),d1
0001AC66 9240                       		sub.w	d0,d1
0001AC68 3141 0008                  		move.w	d1,8(a0)
0001AC6C 4E75                       		rts	
0001AC6E                            ; ===========================================================================
0001AC6E                            
0001AC6E                            loc_15DE0:
0001AC6E 5228 0028                  		addq.b	#1,$28(a0)
0001AC72 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001AC78 4228 0038                  		clr.b	$38(a0)
0001AC7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001AC80 7000                       		moveq	#0,d0
0001AC82 1028 0023                  		move.b	$23(a0),d0
0001AC86 67C8                       		beq.s	loc_15DC2
0001AC88 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001AC8E 60C0                       		bra.s	loc_15DC2
0001AC90                            ; ===========================================================================
0001AC90                            
0001AC90                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
0001AC90 4A28 0038                  		tst.b	$38(a0)
0001AC94 6600                       		bne.s	loc_15E14
0001AC96 5368 0036                  		subq.w	#1,$36(a0)
0001AC9A 6600                       		bne.s	loc_15E1E
0001AC9C 117C 0001 0038             		move.b	#1,$38(a0)
0001ACA2                            
0001ACA2                            loc_15E14:
0001ACA2 4A68 003A                  		tst.w	$3A(a0)
0001ACA6 6700                       		beq.s	loc_15E3C
0001ACA8 5568 003A                  		subq.w	#2,$3A(a0)
0001ACAC                            
0001ACAC                            loc_15E1E:
0001ACAC 3028 003A                  		move.w	$3A(a0),d0
0001ACB0 0828 0000 0022             		btst	#0,$22(a0)
0001ACB6 6700                       		beq.s	loc_15E30
0001ACB8 4440                       		neg.w	d0
0001ACBA 0640 0080                  		addi.w	#$80,d0
0001ACBE                            
0001ACBE                            loc_15E30:
0001ACBE 3228 0034                  		move.w	$34(a0),d1
0001ACC2 9240                       		sub.w	d0,d1
0001ACC4 3141 0008                  		move.w	d1,8(a0)
0001ACC8 4E75                       		rts	
0001ACCA                            ; ===========================================================================
0001ACCA                            
0001ACCA                            loc_15E3C:
0001ACCA 5328 0028                  		subq.b	#1,$28(a0)
0001ACCE 4228 0038                  		clr.b	$38(a0)
0001ACD2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001ACD6 7000                       		moveq	#0,d0
0001ACD8 1028 0023                  		move.b	$23(a0),d0
0001ACDC 67CE                       		beq.s	loc_15E1E
0001ACDE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001ACE4 60C6                       		bra.s	loc_15E1E
0001ACE6                            ; ===========================================================================
0001ACE6                            
0001ACE6                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001ACE6 4A28 0038                  		tst.b	$38(a0)
0001ACEA 6600                       		bne.s	loc_15E7C
0001ACEC 4A68 003A                  		tst.w	$3A(a0)
0001ACF0 6700                       		beq.s	loc_15E6A
0001ACF2 5368 003A                  		subq.w	#1,$3A(a0)
0001ACF6 6000                       		bra.s	loc_15E8E
0001ACF8                            ; ===========================================================================
0001ACF8                            
0001ACF8                            loc_15E6A:
0001ACF8 5368 0036                  		subq.w	#1,$36(a0)
0001ACFC 6A00                       		bpl.s	loc_15E8E
0001ACFE 317C 003C 0036             		move.w	#$3C,$36(a0)
0001AD04 117C 0001 0038             		move.b	#1,$38(a0)
0001AD0A                            
0001AD0A                            loc_15E7C:
0001AD0A 5068 003A                  		addq.w	#8,$3A(a0)
0001AD0E 3028 003A                  		move.w	$3A(a0),d0
0001AD12 B068 003C                  		cmp.w	$3C(a0),d0
0001AD16 6600                       		bne.s	loc_15E8E
0001AD18 4228 0038                  		clr.b	$38(a0)
0001AD1C                            
0001AD1C                            loc_15E8E:
0001AD1C 3028 003A                  		move.w	$3A(a0),d0
0001AD20 0828 0000 0022             		btst	#0,$22(a0)
0001AD26 6700                       		beq.s	loc_15EA0
0001AD28 4440                       		neg.w	d0
0001AD2A 0640 0038                  		addi.w	#$38,d0
0001AD2E                            
0001AD2E                            loc_15EA0:
0001AD2E 3228 0030                  		move.w	$30(a0),d1
0001AD32 D240                       		add.w	d0,d1
0001AD34 3141 000C                  		move.w	d1,$C(a0)
0001AD38 4E75                       		rts	
0001AD3A                            ; ===========================================================================
0001AD3A                            
0001AD3A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001AD3A 4A28 0038                  		tst.b	$38(a0)
0001AD3E 6600                       		bne.s	loc_15ED0
0001AD40 4A68 003A                  		tst.w	$3A(a0)
0001AD44 6700                       		beq.s	loc_15EBE
0001AD46 5168 003A                  		subq.w	#8,$3A(a0)
0001AD4A 6000                       		bra.s	loc_15EF0
0001AD4C                            ; ===========================================================================
0001AD4C                            
0001AD4C                            loc_15EBE:
0001AD4C 5368 0036                  		subq.w	#1,$36(a0)
0001AD50 6A00                       		bpl.s	loc_15EF0
0001AD52 317C 003C 0036             		move.w	#$3C,$36(a0)
0001AD58 117C 0001 0038             		move.b	#1,$38(a0)
0001AD5E                            
0001AD5E                            loc_15ED0:
0001AD5E 3028 003A                  		move.w	$3A(a0),d0
0001AD62 B068 003C                  		cmp.w	$3C(a0),d0
0001AD66 6700                       		beq.s	loc_15EE0
0001AD68 5068 003A                  		addq.w	#8,$3A(a0)
0001AD6C 6000                       		bra.s	loc_15EF0
0001AD6E                            ; ===========================================================================
0001AD6E                            
0001AD6E                            loc_15EE0:
0001AD6E 5368 0036                  		subq.w	#1,$36(a0)
0001AD72 6A00                       		bpl.s	loc_15EF0
0001AD74 317C 003C 0036             		move.w	#$3C,$36(a0)
0001AD7A 4228 0038                  		clr.b	$38(a0)
0001AD7E                            
0001AD7E                            loc_15EF0:
0001AD7E 3028 003A                  		move.w	$3A(a0),d0
0001AD82 0828 0000 0022             		btst	#0,$22(a0)
0001AD88 6700                       		beq.s	loc_15F02
0001AD8A 4440                       		neg.w	d0
0001AD8C 0640 0038                  		addi.w	#$38,d0
0001AD90                            
0001AD90                            loc_15F02:
0001AD90 3228 0030                  		move.w	$30(a0),d1
0001AD94 D240                       		add.w	d0,d1
0001AD96 3141 000C                  		move.w	d1,$C(a0)
0001AD9A 4E75                       		rts	
0001AD9C                            ; ===========================================================================
0001AD9C                            
0001AD9C                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0001AD9C 4A28 0038                  		tst.b	$38(a0)
0001ADA0 6600                       		bne.s	loc_15F3E
0001ADA2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001ADA6 7000                       		moveq	#0,d0
0001ADA8 1028 003E                  		move.b	$3E(a0),d0
0001ADAC 0832 0000 0000             		btst	#0,(a2,d0.w)
0001ADB2 6700                       		beq.s	locret_15F5C
0001ADB4 117C 0001 0038             		move.b	#1,$38(a0)
0001ADBA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001ADBE 7000                       		moveq	#0,d0
0001ADC0 1028 0023                  		move.b	$23(a0),d0
0001ADC4 6700                       		beq.s	loc_15F3E
0001ADC6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001ADCC                            
0001ADCC                            loc_15F3E:
0001ADCC 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0001ADD4 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001ADDC 3168 0008 0034             		move.w	8(a0),$34(a0)
0001ADE2 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001ADE8 6700                       		beq.s	loc_15F5E
0001ADEA                            
0001ADEA                            locret_15F5C:
0001ADEA 4E75                       		rts	
0001ADEC                            ; ===========================================================================
0001ADEC                            
0001ADEC                            loc_15F5E:
0001ADEC 4228 0028                  		clr.b	$28(a0)
0001ADF0 4228 0038                  		clr.b	$38(a0)
0001ADF4 4E75                       		rts	
0001ADF6                            ; ===========================================================================
0001ADF6                            ; ---------------------------------------------------------------------------
0001ADF6                            ; Sprite mappings - stomper and	platforms (SBZ)
0001ADF6                            ; ---------------------------------------------------------------------------
0001ADF6                            Map_obj6B:
0001ADF6                            	include "_maps\obj6B.asm"
0001ADF6                            ; ---------------------------------------------------------------------------
0001ADF6                            ; Sprite mappings - stomper and	platforms (SBZ)
0001ADF6                            ; ---------------------------------------------------------------------------
0001ADF6 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001ADFA 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001ADFE 0000                       		dc.w byte_15FB0-Map_obj6B
0001AE00 04                         byte_15F72:	dc.b 4
0001AE01 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001AE06 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001AE0B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001AE10 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001AE15 08                         byte_15F87:	dc.b 8
0001AE16 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001AE1B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001AE20 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001AE25 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001AE2A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001AE2F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001AE34 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001AE39 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001AE3E 0E                         byte_15FB0:	dc.b $E
0001AE3F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001AE44 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001AE49 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001AE4E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001AE53 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001AE58 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001AE5D C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001AE62 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001AE67 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001AE6C E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001AE71 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001AE76 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001AE7B 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001AE80 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001AE86 00                         		even
0001AE86 00                         		even
0001AE86                            
0001AE86                            ; ===========================================================================
0001AE86                            ; ---------------------------------------------------------------------------
0001AE86                            ; Object 6C - vanishing	platforms (SBZ)
0001AE86                            ; ---------------------------------------------------------------------------
0001AE86                            
0001AE86                            Obj6C:					; XREF: Obj_Index
0001AE86 7000                       		moveq	#0,d0
0001AE88 1028 0024                  		move.b	$24(a0),d0
0001AE8C 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001AE90 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001AE94                            ; ===========================================================================
0001AE94 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001AE96 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001AE98 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001AE9A 0000                       		dc.w loc_16068-Obj6C_Index
0001AE9C                            ; ===========================================================================
0001AE9C                            
0001AE9C                            Obj6C_Main:				; XREF: Obj6C_Index
0001AE9C 5C28 0024                  		addq.b	#6,$24(a0)
0001AEA0 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001AEA8 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001AEAE 0028 0004 0001             		ori.b	#4,1(a0)
0001AEB4 117C 0010 0019             		move.b	#$10,$19(a0)
0001AEBA 117C 0004 0018             		move.b	#4,$18(a0)
0001AEC0 7000                       		moveq	#0,d0
0001AEC2 1028 0028                  		move.b	$28(a0),d0	; get object type
0001AEC6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001AECA 5240                       		addq.w	#1,d0		; add 1
0001AECC EF48                       		lsl.w	#7,d0		; multiply by $80
0001AECE 3200                       		move.w	d0,d1
0001AED0 5340                       		subq.w	#1,d0
0001AED2 3140 0030                  		move.w	d0,$30(a0)
0001AED6 3140 0032                  		move.w	d0,$32(a0)
0001AEDA 7000                       		moveq	#0,d0
0001AEDC 1028 0028                  		move.b	$28(a0),d0	; get object type
0001AEE0 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001AEE4 0641 0080                  		addi.w	#$80,d1
0001AEE8 C0C1                       		mulu.w	d1,d0
0001AEEA E088                       		lsr.l	#8,d0
0001AEEC 3140 0036                  		move.w	d0,$36(a0)
0001AEF0 5341                       		subq.w	#1,d1
0001AEF2 3141 0038                  		move.w	d1,$38(a0)
0001AEF6                            
0001AEF6                            loc_16068:				; XREF: Obj6C_Index
0001AEF6 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001AEFA 9068 0036                  		sub.w	$36(a0),d0
0001AEFE C068 0038                  		and.w	$38(a0),d0
0001AF02 6600                       		bne.s	Obj6C_Animate
0001AF04 5928 0024                  		subq.b	#4,$24(a0)
0001AF08 6000                       		bra.s	Obj6C_Vanish
0001AF0A                            ; ===========================================================================
0001AF0A                            
0001AF0A                            Obj6C_Animate:
0001AF0A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001AF10 4EB9 0000 D7DA             		jsr	AnimateSprite
0001AF16 4EF9 0001 2AB4             		jmp		MarkObjGone
0001AF1C                            ; ===========================================================================
0001AF1C                            
0001AF1C                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001AF1C 5368 0030                  		subq.w	#1,$30(a0)
0001AF20 6A00                       		bpl.s	loc_160AA
0001AF22 317C 007F 0030             		move.w	#127,$30(a0)
0001AF28 4A28 001C                  		tst.b	$1C(a0)
0001AF2C 6700                       		beq.s	loc_160A4
0001AF2E 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001AF34                            
0001AF34                            loc_160A4:
0001AF34 0868 0000 001C             		bchg	#0,$1C(a0)
0001AF3A                            
0001AF3A                            loc_160AA:
0001AF3A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001AF40 4EB9 0000 D7DA             		jsr	AnimateSprite
0001AF46 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001AF4C 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0001AF4E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001AF54 6600                       		bne.s	loc_160D6
0001AF56 7200                       		moveq	#0,d1
0001AF58 1228 0019                  		move.b	$19(a0),d1
0001AF5C 4EB9 0000 A47A             		jsr	(PlatformObject).l
0001AF62 4EF9 0001 2AB4             		jmp		MarkObjGone
0001AF68                            ; ===========================================================================
0001AF68                            
0001AF68                            loc_160D6:
0001AF68 7200                       		moveq	#0,d1
0001AF6A 1228 0019                  		move.b	$19(a0),d1
0001AF6E 4EB9 0000 A5EE             		jsr	(ExitPlatform).l
0001AF74 3428 0008                  		move.w	8(a0),d2
0001AF78 4EB9 0000 AB58             		jsr	(MvSonicOnPtfm2).l
0001AF7E 4EF9 0001 2AB4             		jmp		MarkObjGone
0001AF84                            ; ===========================================================================
0001AF84                            
0001AF84                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
0001AF84 0828 0003 0022             		btst	#3,$22(a0)
0001AF8A 6700                       		beq.s	Obj6C_Display
0001AF8C 43F8 D000                  		lea	($FFFFD000).w,a1
0001AF90 08A9 0003 0022             		bclr	#3,$22(a1)
0001AF96 08A8 0003 0022             		bclr	#3,$22(a0)
0001AF9C 117C 0002 0024             		move.b	#2,$24(a0)
0001AFA2 4228 0025                  		clr.b	$25(a0)
0001AFA6                            
0001AFA6                            Obj6C_Display:
0001AFA6 4EF9 0001 2AB4             		jmp		MarkObjGone
0001AFAC                            ; ===========================================================================
0001AFAC                            Ani_obj6C:
0001AFAC                            	include "_anim\obj6C.asm"
0001AFAC                            ; ---------------------------------------------------------------------------
0001AFAC                            ; Animation script - vanishing platforms (SBZ)
0001AFAC                            ; ---------------------------------------------------------------------------
0001AFAC 0000                       		dc.w byte_1611A-Ani_obj6C
0001AFAE 0000                       		dc.w byte_16122-Ani_obj6C
0001AFB0 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001AFB8 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
0001AFC0                            		even
0001AFC0                            		even
0001AFC0                            
0001AFC0                            ; ---------------------------------------------------------------------------
0001AFC0                            ; Sprite mappings - vanishing platforms	(SBZ)
0001AFC0                            ; ---------------------------------------------------------------------------
0001AFC0                            Map_obj6C:
0001AFC0                            	include "_maps\obj6C.asm"
0001AFC0                            ; ---------------------------------------------------------------------------
0001AFC0                            ; Sprite mappings - vanishing platforms	(SBZ)
0001AFC0                            ; ---------------------------------------------------------------------------
0001AFC0 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001AFC4 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001AFC8 01                         byte_16132:	dc.b 1
0001AFC9 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001AFCE 01                         byte_16138:	dc.b 1
0001AFCF F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001AFD4 01                         byte_1613E:	dc.b 1
0001AFD5 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001AFDA 00                         byte_16144:	dc.b 0
0001AFDC 00                         		even
0001AFDC 00                         		even
0001AFDC                            
0001AFDC                            ; ===========================================================================
0001AFDC                            ; ---------------------------------------------------------------------------
0001AFDC                            ; Object 6E - electrocution orbs (SBZ)
0001AFDC                            ; ---------------------------------------------------------------------------
0001AFDC                            
0001AFDC                            Obj6E:					; XREF: Obj_Index
0001AFDC 7000                       		moveq	#0,d0
0001AFDE 1028 0024                  		move.b	$24(a0),d0
0001AFE2 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001AFE6 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001AFEA                            ; ===========================================================================
0001AFEA 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
0001AFEC 0000                       		dc.w Obj6E_Shock-Obj6E_Index
0001AFEE                            ; ===========================================================================
0001AFEE                            
0001AFEE                            Obj6E_Main:				; XREF: Obj6E_Index
0001AFEE 5428 0024                  		addq.b	#2,$24(a0)
0001AFF2 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001AFFA 317C 047E 0002             		move.w	#$47E,2(a0)
0001B000 0028 0004 0001             		ori.b	#4,1(a0)
0001B006 117C 0028 0019             		move.b	#$28,$19(a0)
0001B00C 7000                       		moveq	#0,d0
0001B00E 1028 0028                  		move.b	$28(a0),d0	; read object type
0001B012 E948                       		lsl.w	#4,d0		; multiply by $10
0001B014 5340                       		subq.w	#1,d0
0001B016 3140 0034                  		move.w	d0,$34(a0)
0001B01A                            
0001B01A                            Obj6E_Shock:				; XREF: Obj6E_Index
0001B01A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001B01E C068 0034                  		and.w	$34(a0),d0
0001B022 6600                       		bne.s	Obj6E_Animate
0001B024 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001B02A 4A28 0001                  		tst.b	1(a0)
0001B02E 6A00                       		bpl.s	Obj6E_Animate
0001B030 303C 00B1                  		move.w	#$B1,d0
0001B034 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play electricity sound
0001B03A                            
0001B03A                            Obj6E_Animate:
0001B03A 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
0001B040 4EB9 0000 D7DA             		jsr	AnimateSprite
0001B046 117C 0000 0020             		move.b	#0,$20(a0)
0001B04C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
0001B052 6600                       		bne.s	Obj6E_Display	; if not, branch
0001B054 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001B05A                            
0001B05A                            Obj6E_Display:
0001B05A 4EF9 0001 2AB4             		jmp	MarkObjGone
0001B060                            ; ===========================================================================
0001B060                            Ani_obj6E:
0001B060                            	include "_anim\obj6E.asm"
0001B060                            ; ---------------------------------------------------------------------------
0001B060                            ; Animation script - electrocution orbs (SBZ)
0001B060                            ; ---------------------------------------------------------------------------
0001B060 0000                       		dc.w byte_161CC-Ani_obj6E
0001B062 0000                       		dc.w byte_161D0-Ani_obj6E
0001B064 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
0001B068 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
0001B078                            		even
0001B078                            		even
0001B078                            
0001B078                            ; ---------------------------------------------------------------------------
0001B078                            ; Sprite mappings - electrocution orbs (SBZ)
0001B078                            ; ---------------------------------------------------------------------------
0001B078                            Map_obj6E:
0001B078                            	include "_maps\obj6E.asm"
0001B078                            ; ---------------------------------------------------------------------------
0001B078                            ; Sprite mappings - electrocution orbs (SBZ)
0001B078                            ; ---------------------------------------------------------------------------
0001B078 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
0001B07C 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
0001B080 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
0001B084 02                         byte_161EC:	dc.b 2
0001B085 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001B08A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001B08F 03                         byte_161F7:	dc.b 3
0001B090 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001B095 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001B09A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001B09F 05                         byte_16207:	dc.b 5
0001B0A0 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001B0A5 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001B0AA 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001B0AF F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001B0B4 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001B0B9 04                         byte_16221:	dc.b 4
0001B0BA F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001B0BF 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001B0C4 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001B0C9 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001B0CE 06                         byte_16236:	dc.b 6
0001B0CF F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001B0D4 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001B0D9 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
0001B0DE F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
0001B0E3 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001B0E8 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
0001B0ED 04                         byte_16255:	dc.b 4
0001B0EE F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001B0F3 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001B0F8 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
0001B0FD F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
0001B102                            		even
0001B102                            		even
0001B102                            
0001B102                            ; ===========================================================================
0001B102                            ; ---------------------------------------------------------------------------
0001B102                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001B102                            ; ---------------------------------------------------------------------------
0001B102                            
0001B102                            Obj6F:					; XREF: Obj_Index
0001B102 7000                       		moveq	#0,d0
0001B104 1028 0024                  		move.b	$24(a0),d0
0001B108 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0001B10C 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
0001B110 3028 0030                  		move.w	$30(a0),d0
0001B114 0240 FF80                  		andi.w	#$FF80,d0
0001B118 3238 F700                  		move.w	($FFFFF700).w,d1
0001B11C 0441 0080                  		subi.w	#$80,d1
0001B120 0241 FF80                  		andi.w	#$FF80,d1
0001B124 9041                       		sub.w	d1,d0
0001B126 0C40 0280                  		cmpi.w	#$280,d0
0001B12A 6200                       		bhi.s	loc_1629A
0001B12C                            
0001B12C                            Obj6F_Display:
0001B12C 4EF9 0001 09DC             		jmp	DisplaySprite
0001B132                            ; ===========================================================================
0001B132                            
0001B132                            loc_1629A:
0001B132 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001B138 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001B13A 0C40 FF80                  		cmpi.w	#-$80,d0
0001B13E 64EC                       		bcc.s	Obj6F_Display
0001B140                            
0001B140                            Obj6F_Act1or2:
0001B140 1028 002F                  		move.b	$2F(a0),d0
0001B144 6A00                       		bpl.s	Obj6F_Delete
0001B146 0240 007F                  		andi.w	#$7F,d0
0001B14A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001B14E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001B154                            
0001B154                            Obj6F_Delete:
0001B154 4EF9 0001 0A18             		jmp	DeleteObject
0001B15A                            ; ===========================================================================
0001B15A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001B15C 0000                       		dc.w loc_163D8-Obj6F_Index
0001B15E                            ; ===========================================================================
0001B15E                            
0001B15E                            Obj6F_Main:				; XREF: Obj6F_Index
0001B15E 1028 0028                  		move.b	$28(a0),d0
0001B162 6B00 0000                  		bmi.w	loc_16380
0001B166 5428 0024                  		addq.b	#2,$24(a0)
0001B16A 217C 0001 A7C8 0004        		move.l	#Map_obj69a,4(a0)
0001B172 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001B178 117C 0010 0019             		move.b	#$10,$19(a0)
0001B17E 0028 0004 0001             		ori.b	#4,1(a0)
0001B184 117C 0004 0018             		move.b	#4,$18(a0)
0001B18A 7000                       		moveq	#0,d0
0001B18C 1028 0028                  		move.b	$28(a0),d0
0001B190 3200                       		move.w	d0,d1
0001B192 E648                       		lsr.w	#3,d0
0001B194 0240 001E                  		andi.w	#$1E,d0
0001B198 45FA 0000                  		lea	off_164A6(pc),a2
0001B19C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001B1A0 315A 0038                  		move.w	(a2)+,$38(a0)
0001B1A4 315A 0030                  		move.w	(a2)+,$30(a0)
0001B1A8 214A 003C                  		move.l	a2,$3C(a0)
0001B1AC 0241 000F                  		andi.w	#$F,d1
0001B1B0 E549                       		lsl.w	#2,d1
0001B1B2 1141 0038                  		move.b	d1,$38(a0)
0001B1B6 117C 0004 003A             		move.b	#4,$3A(a0)
0001B1BC 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001B1C0 6700                       		beq.s	loc_16356
0001B1C2 117C 0001 003B             		move.b	#1,$3B(a0)
0001B1C8 4428 003A                  		neg.b	$3A(a0)
0001B1CC 7200                       		moveq	#0,d1
0001B1CE 1228 0038                  		move.b	$38(a0),d1
0001B1D2 D228 003A                  		add.b	$3A(a0),d1
0001B1D6 B228 0039                  		cmp.b	$39(a0),d1
0001B1DA 6500                       		bcs.s	loc_16352
0001B1DC 1001                       		move.b	d1,d0
0001B1DE 7200                       		moveq	#0,d1
0001B1E0 4A00                       		tst.b	d0
0001B1E2 6A00                       		bpl.s	loc_16352
0001B1E4 1228 0039                  		move.b	$39(a0),d1
0001B1E8 5901                       		subq.b	#4,d1
0001B1EA                            
0001B1EA                            loc_16352:
0001B1EA 1141 0038                  		move.b	d1,$38(a0)
0001B1EE                            
0001B1EE                            loc_16356:
0001B1EE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001B1F4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001B1FA 4A41                       		tst.w	d1
0001B1FC 6600                       		bne.s	loc_1636C
0001B1FE 117C 0001 001C             		move.b	#1,$1C(a0)
0001B204                            
0001B204                            loc_1636C:
0001B204 0C41 0008                  		cmpi.w	#8,d1
0001B208 6600                       		bne.s	loc_16378
0001B20A 117C 0000 001C             		move.b	#0,$1C(a0)
0001B210                            
0001B210                            loc_16378:
0001B210 6100 A776                  		bsr.w	Obj63_ChangeDir
0001B214 6000 0000                  		bra.w	loc_163D8
0001B218                            ; ===========================================================================
0001B218                            
0001B218                            loc_16380:				; XREF: Obj6F_Main
0001B218 1140 002F                  		move.b	d0,$2F(a0)
0001B21C 0240 007F                  		andi.w	#$7F,d0
0001B220 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001B224 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001B22A 6700                       		beq.s	loc_1639A
0001B22C 4EF9 0001 0A18             		jmp	DeleteObject
0001B232                            ; ===========================================================================
0001B232                            
0001B232                            loc_1639A:
0001B232 D040                       		add.w	d0,d0
0001B234 0240 001E                  		andi.w	#$1E,d0
0001B238 0640 0080                  		addi.w	#$80,d0
0001B23C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001B242 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001B246 321A                       		move.w	(a2)+,d1
0001B248 2248                       		movea.l	a0,a1
0001B24A 6000                       		bra.s	Obj6F_LoadPform
0001B24C                            ; ===========================================================================
0001B24C                            
0001B24C                            Obj6F_Loop:
0001B24C 4EB9 0001 0E72             		jsr	SingleObjLoad
0001B252 6600                       		bne.s	loc_163D0
0001B254                            
0001B254                            Obj6F_LoadPform:			; XREF: loc_1639A
0001B254 12BC 006F                  		move.b	#$6F,0(a1)
0001B258 335A 0008                  		move.w	(a2)+,8(a1)
0001B25C 335A 000C                  		move.w	(a2)+,$C(a1)
0001B260 301A                       		move.w	(a2)+,d0
0001B262 1340 0028                  		move.b	d0,$28(a1)
0001B266                            
0001B266                            loc_163D0:
0001B266 51C9 FFE4                  		dbf	d1,Obj6F_Loop
0001B26A                            
0001B26A 588F                       		addq.l	#4,sp
0001B26C 4E75                       		rts	
0001B26E                            ; ===========================================================================
0001B26E                            
0001B26E                            loc_163D8:				; XREF: Obj6F_Index
0001B26E 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
0001B274 4EB9 0000 D7DA             		jsr	AnimateSprite
0001B27A 4A28 001A                  		tst.b	$1A(a0)
0001B27E 6600                       		bne.s	loc_16404
0001B280 3F28 0008                  		move.w	8(a0),-(sp)
0001B284 6100 0000                  		bsr.w	loc_16424
0001B288 323C 001B                  		move.w	#$1B,d1
0001B28C 343C 0007                  		move.w	#7,d2
0001B290 3602                       		move.w	d2,d3
0001B292 5243                       		addq.w	#1,d3
0001B294 381F                       		move.w	(sp)+,d4
0001B296 4EF9 0001 2DDC             		jmp		SolidObject
0001B29C                            ; ===========================================================================
0001B29C                            
0001B29C                            loc_16404:
0001B29C 0828 0003 0022             		btst	#3,$22(a0)
0001B2A2 6700                       		beq.s	loc_16420
0001B2A4 43F8 D000                  		lea	($FFFFD000).w,a1
0001B2A8 08A9 0003 0022             		bclr	#3,$22(a1)
0001B2AE 08A8 0003 0022             		bclr	#3,$22(a0)
0001B2B4 4228 0025                  		clr.b	$25(a0)
0001B2B8                            
0001B2B8                            loc_16420:
0001B2B8 6000 0002                  		bra.w	*+4
0001B2BC                            
0001B2BC                            loc_16424:
0001B2BC 3028 0008                  		move.w	8(a0),d0
0001B2C0 B068 0034                  		cmp.w	$34(a0),d0
0001B2C4 6600                       		bne.s	loc_16484
0001B2C6 3028 000C                  		move.w	$C(a0),d0
0001B2CA B068 0036                  		cmp.w	$36(a0),d0
0001B2CE 6600                       		bne.s	loc_16484
0001B2D0 7200                       		moveq	#0,d1
0001B2D2 1228 0038                  		move.b	$38(a0),d1
0001B2D6 D228 003A                  		add.b	$3A(a0),d1
0001B2DA B228 0039                  		cmp.b	$39(a0),d1
0001B2DE 6500                       		bcs.s	loc_16456
0001B2E0 1001                       		move.b	d1,d0
0001B2E2 7200                       		moveq	#0,d1
0001B2E4 4A00                       		tst.b	d0
0001B2E6 6A00                       		bpl.s	loc_16456
0001B2E8 1228 0039                  		move.b	$39(a0),d1
0001B2EC 5901                       		subq.b	#4,d1
0001B2EE                            
0001B2EE                            loc_16456:
0001B2EE 1141 0038                  		move.b	d1,$38(a0)
0001B2F2 2268 003C                  		movea.l	$3C(a0),a1
0001B2F6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001B2FC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001B302 4A41                       		tst.w	d1
0001B304 6600                       		bne.s	loc_16474
0001B306 117C 0001 001C             		move.b	#1,$1C(a0)
0001B30C                            
0001B30C                            loc_16474:
0001B30C 0C41 0008                  		cmpi.w	#8,d1
0001B310 6600                       		bne.s	loc_16480
0001B312 117C 0000 001C             		move.b	#0,$1C(a0)
0001B318                            
0001B318                            loc_16480:
0001B318 6100 A66E                  		bsr.w	Obj63_ChangeDir
0001B31C                            
0001B31C                            loc_16484:
0001B31C 4EF9 0001 09C2             		jmp	SpeedToPos
0001B322                            ; ===========================================================================
0001B322                            Ani_obj6F:
0001B322                            	include "_anim\obj6F.asm"
0001B322                            ; ---------------------------------------------------------------------------
0001B322                            ; Animation script - platform on conveyor belt (SBZ)
0001B322                            ; ---------------------------------------------------------------------------
0001B322 0000                       		dc.w byte_1648E-Ani_obj6F
0001B324 0000                       		dc.w byte_164A2-Ani_obj6F
0001B326 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001B333 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
0001B33A 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
0001B33E 00                         		even
0001B33E 00                         		even
0001B33E                            
0001B33E 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001B344 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001B34A 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001B35E 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001B372 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001B386 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001B39A 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001B3AE 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001B3C2                            ; ===========================================================================
0001B3C2                            ; ---------------------------------------------------------------------------
0001B3C2                            ; Object 70 - large girder block (SBZ)
0001B3C2                            ; ---------------------------------------------------------------------------
0001B3C2                            
0001B3C2                            Obj70:					; XREF: Obj_Index
0001B3C2 7000                       		moveq	#0,d0
0001B3C4 1028 0024                  		move.b	$24(a0),d0
0001B3C8 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001B3CC 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001B3D0                            ; ===========================================================================
0001B3D0 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001B3D2 0000                       		dc.w Obj70_Action-Obj70_Index
0001B3D4                            ; ===========================================================================
0001B3D4                            
0001B3D4                            Obj70_Main:				; XREF: Obj70_Index
0001B3D4 5428 0024                  		addq.b	#2,$24(a0)
0001B3D8 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001B3E0 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001B3E6 0028 0004 0001             		ori.b	#4,1(a0)
0001B3EC 117C 0004 0018             		move.b	#4,$18(a0)
0001B3F2 117C 0060 0019             		move.b	#$60,$19(a0)
0001B3F8 117C 0018 0016             		move.b	#$18,$16(a0)
0001B3FE 3168 0008 0032             		move.w	8(a0),$32(a0)
0001B404 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B40A 6100 0000                  		bsr.w	Obj70_Move2
0001B40E                            
0001B40E                            Obj70_Action:				; XREF: Obj70_Index
0001B40E 3F28 0008                  		move.w	8(a0),-(sp)
0001B412 4A68 003A                  		tst.w	$3A(a0)
0001B416 6700                       		beq.s	Obj70_Move
0001B418 5368 003A                  		subq.w	#1,$3A(a0)
0001B41C 6600                       		bne.s	Obj70_Solid
0001B41E                            
0001B41E                            Obj70_Move:
0001B41E 4EB9 0001 09C2             		jsr	SpeedToPos
0001B424 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
0001B428 6600                       		bne.s	Obj70_Solid	; if time remains, branch
0001B42A 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
0001B42E                            
0001B42E                            Obj70_Solid:
0001B42E 381F                       		move.w	(sp)+,d4
0001B430 4A28 0001                  		tst.b	1(a0)
0001B434 6A00                       		bpl.s	Obj70_ChkDel
0001B436 7200                       		moveq	#0,d1
0001B438 1228 0019                  		move.b	$19(a0),d1
0001B43C 0641 000B                  		addi.w	#$B,d1
0001B440 7400                       		moveq	#0,d2
0001B442 1428 0016                  		move.b	$16(a0),d2
0001B446 3602                       		move.w	d2,d3
0001B448 5243                       		addq.w	#1,d3
0001B44A 4EF9 0001 2DDC             		jmp	SolidObject
0001B450                            
0001B450                            Obj70_ChkDel:
0001B450 3028 0032                  		move.w	$32(a0),d0
0001B454 0240 FF80                  		andi.w	#$FF80,d0
0001B458 3238 F700                  		move.w	($FFFFF700).w,d1
0001B45C 0441 0080                  		subi.w	#$80,d1
0001B460 0241 FF80                  		andi.w	#$FF80,d1
0001B464 9041                       		sub.w	d1,d0
0001B466 0C40 0280                  		cmpi.w	#$280,d0
0001B46A 6200                       		bhi.s	Obj70_Delete
0001B46C 4EF9 0001 09DC             		jmp	DisplaySprite
0001B472                            ; ===========================================================================
0001B472                            
0001B472                            Obj70_Delete:
0001B472 4EF9 0001 0A18             		jmp	DeleteObject
0001B478                            ; ===========================================================================
0001B478                            
0001B478                            Obj70_Move2:				; XREF: Obj70_Main
0001B478 1028 0038                  		move.b	$38(a0),d0
0001B47C 0240 0018                  		andi.w	#$18,d0
0001B480 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
0001B486 43F1 0000                  		lea	(a1,d0.w),a1
0001B48A 3159 0010                  		move.w	(a1)+,$10(a0)
0001B48E 3159 0012                  		move.w	(a1)+,$12(a0)
0001B492 3159 0034                  		move.w	(a1)+,$34(a0)
0001B496 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001B49A 317C 0007 003A             		move.w	#7,$3A(a0)
0001B4A0 4E75                       		rts	
0001B4A2                            ; ===========================================================================
0001B4A2 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001B4AA 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001B4B2 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001B4BA 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001B4C2                            ; ---------------------------------------------------------------------------
0001B4C2                            ; Sprite mappings - large girder block (SBZ)
0001B4C2                            ; ---------------------------------------------------------------------------
0001B4C2                            Map_obj70:
0001B4C2                            	include "_maps\obj70.asm"
0001B4C2                            ; ---------------------------------------------------------------------------
0001B4C2                            ; Sprite mappings - large girder block (SBZ)
0001B4C2                            ; ---------------------------------------------------------------------------
0001B4C2 0000                       		dc.w byte_1662A-Map_obj70
0001B4C4 0C                         byte_1662A:	dc.b $C
0001B4C5 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001B4CA 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001B4CF E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001B4D4 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001B4D9 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001B4DE 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001B4E3 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001B4E8 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001B4ED E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001B4F2 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001B4F7 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001B4FC 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001B502 00                         		even
0001B502 00                         		even
0001B502                            
0001B502                            ; ===========================================================================
0001B502                            ; ---------------------------------------------------------------------------
0001B502                            ; Object 72 - teleporter (SBZ)
0001B502                            ; ---------------------------------------------------------------------------
0001B502                            
0001B502                            Obj72:					; XREF: Obj_Index
0001B502 7000                       		moveq	#0,d0
0001B504 1028 0024                  		move.b	$24(a0),d0
0001B508 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001B50C 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
0001B510 3028 0008                  		move.w	8(a0),d0
0001B514 0240 FF80                  		andi.w	#$FF80,d0
0001B518 3238 F700                  		move.w	($FFFFF700).w,d1
0001B51C 0441 0080                  		subi.w	#$80,d1
0001B520 0241 FF80                  		andi.w	#$FF80,d1
0001B524 9041                       		sub.w	d1,d0
0001B526 0C40 0280                  		cmpi.w	#$280,d0
0001B52A 6200                       		bhi.s	Obj72_Delete
0001B52C 4E75                       		rts	
0001B52E                            ; ===========================================================================
0001B52E                            
0001B52E                            Obj72_Delete:
0001B52E 4EF9 0001 0A18             		jmp	DeleteObject
0001B534                            ; ===========================================================================
0001B534 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
0001B536 0000                       		dc.w loc_166C8-Obj72_Index
0001B538 0000                       		dc.w loc_1675E-Obj72_Index
0001B53A 0000                       		dc.w loc_16798-Obj72_Index
0001B53C                            ; ===========================================================================
0001B53C                            
0001B53C                            Obj72_Main:				; XREF: Obj72_Index
0001B53C 5428 0024                  		addq.b	#2,$24(a0)
0001B540 1028 0028                  		move.b	$28(a0),d0
0001B544 D040                       		add.w	d0,d0
0001B546 0240 001E                  		andi.w	#$1E,d0
0001B54A 45FA 0000                  		lea	Obj72_Data(pc),a2
0001B54E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001B552 315A 003A                  		move.w	(a2)+,$3A(a0)
0001B556 214A 003C                  		move.l	a2,$3C(a0)
0001B55A 315A 0036                  		move.w	(a2)+,$36(a0)
0001B55E 315A 0038                  		move.w	(a2)+,$38(a0)
0001B562                            
0001B562                            loc_166C8:				; XREF: Obj72_Index
0001B562 43F8 D000                  		lea	($FFFFD000).w,a1
0001B566 3029 0008                  		move.w	8(a1),d0
0001B56A 9068 0008                  		sub.w	8(a0),d0
0001B56E 0828 0000 0022             		btst	#0,$22(a0)
0001B574 6700                       		beq.s	loc_166E0
0001B576 0640 000F                  		addi.w	#$F,d0
0001B57A                            
0001B57A                            loc_166E0:
0001B57A 0C40 0010                  		cmpi.w	#$10,d0
0001B57E 6400                       		bcc.s	locret_1675C
0001B580 3229 000C                  		move.w	$C(a1),d1
0001B584 9268 000C                  		sub.w	$C(a0),d1
0001B588 0641 0020                  		addi.w	#$20,d1
0001B58C 0C41 0040                  		cmpi.w	#$40,d1
0001B590 6400                       		bcc.s	locret_1675C
0001B592 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001B596 6600                       		bne.s	locret_1675C
0001B598 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001B59E 6600                       		bne.s	loc_1670E
0001B5A0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001B5A6 6500                       		bcs.s	locret_1675C
0001B5A8                            
0001B5A8                            loc_1670E:
0001B5A8 5428 0024                  		addq.b	#2,$24(a0)
0001B5AC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001B5B2 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001B5B8 337C 0800 0014             		move.w	#$800,$14(a1)
0001B5BE 337C 0000 0010             		move.w	#0,$10(a1)
0001B5C4 337C 0000 0012             		move.w	#0,$12(a1)
0001B5CA 08A8 0005 0022             		bclr	#5,$22(a0)
0001B5D0 08A9 0005 0022             		bclr	#5,$22(a1)
0001B5D6 08E9 0001 0022             		bset	#1,$22(a1)
0001B5DC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5E8 4228 0032                  		clr.b	$32(a0)
0001B5EC 303C 00BE                  		move.w	#$BE,d0
0001B5F0 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001B5F6                            
0001B5F6                            locret_1675C:
0001B5F6 4E75                       		rts	
0001B5F8                            ; ===========================================================================
0001B5F8                            
0001B5F8                            loc_1675E:				; XREF: Obj72_Index
0001B5F8 43F8 D000                  		lea	($FFFFD000).w,a1
0001B5FC 1028 0032                  		move.b	$32(a0),d0
0001B600 5428 0032                  		addq.b	#2,$32(a0)
0001B604 4EB9 0000 3736             		jsr	(CalcSine).l
0001B60A EA40                       		asr.w	#5,d0
0001B60C 3428 000C                  		move.w	$C(a0),d2
0001B610 9440                       		sub.w	d0,d2
0001B612 3342 000C                  		move.w	d2,$C(a1)
0001B616 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001B61C 6600                       		bne.s	locret_16796
0001B61E 6100 0000                  		bsr.w	sub_1681C
0001B622 5428 0024                  		addq.b	#2,$24(a0)
0001B626 303C 00BC                  		move.w	#$BC,d0
0001B62A 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play teleport sound
0001B630                            
0001B630                            locret_16796:
0001B630 4E75                       		rts	
0001B632                            ; ===========================================================================
0001B632                            
0001B632                            loc_16798:				; XREF: Obj72_Index
0001B632 588F                       		addq.l	#4,sp
0001B634 43F8 D000                  		lea	($FFFFD000).w,a1
0001B638 5328 002E                  		subq.b	#1,$2E(a0)
0001B63C 6A00                       		bpl.s	loc_167DA
0001B63E 3368 0036 0008             		move.w	$36(a0),8(a1)
0001B644 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001B64A 7200                       		moveq	#0,d1
0001B64C 1228 003A                  		move.b	$3A(a0),d1
0001B650 5801                       		addq.b	#4,d1
0001B652 B228 003B                  		cmp.b	$3B(a0),d1
0001B656 6500                       		bcs.s	loc_167C2
0001B658 7200                       		moveq	#0,d1
0001B65A 6000                       		bra.s	loc_16800
0001B65C                            ; ===========================================================================
0001B65C                            
0001B65C                            loc_167C2:
0001B65C 1141 003A                  		move.b	d1,$3A(a0)
0001B660 2468 003C                  		movea.l	$3C(a0),a2
0001B664 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001B66A 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001B670 6000 0000                  		bra.w	sub_1681C
0001B674                            ; ===========================================================================
0001B674                            
0001B674                            loc_167DA:
0001B674 2429 0008                  		move.l	8(a1),d2
0001B678 2629 000C                  		move.l	$C(a1),d3
0001B67C 3029 0010                  		move.w	$10(a1),d0
0001B680 48C0                       		ext.l	d0
0001B682 E180                       		asl.l	#8,d0
0001B684 D480                       		add.l	d0,d2
0001B686 3029 0012                  		move.w	$12(a1),d0
0001B68A 48C0                       		ext.l	d0
0001B68C E180                       		asl.l	#8,d0
0001B68E D680                       		add.l	d0,d3
0001B690 2342 0008                  		move.l	d2,8(a1)
0001B694 2343 000C                  		move.l	d3,$C(a1)
0001B698 4E75                       		rts	
0001B69A                            ; ===========================================================================
0001B69A                            
0001B69A                            loc_16800:
0001B69A 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001B6A0 4228 0024                  		clr.b	$24(a0)
0001B6A4 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001B6A8 337C 0000 0010             		move.w	#0,$10(a1)
0001B6AE 337C 0200 0012             		move.w	#$200,$12(a1)
0001B6B4 4E75                       		rts	
0001B6B6                            
0001B6B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6B6                            
0001B6B6                            
0001B6B6                            sub_1681C:
0001B6B6 7000                       		moveq	#0,d0
0001B6B8 343C 1000                  		move.w	#$1000,d2
0001B6BC 3028 0036                  		move.w	$36(a0),d0
0001B6C0 9069 0008                  		sub.w	8(a1),d0
0001B6C4 6C00                       		bge.s	loc_16830
0001B6C6 4440                       		neg.w	d0
0001B6C8 4442                       		neg.w	d2
0001B6CA                            
0001B6CA                            loc_16830:
0001B6CA 7200                       		moveq	#0,d1
0001B6CC 363C 1000                  		move.w	#$1000,d3
0001B6D0 3228 0038                  		move.w	$38(a0),d1
0001B6D4 9269 000C                  		sub.w	$C(a1),d1
0001B6D8 6C00                       		bge.s	loc_16844
0001B6DA 4441                       		neg.w	d1
0001B6DC 4443                       		neg.w	d3
0001B6DE                            
0001B6DE                            loc_16844:
0001B6DE B240                       		cmp.w	d0,d1
0001B6E0 6500                       		bcs.s	loc_1687A
0001B6E2 7200                       		moveq	#0,d1
0001B6E4 3228 0038                  		move.w	$38(a0),d1
0001B6E8 9269 000C                  		sub.w	$C(a1),d1
0001B6EC 4841                       		swap	d1
0001B6EE 83C3                       		divs.w	d3,d1
0001B6F0 7000                       		moveq	#0,d0
0001B6F2 3028 0036                  		move.w	$36(a0),d0
0001B6F6 9069 0008                  		sub.w	8(a1),d0
0001B6FA 6700                       		beq.s	loc_16866
0001B6FC 4840                       		swap	d0
0001B6FE 81C1                       		divs.w	d1,d0
0001B700                            
0001B700                            loc_16866:
0001B700 3340 0010                  		move.w	d0,$10(a1)
0001B704 3343 0012                  		move.w	d3,$12(a1)
0001B708 4A41                       		tst.w	d1
0001B70A 6A00                       		bpl.s	loc_16874
0001B70C 4441                       		neg.w	d1
0001B70E                            
0001B70E                            loc_16874:
0001B70E 3141 002E                  		move.w	d1,$2E(a0)
0001B712 4E75                       		rts	
0001B714                            ; ===========================================================================
0001B714                            
0001B714                            loc_1687A:
0001B714 7000                       		moveq	#0,d0
0001B716 3028 0036                  		move.w	$36(a0),d0
0001B71A 9069 0008                  		sub.w	8(a1),d0
0001B71E 4840                       		swap	d0
0001B720 81C2                       		divs.w	d2,d0
0001B722 7200                       		moveq	#0,d1
0001B724 3228 0038                  		move.w	$38(a0),d1
0001B728 9269 000C                  		sub.w	$C(a1),d1
0001B72C 6700                       		beq.s	loc_16898
0001B72E 4841                       		swap	d1
0001B730 83C0                       		divs.w	d0,d1
0001B732                            
0001B732                            loc_16898:
0001B732 3341 0012                  		move.w	d1,$12(a1)
0001B736 3342 0010                  		move.w	d2,$10(a1)
0001B73A 4A40                       		tst.w	d0
0001B73C 6A00                       		bpl.s	loc_168A6
0001B73E 4440                       		neg.w	d0
0001B740                            
0001B740                            loc_168A6:
0001B740 3140 002E                  		move.w	d0,$2E(a0)
0001B744 4E75                       		rts	
0001B746                            ; End of function sub_1681C
0001B746                            
0001B746                            ; ===========================================================================
0001B746 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001B74C 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001B752 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001B756 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001B75C 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001B762 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001B768 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001B76E 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001B774 0884 0298 0894             		dc.w $884, $298, $894
0001B77A 0270 0894 0190             		dc.w $270, $894, $190
0001B780 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001B786 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0001B78C 1184 0498 1158             		dc.w $1184, $498, $1158
0001B792 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001B798 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001B79E 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001B7A4 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001B7AA 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001B7B0 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001B7B6 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001B7BC 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001B7C2 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001B7C8 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001B7CE                            ; ===========================================================================
0001B7CE                            ; ---------------------------------------------------------------------------
0001B7CE                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001B7CE                            ; ---------------------------------------------------------------------------
0001B7CE                            
0001B7CE                            Obj78:					; XREF: Obj_Index
0001B7CE 7000                       		moveq	#0,d0
0001B7D0 1028 0024                  		move.b	$24(a0),d0
0001B7D4 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001B7D8 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001B7DC                            ; ===========================================================================
0001B7DC 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001B7DE 0000                       		dc.w Obj78_Action-Obj78_Index
0001B7E0 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001B7E2 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001B7E4 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001B7E6 0000                       		dc.w Obj78_Delete-Obj78_Index
0001B7E8 0000                       		dc.w loc_16CC0-Obj78_Index
0001B7EA                            ; ===========================================================================
0001B7EA                            
0001B7EA                            locret_16950:
0001B7EA 4E75                       		rts	
0001B7EC                            ; ===========================================================================
0001B7EC                            
0001B7EC                            Obj78_Main:				; XREF: Obj78_Index
0001B7EC 117C 0007 0016             		move.b	#7,$16(a0)
0001B7F2 117C 0008 0017             		move.b	#8,$17(a0)
0001B7F8 4EB9 0001 09A2             		jsr	ObjectFall
0001B7FE 4EBA E4A6                  		jsr	ObjHitFloor
0001B802 4A41                       		tst.w	d1
0001B804 6AE4                       		bpl.s	locret_16950
0001B806 D368 000C                  		add.w	d1,$C(a0)
0001B80A 4268 0012                  		clr.w	$12(a0)
0001B80E 5428 0024                  		addq.b	#2,$24(a0)
0001B812 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001B81A 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001B820 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001B826 6700                       		beq.s	loc_16996
0001B828 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001B82E                            
0001B82E                            loc_16996:
0001B82E 0228 0003 0001             		andi.b	#3,1(a0)
0001B834 0028 0004 0001             		ori.b	#4,1(a0)
0001B83A 1168 0001 0022             		move.b	1(a0),$22(a0)
0001B840 117C 0004 0018             		move.b	#4,$18(a0)
0001B846 117C 0008 0019             		move.b	#8,$19(a0)
0001B84C 117C 000B 0020             		move.b	#$B,$20(a0)
0001B852 3428 0008                  		move.w	8(a0),d2
0001B856 7A0C                       		moveq	#$C,d5
0001B858 0828 0000 0022             		btst	#0,$22(a0)
0001B85E 6700                       		beq.s	loc_169CA
0001B860 4445                       		neg.w	d5
0001B862                            
0001B862                            loc_169CA:
0001B862 1C3C 0004                  		move.b	#4,d6
0001B866 7600                       		moveq	#0,d3
0001B868 7804                       		moveq	#4,d4
0001B86A 2448                       		movea.l	a0,a2
0001B86C 7202                       		moveq	#2,d1
0001B86E                            
0001B86E                            Obj78_LoadBody:
0001B86E 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001B874 6600                       		bne.s	Obj78_QuitLoad
0001B876 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001B87A 1346 0024                  		move.b	d6,$24(a1)
0001B87E 5406                       		addq.b	#2,d6
0001B880 2368 0004 0004             		move.l	4(a0),4(a1)
0001B886 3368 0002 0002             		move.w	2(a0),2(a1)
0001B88C 137C 0005 0018             		move.b	#5,$18(a1)
0001B892 137C 0008 0019             		move.b	#8,$19(a1)
0001B898 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001B89E D445                       		add.w	d5,d2
0001B8A0 3342 0008                  		move.w	d2,8(a1)
0001B8A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B8AA 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001B8B0 1368 0022 0001             		move.b	$22(a0),1(a1)
0001B8B6 137C 0008 001A             		move.b	#8,$1A(a1)
0001B8BC 234A 003C                  		move.l	a2,$3C(a1)
0001B8C0 1344 003C                  		move.b	d4,$3C(a1)
0001B8C4 5804                       		addq.b	#4,d4
0001B8C6 2449                       		movea.l	a1,a2
0001B8C8                            
0001B8C8                            Obj78_QuitLoad:
0001B8C8 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001B8CC                            
0001B8CC 117C 0007 002A             		move.b	#7,$2A(a0)
0001B8D2 4228 003C                  		clr.b	$3C(a0)
0001B8D6                            
0001B8D6                            Obj78_Action:				; XREF: Obj78_Index
0001B8D6 4A28 0022                  		tst.b	$22(a0)
0001B8DA 6B00 0000                  		bmi.w	loc_16C96
0001B8DE 7000                       		moveq	#0,d0
0001B8E0 1028 0025                  		move.b	$25(a0),d0
0001B8E4 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001B8E8 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001B8EC 1228 002B                  		move.b	$2B(a0),d1
0001B8F0 6A00                       		bpl.s	Obj78_Display
0001B8F2 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001B8F8 1028 0026                  		move.b	$26(a0),d0
0001B8FC 0240 007F                  		andi.w	#$7F,d0
0001B900 5828 0026                  		addq.b	#4,$26(a0)
0001B904 1031 0000                  		move.b	(a1,d0.w),d0
0001B908 6A00                       		bpl.s	Obj78_AniHead
0001B90A 08A8 0007 002B             		bclr	#7,$2B(a0)
0001B910 6000                       		bra.s	Obj78_Display
0001B912                            ; ===========================================================================
0001B912                            
0001B912                            Obj78_AniHead:
0001B912 0201 0010                  		andi.b	#$10,d1
0001B916 D001                       		add.b	d1,d0
0001B918 1140 001A                  		move.b	d0,$1A(a0)
0001B91C                            
0001B91C                            Obj78_Display:
0001B91C 3028 0008                  		move.w	8(a0),d0
0001B920 0240 FF80                  		andi.w	#$FF80,d0
0001B924 3238 F700                  		move.w	($FFFFF700).w,d1
0001B928 0441 0080                  		subi.w	#$80,d1
0001B92C 0241 FF80                  		andi.w	#$FF80,d1
0001B930 9041                       		sub.w	d1,d0
0001B932 0C40 0280                  		cmpi.w	#$280,d0
0001B936 6200 0000                  		bhi.w	Obj78_ChkGone
0001B93A 4EF9 0001 09DC             		jmp	DisplaySprite
0001B940                            ; ===========================================================================
0001B940                            
0001B940                            Obj78_ChkGone:
0001B940 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001B944 7000                       		moveq	#0,d0
0001B946 1028 0023                  		move.b	$23(a0),d0
0001B94A 6700                       		beq.s	loc_16ABC
0001B94C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001B952                            
0001B952                            loc_16ABC:
0001B952 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001B958 4E75                       		rts	
0001B95A                            ; ===========================================================================
0001B95A                            
0001B95A                            Obj78_Delete:				; XREF: Obj78_Index
0001B95A 4EF9 0001 0A18             		jmp	DeleteObject
0001B960                            ; ===========================================================================
0001B960 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001B962 0000                       		dc.w loc_16B02-Obj78_Index2
0001B964                            ; ===========================================================================
0001B964                            
0001B964                            Obj78_Move:				; XREF: Obj78_Index2
0001B964 5328 002A                  		subq.b	#1,$2A(a0)
0001B968 6B00                       		bmi.s	Obj78_Move2
0001B96A 4E75                       		rts	
0001B96C                            ; ===========================================================================
0001B96C                            
0001B96C                            Obj78_Move2:
0001B96C 5428 0025                  		addq.b	#2,$25(a0)
0001B970 117C 0010 002A             		move.b	#$10,$2A(a0)
0001B976 317C FF40 0010             		move.w	#-$C0,$10(a0)
0001B97C 317C 0040 0014             		move.w	#$40,$14(a0)
0001B982 0868 0004 002B             		bchg	#4,$2B(a0)
0001B988 6600                       		bne.s	loc_16AFC
0001B98A 4268 0010                  		clr.w	$10(a0)
0001B98E 4468 0014                  		neg.w	$14(a0)
0001B992                            
0001B992                            loc_16AFC:
0001B992 08E8 0007 002B             		bset	#7,$2B(a0)
0001B998                            
0001B998                            loc_16B02:				; XREF: Obj78_Index2
0001B998 5328 002A                  		subq.b	#1,$2A(a0)
0001B99C 6B00                       		bmi.s	loc_16B5E
0001B99E 2F28 0008                  		move.l	8(a0),-(sp)
0001B9A2 2428 0008                  		move.l	8(a0),d2
0001B9A6 3028 0010                  		move.w	$10(a0),d0
0001B9AA 0828 0000 0022             		btst	#0,$22(a0)
0001B9B0 6700                       		beq.s	loc_16B1E
0001B9B2 4440                       		neg.w	d0
0001B9B4                            
0001B9B4                            loc_16B1E:
0001B9B4 48C0                       		ext.l	d0
0001B9B6 E180                       		asl.l	#8,d0
0001B9B8 D480                       		add.l	d0,d2
0001B9BA 2142 0008                  		move.l	d2,8(a0)
0001B9BE 4EBA E2E6                  		jsr	ObjHitFloor
0001B9C2 241F                       		move.l	(sp)+,d2
0001B9C4 0C41 FFF8                  		cmpi.w	#-8,d1
0001B9C8 6D00                       		blt.s	loc_16B70
0001B9CA 0C41 000C                  		cmpi.w	#$C,d1
0001B9CE 6C00                       		bge.s	loc_16B70
0001B9D0 D368 000C                  		add.w	d1,$C(a0)
0001B9D4 4842                       		swap	d2
0001B9D6 B468 0008                  		cmp.w	8(a0),d2
0001B9DA 6700                       		beq.s	locret_16B5C
0001B9DC 7000                       		moveq	#0,d0
0001B9DE 1028 003C                  		move.b	$3C(a0),d0
0001B9E2 5228 003C                  		addq.b	#1,$3C(a0)
0001B9E6 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001B9EC 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001B9F0                            
0001B9F0                            locret_16B5C:
0001B9F0 4E75                       		rts	
0001B9F2                            ; ===========================================================================
0001B9F2                            
0001B9F2                            loc_16B5E:
0001B9F2 5528 0025                  		subq.b	#2,$25(a0)
0001B9F6 117C 0007 002A             		move.b	#7,$2A(a0)
0001B9FC 317C 0000 0010             		move.w	#0,$10(a0)
0001BA02 4E75                       		rts	
0001BA04                            ; ===========================================================================
0001BA04                            
0001BA04                            loc_16B70:
0001BA04 2142 0008                  		move.l	d2,8(a0)
0001BA08 0868 0000 0022             		bchg	#0,$22(a0)
0001BA0E 1168 0022 0001             		move.b	$22(a0),1(a0)
0001BA14 7000                       		moveq	#0,d0
0001BA16 1028 003C                  		move.b	$3C(a0),d0
0001BA1A 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001BA20 5228 003C                  		addq.b	#1,$3C(a0)
0001BA24 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001BA2A 4E75                       		rts	
0001BA2C                            ; ===========================================================================
0001BA2C                            
0001BA2C                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001BA2C 2268 003C                  		movea.l	$3C(a0),a1
0001BA30 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001BA36 6A00                       		bpl.s	Obj78_BodySeg1
0001BA38 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001BA3E 1028 0026                  		move.b	$26(a0),d0
0001BA42 0240 007F                  		andi.w	#$7F,d0
0001BA46 5828 0026                  		addq.b	#4,$26(a0)
0001BA4A 4A31 0004                  		tst.b	4(a1,d0.w)
0001BA4E 6A00                       		bpl.s	Obj78_AniBody
0001BA50 5828 0026                  		addq.b	#4,$26(a0)
0001BA54                            
0001BA54                            Obj78_AniBody:
0001BA54 1031 0000                  		move.b	(a1,d0.w),d0
0001BA58 5000                       		addq.b	#8,d0
0001BA5A 1140 001A                  		move.b	d0,$1A(a0)
0001BA5E                            
0001BA5E                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001BA5E 2268 003C                  		movea.l	$3C(a0),a1
0001BA62 4A28 0022                  		tst.b	$22(a0)
0001BA66 6B00 0000                  		bmi.w	loc_16C90
0001BA6A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001BA70 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001BA76 6700 0000                  		beq.w	loc_16C64
0001BA7A 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001BA80 3029 0010                  		move.w	$10(a1),d0
0001BA84 D069 0014                  		add.w	$14(a1),d0
0001BA88 3140 0010                  		move.w	d0,$10(a0)
0001BA8C 2428 0008                  		move.l	8(a0),d2
0001BA90 2602                       		move.l	d2,d3
0001BA92 3028 0010                  		move.w	$10(a0),d0
0001BA96 0828 0000 0022             		btst	#0,$22(a0)
0001BA9C 6700                       		beq.s	loc_16C0C
0001BA9E 4440                       		neg.w	d0
0001BAA0                            
0001BAA0                            loc_16C0C:
0001BAA0 48C0                       		ext.l	d0
0001BAA2 E180                       		asl.l	#8,d0
0001BAA4 D480                       		add.l	d0,d2
0001BAA6 2142 0008                  		move.l	d2,8(a0)
0001BAAA 4843                       		swap	d3
0001BAAC B668 0008                  		cmp.w	8(a0),d3
0001BAB0 6700                       		beq.s	loc_16C64
0001BAB2 7000                       		moveq	#0,d0
0001BAB4 1028 003C                  		move.b	$3C(a0),d0
0001BAB8 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001BABC 0C01 0080                  		cmpi.b	#-$80,d1
0001BAC0 6600                       		bne.s	loc_16C50
0001BAC2 4843                       		swap	d3
0001BAC4 2143 0008                  		move.l	d3,8(a0)
0001BAC8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001BACC 0868 0000 0022             		bchg	#0,$22(a0)
0001BAD2 1168 0022 0001             		move.b	$22(a0),1(a0)
0001BAD8 5228 003C                  		addq.b	#1,$3C(a0)
0001BADC 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001BAE2 6000                       		bra.s	loc_16C64
0001BAE4                            ; ===========================================================================
0001BAE4                            
0001BAE4                            loc_16C50:
0001BAE4 4881                       		ext.w	d1
0001BAE6 D368 000C                  		add.w	d1,$C(a0)
0001BAEA 5228 003C                  		addq.b	#1,$3C(a0)
0001BAEE 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001BAF4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001BAF8                            
0001BAF8                            loc_16C64:
0001BAF8 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001BAFE 6700                       		beq.s	loc_16C90
0001BB00 0C11 0027                  		cmpi.b	#$27,0(a1)
0001BB04 6700                       		beq.s	loc_16C7C
0001BB06 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001BB0C 6600                       		bne.s	loc_16C82
0001BB0E                            
0001BB0E                            loc_16C7C:
0001BB0E 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
0001BB12 117C 000A 0024             		move.b	#$A,$24(a0)
0001BB18                            
0001BB18                            loc_16C82:
0001BB18 4EF9 0001 09DC             		jmp	DisplaySprite
0001BB1E                            
0001BB1E                            ; ===========================================================================
0001BB1E FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001BB26                            ; ===========================================================================
0001BB26                            
0001BB26                            loc_16C90:
0001BB26 08E9 0007 0022             		bset	#7,$22(a1)
0001BB2C                            
0001BB2C                            loc_16C96:
0001BB2C 7000                       		moveq	#0,d0
0001BB2E 1028 0024                  		move.b	$24(a0),d0
0001BB32 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001BB36 0828 0000 0022             		btst	#0,$22(a0)
0001BB3C 6700                       		beq.s	loc_16CAA
0001BB3E 4440                       		neg.w	d0
0001BB40                            
0001BB40                            loc_16CAA:
0001BB40 3140 0010                  		move.w	d0,$10(a0)
0001BB44 317C FC00 0012             		move.w	#-$400,$12(a0)
0001BB4A 117C 000C 0024             		move.b	#$C,$24(a0)
0001BB50 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001BB56                            
0001BB56                            loc_16CC0:				; XREF: Obj78_Index
0001BB56 4EB9 0001 09A2             		jsr	ObjectFall
0001BB5C 4A68 0012                  		tst.w	$12(a0)
0001BB60 6B00                       		bmi.s	loc_16CE0
0001BB62 4EBA E142                  		jsr	ObjHitFloor
0001BB66 4A41                       		tst.w	d1
0001BB68 6A00                       		bpl.s	loc_16CE0
0001BB6A D368 000C                  		add.w	d1,$C(a0)
0001BB6E 317C FC00 0012             		move.w	#-$400,$12(a0)
0001BB74                            
0001BB74                            loc_16CE0:
0001BB74 4A28 0001                  		tst.b	1(a0)
0001BB78 6A00 FDC6                  		bpl.w	Obj78_ChkGone
0001BB7C 4EF9 0001 09DC             		jmp	DisplaySprite
0001BB82                            ; ===========================================================================
0001BB82                            Ani_obj78:
0001BB82                            	include "_anim\obj78.asm"
0001BB82                            ; ---------------------------------------------------------------------------
0001BB82                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001BB82                            ; ---------------------------------------------------------------------------
0001BB82 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001BB92 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001BBA2 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001BBB2 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001BBC2 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001BBD2 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001BBE2 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001BBF2 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001BC02                            	even
0001BC02                            	even
0001BC02                            
0001BC02                            ; ---------------------------------------------------------------------------
0001BC02                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001BC02                            ; ---------------------------------------------------------------------------
0001BC02                            Map_obj78:
0001BC02                            	include "_maps\obj78.asm"
0001BC02                            ; ---------------------------------------------------------------------------
0001BC02                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001BC02                            ; ---------------------------------------------------------------------------
0001BC02 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001BC06 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001BC0A 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001BC0E 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001BC12 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001BC16 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001BC1A 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001BC1E 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001BC22 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001BC26 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001BC2A 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001BC2E 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001BC32 01                         byte_16D9E:	dc.b 1
0001BC33 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001BC38 01                         byte_16DA4:	dc.b 1
0001BC39 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001BC3E 01                         byte_16DAA:	dc.b 1
0001BC3F F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001BC44 01                         byte_16DB0:	dc.b 1
0001BC45 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001BC4A 01                         byte_16DB6:	dc.b 1
0001BC4B EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001BC50 01                         byte_16DBC:	dc.b 1
0001BC51 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001BC56 01                         byte_16DC2:	dc.b 1
0001BC57 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001BC5C 01                         byte_16DC8:	dc.b 1
0001BC5D EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001BC62 01                         byte_16DCE:	dc.b 1
0001BC63 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BC68 01                         byte_16DD4:	dc.b 1
0001BC69 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001BC6E 01                         byte_16DDA:	dc.b 1
0001BC6F F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001BC74 01                         byte_16DE0:	dc.b 1
0001BC75 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001BC7A 01                         byte_16DE6:	dc.b 1
0001BC7B F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001BC80 01                         byte_16DEC:	dc.b 1
0001BC81 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001BC86 01                         byte_16DF2:	dc.b 1
0001BC87 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001BC8C 01                         byte_16DF8:	dc.b 1
0001BC8D F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001BC92 01                         byte_16DFE:	dc.b 1
0001BC93 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001BC98 01                         byte_16E04:	dc.b 1
0001BC99 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001BC9E 01                         byte_16E0A:	dc.b 1
0001BC9F F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001BCA4 01                         byte_16E10:	dc.b 1
0001BCA5 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001BCAA 01                         byte_16E16:	dc.b 1
0001BCAB EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001BCB0 01                         byte_16E1C:	dc.b 1
0001BCB1 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001BCB6 01                         byte_16E22:	dc.b 1
0001BCB7 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001BCBC 01                         byte_16E28:	dc.b 1
0001BCBD EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001BCC2                            		even
0001BCC2                            		even
0001BCC2                            
0001BCC2                            ; ===========================================================================
0001BCC2                            ; ---------------------------------------------------------------------------
0001BCC2                            ; Object 79 - lamppost
0001BCC2                            ; ---------------------------------------------------------------------------
0001BCC2                            
0001BCC2                            Obj79:					; XREF: Obj_Index
0001BCC2 7000                       		moveq	#0,d0
0001BCC4 1028 0024                  		move.b	$24(a0),d0
0001BCC8 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001BCCC 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001BCD0 4EF9 0001 2AB4             		jmp	MarkObjGone
0001BCD6                            ; ===========================================================================
0001BCD6 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001BCD8 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001BCDA 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001BCDC 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001BCDE                            ; ===========================================================================
0001BCDE                            
0001BCDE                            Obj79_Main:				; XREF: Obj79_Index
0001BCDE 5428 0024                  		addq.b	#2,$24(a0)
0001BCE2 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001BCEA 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001BCF0 117C 0004 0001             		move.b	#4,1(a0)
0001BCF6 117C 0008 0019             		move.b	#8,$19(a0)
0001BCFC 117C 0005 0018             		move.b	#5,$18(a0)
0001BD02 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001BD06 7000                       		moveq	#0,d0
0001BD08 1028 0023                  		move.b	$23(a0),d0
0001BD0C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001BD12 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001BD18 6600                       		bne.s	Obj79_RedLamp
0001BD1A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001BD1E 0201 007F                  		andi.b	#$7F,d1
0001BD22 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001BD26 0202 007F                  		andi.b	#$7F,d2
0001BD2A B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001BD2C 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001BD2E                            
0001BD2E                            Obj79_RedLamp:
0001BD2E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001BD34 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001BD3A 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001BD40 4E75                       		rts	
0001BD42                            ; ===========================================================================
0001BD42                            
0001BD42                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001BD42 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BD46 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001BD4A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001BD4E 6B00 0000                  		bmi.w	locret_16F90
0001BD52 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001BD56 0201 007F                  		andi.b	#$7F,d1
0001BD5A 1428 0028                  		move.b	$28(a0),d2
0001BD5E 0202 007F                  		andi.b	#$7F,d2
0001BD62 B202                       		cmp.b	d2,d1
0001BD64 6500                       		bcs.s	Obj79_HitLamp
0001BD66 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001BD6A 7000                       		moveq	#0,d0
0001BD6C 1028 0023                  		move.b	$23(a0),d0
0001BD70 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001BD76 117C 0004 0024             		move.b	#4,$24(a0)
0001BD7C 117C 0003 001A             		move.b	#3,$1A(a0)
0001BD82 6000 0000                  		bra.w	locret_16F90
0001BD86                            ; ===========================================================================
0001BD86                            
0001BD86                            Obj79_HitLamp:
0001BD86 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD8A 9068 0008                  		sub.w	8(a0),d0
0001BD8E 5040                       		addq.w	#8,d0
0001BD90 0C40 0010                  		cmpi.w	#$10,d0
0001BD94 6400 0000                  		bcc.w	locret_16F90
0001BD98 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001BD9C 9068 000C                  		sub.w	$C(a0),d0
0001BDA0 0640 0040                  		addi.w	#$40,d0
0001BDA4 0C40 0068                  		cmpi.w	#$68,d0
0001BDA8 6400                       		bcc.s	locret_16F90
0001BDAA 303C 00A1                  		move.w	#$A1,d0
0001BDAE 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001BDB4 5428 0024                  		addq.b	#2,$24(a0)
0001BDB8 4EB9 0001 0E72             		jsr	SingleObjLoad
0001BDBE 6600                       		bne.s	loc_16F76
0001BDC0 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001BDC4 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001BDCA 3368 0008 0030             		move.w	8(a0),$30(a1)
0001BDD0 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001BDD6 0469 0018 0032             		subi.w	#$18,$32(a1)
0001BDDC 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001BDE4 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001BDEA 137C 0004 0001             		move.b	#4,1(a1)
0001BDF0 137C 0008 0019             		move.b	#8,$19(a1)
0001BDF6 137C 0004 0018             		move.b	#4,$18(a1)
0001BDFC 137C 0002 001A             		move.b	#2,$1A(a1)
0001BE02 337C 0020 0036             		move.w	#$20,$36(a1)
0001BE08                            
0001BE08                            loc_16F76:
0001BE08 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001BE0E 6100 0000                  		bsr.w	Obj79_StoreInfo
0001BE12 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001BE16 7000                       		moveq	#0,d0
0001BE18 1028 0023                  		move.b	$23(a0),d0
0001BE1C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001BE22                            
0001BE22                            locret_16F90:
0001BE22 4E75                       		rts	
0001BE24                            ; ===========================================================================
0001BE24                            
0001BE24                            Obj79_AfterHit:				; XREF: Obj79_Index
0001BE24 4E75                       		rts	
0001BE26                            ; ===========================================================================
0001BE26                            
0001BE26                            Obj79_Twirl:				; XREF: Obj79_Index
0001BE26 5368 0036                  		subq.w	#1,$36(a0)
0001BE2A 6A00                       		bpl.s	loc_16FA0
0001BE2C 117C 0004 0024             		move.b	#4,$24(a0)
0001BE32                            
0001BE32                            loc_16FA0:
0001BE32 1028 0026                  		move.b	$26(a0),d0
0001BE36 0428 0010 0026             		subi.b	#$10,$26(a0)
0001BE3C 0400 0040                  		subi.b	#$40,d0
0001BE40 4EB9 0000 3736             		jsr	(CalcSine).l
0001BE46 C3FC 0C00                  		muls.w	#$C00,d1
0001BE4A 4841                       		swap	d1
0001BE4C D268 0030                  		add.w	$30(a0),d1
0001BE50 3141 0008                  		move.w	d1,8(a0)
0001BE54 C1FC 0C00                  		muls.w	#$C00,d0
0001BE58 4840                       		swap	d0
0001BE5A D068 0032                  		add.w	$32(a0),d0
0001BE5E 3140 000C                  		move.w	d0,$C(a0)
0001BE62 4E75                       		rts	
0001BE64                            ; ===========================================================================
0001BE64                            ; ---------------------------------------------------------------------------
0001BE64                            ; Subroutine to	store information when you hit a lamppost
0001BE64                            ; ---------------------------------------------------------------------------
0001BE64                            
0001BE64                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001BE64 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001BE6A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001BE70 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001BE76 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001BE7C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001BE82 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001BE88 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001BE8E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001BE94 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001BE9A 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001BEA0 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001BEA6 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001BEAC 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001BEB2 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001BEB8 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001BEBE 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001BEC4 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001BECA 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001BED0 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001BED6 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001BEDC 4E75                       		rts	
0001BEDE                            
0001BEDE                            ; ---------------------------------------------------------------------------
0001BEDE                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001BEDE                            ; ---------------------------------------------------------------------------
0001BEDE                            
0001BEDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEDE                            
0001BEDE                            
0001BEDE                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001BEDE 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001BEE4 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001BEEA 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001BEF0 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001BEF6 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001BEFC 4278 FE20                  		clr.w	($FFFFFE20).w
0001BF00 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001BF04 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001BF0A 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001BF10 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001BF14 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001BF1A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001BF20 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001BF26 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001BF2C 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001BF32 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001BF38 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001BF3E 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001BF44 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001BF4A 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001BF50 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001BF56 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001BF5C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001BF62 6600                       		bne.s	loc_170E4
0001BF64 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001BF6A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001BF70 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001BF76                            
0001BF76                            loc_170E4:
0001BF76 4A38 FE30                  		tst.b	($FFFFFE30).w
0001BF7A 6A00                       		bpl.s	locret_170F6
0001BF7C 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001BF80 0440 00A0                  		subi.w	#$A0,d0
0001BF84 31C0 F728                  		move.w	d0,($FFFFF728).w
0001BF88                            
0001BF88                            locret_170F6:
0001BF88 4E75                       		rts	
0001BF8A                            ; End of function Obj79_LoadInfo
0001BF8A                            
0001BF8A                            ; ===========================================================================
0001BF8A                            ; ---------------------------------------------------------------------------
0001BF8A                            ; Sprite mappings - lamppost
0001BF8A                            ; ---------------------------------------------------------------------------
0001BF8A                            Map_obj79:
0001BF8A                            	include "_maps\obj79.asm"
0001BF8A                            ; ---------------------------------------------------------------------------
0001BF8A                            ; Sprite mappings - lamppost
0001BF8A                            ; ---------------------------------------------------------------------------
0001BF8A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001BF8E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001BF92 06                         byte_17100:	dc.b 6
0001BF93 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001BF98 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001BF9D F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001BFA2 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001BFA7 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
0001BFAC D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001BFB1 04                         byte_1711F:	dc.b 4
0001BFB2 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001BFB7 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001BFBC F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001BFC1 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001BFC6 02                         byte_17134:	dc.b 2
0001BFC7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001BFCC F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001BFD1 06                         byte_1713F:	dc.b 6
0001BFD2 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001BFD7 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001BFDC F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001BFE1 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001BFE6 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001BFEB D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001BFF0                            		even
0001BFF0                            		even
0001BFF0                            
0001BFF0                            ; ===========================================================================
0001BFF0                            ; ---------------------------------------------------------------------------
0001BFF0                            ; Object 7D - hidden points at the end of a level
0001BFF0                            ; ---------------------------------------------------------------------------
0001BFF0                            
0001BFF0                            Obj7D:					; XREF: Obj_Index
0001BFF0 7000                       		moveq	#0,d0
0001BFF2 1028 0024                  		move.b	$24(a0),d0
0001BFF6 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
0001BFFA 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001BFFE                            ; ===========================================================================
0001BFFE 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001C000 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001C002                            ; ===========================================================================
0001C002                            
0001C002                            Obj7D_Main:				; XREF: Obj7D_Index
0001C002 7410                       		moveq	#$10,d2
0001C004 3602                       		move.w	d2,d3
0001C006 D643                       		add.w	d3,d3
0001C008 43F8 D000                  		lea	($FFFFD000).w,a1
0001C00C 3029 0008                  		move.w	8(a1),d0
0001C010 9068 0008                  		sub.w	8(a0),d0
0001C014 D042                       		add.w	d2,d0
0001C016 B043                       		cmp.w	d3,d0
0001C018 6400                       		bcc.s	Obj7D_ChkDel
0001C01A 3229 000C                  		move.w	$C(a1),d1
0001C01E 9268 000C                  		sub.w	$C(a0),d1
0001C022 D242                       		add.w	d2,d1
0001C024 B243                       		cmp.w	d3,d1
0001C026 6400                       		bcc.s	Obj7D_ChkDel
0001C028 4A78 FE08                  		tst.w	($FFFFFE08).w
0001C02C 6600                       		bne.s	Obj7D_ChkDel
0001C02E 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001C032 6600                       		bne.s	Obj7D_ChkDel
0001C034 5428 0024                  		addq.b	#2,$24(a0)
0001C038 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001C040 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001C046 0028 0004 0001             		ori.b	#4,1(a0)
0001C04C 117C 0000 0018             		move.b	#0,$18(a0)
0001C052 117C 0010 0019             		move.b	#$10,$19(a0)
0001C058 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001C05E 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001C064 303C 00C9                  		move.w	#$C9,d0
0001C068 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play bonus sound
0001C06E 7000                       		moveq	#0,d0
0001C070 1028 0028                  		move.b	$28(a0),d0
0001C074 D040                       		add.w	d0,d0
0001C076 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001C07A 4EB9 0000 0000             		jsr	AddPoints
0001C080                            
0001C080                            Obj7D_ChkDel:
0001C080 3028 0008                  		move.w	8(a0),d0
0001C084 0240 FF80                  		andi.w	#$FF80,d0
0001C088 3238 F700                  		move.w	($FFFFF700).w,d1
0001C08C 0441 0080                  		subi.w	#$80,d1
0001C090 0241 FF80                  		andi.w	#$FF80,d1
0001C094 9041                       		sub.w	d1,d0
0001C096 0C40 0280                  		cmpi.w	#$280,d0
0001C09A 6200                       		bhi.s	Obj7D_Delete
0001C09C 4E75                       		rts	
0001C09E                            ; ===========================================================================
0001C09E                            
0001C09E                            Obj7D_Delete:
0001C09E 4EF9 0001 0A18             		jmp	DeleteObject
0001C0A4                            ; ===========================================================================
0001C0A4 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001C0A6 03E8                       		dc.w 1000
0001C0A8 0064                       		dc.w 100
0001C0AA 000A                       		dc.w 10
0001C0AC                            ; ===========================================================================
0001C0AC                            
0001C0AC                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0001C0AC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001C0B0 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001C0B2 3028 0008                  		move.w	8(a0),d0
0001C0B6 0240 FF80                  		andi.w	#-$80,d0
0001C0BA 3238 F700                  		move.w	($FFFFF700).w,d1
0001C0BE 0441 0080                  		subi.w	#$80,d1
0001C0C2 0241 FF80                  		andi.w	#-$80,d1
0001C0C6 9041                       		sub.w	d1,d0
0001C0C8 0C40 0280                  		cmpi.w	#$280,d0
0001C0CC 6200                       		bhi.s	Obj7D_Delete2
0001C0CE 4EF9 0001 09DC             		jmp	DisplaySprite
0001C0D4                            ; ===========================================================================
0001C0D4                            
0001C0D4                            Obj7D_Delete2:
0001C0D4 4EF9 0001 0A18             		jmp	DeleteObject
0001C0DA                            ; ===========================================================================
0001C0DA                            ; ---------------------------------------------------------------------------
0001C0DA                            ; Sprite mappings - hidden points at the end of	a level
0001C0DA                            ; ---------------------------------------------------------------------------
0001C0DA                            Map_obj7D:
0001C0DA                            	include "_maps\obj7D.asm"
0001C0DA                            ; ---------------------------------------------------------------------------
0001C0DA                            ; Sprite mappings - hidden points at the end of	a level
0001C0DA                            ; ---------------------------------------------------------------------------
0001C0DA 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001C0DE 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001C0E2 00                         byte_17250:	dc.b 0
0001C0E3 01                         byte_17251:	dc.b 1
0001C0E4 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001C0E9 01                         byte_17257:	dc.b 1
0001C0EA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001C0EF 01                         byte_1725D:	dc.b 1
0001C0F0 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001C0F6 00                         		even
0001C0F6 00                         		even
0001C0F6                            
0001C0F6                            ; ===========================================================================
0001C0F6                            ; ---------------------------------------------------------------------------
0001C0F6                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001C0F6                            ; ---------------------------------------------------------------------------
0001C0F6                            
0001C0F6                            Obj8A:					; XREF: Obj_Index
0001C0F6 7000                       		moveq	#0,d0
0001C0F8 1028 0024                  		move.b	$24(a0),d0
0001C0FC 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001C100 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001C104                            ; ===========================================================================
0001C104 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001C106 0000                       		dc.w Obj8A_Display-Obj8A_Index
0001C108                            ; ===========================================================================
0001C108                            
0001C108                            Obj8A_Main:				; XREF: Obj8A_Index
0001C108 5428 0024                  		addq.b	#2,$24(a0)
0001C10C 317C 0120 0008             		move.w	#$120,8(a0)
0001C112 317C 00F0 000A             		move.w	#$F0,$A(a0)
0001C118 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001C120 317C 05A0 0002             		move.w	#$5A0,2(a0)
0001C126 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001C12A 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001C12E 117C 0000 0001             		move.b	#0,1(a0)
0001C134 117C 0000 0018             		move.b	#0,$18(a0)
0001C13A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
0001C140 6600                       		bne.s	Obj8A_Display	; if not, branch
0001C142 317C 00A6 0002             		move.w	#$A6,2(a0)
0001C148 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001C14E 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001C152 6700                       		beq.s	Obj8A_Display	; if not, branch
0001C154 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
0001C15A 6600                       		bne.s	Obj8A_Display	; if not, branch
0001C15C 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001C162 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001C168 4EF9 0001 0A18             		jmp	DeleteObject
0001C16E                            ; ===========================================================================
0001C16E                            
0001C16E                            Obj8A_Display:				; XREF: Obj8A_Index
0001C16E 4EF9 0001 09DC             		jmp	DisplaySprite
0001C174                            ; ===========================================================================
0001C174                            ; ---------------------------------------------------------------------------
0001C174                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001C174                            ; ---------------------------------------------------------------------------
0001C174                            Map_obj8A:
0001C174                            	include "_maps\obj8A.asm"
0001C174                            ; ---------------------------------------------------------------------------
0001C174                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001C174                            ; ---------------------------------------------------------------------------
0001C174 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
0001C178 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
0001C17C 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
0001C180 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
0001C184 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
0001C188 0000                       		dc.w byte_176A9-Map_obj8A
0001C18A 10                         byte_172F8:	dc.b $10	;  SONIC TEAM STAFF | KYUKYOKU CREDITS
0001C18B F805 0058 80               		dc.b $F8, 5, 0, $58, $80	; K
0001C190 F805 002A 90               		dc.b $F8, 5, 0, $2A, $90	; Y
0001C195 F805 0032 A0               		dc.b $F8, 5, 0, $32, $A0	; U
0001C19A F805 0058 B0               		dc.b $F8, 5, 0, $58, $B0	; K
0001C19F F805 002A C0               		dc.b $F8, 5, 0, $2A, $C0	; Y
0001C1A4 F805 0026 D0               		dc.b $F8, 5, 0, $26, $D0	; O
0001C1A9 F805 0058 E0               		dc.b $F8, 5, 0, $58, $E0	; K
0001C1AE F805 0032 F0               		dc.b $F8, 5, 0, $32, $F0	; U
0001C1B3 F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C1B8 F805 001E 10               		dc.b $F8, 5, 0, $1E, $10	; C
0001C1BD F805 0022 20               		dc.b $F8, 5, 0, $22, $20	; R
0001C1C2 F805 000E 30               		dc.b $F8, 5, 0, $0E, $30	; E
0001C1C7 F805 0042 40               		dc.b $F8, 5, 0, $42, $40	; D
0001C1CC F801 0046 50               		dc.b $F8, 1, 0, $46, $50	; I
0001C1D1 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; T
0001C1D6 F805 002E 68               		dc.b $F8, 5, 0, $2E, $68	; S
0001C1DB 0F                         byte_1733F:	dc.b $F	;  GAME PLAN CAROL YAS | KILO AND GEMINI
0001C1DC F805 0058 80               		dc.b $F8, 5, 0, $58, $80	; K
0001C1E1 F801 0046 90               		dc.b $F8, 1, 0, $46, $90	; I
0001C1E6 F805 0016 98               		dc.b $F8, 5, 0, $16, $98	; L
0001C1EB F805 0026 A8               		dc.b $F8, 5, 0, $26, $A8	; O
0001C1F0 F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C1F5 F805 0004 C8               		dc.b $F8, 5, 0, 4, $C8		; A
0001C1FA F805 001A D8               		dc.b $F8, 5, 0, $1A, $D8	; N
0001C1FF F805 0042 E8               		dc.b $F8, 5, 0, $42, $E8	; D
0001C204 F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C209 F805 0000 08               		dc.b $F8, 5, 0, 0, $8		; G
0001C20E F805 000E 18               		dc.b $F8, 5, 0, $0E, $18	; E
0001C213 F809 0008 28               		dc.b $F8, 9, 0, 8, $28		; M
0001C218 F801 0046 3C               		dc.b $F8, 1, 0, $46, $3C	; I
0001C21D F805 001A 44               		dc.b $F8, 5, 0, $1A, $44	; N
0001C222 F801 0046 54               		dc.b $F8, 1, 0, $46, $54	; I
0001C227 0D                         byte_17390:	dc.b $D	;  PROGRAM YU 2 | RHS AND SELBI
0001C228 F805 0022 80               		dc.b $F8, 5, 0, $22, $80	; R
0001C22D F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; H
0001C232 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; S
0001C237 F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C23C F805 0004 C0               		dc.b $F8, 5, 0, 4, $C0		; A
0001C241 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	; N
0001C246 F805 0042 E0               		dc.b $F8, 5, 0, $42, $E0	; D
0001C24B F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C250 F805 002E 00               		dc.b $F8, 5, 0, $2E, $0	; S
0001C255 F805 000E 10               		dc.b $F8, 5, 0, $0E, $10	; E
0001C25A F805 0016 20               		dc.b $F8, 5, 0, $16, $20	; L
0001C25F F805 0048 30               		dc.b $F8, 5, 0, $48, $30	; B
0001C264 F801 0046 40               		dc.b $F8, 1, 0, $46, $40	; I
0001C269 0C                         byte_173C3:	dc.b $C	;  CHARACTER DESIGN BIGISLAND | MARKEYJESTER
0001C26A F809 0008 80               		dc.b $F8, 9, 0, 8, $80		; M
0001C26F F805 0004 94               		dc.b $F8, 5, 0, 4, $94		; A
0001C274 F805 0022 A4               		dc.b $F8, 5, 0, $22, $A4	; R
0001C279 F805 0058 B4               		dc.b $F8, 5, 0, $58, $B4	; K
0001C27E F805 000E C4               		dc.b $F8, 5, 0, $0E, $C4	; E
0001C283 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; Y
0001C288 F805 004C E4               		dc.b $F8, 5, 0, $4C, $E4	; J
0001C28D F805 000E F4               		dc.b $F8, 5, 0, $0E, $F4	; E
0001C292 F805 002E 04               		dc.b $F8, 5, 0, $2E, $4	; S
0001C297 F805 003E 14               		dc.b $F8, 5, 0, $3E, $14	; T
0001C29C F805 000E 24               		dc.b $F8, 5, 0, $0E, $24	; E
0001C2A1 F805 0022 34               		dc.b $F8, 5, 0, $22, $34	; R
0001C2A6 0A                         byte_1743C:	dc.b $A	;  DESIGN JINYA PHENIX RIE | LUIGIXHERO
0001C2A7 F805 0016 80               		dc.b $F8, 5, 0, $16, $80	; L
0001C2AC F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; U
0001C2B1 F801 0046 A0               		dc.b $F8, 1, 0, $46, $A0	; I
0001C2B6 F805 0000 A8               		dc.b $F8, 5, 0, 0, $A8		; G
0001C2BB F801 0046 B8               		dc.b $F8, 1, 0, $46, $B8	; I
0001C2C0 F805 0050 C0               		dc.b $F8, 5, 0, $50, $C0	; X
0001C2C5 F805 003A D0               		dc.b $F8, 5, 0, $3A, $D0	; H
0001C2CA F805 000E E0               		dc.b $F8, 5, 0, $0E, $E0	; E
0001C2CF F805 0022 F0               		dc.b $F8, 5, 0, $22, $F0	; R
0001C2D4 F805 0026 00               		dc.b $F8, 5, 0, $26, $0	; O
0001C2D9 0F                         byte_174A1:	dc.b $F	;  SOUND PRODUCE MASATO NAKAMURA | NINEKO AND PUTO
0001C2DA F805 001A 80               		dc.b $F8, 5, 0, $1A, $80	; N
0001C2DF F801 0046 90               		dc.b $F8, 1, 0, $46, $90	; I
0001C2E4 F805 001A 98               		dc.b $F8, 5, 0, $1A, $98	; N
0001C2E9 F805 000E A8               		dc.b $F8, 5, 0, $0E, $A8	; E
0001C2EE F805 0058 B8               		dc.b $F8, 5, 0, $58, $B8	; K
0001C2F3 F805 0026 C8               		dc.b $F8, 5, 0, $26, $C8	; O
0001C2F8 F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C2FD F805 0004 E8               		dc.b $F8, 5, 0, 4, $E8		; A
0001C302 F805 001A F8               		dc.b $F8, 5, 0, $1A, $F8	; N
0001C307 F805 0042 08               		dc.b $F8, 5, 0, $42, $8	; D
0001C30C F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C311 F805 0012 28               		dc.b $F8, 5, 0, $12, $28	; P
0001C316 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; U
0001C31B F805 003E 48               		dc.b $F8, 5, 0, $3E, $48	; T
0001C320 F805 0026 58               		dc.b $F8, 5, 0, $26, $58	; O
0001C325 14                         byte_17524:	dc.b $14	;  SOUND PROGRAM JIMITA MACKY | CINOSSU AND JUBBALUB
0001C326 F805 001E 80               		dc.b $F8, 5, 0, $1E, $80	; C
0001C32B F801 0046 90               		dc.b $F8, 1, 0, $46, $90	; I
0001C330 F805 001A 98               		dc.b $F8, 5, 0, $1A, $98	; N
0001C335 F805 0026 A8               		dc.b $F8, 5, 0, $26, $A8	; O
0001C33A F805 002E B8               		dc.b $F8, 5, 0, $2E, $B8	; S
0001C33F F805 002E C8               		dc.b $F8, 5, 0, $2E, $C8	; S
0001C344 F805 0032 D8               		dc.b $F8, 5, 0, $32, $D8	; U
0001C349 F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C34E F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8		; A
0001C353 F805 001A 08               		dc.b $F8, 5, 0, $1A, $8	; N
0001C358 F805 0042 18               		dc.b $F8, 5, 0, $42, $18	; D
0001C35D F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C362 F805 004C 38               		dc.b $F8, 5, 0, $4C, $38	; J
0001C367 F805 0032 48               		dc.b $F8, 5, 0, $32, $48	; U
0001C36C F805 0048 58               		dc.b $F8, 5, 0, $48, $58	; B
0001C371 F805 0048 68               		dc.b $F8, 5, 0, $48, $68	; B
0001C376 F805 0004 78               		dc.b $F8, 5, 0, 4, $78		; A
0001C37B F805 0016 88               		dc.b $F8, 5, 0, $16, $88	; L
0001C380 F805 0032 98               		dc.b $F8, 5, 0, $32, $98	; U
0001C385 F805 0048 A8               		dc.b $F8, 5, 0, $48, $A8	; B
0001C38A 0C                         byte_17598:	dc.b $C	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SFG AND SSRG
0001C38B F805 002E 80               		dc.b $F8, 5, 0, $2E, $80	; S
0001C390 F805 005C 90               		dc.b $F8, 5, 0, $5C, $90	; F
0001C395 F805 0000 A0               		dc.b $F8, 5, 0, 0, $A0		; G
0001C39A F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C39F F805 0004 C0               		dc.b $F8, 5, 0, 4, $C0		; A
0001C3A4 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	; N
0001C3A9 F805 0042 E0               		dc.b $F8, 5, 0, $42, $E0	; D
0001C3AE F800 0060 0C               		dc.b $F8, 0, 0, $60, $C    ;Space
0001C3B3 F805 002E 00               		dc.b $F8, 5, 0, $2E, $0	; S
0001C3B8 F805 002E 10               		dc.b $F8, 5, 0, $2E, $10	; S
0001C3BD F805 0022 20               		dc.b $F8, 5, 0, $22, $20	; R
0001C3C2 F805 0000 30               		dc.b $F8, 5, 0, 0, $30		; G
0001C3C7 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
0001C3C8 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
0001C3CD F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
0001C3D2 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
0001C3D7 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
0001C3DC F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
0001C3E1 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
0001C3E6 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
0001C3EB F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
0001C3F0 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0001C3F5 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
0001C3FA F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
0001C3FF F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001C404 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
0001C409 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
0001C40E F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001C413 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001C414 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001C419 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001C41E 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001C423 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001C428 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001C42D 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001C432 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001C437 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001C43C 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
0001C43D E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
0001C442 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
0001C447 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
0001C44C E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
0001C451 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
0001C456 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
0001C45B E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
0001C460 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
0001C465 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
0001C46A 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
0001C46F 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
0001C474 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
0001C479 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
0001C47E 0005 000E 00               		dc.b 0,	5, 0, $E, 0
0001C483 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
0001C488 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
0001C48D 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
0001C492                            		even
0001C492                            		even
0001C492                            
0001C492                            ; ===========================================================================
0001C492                            ; ---------------------------------------------------------------------------
0001C492                            ; Object 3D - Eggman (GHZ)
0001C492                            ; ---------------------------------------------------------------------------
0001C492                            
0001C492                            Obj3D:					; XREF: Obj_Index
0001C492 7000                       		moveq	#0,d0
0001C494 1028 0024                  		move.b	$24(a0),d0
0001C498 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001C49C 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001C4A0                            ; ===========================================================================
0001C4A0 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001C4A2 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001C4A4 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001C4A6 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001C4A8                            
0001C4A8 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001C4AA 0401                       		dc.b 4,	1
0001C4AC 0607                       		dc.b 6,	7
0001C4AE                            ; ===========================================================================
0001C4AE                            
0001C4AE                            Obj3D_Main:				; XREF: Obj3D_Index
0001C4AE 45F9 0001 C4A8             		lea	(Obj3D_ObjData).l,a2
0001C4B4 2248                       		movea.l	a0,a1
0001C4B6 7202                       		moveq	#2,d1
0001C4B8 6000                       		bra.s	Obj3D_LoadBoss
0001C4BA                            ; ===========================================================================
0001C4BA                            
0001C4BA                            Obj3D_Loop:
0001C4BA 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001C4C0 6600                       		bne.s	loc_17772
0001C4C2                            
0001C4C2                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001C4C2 135A 0024                  		move.b	(a2)+,$24(a1)
0001C4C6 12BC 003D                  		move.b	#$3D,0(a1)
0001C4CA 3368 0008 0008             		move.w	8(a0),8(a1)
0001C4D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C4D6 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001C4DE 337C 0400 0002             		move.w	#$400,2(a1)
0001C4E4 137C 0004 0001             		move.b	#4,1(a1)
0001C4EA 137C 0020 0019             		move.b	#$20,$19(a1)
0001C4F0 137C 0003 0018             		move.b	#3,$18(a1)
0001C4F6 135A 001C                  		move.b	(a2)+,$1C(a1)
0001C4FA 2348 0034                  		move.l	a0,$34(a1)
0001C4FE 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001C502                            
0001C502                            loc_17772:
0001C502 3168 0008 0030             		move.w	8(a0),$30(a0)
0001C508 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001C50E 117C 000F 0020             		move.b	#$F,$20(a0)
0001C514 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001C51A                            
0001C51A                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001C51A 7000                       		moveq	#0,d0
0001C51C 1028 0025                  		move.b	$25(a0),d0
0001C520 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001C524 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001C528 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001C52E 4EB9 0000 D7DA             		jsr	AnimateSprite
0001C534 1028 0022                  		move.b	$22(a0),d0
0001C538 0200 0003                  		andi.b	#3,d0
0001C53C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001C542 8128 0001                  		or.b	d0,1(a0)
0001C546 4EF9 0001 09DC             		jmp	DisplaySprite
0001C54C                            ; ===========================================================================
0001C54C 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001C54E 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001C550 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001C552 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001C554 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
0001C556 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001C558 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
0001C55A                            ; ===========================================================================
0001C55A                            
0001C55A                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
0001C55A 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001C560 6100 0000                  		bsr.w	BossMove
0001C564 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001C56A 6600                       		bne.s	loc_177E6
0001C56C 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001C572 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001C576                            
0001C576                            loc_177E6:
0001C576 1028 003F                  		move.b	$3F(a0),d0
0001C57A 4EB9 0000 3736             		jsr	(CalcSine).l
0001C580 EC40                       		asr.w	#6,d0
0001C582 D068 0038                  		add.w	$38(a0),d0
0001C586 3140 000C                  		move.w	d0,$C(a0)
0001C58A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C590 5428 003F                  		addq.b	#2,$3F(a0)
0001C594 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001C59A 6400                       		bcc.s	locret_1784A
0001C59C 4A28 0022                  		tst.b	$22(a0)
0001C5A0 6B00                       		bmi.s	loc_1784C
0001C5A2 4A28 0020                  		tst.b	$20(a0)
0001C5A6 6600                       		bne.s	locret_1784A
0001C5A8 4A28 003E                  		tst.b	$3E(a0)
0001C5AC 6600                       		bne.s	Obj3D_ShipFlash
0001C5AE 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001C5B4 303C 00AC                  		move.w	#$AC,d0
0001C5B8 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001C5BE                            
0001C5BE                            Obj3D_ShipFlash:
0001C5BE 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001C5C2 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001C5C4 4A51                       		tst.w	(a1)
0001C5C6 6600                       		bne.s	loc_1783C
0001C5C8 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001C5CC                            
0001C5CC                            loc_1783C:
0001C5CC 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001C5CE 5328 003E                  		subq.b	#1,$3E(a0)
0001C5D2 6600                       		bne.s	locret_1784A
0001C5D4 117C 000F 0020             		move.b	#$F,$20(a0)
0001C5DA                            
0001C5DA                            locret_1784A:
0001C5DA 4E75                       		rts	
0001C5DC                            ; ===========================================================================
0001C5DC                            
0001C5DC                            loc_1784C:				; XREF: loc_177E6
0001C5DC 7064                       		moveq	#100,d0
0001C5DE 6100 0000                  		bsr.w	AddPoints
0001C5E2 117C 0008 0025             		move.b	#8,$25(a0)
0001C5E8 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001C5EE 4E75                       		rts	
0001C5F0                            
0001C5F0                            ; ---------------------------------------------------------------------------
0001C5F0                            ; Defeated boss	subroutine
0001C5F0                            ; ---------------------------------------------------------------------------
0001C5F0                            
0001C5F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5F0                            
0001C5F0                            
0001C5F0                            BossDefeated:
0001C5F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001C5F4 0200 0007                  		andi.b	#7,d0
0001C5F8 6600                       		bne.s	locret_178A2
0001C5FA 4EB9 0001 0E72             		jsr	SingleObjLoad
0001C600 6600                       		bne.s	locret_178A2
0001C602 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C606 3368 0008 0008             		move.w	8(a0),8(a1)
0001C60C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C612 4EB9 0000 3710             		jsr	(RandomNumber).l
0001C618 3200                       		move.w	d0,d1
0001C61A 7200                       		moveq	#0,d1
0001C61C 1200                       		move.b	d0,d1
0001C61E E409                       		lsr.b	#2,d1
0001C620 0441 0020                  		subi.w	#$20,d1
0001C624 D369 0008                  		add.w	d1,8(a1)
0001C628 E048                       		lsr.w	#8,d0
0001C62A E608                       		lsr.b	#3,d0
0001C62C D169 000C                  		add.w	d0,$C(a1)
0001C630                            
0001C630                            locret_178A2:
0001C630 4E75                       		rts	
0001C632                            ; End of function BossDefeated
0001C632                            
0001C632                            ; ---------------------------------------------------------------------------
0001C632                            ; Subroutine to	move a boss
0001C632                            ; ---------------------------------------------------------------------------
0001C632                            
0001C632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C632                            
0001C632                            
0001C632                            BossMove:
0001C632 2428 0030                  		move.l	$30(a0),d2
0001C636 2628 0038                  		move.l	$38(a0),d3
0001C63A 3028 0010                  		move.w	$10(a0),d0
0001C63E 48C0                       		ext.l	d0
0001C640 E180                       		asl.l	#8,d0
0001C642 D480                       		add.l	d0,d2
0001C644 3028 0012                  		move.w	$12(a0),d0
0001C648 48C0                       		ext.l	d0
0001C64A E180                       		asl.l	#8,d0
0001C64C D680                       		add.l	d0,d3
0001C64E 2142 0030                  		move.l	d2,$30(a0)
0001C652 2143 0038                  		move.l	d3,$38(a0)
0001C656 4E75                       		rts	
0001C658                            ; End of function BossMove
0001C658                            
0001C658                            ; ===========================================================================
0001C658                            
0001C658                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
0001C658 317C FF00 0010             		move.w	#-$100,$10(a0)
0001C65E 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C664 6100 FFCC                  		bsr.w	BossMove
0001C668 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001C66E 6600                       		bne.s	loc_17916
0001C670 317C 0000 0010             		move.w	#0,$10(a0)
0001C676 317C 0000 0012             		move.w	#0,$12(a0)
0001C67C 5428 0025                  		addq.b	#2,$25(a0)
0001C680 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001C686 6600                       		bne.s	loc_17910
0001C688 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001C68C 3368 0030 0008             		move.w	$30(a0),8(a1)
0001C692 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001C698 2348 0034                  		move.l	a0,$34(a1)
0001C69C                            
0001C69C                            loc_17910:
0001C69C 317C 0077 003C             		move.w	#$77,$3C(a0)
0001C6A2                            
0001C6A2                            loc_17916:
0001C6A2 6000 FED2                  		bra.w	loc_177E6
0001C6A6                            ; ===========================================================================
0001C6A6                            
0001C6A6                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
0001C6A6 5368 003C                  		subq.w	#1,$3C(a0)
0001C6AA 6A00                       		bpl.s	Obj3D_Reverse
0001C6AC 5428 0025                  		addq.b	#2,$25(a0)
0001C6B0 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001C6B6 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
0001C6BC 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001C6C2 6600                       		bne.s	Obj3D_Reverse
0001C6C4 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001C6CA 317C 0040 0010             		move.w	#$40,$10(a0)
0001C6D0                            
0001C6D0                            Obj3D_Reverse:
0001C6D0 0828 0000 0022             		btst	#0,$22(a0)
0001C6D6 6600                       		bne.s	loc_17950
0001C6D8 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
0001C6DC                            
0001C6DC                            loc_17950:
0001C6DC 6000 FE98                  		bra.w	loc_177E6
0001C6E0                            ; ===========================================================================
0001C6E0                            
0001C6E0                            loc_17954:				; XREF: Obj3D_ShipIndex
0001C6E0 5368 003C                  		subq.w	#1,$3C(a0)
0001C6E4 6B00                       		bmi.s	loc_17960
0001C6E6 6100 FF4A                  		bsr.w	BossMove
0001C6EA 6000                       		bra.s	loc_17976
0001C6EC                            ; ===========================================================================
0001C6EC                            
0001C6EC                            loc_17960:
0001C6EC 0868 0000 0022             		bchg	#0,$22(a0)
0001C6F2 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001C6F8 5528 0025                  		subq.b	#2,$25(a0)
0001C6FC 317C 0000 0010             		move.w	#0,$10(a0)
0001C702                            
0001C702                            loc_17976:
0001C702 6000 FE72                  		bra.w	loc_177E6
0001C706                            ; ===========================================================================
0001C706                            
0001C706                            loc_1797A:				; XREF: Obj3D_ShipIndex
0001C706 5368 003C                  		subq.w	#1,$3C(a0)
0001C70A 6B00                       		bmi.s	loc_17984
0001C70C 6000 FEE2                  		bra.w	BossDefeated
0001C710                            ; ===========================================================================
0001C710                            
0001C710                            loc_17984:
0001C710 08E8 0000 0022             		bset	#0,$22(a0)
0001C716 08A8 0007 0022             		bclr	#7,$22(a0)
0001C71C 4268 0010                  		clr.w	$10(a0)
0001C720 5428 0025                  		addq.b	#2,$25(a0)
0001C724 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001C72A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001C72E 6600                       		bne.s	locret_179AA
0001C730 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001C736                            
0001C736                            locret_179AA:
0001C736 4E75                       		rts	
0001C738                            ; ===========================================================================
0001C738                            
0001C738                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001C738 5268 003C                  		addq.w	#1,$3C(a0)
0001C73C 6700                       		beq.s	loc_179BC
0001C73E 6A00                       		bpl.s	loc_179C2
0001C740 0668 0018 0012             		addi.w	#$18,$12(a0)
0001C746 6000                       		bra.s	loc_179EE
0001C748                            ; ===========================================================================
0001C748                            
0001C748                            loc_179BC:
0001C748 4268 0012                  		clr.w	$12(a0)
0001C74C 6000                       		bra.s	loc_179EE
0001C74E                            ; ===========================================================================
0001C74E                            
0001C74E                            loc_179C2:
0001C74E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001C754 6500                       		bcs.s	loc_179DA
0001C756 6700                       		beq.s	loc_179E0
0001C758 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001C75E 6500                       		bcs.s	loc_179EE
0001C760 5428 0025                  		addq.b	#2,$25(a0)
0001C764 6000                       		bra.s	loc_179EE
0001C766                            ; ===========================================================================
0001C766                            
0001C766                            loc_179DA:
0001C766 5168 0012                  		subq.w	#8,$12(a0)
0001C76A 6000                       		bra.s	loc_179EE
0001C76C                            ; ===========================================================================
0001C76C                            
0001C76C                            loc_179E0:
0001C76C 4268 0012                  		clr.w	$12(a0)
0001C770 303C 009B                  		move.w	#$9B,d0
0001C774 4EB9 0000 1108             		jsr	(PlaySound).l	; play GHZ music
0001C77A                            
0001C77A                            loc_179EE:
0001C77A 6100 FEB6                  		bsr.w	BossMove
0001C77E 6000 FDF6                  		bra.w	loc_177E6
0001C782                            ; ===========================================================================
0001C782                            
0001C782                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001C782 317C 0400 0010             		move.w	#$400,$10(a0)
0001C788 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001C78E 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001C794 6700                       		beq.s	loc_17A10
0001C796 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001C79A 6000                       		bra.s	loc_17A16
0001C79C                            ; ===========================================================================
0001C79C                            
0001C79C                            loc_17A10:
0001C79C 4A28 0001                  		tst.b	1(a0)
0001C7A0 6A00                       		bpl.s	Obj3D_ShipDel
0001C7A2                            
0001C7A2                            loc_17A16:
0001C7A2 6100 FE8E                  		bsr.w	BossMove
0001C7A6 6000 FDCE                  		bra.w	loc_177E6
0001C7AA                            ; ===========================================================================
0001C7AA                            
0001C7AA                            Obj3D_ShipDel:
0001C7AA 4EF9 0001 0A18             		jmp	DeleteObject
0001C7B0                            ; ===========================================================================
0001C7B0                            
0001C7B0                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001C7B0 7000                       		moveq	#0,d0
0001C7B2 7201                       		moveq	#1,d1
0001C7B4 2268 0034                  		movea.l	$34(a0),a1
0001C7B8 1029 0025                  		move.b	$25(a1),d0
0001C7BC 5900                       		subq.b	#4,d0
0001C7BE 6600                       		bne.s	loc_17A3E
0001C7C0 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001C7C6 6600                       		bne.s	loc_17A46
0001C7C8 7204                       		moveq	#4,d1
0001C7CA                            
0001C7CA                            loc_17A3E:
0001C7CA 5D00                       		subq.b	#6,d0
0001C7CC 6B00                       		bmi.s	loc_17A46
0001C7CE 720A                       		moveq	#$A,d1
0001C7D0 6000                       		bra.s	loc_17A5A
0001C7D2                            ; ===========================================================================
0001C7D2                            
0001C7D2                            loc_17A46:
0001C7D2 4A29 0020                  		tst.b	$20(a1)
0001C7D6 6600                       		bne.s	loc_17A50
0001C7D8 7205                       		moveq	#5,d1
0001C7DA 6000                       		bra.s	loc_17A5A
0001C7DC                            ; ===========================================================================
0001C7DC                            
0001C7DC                            loc_17A50:
0001C7DC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001C7E2 6500                       		bcs.s	loc_17A5A
0001C7E4 7204                       		moveq	#4,d1
0001C7E6                            
0001C7E6                            loc_17A5A:
0001C7E6 1141 001C                  		move.b	d1,$1C(a0)
0001C7EA 5500                       		subq.b	#2,d0
0001C7EC 6600                       		bne.s	Obj3D_FaceDisp
0001C7EE 117C 0006 001C             		move.b	#6,$1C(a0)
0001C7F4 4A28 0001                  		tst.b	1(a0)
0001C7F8 6A00                       		bpl.s	Obj3D_FaceDel
0001C7FA                            
0001C7FA                            Obj3D_FaceDisp:
0001C7FA 6000                       		bra.s	Obj3D_Display
0001C7FC                            ; ===========================================================================
0001C7FC                            
0001C7FC                            Obj3D_FaceDel:
0001C7FC 4EF9 0001 0A18             		jmp	DeleteObject
0001C802                            ; ===========================================================================
0001C802                            
0001C802                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001C802 117C 0007 001C             		move.b	#7,$1C(a0)
0001C808 2268 0034                  		movea.l	$34(a0),a1
0001C80C 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001C812 6600                       		bne.s	loc_17A96
0001C814 117C 000B 001C             		move.b	#$B,$1C(a0)
0001C81A 4A28 0001                  		tst.b	1(a0)
0001C81E 6A00                       		bpl.s	Obj3D_FlameDel
0001C820 6000                       		bra.s	Obj3D_FlameDisp
0001C822                            ; ===========================================================================
0001C822                            
0001C822                            loc_17A96:
0001C822 3029 0010                  		move.w	$10(a1),d0
0001C826 6700                       		beq.s	Obj3D_FlameDisp
0001C828 117C 0008 001C             		move.b	#8,$1C(a0)
0001C82E                            
0001C82E                            Obj3D_FlameDisp:
0001C82E 6000                       		bra.s	Obj3D_Display
0001C830                            ; ===========================================================================
0001C830                            
0001C830                            Obj3D_FlameDel:
0001C830 4EF9 0001 0A18             		jmp	DeleteObject
0001C836                            ; ===========================================================================
0001C836                            
0001C836                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001C836 2268 0034                  		movea.l	$34(a0),a1
0001C83A 3169 0008 0008             		move.w	8(a1),8(a0)
0001C840 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001C846 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C84C 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001C852 4EB9 0000 D7DA             		jsr	AnimateSprite
0001C858 1028 0022                  		move.b	$22(a0),d0
0001C85C 0200 0003                  		andi.b	#3,d0
0001C860 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001C866 8128 0001                  		or.b	d0,1(a0)
0001C86A 4EF9 0001 09DC             		jmp	DisplaySprite
0001C870                            ; ===========================================================================
0001C870                            ; ---------------------------------------------------------------------------
0001C870                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001C870                            ; ---------------------------------------------------------------------------
0001C870                            
0001C870                            Obj48:					; XREF: Obj_Index
0001C870 7000                       		moveq	#0,d0
0001C872 1028 0024                  		move.b	$24(a0),d0
0001C876 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001C87A 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001C87E                            ; ===========================================================================
0001C87E 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001C880 0000                       		dc.w Obj48_Base-Obj48_Index
0001C882 0000                       		dc.w Obj48_Display2-Obj48_Index
0001C884 0000                       		dc.w loc_17C68-Obj48_Index
0001C886 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
0001C888                            ; ===========================================================================
0001C888                            
0001C888                            Obj48_Main:				; XREF: Obj48_Index
0001C888 5428 0024                  		addq.b	#2,$24(a0)
0001C88C 317C 4080 0026             		move.w	#$4080,$26(a0)
0001C892 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001C898 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001C8A0 317C 046C 0002             		move.w	#$46C,2(a0)
0001C8A6 45E8 0028                  		lea	$28(a0),a2
0001C8AA 14FC 0000                  		move.b	#0,(a2)+
0001C8AE 7205                       		moveq	#5,d1
0001C8B0 2248                       		movea.l	a0,a1
0001C8B2 6000                       		bra.s	loc_17B60
0001C8B4                            ; ===========================================================================
0001C8B4                            
0001C8B4                            Obj48_MakeLinks:
0001C8B4 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001C8BA 6600                       		bne.s	Obj48_MakeBall
0001C8BC 3368 0008 0008             		move.w	8(a0),8(a1)
0001C8C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C8C8 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001C8CC 137C 0006 0024             		move.b	#6,$24(a1)
0001C8D2 237C 0000 AC72 0004        		move.l	#Map_obj15,4(a1)
0001C8DA 337C 0380 0002             		move.w	#$380,2(a1)
0001C8E0 137C 0001 001A             		move.b	#1,$1A(a1)
0001C8E6 5228 0028                  		addq.b	#1,$28(a0)
0001C8EA                            
0001C8EA                            loc_17B60:				; XREF: Obj48_Main
0001C8EA 3A09                       		move.w	a1,d5
0001C8EC 0445 D000                  		subi.w	#$D000,d5
0001C8F0 EC4D                       		lsr.w	#6,d5
0001C8F2 0245 007F                  		andi.w	#$7F,d5
0001C8F6 14C5                       		move.b	d5,(a2)+
0001C8F8 137C 0004 0001             		move.b	#4,1(a1)
0001C8FE 137C 0008 0019             		move.b	#8,$19(a1)
0001C904 137C 0006 0018             		move.b	#6,$18(a1)
0001C90A 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001C910 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001C914                            
0001C914                            Obj48_MakeBall:
0001C914 137C 0008 0024             		move.b	#8,$24(a1)
0001C91A 237C 0000 B1D0 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001C922 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001C928 137C 0001 001A             		move.b	#1,$1A(a1)
0001C92E 137C 0005 0018             		move.b	#5,$18(a1)
0001C934 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
0001C93A 4E75                       		rts	
0001C93C                            ; ===========================================================================
0001C93C                            
0001C93C 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001C942                            
0001C942                            ; ===========================================================================
0001C942                            
0001C942                            Obj48_Base:				; XREF: Obj48_Index
0001C942 47F9 0001 C93C             		lea	(Obj48_PosData).l,a3
0001C948 45E8 0028                  		lea	$28(a0),a2
0001C94C 7C00                       		moveq	#0,d6
0001C94E 1C1A                       		move.b	(a2)+,d6
0001C950                            
0001C950                            loc_17BC6:
0001C950 7800                       		moveq	#0,d4
0001C952 181A                       		move.b	(a2)+,d4
0001C954 ED4C                       		lsl.w	#6,d4
0001C956 0684 00FF D000             		addi.l	#$FFD000,d4
0001C95C 2244                       		movea.l	d4,a1
0001C95E 101B                       		move.b	(a3)+,d0
0001C960 B029 003C                  		cmp.b	$3C(a1),d0
0001C964 6700                       		beq.s	loc_17BE0
0001C966 5229 003C                  		addq.b	#1,$3C(a1)
0001C96A                            
0001C96A                            loc_17BE0:
0001C96A 51CE FFE4                  		dbf	d6,loc_17BC6
0001C96E                            
0001C96E B029 003C                  		cmp.b	$3C(a1),d0
0001C972 6600                       		bne.s	loc_17BFA
0001C974 2268 0034                  		movea.l	$34(a0),a1
0001C978 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001C97E 6600                       		bne.s	loc_17BFA
0001C980 5428 0024                  		addq.b	#2,$24(a0)
0001C984                            
0001C984                            loc_17BFA:
0001C984 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001C98A 6700                       		beq.s	Obj48_Display
0001C98C 5268 0032                  		addq.w	#1,$32(a0)
0001C990                            
0001C990                            Obj48_Display:
0001C990 6100 0000                  		bsr.w	sub_17C2A
0001C994 1028 0026                  		move.b	$26(a0),d0
0001C998 4EB9 0000 ABE4             		jsr	(Obj15_Move2).l
0001C99E 4EF9 0001 09DC             		jmp	DisplaySprite
0001C9A4                            ; ===========================================================================
0001C9A4                            
0001C9A4                            Obj48_Display2:				; XREF: Obj48_Index
0001C9A4 6100 0000                  		bsr.w	sub_17C2A
0001C9A8 4EB9 0000 ABA4             		jsr	(Obj48_Move).l
0001C9AE 4EF9 0001 09DC             		jmp	DisplaySprite
0001C9B4                            
0001C9B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9B4                            
0001C9B4                            
0001C9B4                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001C9B4 2268 0034                  		movea.l	$34(a0),a1
0001C9B8 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001C9BE 6400                       		bcc.s	loc_17C3C
0001C9C0 0868 0000 001A             		bchg	#0,$1A(a0)
0001C9C6                            
0001C9C6                            loc_17C3C:
0001C9C6 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001C9CC 3029 000C                  		move.w	$C(a1),d0
0001C9D0 D068 0032                  		add.w	$32(a0),d0
0001C9D4 3140 0038                  		move.w	d0,$38(a0)
0001C9D8 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001C9DE 4A29 0022                  		tst.b	$22(a1)
0001C9E2 6A00                       		bpl.s	locret_17C66
0001C9E4 10BC 003F                  		move.b	#$3F,0(a0)
0001C9E8 117C 0000 0024             		move.b	#0,$24(a0)
0001C9EE                            
0001C9EE                            locret_17C66:
0001C9EE 4E75                       		rts	
0001C9F0                            ; End of function sub_17C2A
0001C9F0                            
0001C9F0                            ; ===========================================================================
0001C9F0                            
0001C9F0                            loc_17C68:				; XREF: Obj48_Index
0001C9F0 2268 0034                  		movea.l	$34(a0),a1
0001C9F4 4A29 0022                  		tst.b	$22(a1)
0001C9F8 6A00                       		bpl.s	Obj48_Display3
0001C9FA 10BC 003F                  		move.b	#$3F,0(a0)
0001C9FE 117C 0000 0024             		move.b	#0,$24(a0)
0001CA04                            
0001CA04                            Obj48_Display3:
0001CA04 4EF9 0001 09DC             		jmp	DisplaySprite
0001CA0A                            ; ===========================================================================
0001CA0A                            
0001CA0A                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001CA0A 7000                       		moveq	#0,d0
0001CA0C 4A28 001A                  		tst.b	$1A(a0)
0001CA10 6600                       		bne.s	Obj48_Vanish
0001CA12 5200                       		addq.b	#1,d0
0001CA14                            
0001CA14                            Obj48_Vanish:
0001CA14 1140 001A                  		move.b	d0,$1A(a0)
0001CA18 2268 0034                  		movea.l	$34(a0),a1
0001CA1C 4A29 0022                  		tst.b	$22(a1)
0001CA20 6A00                       		bpl.s	Obj48_Display4
0001CA22 117C 0000 0020             		move.b	#0,$20(a0)
0001CA28 6100 FBC6                  		bsr.w	BossDefeated
0001CA2C 5328 003C                  		subq.b	#1,$3C(a0)
0001CA30 6A00                       		bpl.s	Obj48_Display4
0001CA32 10BC 003F                  		move.b	#$3F,(a0)
0001CA36 117C 0000 0024             		move.b	#0,$24(a0)
0001CA3C                            
0001CA3C                            Obj48_Display4:
0001CA3C 4EF9 0001 09DC             		jmp	DisplaySprite
0001CA42                            ; ===========================================================================
0001CA42                            Ani_Eggman:
0001CA42                            	include "_anim\Eggman.asm"
0001CA42                            ; ---------------------------------------------------------------------------
0001CA42                            ; Animation script - Eggman (bosses)
0001CA42                            ; ---------------------------------------------------------------------------
0001CA42 0000                       		dc.w byte_17CD4-Ani_Eggman
0001CA44 0000                       		dc.w byte_17CD8-Ani_Eggman
0001CA46 0000                       		dc.w byte_17CDC-Ani_Eggman
0001CA48 0000                       		dc.w byte_17CE0-Ani_Eggman
0001CA4A 0000                       		dc.w byte_17CE4-Ani_Eggman
0001CA4C 0000                       		dc.w byte_17CE8-Ani_Eggman
0001CA4E 0000                       		dc.w byte_17CEC-Ani_Eggman
0001CA50 0000                       		dc.w byte_17CF0-Ani_Eggman
0001CA52 0000                       		dc.w byte_17CF4-Ani_Eggman
0001CA54 0000                       		dc.w byte_17CF8-Ani_Eggman
0001CA56 0000                       		dc.w byte_17CFC-Ani_Eggman
0001CA58 0000                       		dc.w byte_17D00-Ani_Eggman
0001CA5A 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001CA5E 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001CA62 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001CA66 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001CA6A 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001CA6E 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001CA72 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001CA76 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001CA7A 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001CA7E 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001CA82 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001CA86 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001CA92                            		even
0001CA92                            		even
0001CA92                            
0001CA92                            ; ---------------------------------------------------------------------------
0001CA92                            ; Sprite mappings - Eggman (boss levels)
0001CA92                            ; ---------------------------------------------------------------------------
0001CA92                            Map_Eggman:
0001CA92                            	include "_maps\Eggman.asm"
0001CA92                            ; ---------------------------------------------------------------------------
0001CA92                            ; Sprite mappings - Eggman (boss levels)
0001CA92                            ; ---------------------------------------------------------------------------
0001CA92 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
0001CA96 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
0001CA9A 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
0001CA9E 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
0001CAA2 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
0001CAA6 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
0001CAAA 0000                       		dc.w byte_17DC8-Map_Eggman
0001CAAC 06                         byte_17D26:	dc.b 6
0001CAAD EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
0001CAB2 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
0001CAB7 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
0001CABC FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
0001CAC1 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
0001CAC6 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
0001CACB 02                         byte_17D45:	dc.b 2
0001CACC E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001CAD1 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
0001CAD6 02                         byte_17D50:	dc.b 2
0001CAD7 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001CADC EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001CAE1 03                         byte_17D5B:	dc.b 3
0001CAE2 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
0001CAE7 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
0001CAEC EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
0001CAF1 03                         byte_17D6B:	dc.b 3
0001CAF2 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
0001CAF7 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
0001CAFC EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
0001CB01 03                         byte_17D7B:	dc.b 3
0001CB02 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001CB07 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001CB0C EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001CB11 03                         byte_17D8B:	dc.b 3
0001CB12 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
0001CB17 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001CB1C EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001CB21 04                         byte_17D9B:	dc.b 4
0001CB22 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
0001CB27 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001CB2C EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001CB31 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001CB36 01                         byte_17DB0:	dc.b 1
0001CB37 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
0001CB3C 01                         byte_17DB6:	dc.b 1
0001CB3D 0405 0031 22               		dc.b 4,	5, 0, $31, $22
0001CB42 00                         byte_17DBC:	dc.b 0
0001CB43 02                         byte_17DBD:	dc.b 2
0001CB44 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
0001CB49 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
0001CB4E 02                         byte_17DC8:	dc.b 2
0001CB4F F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
0001CB54 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
0001CB5A 00                         		even
0001CB5A 00                         		even
0001CB5A                            
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            Map_BossItems:
0001CB5A                            	include "_maps\Boss items.asm"
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001CB5E 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001CB62 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001CB66 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001CB6A 01                         byte_17DE4:	dc.b 1
0001CB6B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001CB70 02                         byte_17DEA:	dc.b 2
0001CB71 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001CB76 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001CB7B 00                         		dc.b 0
0001CB7C 01                         byte_17DF6:	dc.b 1
0001CB7D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001CB82 01                         byte_17DFC:	dc.b 1
0001CB83 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001CB88 01                         byte_17E02:	dc.b 1
0001CB89 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001CB8E 04                         byte_17E08:	dc.b 4
0001CB8F F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001CB94 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001CB99 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001CB9E 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001CBA3 00                         		dc.b 0
0001CBA4 02                         byte_17E1E:	dc.b 2
0001CBA5 0005 0017 00               		dc.b 0,	5, 0, $17, 0
0001CBAA 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001CBAF 00                         		dc.b 0
0001CBB0 02                         byte_17E2A:	dc.b 2
0001CBB1 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001CBB6 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001CBBC 00                         		even
0001CBBC 00                         		even
0001CBBC                            
0001CBBC                            ; ===========================================================================
0001CBBC                            ; ---------------------------------------------------------------------------
0001CBBC                            ; Object 77 - Eggman (LZ)
0001CBBC                            ; ---------------------------------------------------------------------------
0001CBBC                            
0001CBBC                            Obj77:					; XREF: Obj_Index
0001CBBC 7000                       		moveq	#0,d0
0001CBBE 1028 0024                  		move.b	$24(a0),d0
0001CBC2 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001CBC6 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001CBCA                            ; ===========================================================================
0001CBCA 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001CBCC 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001CBCE 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001CBD0 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001CBD2                            
0001CBD2 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001CBD4 0401                       		dc.b 4,	1
0001CBD6 0607                       		dc.b 6,	7
0001CBD8                            ; ===========================================================================
0001CBD8                            
0001CBD8                            Obj77_Main:				; XREF: Obj77_Index
0001CBD8 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001CBDE 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001CBE4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001CBEA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001CBF0 117C 000F 0020             		move.b	#$F,$20(a0)
0001CBF6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001CBFC 117C 0004 0018             		move.b	#4,$18(a0)
0001CC02 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001CC06 2248                       		movea.l	a0,a1
0001CC08 7202                       		moveq	#2,d1
0001CC0A 6000                       		bra.s	Obj77_LoadBoss
0001CC0C                            ; ===========================================================================
0001CC0C                            
0001CC0C                            Obj77_Loop:
0001CC0C 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001CC12 6600                       		bne.s	Obj77_ShipMain
0001CC14 12BC 0077                  		move.b	#$77,0(a1)
0001CC18 3368 0008 0008             		move.w	8(a0),8(a1)
0001CC1E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CC24                            
0001CC24                            Obj77_LoadBoss:				; XREF: Obj77_Main
0001CC24 08A8 0000 0022             		bclr	#0,$22(a0)
0001CC2A 4229 0025                  		clr.b	$25(a1)
0001CC2E 135A 0024                  		move.b	(a2)+,$24(a1)
0001CC32 135A 001C                  		move.b	(a2)+,$1C(a1)
0001CC36 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001CC3C 237C 0001 CA92 0004        		move.l	#Map_Eggman,4(a1)
0001CC44 337C 0400 0002             		move.w	#$400,2(a1)
0001CC4A 137C 0004 0001             		move.b	#4,1(a1)
0001CC50 137C 0020 0019             		move.b	#$20,$19(a1)
0001CC56 2348 0034                  		move.l	a0,$34(a1)
0001CC5A 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001CC5E                            
0001CC5E                            Obj77_ShipMain:
0001CC5E 43F8 D000                  		lea	($FFFFD000).w,a1
0001CC62 7000                       		moveq	#0,d0
0001CC64 1028 0025                  		move.b	$25(a0),d0
0001CC68 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001CC6C 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001CC70 43F9 0001 CA42             		lea	(Ani_Eggman).l,a1
0001CC76 4EB9 0000 D7DA             		jsr	AnimateSprite
0001CC7C 7003                       		moveq	#3,d0
0001CC7E C028 0022                  		and.b	$22(a0),d0
0001CC82 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001CC88 8128 0001                  		or.b	d0,1(a0)
0001CC8C 4EF9 0001 09DC             		jmp	DisplaySprite
0001CC92                            ; ===========================================================================
0001CC92 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001CC96 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001CC9A 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001CC9E 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001CCA2                            ; ===========================================================================
0001CCA2                            
0001CCA2                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001CCA2 3029 0008                  		move.w	8(a1),d0
0001CCA6 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001CCAA 6500                       		bcs.s	loc_17F38
0001CCAC 317C FE80 0012             		move.w	#-$180,$12(a0)
0001CCB2 317C 0060 0010             		move.w	#$60,$10(a0)
0001CCB8 5428 0025                  		addq.b	#2,$25(a0)
0001CCBC                            
0001CCBC                            loc_17F38:
0001CCBC 6100 F974                  		bsr.w	BossMove
0001CCC0 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001CCC6 3168 0030 0008             		move.w	$30(a0),8(a0)
0001CCCC                            
0001CCCC                            loc_17F48:
0001CCCC 4A28 003D                  		tst.b	$3D(a0)
0001CCD0 6600                       		bne.s	loc_17F8E
0001CCD2 4A28 0022                  		tst.b	$22(a0)
0001CCD6 6B00                       		bmi.s	loc_17F92
0001CCD8 4A28 0020                  		tst.b	$20(a0)
0001CCDC 6600                       		bne.s	locret_17F8C
0001CCDE 4A28 003E                  		tst.b	$3E(a0)
0001CCE2 6600                       		bne.s	loc_17F70
0001CCE4 117C 0020 003E             		move.b	#$20,$3E(a0)
0001CCEA 303C 00AC                  		move.w	#$AC,d0
0001CCEE 4EB9 0000 110E             		jsr	(PlaySound_Special).l
0001CCF4                            
0001CCF4                            loc_17F70:
0001CCF4 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001CCF8 7000                       		moveq	#0,d0
0001CCFA 4A51                       		tst.w	(a1)
0001CCFC 6600                       		bne.s	loc_17F7E
0001CCFE 303C 0EEE                  		move.w	#$EEE,d0
0001CD02                            
0001CD02                            loc_17F7E:
0001CD02 3280                       		move.w	d0,(a1)
0001CD04 5328 003E                  		subq.b	#1,$3E(a0)
0001CD08 6600                       		bne.s	locret_17F8C
0001CD0A 117C 000F 0020             		move.b	#$F,$20(a0)
0001CD10                            
0001CD10                            locret_17F8C:
0001CD10 4E75                       		rts	
0001CD12                            ; ===========================================================================
0001CD12                            
0001CD12                            loc_17F8E:				; XREF: loc_17F48
0001CD12 6000 F8DC                  		bra.w	BossDefeated
0001CD16                            ; ===========================================================================
0001CD16                            
0001CD16                            loc_17F92:				; XREF: loc_17F48
0001CD16 7064                       		moveq	#100,d0
0001CD18 6100 0000                  		bsr.w	AddPoints
0001CD1C 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001CD22 4E75                       		rts	
0001CD24                            ; ===========================================================================
0001CD24                            
0001CD24                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001CD24 70FE                       		moveq	#-2,d0
0001CD26 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001CD2C 6500                       		bcs.s	loc_17FB6
0001CD2E 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001CD34 4268 0010                  		clr.w	$10(a0)
0001CD38 5240                       		addq.w	#1,d0
0001CD3A                            
0001CD3A                            loc_17FB6:
0001CD3A 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001CD40 6E00                       		bgt.s	loc_17FCA
0001CD42 317C 0500 0038             		move.w	#$500,$38(a0)
0001CD48 4268 0012                  		clr.w	$12(a0)
0001CD4C 5240                       		addq.w	#1,d0
0001CD4E                            
0001CD4E                            loc_17FCA:
0001CD4E 6600                       		bne.s	loc_17FDC
0001CD50 317C 0140 0010             		move.w	#$140,$10(a0)
0001CD56 317C FE00 0012             		move.w	#-$200,$12(a0)
0001CD5C 5428 0025                  		addq.b	#2,$25(a0)
0001CD60                            
0001CD60                            loc_17FDC:
0001CD60 6000 FF5A                  		bra.w	loc_17F38
0001CD64                            ; ===========================================================================
0001CD64                            
0001CD64                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001CD64 70FE                       		moveq	#-2,d0
0001CD66 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001CD6C 6500                       		bcs.s	loc_17FF6
0001CD6E 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001CD74 4268 0010                  		clr.w	$10(a0)
0001CD78 5240                       		addq.w	#1,d0
0001CD7A                            
0001CD7A                            loc_17FF6:
0001CD7A 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001CD80 6E00                       		bgt.s	loc_1800A
0001CD82 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001CD88 4268 0012                  		clr.w	$12(a0)
0001CD8C 5240                       		addq.w	#1,d0
0001CD8E                            
0001CD8E                            loc_1800A:
0001CD8E 6600                       		bne.s	loc_1801A
0001CD90 317C FE80 0012             		move.w	#-$180,$12(a0)
0001CD96 5428 0025                  		addq.b	#2,$25(a0)
0001CD9A 4228 003F                  		clr.b	$3F(a0)
0001CD9E                            
0001CD9E                            loc_1801A:
0001CD9E 6000 FF1C                  		bra.w	loc_17F38
0001CDA2                            ; ===========================================================================
0001CDA2                            
0001CDA2                            loc_1801E:				; XREF: Obj77_ShipIndex
0001CDA2 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001CDA8 6E00                       		bgt.s	loc_1804E
0001CDAA 317C 0100 0038             		move.w	#$100,$38(a0)
0001CDB0 317C 0140 0010             		move.w	#$140,$10(a0)
0001CDB6 317C FF80 0012             		move.w	#-$80,$12(a0)
0001CDBC 4A28 003D                  		tst.b	$3D(a0)
0001CDC0 6700                       		beq.s	loc_18046
0001CDC2 E1E8 0010                  		asl	$10(a0)
0001CDC6 E1E8 0012                  		asl	$12(a0)
0001CDCA                            
0001CDCA                            loc_18046:
0001CDCA 5428 0025                  		addq.b	#2,$25(a0)
0001CDCE 6000 FEEC                  		bra.w	loc_17F38
0001CDD2                            ; ===========================================================================
0001CDD2                            
0001CDD2                            loc_1804E:
0001CDD2 08E8 0000 0022             		bset	#0,$22(a0)
0001CDD8 5428 003F                  		addq.b	#2,$3F(a0)
0001CDDC 1028 003F                  		move.b	$3F(a0),d0
0001CDE0 4EB9 0000 3736             		jsr	(CalcSine).l
0001CDE6 4A41                       		tst.w	d1
0001CDE8 6A00                       		bpl.s	loc_1806C
0001CDEA 08A8 0000 0022             		bclr	#0,$22(a0)
0001CDF0                            
0001CDF0                            loc_1806C:
0001CDF0 E840                       		asr.w	#4,d0
0001CDF2 4840                       		swap	d0
0001CDF4 4240                       		clr.w	d0
0001CDF6 D0A8 0030                  		add.l	$30(a0),d0
0001CDFA 4840                       		swap	d0
0001CDFC 3140 0008                  		move.w	d0,8(a0)
0001CE00 3028 0012                  		move.w	$12(a0),d0
0001CE04 3238 D00C                  		move.w	($FFFFD00C).w,d1
0001CE08 9268 000C                  		sub.w	$C(a0),d1
0001CE0C 6500                       		bcs.s	loc_180A2
0001CE0E 0441 0048                  		subi.w	#$48,d1
0001CE12 6500                       		bcs.s	loc_180A2
0001CE14 E240                       		asr.w	#1,d0
0001CE16 0441 0028                  		subi.w	#$28,d1
0001CE1A 6500                       		bcs.s	loc_180A2
0001CE1C E240                       		asr.w	#1,d0
0001CE1E 0441 0028                  		subi.w	#$28,d1
0001CE22 6500                       		bcs.s	loc_180A2
0001CE24 7000                       		moveq	#0,d0
0001CE26                            
0001CE26                            loc_180A2:
0001CE26 48C0                       		ext.l	d0
0001CE28 E180                       		asl.l	#8,d0
0001CE2A 4A28 003D                  		tst.b	$3D(a0)
0001CE2E 6700                       		beq.s	loc_180AE
0001CE30 D080                       		add.l	d0,d0
0001CE32                            
0001CE32                            loc_180AE:
0001CE32 D1A8 0038                  		add.l	d0,$38(a0)
0001CE36 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001CE3C 6000 FE8E                  		bra.w	loc_17F48
0001CE40                            ; ===========================================================================
0001CE40                            
0001CE40                            loc_180BC:				; XREF: Obj77_ShipIndex
0001CE40 70FE                       		moveq	#-2,d0
0001CE42 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001CE48 6500                       		bcs.s	loc_180D2
0001CE4A 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001CE50 4268 0010                  		clr.w	$10(a0)
0001CE54 5240                       		addq.w	#1,d0
0001CE56                            
0001CE56                            loc_180D2:
0001CE56 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001CE5C 6E00                       		bgt.s	loc_180E6
0001CE5E 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001CE64 4268 0012                  		clr.w	$12(a0)
0001CE68 5240                       		addq.w	#1,d0
0001CE6A                            
0001CE6A                            loc_180E6:
0001CE6A 6600                       		bne.s	loc_180F2
0001CE6C 5428 0025                  		addq.b	#2,$25(a0)
0001CE70 08A8 0000 0022             		bclr	#0,$22(a0)
0001CE76                            
0001CE76                            loc_180F2:
0001CE76 6000 FE44                  		bra.w	loc_17F38
0001CE7A                            ; ===========================================================================
0001CE7A                            
0001CE7A                            loc_180F6:				; XREF: Obj77_ShipIndex
0001CE7A 4A28 003D                  		tst.b	$3D(a0)
0001CE7E 6600                       		bne.s	loc_18112
0001CE80 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001CE86 6D00                       		blt.s	loc_18126
0001CE88 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001CE8E 6E00                       		bgt.s	loc_18126
0001CE90 117C 0032 003C             		move.b	#$32,$3C(a0)
0001CE96                            
0001CE96                            loc_18112:
0001CE96 303C 0082                  		move.w	#$82,d0
0001CE9A 4EB9 0000 1108             		jsr	(PlaySound).l	; play LZ music
0001CEA0 08E8 0000 0022             		bset	#0,$22(a0)
0001CEA6 5428 0025                  		addq.b	#2,$25(a0)
0001CEAA                            
0001CEAA                            loc_18126:
0001CEAA 6000 FE10                  		bra.w	loc_17F38
0001CEAE                            ; ===========================================================================
0001CEAE                            
0001CEAE                            loc_1812A:				; XREF: Obj77_ShipIndex
0001CEAE 4A28 003D                  		tst.b	$3D(a0)
0001CEB2 6600                       		bne.s	loc_18136
0001CEB4 5328 003C                  		subq.b	#1,$3C(a0)
0001CEB8 6600                       		bne.s	loc_1814E
0001CEBA                            
0001CEBA                            loc_18136:
0001CEBA 4228 003C                  		clr.b	$3C(a0)
0001CEBE 317C 0400 0010             		move.w	#$400,$10(a0)
0001CEC4 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001CECA 4228 003D                  		clr.b	$3D(a0)
0001CECE 5428 0025                  		addq.b	#2,$25(a0)
0001CED2                            
0001CED2                            loc_1814E:
0001CED2 6000 FDE8                  		bra.w	loc_17F38
0001CED6                            ; ===========================================================================
0001CED6                            
0001CED6                            loc_18152:				; XREF: Obj77_ShipIndex
0001CED6 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001CEDC 6400                       		bcc.s	loc_18160
0001CEDE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001CEE2 6000                       		bra.s	loc_18166
0001CEE4                            ; ===========================================================================
0001CEE4                            
0001CEE4                            loc_18160:
0001CEE4 4A28 0001                  		tst.b	1(a0)
0001CEE8 6A00                       		bpl.s	Obj77_ShipDel
0001CEEA                            
0001CEEA                            loc_18166:
0001CEEA 6000 FDD0                  		bra.w	loc_17F38
0001CEEE                            ; ===========================================================================
0001CEEE                            
0001CEEE                            Obj77_ShipDel:
0001CEEE 4EF9 0001 0A18             		jmp	DeleteObject
0001CEF4                            ; ===========================================================================
0001CEF4                            
0001CEF4                            Obj77_FaceMain:				; XREF: Obj77_Index
0001CEF4 2268 0034                  		movea.l	$34(a0),a1
0001CEF8 1011                       		move.b	(a1),d0
0001CEFA B010                       		cmp.b	(a0),d0
0001CEFC 6600                       		bne.s	Obj77_FaceDel
0001CEFE 7000                       		moveq	#0,d0
0001CF00 1029 0025                  		move.b	$25(a1),d0
0001CF04 7201                       		moveq	#1,d1
0001CF06 4A28 003D                  		tst.b	$3D(a0)
0001CF0A 6700                       		beq.s	loc_1818C
0001CF0C 720A                       		moveq	#$A,d1
0001CF0E 6000                       		bra.s	loc_181A0
0001CF10                            ; ===========================================================================
0001CF10                            
0001CF10                            loc_1818C:
0001CF10 4A29 0020                  		tst.b	$20(a1)
0001CF14 6600                       		bne.s	loc_18196
0001CF16 7205                       		moveq	#5,d1
0001CF18 6000                       		bra.s	loc_181A0
0001CF1A                            ; ===========================================================================
0001CF1A                            
0001CF1A                            loc_18196:
0001CF1A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001CF20 6500                       		bcs.s	loc_181A0
0001CF22 7204                       		moveq	#4,d1
0001CF24                            
0001CF24                            loc_181A0:
0001CF24 1141 001C                  		move.b	d1,$1C(a0)
0001CF28 0C00 000E                  		cmpi.b	#$E,d0
0001CF2C 6600                       		bne.s	loc_181B6
0001CF2E 117C 0006 001C             		move.b	#6,$1C(a0)
0001CF34 4A28 0001                  		tst.b	1(a0)
0001CF38 6A00                       		bpl.s	Obj77_FaceDel
0001CF3A                            
0001CF3A                            loc_181B6:
0001CF3A 6000                       		bra.s	Obj77_Display
0001CF3C                            ; ===========================================================================
0001CF3C                            
0001CF3C                            Obj77_FaceDel:
0001CF3C 4EF9 0001 0A18             		jmp	DeleteObject
0001CF42                            ; ===========================================================================
0001CF42                            
0001CF42                            Obj77_FlameMain:			; XREF: Obj77_Index
0001CF42 117C 0007 001C             		move.b	#7,$1C(a0)
0001CF48 2268 0034                  		movea.l	$34(a0),a1
0001CF4C 1011                       		move.b	(a1),d0
0001CF4E B010                       		cmp.b	(a0),d0
0001CF50 6600                       		bne.s	Obj77_FlameDel
0001CF52 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001CF58 6600                       		bne.s	loc_181F0
0001CF5A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001CF60 4A28 0001                  		tst.b	1(a0)
0001CF64 6A00                       		bpl.s	Obj77_FlameDel
0001CF66 6000                       		bra.s	loc_181F0
0001CF68                            ; ===========================================================================
0001CF68 4A69 0010                  		tst.w	$10(a1)
0001CF6C 6700                       		beq.s	loc_181F0
0001CF6E 117C 0008 001C             		move.b	#8,$1C(a0)
0001CF74                            
0001CF74                            loc_181F0:
0001CF74 6000                       		bra.s	Obj77_Display
0001CF76                            ; ===========================================================================
0001CF76                            
0001CF76                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001CF76 4EF9 0001 0A18             		jmp	DeleteObject
0001CF7C                            ; ===========================================================================
0001CF7C                            
0001CF7C                            Obj77_Display:
0001CF7C 43F9 0001 CA42             		lea	(Ani_Eggman).l,a1
0001CF82 4EB9 0000 D7DA             		jsr	AnimateSprite
0001CF88 2268 0034                  		movea.l	$34(a0),a1
0001CF8C 3169 0008 0008             		move.w	8(a1),8(a0)
0001CF92 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001CF98 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001CF9E 7003                       		moveq	#3,d0
0001CFA0 C028 0022                  		and.b	$22(a0),d0
0001CFA4 0228 00FC 0001             		andi.b	#-4,1(a0)
0001CFAA 8128 0001                  		or.b	d0,1(a0)
0001CFAE 4EF9 0001 09DC             		jmp	DisplaySprite
0001CFB4                            ; ===========================================================================
0001CFB4                            ; ---------------------------------------------------------------------------
0001CFB4                            ; Object 73 - Eggman (MZ)
0001CFB4                            ; ---------------------------------------------------------------------------
0001CFB4                            
0001CFB4                            Obj73:					; XREF: Obj_Index
0001CFB4 7000                       		moveq	#0,d0
0001CFB6 1028 0024                  		move.b	$24(a0),d0
0001CFBA 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001CFBE 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001CFC2                            ; ===========================================================================
0001CFC2 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001CFC4 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001CFC6 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001CFC8 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001CFCA 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001CFCC                            
0001CFCC 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001CFCF 0401 04                    		dc.b 4,	1, 4
0001CFD2 0607 04                    		dc.b 6,	7, 4
0001CFD5 0800 03                    		dc.b 8,	0, 3
0001CFD8                            ; ===========================================================================
0001CFD8                            
0001CFD8                            Obj73_Main:				; XREF: Obj73_Index
0001CFD8 3168 0008 0030             		move.w	8(a0),$30(a0)
0001CFDE 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001CFE4 117C 000F 0020             		move.b	#$F,$20(a0)
0001CFEA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001CFF0 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001CFF4 2248                       		movea.l	a0,a1
0001CFF6 7203                       		moveq	#3,d1
0001CFF8 6000                       		bra.s	Obj73_LoadBoss
0001CFFA                            ; ===========================================================================
0001CFFA                            
0001CFFA                            Obj73_Loop:
0001CFFA 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001D000 6600                       		bne.s	Obj73_ShipMain
0001D002 12BC 0073                  		move.b	#$73,0(a1)
0001D006 3368 0008 0008             		move.w	8(a0),8(a1)
0001D00C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D012                            
0001D012                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001D012 08A8 0000 0022             		bclr	#0,$22(a0)
0001D018 4229 0025                  		clr.b	$25(a1)
0001D01C 135A 0024                  		move.b	(a2)+,$24(a1)
0001D020 135A 001C                  		move.b	(a2)+,$1C(a1)
0001D024 135A 0018                  		move.b	(a2)+,$18(a1)
0001D028 237C 0001 CA92 0004        		move.l	#Map_Eggman,4(a1)
0001D030 337C 0400 0002             		move.w	#$400,2(a1)
0001D036 137C 0004 0001             		move.b	#4,1(a1)
0001D03C 137C 0020 0019             		move.b	#$20,$19(a1)
0001D042 2348 0034                  		move.l	a0,$34(a1)
0001D046 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001D04A                            
0001D04A                            Obj73_ShipMain:
0001D04A 7000                       		moveq	#0,d0
0001D04C 1028 0025                  		move.b	$25(a0),d0
0001D050 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001D054 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001D058 43F9 0001 CA42             		lea	(Ani_Eggman).l,a1
0001D05E 4EB9 0000 D7DA             		jsr	AnimateSprite
0001D064 7003                       		moveq	#3,d0
0001D066 C028 0022                  		and.b	$22(a0),d0
0001D06A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001D070 8128 0001                  		or.b	d0,1(a0)
0001D074 4EF9 0001 09DC             		jmp	DisplaySprite
0001D07A                            ; ===========================================================================
0001D07A 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001D07C 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001D07E 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001D080 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001D082 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001D084                            ; ===========================================================================
0001D084                            
0001D084                            loc_18302:				; XREF: Obj73_ShipIndex
0001D084 1028 003F                  		move.b	$3F(a0),d0
0001D088 5428 003F                  		addq.b	#2,$3F(a0)
0001D08C 4EB9 0000 3736             		jsr	(CalcSine).l
0001D092 E440                       		asr.w	#2,d0
0001D094 3140 0012                  		move.w	d0,$12(a0)
0001D098 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D09E 6100 F592                  		bsr.w	BossMove
0001D0A2 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001D0A8 6600                       		bne.s	loc_18334
0001D0AA 5428 0025                  		addq.b	#2,$25(a0)
0001D0AE 4228 0028                  		clr.b	$28(a0)
0001D0B2 42A8 0010                  		clr.l	$10(a0)
0001D0B6                            
0001D0B6                            loc_18334:
0001D0B6 4EB9 0000 3710             		jsr	(RandomNumber).l
0001D0BC 1140 0034                  		move.b	d0,$34(a0)
0001D0C0                            
0001D0C0                            loc_1833E:
0001D0C0 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001D0C6 3168 0030 0008             		move.w	$30(a0),8(a0)
0001D0CC 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001D0D2 6400                       		bcc.s	locret_18390
0001D0D4 4A28 0022                  		tst.b	$22(a0)
0001D0D8 6B00                       		bmi.s	loc_18392
0001D0DA 4A28 0020                  		tst.b	$20(a0)
0001D0DE 6600                       		bne.s	locret_18390
0001D0E0 4A28 003E                  		tst.b	$3E(a0)
0001D0E4 6600                       		bne.s	loc_18374
0001D0E6 117C 0028 003E             		move.b	#$28,$3E(a0)
0001D0EC 303C 00AC                  		move.w	#$AC,d0
0001D0F0 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001D0F6                            
0001D0F6                            loc_18374:
0001D0F6 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001D0FA 7000                       		moveq	#0,d0
0001D0FC 4A51                       		tst.w	(a1)
0001D0FE 6600                       		bne.s	loc_18382
0001D100 303C 0EEE                  		move.w	#$EEE,d0
0001D104                            
0001D104                            loc_18382:
0001D104 3280                       		move.w	d0,(a1)
0001D106 5328 003E                  		subq.b	#1,$3E(a0)
0001D10A 6600                       		bne.s	locret_18390
0001D10C 117C 000F 0020             		move.b	#$F,$20(a0)
0001D112                            
0001D112                            locret_18390:
0001D112 4E75                       		rts	
0001D114                            ; ===========================================================================
0001D114                            
0001D114                            loc_18392:				; XREF: loc_1833E
0001D114 7064                       		moveq	#100,d0
0001D116 6100 0000                  		bsr.w	AddPoints
0001D11A 117C 0004 0025             		move.b	#4,$25(a0)
0001D120 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001D126 4268 0010                  		clr.w	$10(a0)
0001D12A 4E75                       		rts	
0001D12C                            ; ===========================================================================
0001D12C                            
0001D12C                            loc_183AA:				; XREF: Obj73_ShipIndex
0001D12C 7000                       		moveq	#0,d0
0001D12E 1028 0028                  		move.b	$28(a0),d0
0001D132 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001D136 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001D13A 0228 0006 0028             		andi.b	#6,$28(a0)
0001D140 6000 FF7E                  		bra.w	loc_1833E
0001D144                            ; ===========================================================================
0001D144 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001D146 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001D148 0000                       		dc.w loc_183CA-off_183C2
0001D14A 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001D14C                            ; ===========================================================================
0001D14C                            
0001D14C                            loc_183CA:				; XREF: off_183C2
0001D14C 4A68 0010                  		tst.w	$10(a0)
0001D150 6600                       		bne.s	loc_183FE
0001D152 7040                       		moveq	#$40,d0
0001D154 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001D15A 6700                       		beq.s	loc_183E6
0001D15C 6500                       		bcs.s	loc_183DE
0001D15E 4440                       		neg.w	d0
0001D160                            
0001D160                            loc_183DE:
0001D160 3140 0012                  		move.w	d0,$12(a0)
0001D164 6000 F4CC                  		bra.w	BossMove
0001D168                            ; ===========================================================================
0001D168                            
0001D168                            loc_183E6:
0001D168 317C 0200 0010             		move.w	#$200,$10(a0)
0001D16E 317C 0100 0012             		move.w	#$100,$12(a0)
0001D174 0828 0000 0022             		btst	#0,$22(a0)
0001D17A 6600                       		bne.s	loc_183FE
0001D17C 4468 0010                  		neg.w	$10(a0)
0001D180                            
0001D180                            loc_183FE:
0001D180 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001D186 6400                       		bcc.s	Obj73_MakeLava
0001D188 6100 F4A8                  		bsr.w	BossMove
0001D18C 5968 0012                  		subq.w	#4,$12(a0)
0001D190                            
0001D190                            Obj73_MakeLava:
0001D190 5328 0034                  		subq.b	#1,$34(a0)
0001D194 6400                       		bcc.s	loc_1845C
0001D196 4EB9 0001 0E72             		jsr	SingleObjLoad
0001D19C 6600                       		bne.s	loc_1844A
0001D19E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001D1A2 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001D1A8 4EB9 0000 3710             		jsr	(RandomNumber).l
0001D1AE 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001D1B4 80FC 0050                  		divu.w	#$50,d0
0001D1B8 4840                       		swap	d0
0001D1BA 0640 1878                  		addi.w	#$1878,d0
0001D1BE 3340 0008                  		move.w	d0,8(a1)
0001D1C2 EE09                       		lsr.b	#7,d1
0001D1C4 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001D1CA                            
0001D1CA                            loc_1844A:
0001D1CA 4EB9 0000 3710             		jsr	(RandomNumber).l
0001D1D0 0200 001F                  		andi.b	#$1F,d0
0001D1D4 0600 0040                  		addi.b	#$40,d0
0001D1D8 1140 0034                  		move.b	d0,$34(a0)
0001D1DC                            
0001D1DC                            loc_1845C:
0001D1DC 0828 0000 0022             		btst	#0,$22(a0)
0001D1E2 6700                       		beq.s	loc_18474
0001D1E4 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001D1EA 6D00                       		blt.s	locret_1849C
0001D1EC 317C 1910 0030             		move.w	#$1910,$30(a0)
0001D1F2 6000                       		bra.s	loc_18482
0001D1F4                            ; ===========================================================================
0001D1F4                            
0001D1F4                            loc_18474:
0001D1F4 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001D1FA 6E00                       		bgt.s	locret_1849C
0001D1FC 317C 1830 0030             		move.w	#$1830,$30(a0)
0001D202                            
0001D202                            loc_18482:
0001D202 4268 0010                  		clr.w	$10(a0)
0001D206 317C FE80 0012             		move.w	#-$180,$12(a0)
0001D20C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001D212 6400                       		bcc.s	loc_18498
0001D214 4468 0012                  		neg.w	$12(a0)
0001D218                            
0001D218                            loc_18498:
0001D218 5428 0028                  		addq.b	#2,$28(a0)
0001D21C                            
0001D21C                            locret_1849C:
0001D21C 4E75                       		rts	
0001D21E                            ; ===========================================================================
0001D21E                            
0001D21E                            Obj73_MakeLava2:			; XREF: off_183C2
0001D21E 6100 F412                  		bsr.w	BossMove
0001D222 3028 0038                  		move.w	$38(a0),d0
0001D226 0440 022C                  		subi.w	#$22C,d0
0001D22A 6E00                       		bgt.s	locret_184F4
0001D22C 303C 022C                  		move.w	#$22C,d0
0001D230 4A68 0012                  		tst.w	$12(a0)
0001D234 6700                       		beq.s	loc_184EA
0001D236 4268 0012                  		clr.w	$12(a0)
0001D23A 317C 0050 003C             		move.w	#$50,$3C(a0)
0001D240 0868 0000 0022             		bchg	#0,$22(a0)
0001D246 4EB9 0001 0E72             		jsr	SingleObjLoad
0001D24C 6600                       		bne.s	loc_184EA
0001D24E 3368 0030 0008             		move.w	$30(a0),8(a1)
0001D254 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001D25A 0669 0018 000C             		addi.w	#$18,$C(a1)
0001D260 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001D264 137C 0001 0028             		move.b	#1,$28(a1)
0001D26A                            
0001D26A                            loc_184EA:
0001D26A 5368 003C                  		subq.w	#1,$3C(a0)
0001D26E 6600                       		bne.s	locret_184F4
0001D270 5428 0028                  		addq.b	#2,$28(a0)
0001D274                            
0001D274                            locret_184F4:
0001D274 4E75                       		rts	
0001D276                            ; ===========================================================================
0001D276                            
0001D276                            loc_184F6:				; XREF: Obj73_ShipIndex
0001D276 5368 003C                  		subq.w	#1,$3C(a0)
0001D27A 6B00                       		bmi.s	loc_18500
0001D27C 6000 F372                  		bra.w	BossDefeated
0001D280                            ; ===========================================================================
0001D280                            
0001D280                            loc_18500:
0001D280 08E8 0000 0022             		bset	#0,$22(a0)
0001D286 08A8 0007 0022             		bclr	#7,$22(a0)
0001D28C 4268 0010                  		clr.w	$10(a0)
0001D290 5428 0025                  		addq.b	#2,$25(a0)
0001D294 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001D29A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001D29E 6600                       		bne.s	locret_1852A
0001D2A0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001D2A6 4268 0012                  		clr.w	$12(a0)
0001D2AA                            
0001D2AA                            locret_1852A:
0001D2AA 4E75                       		rts	
0001D2AC                            ; ===========================================================================
0001D2AC                            
0001D2AC                            loc_1852C:				; XREF: Obj73_ShipIndex
0001D2AC 5268 003C                  		addq.w	#1,$3C(a0)
0001D2B0 6700                       		beq.s	loc_18544
0001D2B2 6A00                       		bpl.s	loc_1854E
0001D2B4 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001D2BA 6400                       		bcc.s	loc_18544
0001D2BC 0668 0018 0012             		addi.w	#$18,$12(a0)
0001D2C2 6000                       		bra.s	loc_1857A
0001D2C4                            ; ===========================================================================
0001D2C4                            
0001D2C4                            loc_18544:
0001D2C4 4268 0012                  		clr.w	$12(a0)
0001D2C8 4268 003C                  		clr.w	$3C(a0)
0001D2CC 6000                       		bra.s	loc_1857A
0001D2CE                            ; ===========================================================================
0001D2CE                            
0001D2CE                            loc_1854E:
0001D2CE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001D2D4 6500                       		bcs.s	loc_18566
0001D2D6 6700                       		beq.s	loc_1856C
0001D2D8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001D2DE 6500                       		bcs.s	loc_1857A
0001D2E0 5428 0025                  		addq.b	#2,$25(a0)
0001D2E4 6000                       		bra.s	loc_1857A
0001D2E6                            ; ===========================================================================
0001D2E6                            
0001D2E6                            loc_18566:
0001D2E6 5168 0012                  		subq.w	#8,$12(a0)
0001D2EA 6000                       		bra.s	loc_1857A
0001D2EC                            ; ===========================================================================
0001D2EC                            
0001D2EC                            loc_1856C:
0001D2EC 4268 0012                  		clr.w	$12(a0)
0001D2F0 303C 0083                  		move.w	#$83,d0
0001D2F4 4EB9 0000 1108             		jsr	(PlaySound).l	; play MZ music
0001D2FA                            
0001D2FA                            loc_1857A:
0001D2FA 6100 F336                  		bsr.w	BossMove
0001D2FE 6000 FDC0                  		bra.w	loc_1833E
0001D302                            ; ===========================================================================
0001D302                            
0001D302                            loc_18582:				; XREF: Obj73_ShipIndex
0001D302 317C 0500 0010             		move.w	#$500,$10(a0)
0001D308 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001D30E 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001D314 6400                       		bcc.s	loc_1859C
0001D316 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001D31A 6000                       		bra.s	loc_185A2
0001D31C                            ; ===========================================================================
0001D31C                            
0001D31C                            loc_1859C:
0001D31C 4A28 0001                  		tst.b	1(a0)
0001D320 6A00                       		bpl.s	Obj73_ShipDel
0001D322                            
0001D322                            loc_185A2:
0001D322 6100 F30E                  		bsr.w	BossMove
0001D326 6000 FD98                  		bra.w	loc_1833E
0001D32A                            ; ===========================================================================
0001D32A                            
0001D32A                            Obj73_ShipDel:
0001D32A 4EF9 0001 0A18             		jmp	DeleteObject
0001D330                            ; ===========================================================================
0001D330                            
0001D330                            Obj73_FaceMain:				; XREF: Obj73_Index
0001D330 7000                       		moveq	#0,d0
0001D332 7201                       		moveq	#1,d1
0001D334 2268 0034                  		movea.l	$34(a0),a1
0001D338 1029 0025                  		move.b	$25(a1),d0
0001D33C 5540                       		subq.w	#2,d0
0001D33E 6600                       		bne.s	loc_185D2
0001D340 0829 0001 0028             		btst	#1,$28(a1)
0001D346 6700                       		beq.s	loc_185DA
0001D348 4A69 0012                  		tst.w	$12(a1)
0001D34C 6600                       		bne.s	loc_185DA
0001D34E 7204                       		moveq	#4,d1
0001D350 6000                       		bra.s	loc_185EE
0001D352                            ; ===========================================================================
0001D352                            
0001D352                            loc_185D2:
0001D352 5500                       		subq.b	#2,d0
0001D354 6B00                       		bmi.s	loc_185DA
0001D356 720A                       		moveq	#$A,d1
0001D358 6000                       		bra.s	loc_185EE
0001D35A                            ; ===========================================================================
0001D35A                            
0001D35A                            loc_185DA:
0001D35A 4A29 0020                  		tst.b	$20(a1)
0001D35E 6600                       		bne.s	loc_185E4
0001D360 7205                       		moveq	#5,d1
0001D362 6000                       		bra.s	loc_185EE
0001D364                            ; ===========================================================================
0001D364                            
0001D364                            loc_185E4:
0001D364 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001D36A 6500                       		bcs.s	loc_185EE
0001D36C 7204                       		moveq	#4,d1
0001D36E                            
0001D36E                            loc_185EE:
0001D36E 1141 001C                  		move.b	d1,$1C(a0)
0001D372 5900                       		subq.b	#4,d0
0001D374 6600                       		bne.s	loc_18602
0001D376 117C 0006 001C             		move.b	#6,$1C(a0)
0001D37C 4A28 0001                  		tst.b	1(a0)
0001D380 6A00                       		bpl.s	Obj73_FaceDel
0001D382                            
0001D382                            loc_18602:
0001D382 6000                       		bra.s	Obj73_Display
0001D384                            ; ===========================================================================
0001D384                            
0001D384                            Obj73_FaceDel:
0001D384 4EF9 0001 0A18             		jmp	DeleteObject
0001D38A                            ; ===========================================================================
0001D38A                            
0001D38A                            Obj73_FlameMain:			; XREF: Obj73_Index
0001D38A 117C 0007 001C             		move.b	#7,$1C(a0)
0001D390 2268 0034                  		movea.l	$34(a0),a1
0001D394 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001D39A 6D00                       		blt.s	loc_1862A
0001D39C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001D3A2 4A28 0001                  		tst.b	1(a0)
0001D3A6 6A00                       		bpl.s	Obj73_FlameDel
0001D3A8 6000                       		bra.s	loc_18636
0001D3AA                            ; ===========================================================================
0001D3AA                            
0001D3AA                            loc_1862A:
0001D3AA 4A69 0010                  		tst.w	$10(a1)
0001D3AE 6700                       		beq.s	loc_18636
0001D3B0 117C 0008 001C             		move.b	#8,$1C(a0)
0001D3B6                            
0001D3B6                            loc_18636:
0001D3B6 6000                       		bra.s	Obj73_Display
0001D3B8                            ; ===========================================================================
0001D3B8                            
0001D3B8                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001D3B8 4EF9 0001 0A18             		jmp	DeleteObject
0001D3BE                            ; ===========================================================================
0001D3BE                            
0001D3BE                            Obj73_Display:
0001D3BE 43F9 0001 CA42             		lea	(Ani_Eggman).l,a1
0001D3C4 4EB9 0000 D7DA             		jsr	AnimateSprite
0001D3CA                            
0001D3CA                            loc_1864A:
0001D3CA 2268 0034                  		movea.l	$34(a0),a1
0001D3CE 3169 0008 0008             		move.w	8(a1),8(a0)
0001D3D4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001D3DA 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001D3E0 7003                       		moveq	#3,d0
0001D3E2 C028 0022                  		and.b	$22(a0),d0
0001D3E6 0228 00FC 0001             		andi.b	#-4,1(a0)
0001D3EC 8128 0001                  		or.b	d0,1(a0)
0001D3F0 4EF9 0001 09DC             		jmp	DisplaySprite
0001D3F6                            ; ===========================================================================
0001D3F6                            
0001D3F6                            Obj73_TubeMain:				; XREF: Obj73_Index
0001D3F6 2268 0034                  		movea.l	$34(a0),a1
0001D3FA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001D400 6600                       		bne.s	loc_18688
0001D402 4A28 0001                  		tst.b	1(a0)
0001D406 6A00                       		bpl.s	Obj73_TubeDel
0001D408                            
0001D408                            loc_18688:
0001D408 217C 0001 CB5A 0004        		move.l	#Map_BossItems,4(a0)
0001D410 317C 246C 0002             		move.w	#$246C,2(a0)
0001D416 117C 0004 001A             		move.b	#4,$1A(a0)
0001D41C 60AC                       		bra.s	loc_1864A
0001D41E                            ; ===========================================================================
0001D41E                            
0001D41E                            Obj73_TubeDel:
0001D41E 4EF9 0001 0A18             		jmp	DeleteObject
0001D424                            ; ===========================================================================
0001D424                            ; ---------------------------------------------------------------------------
0001D424                            ; Object 74 - lava that	Eggman drops (MZ)
0001D424                            ; ---------------------------------------------------------------------------
0001D424                            
0001D424                            Obj74:					; XREF: Obj_Index
0001D424 7000                       		moveq	#0,d0
0001D426 1028 0024                  		move.b	$24(a0),d0
0001D42A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001D42E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001D432 4EF9 0001 09DC             		jmp	DisplaySprite
0001D438                            ; ===========================================================================
0001D438 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001D43A 0000                       		dc.w Obj74_Action-Obj74_Index
0001D43C 0000                       		dc.w loc_18886-Obj74_Index
0001D43E 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001D440                            ; ===========================================================================
0001D440                            
0001D440                            Obj74_Main:				; XREF: Obj74_Index
0001D440 117C 0008 0016             		move.b	#8,$16(a0)
0001D446 117C 0008 0017             		move.b	#8,$17(a0)
0001D44C 217C 0000 E464 0004        		move.l	#Map_obj14,4(a0)
0001D454 317C 0345 0002             		move.w	#$345,2(a0)
0001D45A 117C 0004 0001             		move.b	#4,1(a0)
0001D460 117C 0005 0018             		move.b	#5,$18(a0)
0001D466 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D46C 117C 0008 0019             		move.b	#8,$19(a0)
0001D472 5428 0024                  		addq.b	#2,$24(a0)
0001D476 4A28 0028                  		tst.b	$28(a0)
0001D47A 6600                       		bne.s	loc_1870A
0001D47C 117C 008B 0020             		move.b	#$8B,$20(a0)
0001D482 5428 0024                  		addq.b	#2,$24(a0)
0001D486 6000 0000                  		bra.w	loc_18886
0001D48A                            ; ===========================================================================
0001D48A                            
0001D48A                            loc_1870A:
0001D48A 117C 001E 0029             		move.b	#$1E,$29(a0)
0001D490 303C 00AE                  		move.w	#$AE,d0
0001D494 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play lava sound
0001D49A                            
0001D49A                            Obj74_Action:				; XREF: Obj74_Index
0001D49A 7000                       		moveq	#0,d0
0001D49C 1028 0025                  		move.b	$25(a0),d0
0001D4A0 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001D4A4 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001D4A8 4EB9 0001 09C2             		jsr	SpeedToPos
0001D4AE 43F9 0001 18BA             		lea	(Ani_obj14).l,a1
0001D4B4 4EB9 0000 D7DA             		jsr	AnimateSprite
0001D4BA 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001D4C0 6200                       		bhi.s	Obj74_Delete
0001D4C2 4E75                       		rts	
0001D4C4                            ; ===========================================================================
0001D4C4                            
0001D4C4                            Obj74_Delete:
0001D4C4 4EF9 0001 0A18             		jmp	DeleteObject
0001D4CA                            ; ===========================================================================
0001D4CA 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001D4CC 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001D4CE 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001D4D0 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001D4D2                            ; ===========================================================================
0001D4D2                            
0001D4D2                            Obj74_Drop:				; XREF: Obj74_Index2
0001D4D2 08E8 0001 0022             		bset	#1,$22(a0)
0001D4D8 5328 0029                  		subq.b	#1,$29(a0)
0001D4DC 6A00                       		bpl.s	locret_18780
0001D4DE 117C 008B 0020             		move.b	#$8B,$20(a0)
0001D4E4 4228 0028                  		clr.b	$28(a0)
0001D4E8 0668 0018 0012             		addi.w	#$18,$12(a0)
0001D4EE 08A8 0001 0022             		bclr	#1,$22(a0)
0001D4F4 6100 C7B0                  		bsr.w	ObjHitFloor
0001D4F8 4A41                       		tst.w	d1
0001D4FA 6A00                       		bpl.s	locret_18780
0001D4FC 5428 0025                  		addq.b	#2,$25(a0)
0001D500                            
0001D500                            locret_18780:
0001D500 4E75                       		rts	
0001D502                            ; ===========================================================================
0001D502                            
0001D502                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001D502 5568 000C                  		subq.w	#2,$C(a0)
0001D506 08E8 0007 0002             		bset	#7,2(a0)
0001D50C 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001D512 4268 0012                  		clr.w	$12(a0)
0001D516 3168 0008 0030             		move.w	8(a0),$30(a0)
0001D51C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D522 117C 0003 0029             		move.b	#3,$29(a0)
0001D528 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001D52E 6600                       		bne.s	loc_187CA
0001D530 47D1                       		lea	(a1),a3
0001D532 45D0                       		lea	(a0),a2
0001D534 7003                       		moveq	#3,d0
0001D536                            
0001D536                            Obj74_Loop:
0001D536 26DA                       		move.l	(a2)+,(a3)+
0001D538 26DA                       		move.l	(a2)+,(a3)+
0001D53A 26DA                       		move.l	(a2)+,(a3)+
0001D53C 26DA                       		move.l	(a2)+,(a3)+
0001D53E 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001D542                            
0001D542 4469 0010                  		neg.w	$10(a1)
0001D546 5429 0025                  		addq.b	#2,$25(a1)
0001D54A                            
0001D54A                            loc_187CA:
0001D54A 5428 0025                  		addq.b	#2,$25(a0)
0001D54E 4E75                       		rts	
0001D550                            
0001D550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D550                            
0001D550                            
0001D550                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001D550 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001D556 6600                       		bne.s	locret_187EE
0001D558 3368 0008 0008             		move.w	8(a0),8(a1)
0001D55E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D564 12BC 0074                  		move.b	#$74,(a1)
0001D568 337C 0067 0028             		move.w	#$67,$28(a1)
0001D56E                            
0001D56E                            locret_187EE:
0001D56E 4E75                       		rts	
0001D570                            ; End of function Obj74_Duplicate2
0001D570                            
0001D570                            ; ===========================================================================
0001D570                            
0001D570                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001D570 6100 C734                  		bsr.w	ObjHitFloor
0001D574 4A41                       		tst.w	d1
0001D576 6A00                       		bpl.s	loc_18826
0001D578 3028 0008                  		move.w	8(a0),d0
0001D57C 0C40 1940                  		cmpi.w	#$1940,d0
0001D580 6E00                       		bgt.s	loc_1882C
0001D582 3228 0030                  		move.w	$30(a0),d1
0001D586 B240                       		cmp.w	d0,d1
0001D588 6700                       		beq.s	loc_1881E
0001D58A 0240 0010                  		andi.w	#$10,d0
0001D58E 0241 0010                  		andi.w	#$10,d1
0001D592 B240                       		cmp.w	d0,d1
0001D594 6700                       		beq.s	loc_1881E
0001D596 61B8                       		bsr.s	Obj74_Duplicate2
0001D598 3168 0008 0032             		move.w	8(a0),$32(a0)
0001D59E                            
0001D59E                            loc_1881E:
0001D59E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001D5A4 4E75                       		rts	
0001D5A6                            ; ===========================================================================
0001D5A6                            
0001D5A6                            loc_18826:
0001D5A6 5428 0025                  		addq.b	#2,$25(a0)
0001D5AA 4E75                       		rts	
0001D5AC                            ; ===========================================================================
0001D5AC                            
0001D5AC                            loc_1882C:
0001D5AC 5428 0024                  		addq.b	#2,$24(a0)
0001D5B0 4E75                       		rts	
0001D5B2                            ; ===========================================================================
0001D5B2                            
0001D5B2                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001D5B2 08A8 0001 0022             		bclr	#1,$22(a0)
0001D5B8 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001D5BE 3028 0008                  		move.w	8(a0),d0
0001D5C2 9068 0032                  		sub.w	$32(a0),d0
0001D5C6 6A00                       		bpl.s	loc_1884A
0001D5C8 4440                       		neg.w	d0
0001D5CA                            
0001D5CA                            loc_1884A:
0001D5CA 0C40 0012                  		cmpi.w	#$12,d0
0001D5CE 6600                       		bne.s	loc_18856
0001D5D0 08A8 0007 0002             		bclr	#7,2(a0)
0001D5D6                            
0001D5D6                            loc_18856:
0001D5D6 6100 C6CE                  		bsr.w	ObjHitFloor
0001D5DA 4A41                       		tst.w	d1
0001D5DC 6A00                       		bpl.s	locret_1887E
0001D5DE 5328 0029                  		subq.b	#1,$29(a0)
0001D5E2 6700                       		beq.s	Obj74_Delete2
0001D5E4 4268 0012                  		clr.w	$12(a0)
0001D5E8 3168 0032 0008             		move.w	$32(a0),8(a0)
0001D5EE 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001D5F4 08E8 0007 0002             		bset	#7,2(a0)
0001D5FA 5528 0025                  		subq.b	#2,$25(a0)
0001D5FE                            
0001D5FE                            locret_1887E:
0001D5FE 4E75                       		rts	
0001D600                            ; ===========================================================================
0001D600                            
0001D600                            Obj74_Delete2:
0001D600 4EF9 0001 0A18             		jmp	DeleteObject
0001D606                            ; ===========================================================================
0001D606                            
0001D606                            loc_18886:				; XREF: Obj74_Index
0001D606 08E8 0007 0002             		bset	#7,2(a0)
0001D60C 5328 0029                  		subq.b	#1,$29(a0)
0001D610 6600                       		bne.s	Obj74_Animate
0001D612 117C 0001 001C             		move.b	#1,$1C(a0)
0001D618 5968 000C                  		subq.w	#4,$C(a0)
0001D61C 4228 0020                  		clr.b	$20(a0)
0001D620                            
0001D620                            Obj74_Animate:
0001D620 43F9 0001 18BA             		lea	(Ani_obj14).l,a1
0001D626 4EF9 0000 D7DA             		jmp	AnimateSprite
0001D62C                            ; ===========================================================================
0001D62C                            
0001D62C                            Obj74_Delete3:				; XREF: Obj74_Index
0001D62C 4EF9 0001 0A18             		jmp	DeleteObject
0001D632                            ; ===========================================================================
0001D632                            
0001D632                            Obj7A_Delete:
0001D632 4EF9 0001 0A18             		jmp	DeleteObject
0001D638                            ; ===========================================================================
0001D638                            ; ---------------------------------------------------------------------------
0001D638                            ; Object 7A - Eggman (SLZ)
0001D638                            ; ---------------------------------------------------------------------------
0001D638                            
0001D638                            Obj7A:					; XREF: Obj_Index
0001D638 7000                       		moveq	#0,d0
0001D63A 1028 0024                  		move.b	$24(a0),d0
0001D63E 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001D642 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001D646                            ; ===========================================================================
0001D646 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001D648 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001D64A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001D64C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001D64E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001D650                            
0001D650 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001D653 0401 04                    		dc.b 4,	1, 4
0001D656 0607 04                    		dc.b 6,	7, 4
0001D659 0800 03                    		dc.b 8,	0, 3
0001D65C                            ; ===========================================================================
0001D65C                            
0001D65C                            Obj7A_Main:				; XREF: Obj7A_Index
0001D65C 317C 2188 0008             		move.w	#$2188,8(a0)
0001D662 317C 0228 000C             		move.w	#$228,$C(a0)
0001D668 3168 0008 0030             		move.w	8(a0),$30(a0)
0001D66E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001D674 117C 000F 0020             		move.b	#$F,$20(a0)
0001D67A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001D680 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001D684 2248                       		movea.l	a0,a1
0001D686 7203                       		moveq	#3,d1
0001D688 6000                       		bra.s	Obj7A_LoadBoss
0001D68A                            ; ===========================================================================
0001D68A                            
0001D68A                            Obj7A_Loop:
0001D68A 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001D690 6600                       		bne.s	loc_1895C
0001D692 12BC 007A                  		move.b	#$7A,0(a1)
0001D696 3368 0008 0008             		move.w	8(a0),8(a1)
0001D69C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D6A2                            
0001D6A2                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001D6A2 08A8 0000 0022             		bclr	#0,$22(a0)
0001D6A8 4229 0025                  		clr.b	$25(a1)
0001D6AC 135A 0024                  		move.b	(a2)+,$24(a1)
0001D6B0 135A 001C                  		move.b	(a2)+,$1C(a1)
0001D6B4 135A 0018                  		move.b	(a2)+,$18(a1)
0001D6B8 237C 0001 CA92 0004        		move.l	#Map_Eggman,4(a1)
0001D6C0 337C 0400 0002             		move.w	#$400,2(a1)
0001D6C6 137C 0004 0001             		move.b	#4,1(a1)
0001D6CC 137C 0020 0019             		move.b	#$20,$19(a1)
0001D6D2 2348 0034                  		move.l	a0,$34(a1)
0001D6D6 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001D6DA                            
0001D6DA                            loc_1895C:
0001D6DA 43F8 D040                  		lea	($FFFFD040).w,a1
0001D6DE 45E8 002A                  		lea	$2A(a0),a2
0001D6E2 705E                       		moveq	#$5E,d0
0001D6E4 723E                       		moveq	#$3E,d1
0001D6E6                            
0001D6E6                            loc_18968:
0001D6E6 B011                       		cmp.b	(a1),d0
0001D6E8 6600                       		bne.s	loc_18974
0001D6EA 4A29 0028                  		tst.b	$28(a1)
0001D6EE 6700                       		beq.s	loc_18974
0001D6F0 34C9                       		move.w	a1,(a2)+
0001D6F2                            
0001D6F2                            loc_18974:
0001D6F2 D2FC 0040                  		adda.w	#$40,a1
0001D6F6 51C9 FFEE                  		dbf	d1,loc_18968
0001D6FA                            
0001D6FA                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001D6FA 7000                       		moveq	#0,d0
0001D6FC 1028 0025                  		move.b	$25(a0),d0
0001D700 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001D704 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001D708 43F9 0001 CA42             		lea	(Ani_Eggman).l,a1
0001D70E 4EB9 0000 D7DA             		jsr	AnimateSprite
0001D714 7003                       		moveq	#3,d0
0001D716 C028 0022                  		and.b	$22(a0),d0
0001D71A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001D720 8128 0001                  		or.b	d0,1(a0)
0001D724 4EF9 0001 09DC             		jmp	DisplaySprite
0001D72A                            ; ===========================================================================
0001D72A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001D72C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001D72E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001D730 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001D732 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001D734 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001D736                            ; ===========================================================================
0001D736                            
0001D736                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001D736 317C FF00 0010             		move.w	#-$100,$10(a0)
0001D73C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001D742 6400                       		bcc.s	loc_189CA
0001D744 5428 0025                  		addq.b	#2,$25(a0)
0001D748                            
0001D748                            loc_189CA:
0001D748 6100 EEE8                  		bsr.w	BossMove
0001D74C 1028 003F                  		move.b	$3F(a0),d0
0001D750 5428 003F                  		addq.b	#2,$3F(a0)
0001D754 4EB9 0000 3736             		jsr	(CalcSine).l
0001D75A EC40                       		asr.w	#6,d0
0001D75C D068 0038                  		add.w	$38(a0),d0
0001D760 3140 000C                  		move.w	d0,$C(a0)
0001D764 3168 0030 0008             		move.w	$30(a0),8(a0)
0001D76A 6000                       		bra.s	loc_189FE
0001D76C                            ; ===========================================================================
0001D76C                            
0001D76C                            loc_189EE:
0001D76C 6100 EEC4                  		bsr.w	BossMove
0001D770 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001D776 3168 0030 0008             		move.w	$30(a0),8(a0)
0001D77C                            
0001D77C                            loc_189FE:
0001D77C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001D782 6400                       		bcc.s	locret_18A44
0001D784 4A28 0022                  		tst.b	$22(a0)
0001D788 6B00                       		bmi.s	loc_18A46
0001D78A 4A28 0020                  		tst.b	$20(a0)
0001D78E 6600                       		bne.s	locret_18A44
0001D790 4A28 003E                  		tst.b	$3E(a0)
0001D794 6600                       		bne.s	loc_18A28
0001D796 117C 0020 003E             		move.b	#$20,$3E(a0)
0001D79C 303C 00AC                  		move.w	#$AC,d0
0001D7A0 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001D7A6                            
0001D7A6                            loc_18A28:
0001D7A6 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001D7AA 7000                       		moveq	#0,d0
0001D7AC 4A51                       		tst.w	(a1)
0001D7AE 6600                       		bne.s	loc_18A36
0001D7B0 303C 0EEE                  		move.w	#$EEE,d0
0001D7B4                            
0001D7B4                            loc_18A36:
0001D7B4 3280                       		move.w	d0,(a1)
0001D7B6 5328 003E                  		subq.b	#1,$3E(a0)
0001D7BA 6600                       		bne.s	locret_18A44
0001D7BC 117C 000F 0020             		move.b	#$F,$20(a0)
0001D7C2                            
0001D7C2                            locret_18A44:
0001D7C2 4E75                       		rts	
0001D7C4                            ; ===========================================================================
0001D7C4                            
0001D7C4                            loc_18A46:
0001D7C4 7064                       		moveq	#100,d0
0001D7C6 6100 0000                  		bsr.w	AddPoints
0001D7CA 117C 0006 0025             		move.b	#6,$25(a0)
0001D7D0 117C 0078 003C             		move.b	#$78,$3C(a0)
0001D7D6 4268 0010                  		clr.w	$10(a0)
0001D7DA 4E75                       		rts	
0001D7DC                            ; ===========================================================================
0001D7DC                            
0001D7DC                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001D7DC 3028 0030                  		move.w	$30(a0),d0
0001D7E0 317C 0200 0010             		move.w	#$200,$10(a0)
0001D7E6 0828 0000 0022             		btst	#0,$22(a0)
0001D7EC 6600                       		bne.s	loc_18A7C
0001D7EE 4468 0010                  		neg.w	$10(a0)
0001D7F2 0C40 2008                  		cmpi.w	#$2008,d0
0001D7F6 6E00                       		bgt.s	loc_18A88
0001D7F8 6000                       		bra.s	loc_18A82
0001D7FA                            ; ===========================================================================
0001D7FA                            
0001D7FA                            loc_18A7C:
0001D7FA 0C40 2138                  		cmpi.w	#$2138,d0
0001D7FE 6D00                       		blt.s	loc_18A88
0001D800                            
0001D800                            loc_18A82:
0001D800 0868 0000 0022             		bchg	#0,$22(a0)
0001D806                            
0001D806                            loc_18A88:
0001D806 3028 0008                  		move.w	8(a0),d0
0001D80A 72FF                       		moveq	#-1,d1
0001D80C 7402                       		moveq	#2,d2
0001D80E 45E8 002A                  		lea	$2A(a0),a2
0001D812 7828                       		moveq	#$28,d4
0001D814 4A68 0010                  		tst.w	$10(a0)
0001D818 6A00                       		bpl.s	loc_18A9E
0001D81A 4444                       		neg.w	d4
0001D81C                            
0001D81C                            loc_18A9E:
0001D81C 321A                       		move.w	(a2)+,d1
0001D81E 2641                       		movea.l	d1,a3
0001D820 082B 0003 0022             		btst	#3,$22(a3)
0001D826 6600                       		bne.s	loc_18AB4
0001D828 362B 0008                  		move.w	8(a3),d3
0001D82C D644                       		add.w	d4,d3
0001D82E 9640                       		sub.w	d0,d3
0001D830 6700                       		beq.s	loc_18AC0
0001D832                            
0001D832                            loc_18AB4:
0001D832 51CA FFE8                  		dbf	d2,loc_18A9E
0001D836                            
0001D836 1142 0028                  		move.b	d2,$28(a0)
0001D83A 6000 FF0C                  		bra.w	loc_189CA
0001D83E                            ; ===========================================================================
0001D83E                            
0001D83E                            loc_18AC0:
0001D83E 1142 0028                  		move.b	d2,$28(a0)
0001D842 5428 0025                  		addq.b	#2,$25(a0)
0001D846 117C 0028 003C             		move.b	#$28,$3C(a0)
0001D84C 6000 FEFA                  		bra.w	loc_189CA
0001D850                            ; ===========================================================================
0001D850                            
0001D850                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001D850 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001D856 6600                       		bne.s	loc_18B36
0001D858 70FF                       		moveq	#-1,d0
0001D85A 1028 0028                  		move.b	$28(a0),d0
0001D85E 4880                       		ext.w	d0
0001D860 6B00                       		bmi.s	loc_18B40
0001D862 5540                       		subq.w	#2,d0
0001D864 4440                       		neg.w	d0
0001D866 D040                       		add.w	d0,d0
0001D868 43E8 002A                  		lea	$2A(a0),a1
0001D86C 3031 0000                  		move.w	(a1,d0.w),d0
0001D870 2440                       		movea.l	d0,a2
0001D872 43F8 D040                  		lea	($FFFFD040).w,a1
0001D876 723E                       		moveq	#$3E,d1
0001D878                            
0001D878                            loc_18AFA:
0001D878 B0A9 003C                  		cmp.l	$3C(a1),d0
0001D87C 6700                       		beq.s	loc_18B40
0001D87E D2FC 0040                  		adda.w	#$40,a1
0001D882 51C9 FFF4                  		dbf	d1,loc_18AFA
0001D886                            
0001D886 2F08                       		move.l	a0,-(sp)
0001D888 41D2                       		lea	(a2),a0
0001D88A 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001D890 205F                       		movea.l	(sp)+,a0
0001D892 6600                       		bne.s	loc_18B40
0001D894 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001D898 3368 0008 0008             		move.w	8(a0),8(a1)
0001D89E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D8A4 0669 0020 000C             		addi.w	#$20,$C(a1)
0001D8AA 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001D8B0 234A 003C                  		move.l	a2,$3C(a1)
0001D8B4                            
0001D8B4                            loc_18B36:
0001D8B4 5328 003C                  		subq.b	#1,$3C(a0)
0001D8B8 6700                       		beq.s	loc_18B40
0001D8BA 6000 FEC0                  		bra.w	loc_189FE
0001D8BE                            ; ===========================================================================
0001D8BE                            
0001D8BE                            loc_18B40:
0001D8BE 5528 0025                  		subq.b	#2,$25(a0)
0001D8C2 6000 FE84                  		bra.w	loc_189CA
0001D8C6                            ; ===========================================================================
0001D8C6                            
0001D8C6                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001D8C6 5328 003C                  		subq.b	#1,$3C(a0)
0001D8CA 6B00                       		bmi.s	loc_18B52
0001D8CC 6000 ED22                  		bra.w	BossDefeated
0001D8D0                            ; ===========================================================================
0001D8D0                            
0001D8D0                            loc_18B52:
0001D8D0 5428 0025                  		addq.b	#2,$25(a0)
0001D8D4 4268 0012                  		clr.w	$12(a0)
0001D8D8 08E8 0000 0022             		bset	#0,$22(a0)
0001D8DE 08A8 0007 0022             		bclr	#7,$22(a0)
0001D8E4 4268 0010                  		clr.w	$10(a0)
0001D8E8 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001D8EE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001D8F2 6600                       		bne.s	loc_18B7C
0001D8F4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001D8FA                            
0001D8FA                            loc_18B7C:
0001D8FA 6000 FE80                  		bra.w	loc_189FE
0001D8FE                            ; ===========================================================================
0001D8FE                            
0001D8FE                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001D8FE 5228 003C                  		addq.b	#1,$3C(a0)
0001D902 6700                       		beq.s	loc_18B90
0001D904 6A00                       		bpl.s	loc_18B96
0001D906 0668 0018 0012             		addi.w	#$18,$12(a0)
0001D90C 6000                       		bra.s	loc_18BC2
0001D90E                            ; ===========================================================================
0001D90E                            
0001D90E                            loc_18B90:
0001D90E 4268 0012                  		clr.w	$12(a0)
0001D912 6000                       		bra.s	loc_18BC2
0001D914                            ; ===========================================================================
0001D914                            
0001D914                            loc_18B96:
0001D914 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001D91A 6500                       		bcs.s	loc_18BAE
0001D91C 6700                       		beq.s	loc_18BB4
0001D91E 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001D924 6500                       		bcs.s	loc_18BC2
0001D926 5428 0025                  		addq.b	#2,$25(a0)
0001D92A 6000                       		bra.s	loc_18BC2
0001D92C                            ; ===========================================================================
0001D92C                            
0001D92C                            loc_18BAE:
0001D92C 5168 0012                  		subq.w	#8,$12(a0)
0001D930 6000                       		bra.s	loc_18BC2
0001D932                            ; ===========================================================================
0001D932                            
0001D932                            loc_18BB4:
0001D932 4268 0012                  		clr.w	$12(a0)
0001D936 303C 0084                  		move.w	#$84,d0
0001D93A 4EB9 0000 1108             		jsr	(PlaySound).l	; play SLZ music
0001D940                            
0001D940                            loc_18BC2:
0001D940 6000 FE2A                  		bra.w	loc_189EE
0001D944                            ; ===========================================================================
0001D944                            
0001D944                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001D944 317C 0400 0010             		move.w	#$400,$10(a0)
0001D94A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001D950 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001D956 6400                       		bcc.s	loc_18BE0
0001D958 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001D95C 6000                       		bra.s	loc_18BE8
0001D95E                            ; ===========================================================================
0001D95E                            
0001D95E                            loc_18BE0:
0001D95E 4A28 0001                  		tst.b	1(a0)
0001D962 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001D966                            
0001D966                            loc_18BE8:
0001D966 6100 ECCA                  		bsr.w	BossMove
0001D96A 6000 FDDC                  		bra.w	loc_189CA
0001D96E                            ; ===========================================================================
0001D96E                            
0001D96E                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001D96E 7000                       		moveq	#0,d0
0001D970 7201                       		moveq	#1,d1
0001D972 2268 0034                  		movea.l	$34(a0),a1
0001D976 1029 0025                  		move.b	$25(a1),d0
0001D97A 0C00 0006                  		cmpi.b	#6,d0
0001D97E 6B00                       		bmi.s	loc_18C06
0001D980 720A                       		moveq	#$A,d1
0001D982 6000                       		bra.s	loc_18C1A
0001D984                            ; ===========================================================================
0001D984                            
0001D984                            loc_18C06:
0001D984 4A29 0020                  		tst.b	$20(a1)
0001D988 6600                       		bne.s	loc_18C10
0001D98A 7205                       		moveq	#5,d1
0001D98C 6000                       		bra.s	loc_18C1A
0001D98E                            ; ===========================================================================
0001D98E                            
0001D98E                            loc_18C10:
0001D98E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001D994 6500                       		bcs.s	loc_18C1A
0001D996 7204                       		moveq	#4,d1
0001D998                            
0001D998                            loc_18C1A:
0001D998 1141 001C                  		move.b	d1,$1C(a0)
0001D99C 0C00 000A                  		cmpi.b	#$A,d0
0001D9A0 6600                       		bne.s	loc_18C32
0001D9A2 117C 0006 001C             		move.b	#6,$1C(a0)
0001D9A8 4A28 0001                  		tst.b	1(a0)
0001D9AC 6A00 FC84                  		bpl.w	Obj7A_Delete
0001D9B0                            
0001D9B0                            loc_18C32:
0001D9B0 6000                       		bra.s	loc_18C6C
0001D9B2                            ; ===========================================================================
0001D9B2                            
0001D9B2                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001D9B2 117C 0008 001C             		move.b	#8,$1C(a0)
0001D9B8 2268 0034                  		movea.l	$34(a0),a1
0001D9BC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001D9C2 6600                       		bne.s	loc_18C56
0001D9C4 4A28 0001                  		tst.b	1(a0)
0001D9C8 6A00 FC68                  		bpl.w	Obj7A_Delete
0001D9CC 117C 000B 001C             		move.b	#$B,$1C(a0)
0001D9D2 6000                       		bra.s	loc_18C6C
0001D9D4                            ; ===========================================================================
0001D9D4                            
0001D9D4                            loc_18C56:
0001D9D4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001D9DA 6E00                       		bgt.s	loc_18C6C
0001D9DC 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001D9E2 6D00                       		blt.s	loc_18C6C
0001D9E4 117C 0007 001C             		move.b	#7,$1C(a0)
0001D9EA                            
0001D9EA                            loc_18C6C:
0001D9EA 43F9 0001 CA42             		lea	(Ani_Eggman).l,a1
0001D9F0 4EB9 0000 D7DA             		jsr	AnimateSprite
0001D9F6                            
0001D9F6                            loc_18C78:
0001D9F6 2268 0034                  		movea.l	$34(a0),a1
0001D9FA 3169 0008 0008             		move.w	8(a1),8(a0)
0001DA00 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001DA06 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001DA0C 7003                       		moveq	#3,d0
0001DA0E C028 0022                  		and.b	$22(a0),d0
0001DA12 0228 00FC 0001             		andi.b	#-4,1(a0)
0001DA18 8128 0001                  		or.b	d0,1(a0)
0001DA1C 4EF9 0001 09DC             		jmp	DisplaySprite
0001DA22                            ; ===========================================================================
0001DA22                            
0001DA22                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001DA22 2268 0034                  		movea.l	$34(a0),a1
0001DA26 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001DA2C 6600                       		bne.s	loc_18CB8
0001DA2E 4A28 0001                  		tst.b	1(a0)
0001DA32 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001DA36                            
0001DA36                            loc_18CB8:
0001DA36 217C 0001 CB5A 0004        		move.l	#Map_BossItems,4(a0)
0001DA3E 317C 246C 0002             		move.w	#$246C,2(a0)
0001DA44 117C 0003 001A             		move.b	#3,$1A(a0)
0001DA4A 60AA                       		bra.s	loc_18C78
0001DA4C                            ; ===========================================================================
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001DA4C                            ; ---------------------------------------------------------------------------
0001DA4C                            
0001DA4C                            Obj7B:					; XREF: Obj_Index
0001DA4C 7000                       		moveq	#0,d0
0001DA4E 1028 0024                  		move.b	$24(a0),d0
0001DA52 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001DA56 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001DA5A 3028 0030                  		move.w	$30(a0),d0
0001DA5E 0240 FF80                  		andi.w	#$FF80,d0
0001DA62 3238 F700                  		move.w	($FFFFF700).w,d1
0001DA66 0441 0080                  		subi.w	#$80,d1
0001DA6A 0241 FF80                  		andi.w	#$FF80,d1
0001DA6E 9041                       		sub.w	d1,d0
0001DA70 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001DA74 0C40 0280                  		cmpi.w	#$280,d0
0001DA78 6200 FBB8                  		bhi.w	Obj7A_Delete
0001DA7C 4EF9 0001 09DC             		jmp	DisplaySprite
0001DA82                            ; ===========================================================================
0001DA82 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001DA84 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001DA86 0000                       		dc.w loc_18DC6-Obj7B_Index
0001DA88 0000                       		dc.w loc_18EAA-Obj7B_Index
0001DA8A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001DA8C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001DA8E                            ; ===========================================================================
0001DA8E                            
0001DA8E                            Obj7B_Main:				; XREF: Obj7B_Index
0001DA8E 217C 0001 4E0E 0004        		move.l	#Map_obj5Ea,4(a0)
0001DA96 317C 0518 0002             		move.w	#$518,2(a0)
0001DA9C 117C 0001 001A             		move.b	#1,$1A(a0)
0001DAA2 0028 0004 0001             		ori.b	#4,1(a0)
0001DAA8 117C 0004 0018             		move.b	#4,$18(a0)
0001DAAE 117C 008B 0020             		move.b	#$8B,$20(a0)
0001DAB4 117C 000C 0019             		move.b	#$C,$19(a0)
0001DABA 2268 003C                  		movea.l	$3C(a0),a1
0001DABE 3169 0008 0030             		move.w	8(a1),$30(a0)
0001DAC4 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001DACA 08E8 0000 0022             		bset	#0,$22(a0)
0001DAD0 3028 0008                  		move.w	8(a0),d0
0001DAD4 B069 0008                  		cmp.w	8(a1),d0
0001DAD8 6E00                       		bgt.s	loc_18D68
0001DADA 08A8 0000 0022             		bclr	#0,$22(a0)
0001DAE0 117C 0002 003A             		move.b	#2,$3A(a0)
0001DAE6                            
0001DAE6                            loc_18D68:
0001DAE6 5428 0024                  		addq.b	#2,$24(a0)
0001DAEA                            
0001DAEA                            Obj7B_Fall:				; XREF: Obj7B_Index
0001DAEA 4EB9 0001 09A2             		jsr	ObjectFall
0001DAF0 2268 003C                  		movea.l	$3C(a0),a1
0001DAF4 45F9 0000 0000             		lea	(word_19018).l,a2
0001DAFA 7000                       		moveq	#0,d0
0001DAFC 1029 001A                  		move.b	$1A(a1),d0
0001DB00 3228 0008                  		move.w	8(a0),d1
0001DB04 9268 0030                  		sub.w	$30(a0),d1
0001DB08 6400                       		bcc.s	loc_18D8E
0001DB0A 5440                       		addq.w	#2,d0
0001DB0C                            
0001DB0C                            loc_18D8E:
0001DB0C D040                       		add.w	d0,d0
0001DB0E 3228 0034                  		move.w	$34(a0),d1
0001DB12 D272 0000                  		add.w	(a2,d0.w),d1
0001DB16 B268 000C                  		cmp.w	$C(a0),d1
0001DB1A 6E00                       		bgt.s	locret_18DC4
0001DB1C 2268 003C                  		movea.l	$3C(a0),a1
0001DB20 7202                       		moveq	#2,d1
0001DB22 0828 0000 0022             		btst	#0,$22(a0)
0001DB28 6700                       		beq.s	loc_18DAE
0001DB2A 7200                       		moveq	#0,d1
0001DB2C                            
0001DB2C                            loc_18DAE:
0001DB2C 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001DB32 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001DB38 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001DB3E 6000 0000                  		bra.w	loc_18FA2
0001DB42                            ; ===========================================================================
0001DB42                            
0001DB42                            locret_18DC4:
0001DB42 4E75                       		rts	
0001DB44                            ; ===========================================================================
0001DB44                            
0001DB44                            loc_18DC6:				; XREF: Obj7B_Index
0001DB44 2268 003C                  		movea.l	$3C(a0),a1
0001DB48 7000                       		moveq	#0,d0
0001DB4A 1028 003A                  		move.b	$3A(a0),d0
0001DB4E 9029 003A                  		sub.b	$3A(a1),d0
0001DB52 6700                       		beq.s	loc_18E2A
0001DB54 6400                       		bcc.s	loc_18DDA
0001DB56 4400                       		neg.b	d0
0001DB58                            
0001DB58                            loc_18DDA:
0001DB58 323C F7E8                  		move.w	#-$818,d1
0001DB5C 343C FEEC                  		move.w	#-$114,d2
0001DB60 0C00 0001                  		cmpi.b	#1,d0
0001DB64 6700                       		beq.s	loc_18E00
0001DB66 323C F6A0                  		move.w	#-$960,d1
0001DB6A 343C FF0C                  		move.w	#-$F4,d2
0001DB6E 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001DB74 6D00                       		blt.s	loc_18E00
0001DB76 323C F5E0                  		move.w	#-$A20,d1
0001DB7A 343C FF80                  		move.w	#-$80,d2
0001DB7E                            
0001DB7E                            loc_18E00:
0001DB7E 3141 0012                  		move.w	d1,$12(a0)
0001DB82 3142 0010                  		move.w	d2,$10(a0)
0001DB86 3028 0008                  		move.w	8(a0),d0
0001DB8A 9068 0030                  		sub.w	$30(a0),d0
0001DB8E 6400                       		bcc.s	loc_18E16
0001DB90 4468 0010                  		neg.w	$10(a0)
0001DB94                            
0001DB94                            loc_18E16:
0001DB94 117C 0001 001A             		move.b	#1,$1A(a0)
0001DB9A 317C 0020 0028             		move.w	#$20,$28(a0)
0001DBA0 5428 0024                  		addq.b	#2,$24(a0)
0001DBA4 6000 0000                  		bra.w	loc_18EAA
0001DBA8                            ; ===========================================================================
0001DBA8                            
0001DBA8                            loc_18E2A:				; XREF: loc_18DC6
0001DBA8 45F9 0000 0000             		lea	(word_19018).l,a2
0001DBAE 7000                       		moveq	#0,d0
0001DBB0 1029 001A                  		move.b	$1A(a1),d0
0001DBB4 343C 0028                  		move.w	#$28,d2
0001DBB8 3228 0008                  		move.w	8(a0),d1
0001DBBC 9268 0030                  		sub.w	$30(a0),d1
0001DBC0 6400                       		bcc.s	loc_18E48
0001DBC2 4442                       		neg.w	d2
0001DBC4 5440                       		addq.w	#2,d0
0001DBC6                            
0001DBC6                            loc_18E48:
0001DBC6 D040                       		add.w	d0,d0
0001DBC8 3228 0034                  		move.w	$34(a0),d1
0001DBCC D272 0000                  		add.w	(a2,d0.w),d1
0001DBD0 3141 000C                  		move.w	d1,$C(a0)
0001DBD4 D468 0030                  		add.w	$30(a0),d2
0001DBD8 3142 0008                  		move.w	d2,8(a0)
0001DBDC 4268 000E                  		clr.w	$E(a0)
0001DBE0 4268 000A                  		clr.w	$A(a0)
0001DBE4 5368 0028                  		subq.w	#1,$28(a0)
0001DBE8 6600                       		bne.s	loc_18E7A
0001DBEA 317C 0020 0028             		move.w	#$20,$28(a0)
0001DBF0 117C 0008 0024             		move.b	#8,$24(a0)
0001DBF6 4E75                       		rts	
0001DBF8                            ; ===========================================================================
0001DBF8                            
0001DBF8                            loc_18E7A:
0001DBF8 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001DBFE 6600                       		bne.s	loc_18E88
0001DC00 117C 0005 001F             		move.b	#5,$1F(a0)
0001DC06                            
0001DC06                            loc_18E88:
0001DC06 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001DC0C 6600                       		bne.s	loc_18E96
0001DC0E 117C 0002 001F             		move.b	#2,$1F(a0)
0001DC14                            
0001DC14                            loc_18E96:
0001DC14 5328 001E                  		subq.b	#1,$1E(a0)
0001DC18 6E00                       		bgt.s	locret_18EA8
0001DC1A 0868 0000 001A             		bchg	#0,$1A(a0)
0001DC20 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001DC26                            
0001DC26                            locret_18EA8:
0001DC26 4E75                       		rts	
0001DC28                            ; ===========================================================================
0001DC28                            
0001DC28                            loc_18EAA:				; XREF: Obj7B_Index
0001DC28 43F8 D040                  		lea	($FFFFD040).w,a1
0001DC2C 707A                       		moveq	#$7A,d0
0001DC2E 7240                       		moveq	#$40,d1
0001DC30 743E                       		moveq	#$3E,d2
0001DC32                            
0001DC32                            loc_18EB4:
0001DC32 B011                       		cmp.b	(a1),d0
0001DC34 6700                       		beq.s	loc_18EC0
0001DC36 D2C1                       		adda.w	d1,a1
0001DC38 51CA FFF8                  		dbf	d2,loc_18EB4
0001DC3C                            
0001DC3C 6000                       		bra.s	loc_18F38
0001DC3E                            ; ===========================================================================
0001DC3E                            
0001DC3E                            loc_18EC0:
0001DC3E 3029 0008                  		move.w	8(a1),d0
0001DC42 3229 000C                  		move.w	$C(a1),d1
0001DC46 3428 0008                  		move.w	8(a0),d2
0001DC4A 3628 000C                  		move.w	$C(a0),d3
0001DC4E 45FA 0000                  		lea	byte_19022(pc),a2
0001DC52 47FA 0000                  		lea	byte_19026(pc),a3
0001DC56 181A                       		move.b	(a2)+,d4
0001DC58 4884                       		ext.w	d4
0001DC5A D044                       		add.w	d4,d0
0001DC5C 181B                       		move.b	(a3)+,d4
0001DC5E 4884                       		ext.w	d4
0001DC60 D444                       		add.w	d4,d2
0001DC62 B440                       		cmp.w	d0,d2
0001DC64 6500                       		bcs.s	loc_18F38
0001DC66 181A                       		move.b	(a2)+,d4
0001DC68 4884                       		ext.w	d4
0001DC6A D044                       		add.w	d4,d0
0001DC6C 181B                       		move.b	(a3)+,d4
0001DC6E 4884                       		ext.w	d4
0001DC70 D444                       		add.w	d4,d2
0001DC72 B042                       		cmp.w	d2,d0
0001DC74 6500                       		bcs.s	loc_18F38
0001DC76 181A                       		move.b	(a2)+,d4
0001DC78 4884                       		ext.w	d4
0001DC7A D244                       		add.w	d4,d1
0001DC7C 181B                       		move.b	(a3)+,d4
0001DC7E 4884                       		ext.w	d4
0001DC80 D644                       		add.w	d4,d3
0001DC82 B641                       		cmp.w	d1,d3
0001DC84 6500                       		bcs.s	loc_18F38
0001DC86 181A                       		move.b	(a2)+,d4
0001DC88 4884                       		ext.w	d4
0001DC8A D244                       		add.w	d4,d1
0001DC8C 181B                       		move.b	(a3)+,d4
0001DC8E 4884                       		ext.w	d4
0001DC90 D644                       		add.w	d4,d3
0001DC92 B243                       		cmp.w	d3,d1
0001DC94 6500                       		bcs.s	loc_18F38
0001DC96 5428 0024                  		addq.b	#2,$24(a0)
0001DC9A 4268 0028                  		clr.w	$28(a0)
0001DC9E 4229 0020                  		clr.b	$20(a1)
0001DCA2 5329 0021                  		subq.b	#1,$21(a1)
0001DCA6 6600                       		bne.s	loc_18F38
0001DCA8 08E9 0007 0022             		bset	#7,$22(a1)
0001DCAE 4268 0010                  		clr.w	$10(a0)
0001DCB2 4268 0012                  		clr.w	$12(a0)
0001DCB6                            
0001DCB6                            loc_18F38:
0001DCB6 4A68 0012                  		tst.w	$12(a0)
0001DCBA 6A00                       		bpl.s	loc_18F5C
0001DCBC 4EB9 0001 09A2             		jsr	ObjectFall
0001DCC2 3028 0034                  		move.w	$34(a0),d0
0001DCC6 0440 002F                  		subi.w	#$2F,d0
0001DCCA B068 000C                  		cmp.w	$C(a0),d0
0001DCCE 6E00                       		bgt.s	loc_18F58
0001DCD0 4EB9 0001 09A2             		jsr	ObjectFall
0001DCD6                            
0001DCD6                            loc_18F58:
0001DCD6 6000 FF20                  		bra.w	loc_18E7A
0001DCDA                            ; ===========================================================================
0001DCDA                            
0001DCDA                            loc_18F5C:
0001DCDA 4EB9 0001 09A2             		jsr	ObjectFall
0001DCE0 2268 003C                  		movea.l	$3C(a0),a1
0001DCE4 45F9 0000 0000             		lea	(word_19018).l,a2
0001DCEA 7000                       		moveq	#0,d0
0001DCEC 1029 001A                  		move.b	$1A(a1),d0
0001DCF0 3228 0008                  		move.w	8(a0),d1
0001DCF4 9268 0030                  		sub.w	$30(a0),d1
0001DCF8 6400                       		bcc.s	loc_18F7E
0001DCFA 5440                       		addq.w	#2,d0
0001DCFC                            
0001DCFC                            loc_18F7E:
0001DCFC D040                       		add.w	d0,d0
0001DCFE 3228 0034                  		move.w	$34(a0),d1
0001DD02 D272 0000                  		add.w	(a2,d0.w),d1
0001DD06 B268 000C                  		cmp.w	$C(a0),d1
0001DD0A 6ECA                       		bgt.s	loc_18F58
0001DD0C 2268 003C                  		movea.l	$3C(a0),a1
0001DD10 7202                       		moveq	#2,d1
0001DD12 4A68 0010                  		tst.w	$10(a0)
0001DD16 6B00                       		bmi.s	loc_18F9C
0001DD18 7200                       		moveq	#0,d1
0001DD1A                            
0001DD1A                            loc_18F9C:
0001DD1A 317C 0000 0028             		move.w	#0,$28(a0)
0001DD20                            
0001DD20                            loc_18FA2:
0001DD20 1341 003A                  		move.b	d1,$3A(a1)
0001DD24 1141 003A                  		move.b	d1,$3A(a0)
0001DD28 B229 001A                  		cmp.b	$1A(a1),d1
0001DD2C 6700                       		beq.s	loc_19008
0001DD2E 08A9 0003 0022             		bclr	#3,$22(a1)
0001DD34 6700                       		beq.s	loc_19008
0001DD36 4229 0025                  		clr.b	$25(a1)
0001DD3A 137C 0002 0024             		move.b	#2,$24(a1)
0001DD40 45F8 D000                  		lea	($FFFFD000).w,a2
0001DD44 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001DD4A 446A 0012                  		neg.w	$12(a2)
0001DD4E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001DD54 6600                       		bne.s	loc_18FDC
0001DD56 E0EA 0012                  		asr	$12(a2)
0001DD5A                            
0001DD5A                            loc_18FDC:
0001DD5A 08EA 0001 0022             		bset	#1,$22(a2)
0001DD60 08AA 0003 0022             		bclr	#3,$22(a2)
0001DD66 422A 003C                  		clr.b	$3C(a2)
0001DD6A 2F08                       		move.l	a0,-(sp)
0001DD6C 41D2                       		lea	(a2),a0
0001DD6E 4EBA 8F30                  		jsr	Obj01_ChkRoll
0001DD72 205F                       		movea.l	(sp)+,a0
0001DD74 157C 0002 0024             		move.b	#2,$24(a2)
0001DD7A 303C 00CC                  		move.w	#$CC,d0
0001DD7E 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001DD84                            
0001DD84                            loc_19008:
0001DD84 4268 0010                  		clr.w	$10(a0)
0001DD88 4268 0012                  		clr.w	$12(a0)
0001DD8C 5428 0024                  		addq.b	#2,$24(a0)
0001DD90 6000 FE66                  		bra.w	loc_18E7A
0001DD94                            ; ===========================================================================
0001DD94 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001DD9E                            		even
0001DD9E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001DDA2                            		even
0001DDA2 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001DDA6                            		even
0001DDA6                            ; ===========================================================================
0001DDA6                            
0001DDA6                            Obj7B_Explode:				; XREF: Obj7B_Index
0001DDA6 10BC 003F                  		move.b	#$3F,(a0)
0001DDAA 4228 0024                  		clr.b	$24(a0)
0001DDAE 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001DDB4 6700                       		beq.s	Obj7B_MakeFrag
0001DDB6 4E75                       		rts	
0001DDB8                            ; ===========================================================================
0001DDB8                            
0001DDB8                            Obj7B_MakeFrag:
0001DDB8 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001DDBE 7203                       		moveq	#3,d1
0001DDC0 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001DDC4                            
0001DDC4                            Obj7B_Loop:
0001DDC4 4EB9 0001 0E72             		jsr	SingleObjLoad
0001DDCA 6600                       		bne.s	loc_1909A
0001DDCC 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001DDD0 137C 000A 0024             		move.b	#$A,$24(a1)
0001DDD6 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001DDDE 137C 0003 0018             		move.b	#3,$18(a1)
0001DDE4 337C 0518 0002             		move.w	#$518,2(a1)
0001DDEA 3368 0008 0008             		move.w	8(a0),8(a1)
0001DDF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DDF6 335A 0010                  		move.w	(a2)+,$10(a1)
0001DDFA 335A 0012                  		move.w	(a2)+,$12(a1)
0001DDFE 137C 0098 0020             		move.b	#$98,$20(a1)
0001DE04 0029 0004 0001             		ori.b	#4,1(a1)
0001DE0A 08E9 0007 0001             		bset	#7,1(a1)
0001DE10 137C 000C 0019             		move.b	#$C,$19(a1)
0001DE16                            
0001DE16                            loc_1909A:
0001DE16 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001DE1A                            
0001DE1A 4E75                       		rts	
0001DE1C                            ; ===========================================================================
0001DE1C FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001DE20 FF60 FDC0                  		dc.w $FF60, $FDC0
0001DE24 0100 FCC0                  		dc.w $100, $FCC0
0001DE28 00A0 FDC0                  		dc.w $A0, $FDC0
0001DE2C                            ; ===========================================================================
0001DE2C                            
0001DE2C                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001DE2C 4EB9 0001 09C2             		jsr	SpeedToPos
0001DE32 3168 0008 0030             		move.w	8(a0),$30(a0)
0001DE38 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001DE3E 0668 0018 0012             		addi.w	#$18,$12(a0)
0001DE44 7004                       		moveq	#4,d0
0001DE46 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001DE4A E448                       		lsr.w	#2,d0
0001DE4C 1140 001A                  		move.b	d0,$1A(a0)
0001DE50 4A28 0001                  		tst.b	1(a0)
0001DE54 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001DE58 4E75                       		rts	
0001DE5A                            ; ===========================================================================
0001DE5A                            ; ---------------------------------------------------------------------------
0001DE5A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001DE5A                            ; ---------------------------------------------------------------------------
0001DE5A                            Map_obj7B:
0001DE5A                            	include "_maps\obj7B.asm"
0001DE5A                            ; ---------------------------------------------------------------------------
0001DE5A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001DE5A                            ; ---------------------------------------------------------------------------
0001DE5A 0000                       		dc.w byte_190E2-Map_obj7B
0001DE5C 0000                       		dc.w byte_190E8-Map_obj7B
0001DE5E 01                         byte_190E2:	dc.b 1
0001DE5F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001DE64 01                         byte_190E8:	dc.b 1
0001DE65 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001DE6A                            		even
0001DE6A                            		even
0001DE6A                            
0001DE6A                            ; ===========================================================================
0001DE6A                            ; ---------------------------------------------------------------------------
0001DE6A                            ; Object 75 - Eggman (SYZ)
0001DE6A                            ; ---------------------------------------------------------------------------
0001DE6A                            
0001DE6A                            Obj75:					; XREF: Obj_Index
0001DE6A 7000                       		moveq	#0,d0
0001DE6C 1028 0024                  		move.b	$24(a0),d0
0001DE70 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001DE74 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001DE78                            ; ===========================================================================
0001DE78 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001DE7A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001DE7C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001DE7E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001DE80 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001DE82                            
0001DE82 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001DE85 0401 05                    		dc.b 4,	1, 5
0001DE88 0607 05                    		dc.b 6,	7, 5
0001DE8B 0800 05                    		dc.b 8,	0, 5
0001DE8E                            ; ===========================================================================
0001DE8E                            
0001DE8E                            Obj75_Main:				; XREF: Obj75_Index
0001DE8E 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001DE94 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001DE9A 3168 0008 0030             		move.w	8(a0),$30(a0)
0001DEA0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001DEA6 117C 000F 0020             		move.b	#$F,$20(a0)
0001DEAC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001DEB2 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001DEB6 2248                       		movea.l	a0,a1
0001DEB8 7203                       		moveq	#3,d1
0001DEBA 6000                       		bra.s	Obj75_LoadBoss
0001DEBC                            ; ===========================================================================
0001DEBC                            
0001DEBC                            Obj75_Loop:
0001DEBC 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001DEC2 6600                       		bne.s	Obj75_ShipMain
0001DEC4 12BC 0075                  		move.b	#$75,(a1)
0001DEC8 3368 0008 0008             		move.w	8(a0),8(a1)
0001DECE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DED4                            
0001DED4                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001DED4 08A8 0000 0022             		bclr	#0,$22(a0)
0001DEDA 4229 0025                  		clr.b	$25(a1)
0001DEDE 135A 0024                  		move.b	(a2)+,$24(a1)
0001DEE2 135A 001C                  		move.b	(a2)+,$1C(a1)
0001DEE6 135A 0018                  		move.b	(a2)+,$18(a1)
0001DEEA 237C 0001 CA92 0004        		move.l	#Map_Eggman,4(a1)
0001DEF2 337C 0400 0002             		move.w	#$400,2(a1)
0001DEF8 137C 0004 0001             		move.b	#4,1(a1)
0001DEFE 137C 0020 0019             		move.b	#$20,$19(a1)
0001DF04 2348 0034                  		move.l	a0,$34(a1)
0001DF08 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001DF0C                            
0001DF0C                            Obj75_ShipMain:				; XREF: Obj75_Index
0001DF0C 7000                       		moveq	#0,d0
0001DF0E 1028 0025                  		move.b	$25(a0),d0
0001DF12 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001DF16 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001DF1A 43F9 0001 CA42             		lea	(Ani_Eggman).l,a1
0001DF20 4EB9 0000 D7DA             		jsr	AnimateSprite
0001DF26 7003                       		moveq	#3,d0
0001DF28 C028 0022                  		and.b	$22(a0),d0
0001DF2C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001DF32 8128 0001                  		or.b	d0,1(a0)
0001DF36 4EF9 0001 09DC             		jmp	DisplaySprite
0001DF3C                            ; ===========================================================================
0001DF3C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001DF40 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001DF44 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001DF48                            ; ===========================================================================
0001DF48                            
0001DF48                            loc_191CC:				; XREF: Obj75_ShipIndex
0001DF48 317C FF00 0010             		move.w	#-$100,$10(a0)
0001DF4E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001DF54 6400                       		bcc.s	loc_191DE
0001DF56 5428 0025                  		addq.b	#2,$25(a0)
0001DF5A                            
0001DF5A                            loc_191DE:
0001DF5A 1028 003F                  		move.b	$3F(a0),d0
0001DF5E 5428 003F                  		addq.b	#2,$3F(a0)
0001DF62 4EB9 0000 3736             		jsr	(CalcSine).l
0001DF68 E440                       		asr.w	#2,d0
0001DF6A 3140 0012                  		move.w	d0,$12(a0)
0001DF6E                            
0001DF6E                            loc_191F2:
0001DF6E 6100 E6C2                  		bsr.w	BossMove
0001DF72 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001DF78 3168 0030 0008             		move.w	$30(a0),8(a0)
0001DF7E                            
0001DF7E                            loc_19202:
0001DF7E 3028 0008                  		move.w	8(a0),d0
0001DF82 0440 2C00                  		subi.w	#$2C00,d0
0001DF86 EA48                       		lsr.w	#5,d0
0001DF88 1140 0034                  		move.b	d0,$34(a0)
0001DF8C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001DF92 6400                       		bcc.s	locret_19256
0001DF94 4A28 0022                  		tst.b	$22(a0)
0001DF98 6B00                       		bmi.s	loc_19258
0001DF9A 4A28 0020                  		tst.b	$20(a0)
0001DF9E 6600                       		bne.s	locret_19256
0001DFA0 4A28 003E                  		tst.b	$3E(a0)
0001DFA4 6600                       		bne.s	loc_1923A
0001DFA6 117C 0020 003E             		move.b	#$20,$3E(a0)
0001DFAC 303C 00AC                  		move.w	#$AC,d0
0001DFB0 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001DFB6                            
0001DFB6                            loc_1923A:
0001DFB6 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001DFBA 7000                       		moveq	#0,d0
0001DFBC 4A51                       		tst.w	(a1)
0001DFBE 6600                       		bne.s	loc_19248
0001DFC0 303C 0EEE                  		move.w	#$EEE,d0
0001DFC4                            
0001DFC4                            loc_19248:
0001DFC4 3280                       		move.w	d0,(a1)
0001DFC6 5328 003E                  		subq.b	#1,$3E(a0)
0001DFCA 6600                       		bne.s	locret_19256
0001DFCC 117C 000F 0020             		move.b	#$F,$20(a0)
0001DFD2                            
0001DFD2                            locret_19256:
0001DFD2 4E75                       		rts	
0001DFD4                            ; ===========================================================================
0001DFD4                            
0001DFD4                            loc_19258:				; XREF: loc_19202
0001DFD4 7064                       		moveq	#100,d0
0001DFD6 6100 0000                  		bsr.w	AddPoints
0001DFDA 117C 0006 0025             		move.b	#6,$25(a0)
0001DFE0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001DFE6 4268 0010                  		clr.w	$10(a0)
0001DFEA 4E75                       		rts	
0001DFEC                            ; ===========================================================================
0001DFEC                            
0001DFEC                            loc_19270:				; XREF: Obj75_ShipIndex
0001DFEC 3028 0030                  		move.w	$30(a0),d0
0001DFF0 317C 0140 0010             		move.w	#$140,$10(a0)
0001DFF6 0828 0000 0022             		btst	#0,$22(a0)
0001DFFC 6600                       		bne.s	loc_1928E
0001DFFE 4468 0010                  		neg.w	$10(a0)
0001E002 0C40 2C08                  		cmpi.w	#$2C08,d0
0001E006 6E00                       		bgt.s	loc_1929E
0001E008 6000                       		bra.s	loc_19294
0001E00A                            ; ===========================================================================
0001E00A                            
0001E00A                            loc_1928E:
0001E00A 0C40 2D38                  		cmpi.w	#$2D38,d0
0001E00E 6D00                       		blt.s	loc_1929E
0001E010                            
0001E010                            loc_19294:
0001E010 0868 0000 0022             		bchg	#0,$22(a0)
0001E016 4228 003D                  		clr.b	$3D(a0)
0001E01A                            
0001E01A                            loc_1929E:
0001E01A 0440 2C10                  		subi.w	#$2C10,d0
0001E01E 0240 001F                  		andi.w	#$1F,d0
0001E022 0440 001F                  		subi.w	#$1F,d0
0001E026 6A00                       		bpl.s	loc_192AE
0001E028 4440                       		neg.w	d0
0001E02A                            
0001E02A                            loc_192AE:
0001E02A 5340                       		subq.w	#1,d0
0001E02C 6E00                       		bgt.s	loc_192E8
0001E02E 4A28 003D                  		tst.b	$3D(a0)
0001E032 6600                       		bne.s	loc_192E8
0001E034 3238 D008                  		move.w	($FFFFD008).w,d1
0001E038 0441 2C00                  		subi.w	#$2C00,d1
0001E03C EA41                       		asr.w	#5,d1
0001E03E B228 0034                  		cmp.b	$34(a0),d1
0001E042 6600                       		bne.s	loc_192E8
0001E044 7000                       		moveq	#0,d0
0001E046 1028 0034                  		move.b	$34(a0),d0
0001E04A EB40                       		asl.w	#5,d0
0001E04C 0640 2C10                  		addi.w	#$2C10,d0
0001E050 3140 0030                  		move.w	d0,$30(a0)
0001E054 6100 0000                  		bsr.w	Obj75_FindBlocks
0001E058 5428 0025                  		addq.b	#2,$25(a0)
0001E05C 4268 0028                  		clr.w	$28(a0)
0001E060 4268 0010                  		clr.w	$10(a0)
0001E064                            
0001E064                            loc_192E8:
0001E064 6000 FEF4                  		bra.w	loc_191DE
0001E068                            ; ===========================================================================
0001E068                            
0001E068                            loc_192EC:				; XREF: Obj75_ShipIndex
0001E068 7000                       		moveq	#0,d0
0001E06A 1028 0028                  		move.b	$28(a0),d0
0001E06E 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001E072 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001E076                            ; ===========================================================================
0001E076 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001E078 0000                       		dc.w loc_19348-off_192FA
0001E07A 0000                       		dc.w loc_1938E-off_192FA
0001E07C 0000                       		dc.w loc_193D0-off_192FA
0001E07E                            ; ===========================================================================
0001E07E                            
0001E07E                            loc_19302:				; XREF: off_192FA
0001E07E 317C 0180 0012             		move.w	#$180,$12(a0)
0001E084 3028 0038                  		move.w	$38(a0),d0
0001E088 0C40 0556                  		cmpi.w	#$556,d0
0001E08C 6500                       		bcs.s	loc_19344
0001E08E 317C 0556 0038             		move.w	#$556,$38(a0)
0001E094 4268 003C                  		clr.w	$3C(a0)
0001E098 70FF                       		moveq	#-1,d0
0001E09A 3028 0036                  		move.w	$36(a0),d0
0001E09E 6700                       		beq.s	loc_1933C
0001E0A0 2240                       		movea.l	d0,a1
0001E0A2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001E0A8 117C 00FF 0029             		move.b	#-1,$29(a0)
0001E0AE 2348 0034                  		move.l	a0,$34(a1)
0001E0B2 317C 0032 003C             		move.w	#$32,$3C(a0)
0001E0B8                            
0001E0B8                            loc_1933C:
0001E0B8 4268 0012                  		clr.w	$12(a0)
0001E0BC 5428 0028                  		addq.b	#2,$28(a0)
0001E0C0                            
0001E0C0                            loc_19344:
0001E0C0 6000 FEAC                  		bra.w	loc_191F2
0001E0C4                            ; ===========================================================================
0001E0C4                            
0001E0C4                            loc_19348:				; XREF: off_192FA
0001E0C4 5368 003C                  		subq.w	#1,$3C(a0)
0001E0C8 6A00                       		bpl.s	loc_19366
0001E0CA 5428 0028                  		addq.b	#2,$28(a0)
0001E0CE 317C F800 0012             		move.w	#-$800,$12(a0)
0001E0D4 4A68 0036                  		tst.w	$36(a0)
0001E0D8 6600                       		bne.s	loc_19362
0001E0DA E0E8 0012                  		asr	$12(a0)
0001E0DE                            
0001E0DE                            loc_19362:
0001E0DE 7000                       		moveq	#0,d0
0001E0E0 6000                       		bra.s	loc_1937C
0001E0E2                            ; ===========================================================================
0001E0E2                            
0001E0E2                            loc_19366:
0001E0E2 7000                       		moveq	#0,d0
0001E0E4 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001E0EA 6E00                       		bgt.s	loc_1937C
0001E0EC 7002                       		moveq	#2,d0
0001E0EE 0828 0001 003D             		btst	#1,$3D(a0)
0001E0F4 6700                       		beq.s	loc_1937C
0001E0F6 4440                       		neg.w	d0
0001E0F8                            
0001E0F8                            loc_1937C:
0001E0F8 D068 0038                  		add.w	$38(a0),d0
0001E0FC 3140 000C                  		move.w	d0,$C(a0)
0001E100 3168 0030 0008             		move.w	$30(a0),8(a0)
0001E106 6000 FE76                  		bra.w	loc_19202
0001E10A                            ; ===========================================================================
0001E10A                            
0001E10A                            loc_1938E:				; XREF: off_192FA
0001E10A 303C 04DA                  		move.w	#$4DA,d0
0001E10E 4A68 0036                  		tst.w	$36(a0)
0001E112 6700                       		beq.s	loc_1939C
0001E114 0440 0018                  		subi.w	#$18,d0
0001E118                            
0001E118                            loc_1939C:
0001E118 B068 0038                  		cmp.w	$38(a0),d0
0001E11C 6D00                       		blt.s	loc_193BE
0001E11E 317C 0008 003C             		move.w	#8,$3C(a0)
0001E124 4A68 0036                  		tst.w	$36(a0)
0001E128 6700                       		beq.s	loc_193B4
0001E12A 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001E130                            
0001E130                            loc_193B4:
0001E130 5428 0028                  		addq.b	#2,$28(a0)
0001E134 4268 0012                  		clr.w	$12(a0)
0001E138 6000                       		bra.s	loc_193CC
0001E13A                            ; ===========================================================================
0001E13A                            
0001E13A                            loc_193BE:
0001E13A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001E140 6C00                       		bge.s	loc_193CC
0001E142 0668 000C 0012             		addi.w	#$C,$12(a0)
0001E148                            
0001E148                            loc_193CC:
0001E148 6000 FE24                  		bra.w	loc_191F2
0001E14C                            ; ===========================================================================
0001E14C                            
0001E14C                            loc_193D0:				; XREF: off_192FA
0001E14C 5368 003C                  		subq.w	#1,$3C(a0)
0001E150 6E00                       		bgt.s	loc_19406
0001E152 6B00                       		bmi.s	loc_193EE
0001E154 70FF                       		moveq	#-1,d0
0001E156 3028 0036                  		move.w	$36(a0),d0
0001E15A 6700                       		beq.s	loc_193E8
0001E15C 2240                       		movea.l	d0,a1
0001E15E 137C 000A 0029             		move.b	#$A,$29(a1)
0001E164                            
0001E164                            loc_193E8:
0001E164 4268 0036                  		clr.w	$36(a0)
0001E168 6000                       		bra.s	loc_19406
0001E16A                            ; ===========================================================================
0001E16A                            
0001E16A                            loc_193EE:
0001E16A 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001E170 6600                       		bne.s	loc_19406
0001E172 4228 0029                  		clr.b	$29(a0)
0001E176 5528 0025                  		subq.b	#2,$25(a0)
0001E17A 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001E180 6000                       		bra.s	loc_19446
0001E182                            ; ===========================================================================
0001E182                            
0001E182                            loc_19406:
0001E182 7001                       		moveq	#1,d0
0001E184 4A68 0036                  		tst.w	$36(a0)
0001E188 6700                       		beq.s	loc_19410
0001E18A 7002                       		moveq	#2,d0
0001E18C                            
0001E18C                            loc_19410:
0001E18C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001E192 6700                       		beq.s	loc_19424
0001E194 6D00                       		blt.s	loc_1941C
0001E196 4440                       		neg.w	d0
0001E198                            
0001E198                            loc_1941C:
0001E198 4A68 0036                  		tst.w	$36(a0)
0001E19C D168 0038                  		add.w	d0,$38(a0)
0001E1A0                            
0001E1A0                            loc_19424:
0001E1A0 7000                       		moveq	#0,d0
0001E1A2 4A68 0036                  		tst.w	$36(a0)
0001E1A6 6700                       		beq.s	loc_19438
0001E1A8 7002                       		moveq	#2,d0
0001E1AA 0828 0000 003D             		btst	#0,$3D(a0)
0001E1B0 6700                       		beq.s	loc_19438
0001E1B2 4440                       		neg.w	d0
0001E1B4                            
0001E1B4                            loc_19438:
0001E1B4 D068 0038                  		add.w	$38(a0),d0
0001E1B8 3140 000C                  		move.w	d0,$C(a0)
0001E1BC 3168 0030 0008             		move.w	$30(a0),8(a0)
0001E1C2                            
0001E1C2                            loc_19446:
0001E1C2 6000 FDBA                  		bra.w	loc_19202
0001E1C6                            
0001E1C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1C6                            
0001E1C6                            
0001E1C6                            Obj75_FindBlocks:			; XREF: loc_192AE
0001E1C6 4268 0036                  		clr.w	$36(a0)
0001E1CA 43F8 D040                  		lea	($FFFFD040).w,a1
0001E1CE 703E                       		moveq	#$3E,d0
0001E1D0 7276                       		moveq	#$76,d1
0001E1D2 1428 0034                  		move.b	$34(a0),d2
0001E1D6                            
0001E1D6                            Obj75_FindLoop:
0001E1D6 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001E1D8 6600                       		bne.s	loc_1946A	; if not, branch
0001E1DA B429 0028                  		cmp.b	$28(a1),d2
0001E1DE 6600                       		bne.s	loc_1946A
0001E1E0 3149 0036                  		move.w	a1,$36(a0)
0001E1E4 6000                       		bra.s	locret_19472
0001E1E6                            ; ===========================================================================
0001E1E6                            
0001E1E6                            loc_1946A:
0001E1E6 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001E1EA 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001E1EE                            
0001E1EE                            locret_19472:
0001E1EE 4E75                       		rts	
0001E1F0                            ; End of function Obj75_FindBlocks
0001E1F0                            
0001E1F0                            ; ===========================================================================
0001E1F0                            
0001E1F0                            loc_19474:				; XREF: Obj75_ShipIndex
0001E1F0 5368 003C                  		subq.w	#1,$3C(a0)
0001E1F4 6B00                       		bmi.s	loc_1947E
0001E1F6 6000 E3F8                  		bra.w	BossDefeated
0001E1FA                            ; ===========================================================================
0001E1FA                            
0001E1FA                            loc_1947E:
0001E1FA 5428 0025                  		addq.b	#2,$25(a0)
0001E1FE 4268 0012                  		clr.w	$12(a0)
0001E202 08E8 0000 0022             		bset	#0,$22(a0)
0001E208 08A8 0007 0022             		bclr	#7,$22(a0)
0001E20E 4268 0010                  		clr.w	$10(a0)
0001E212 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001E218 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001E21C 6600                       		bne.s	loc_194A8
0001E21E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001E224                            
0001E224                            loc_194A8:
0001E224 6000 FD58                  		bra.w	loc_19202
0001E228                            ; ===========================================================================
0001E228                            
0001E228                            loc_194AC:				; XREF: Obj75_ShipIndex
0001E228 5268 003C                  		addq.w	#1,$3C(a0)
0001E22C 6700                       		beq.s	loc_194BC
0001E22E 6A00                       		bpl.s	loc_194C2
0001E230 0668 0018 0012             		addi.w	#$18,$12(a0)
0001E236 6000                       		bra.s	loc_194EE
0001E238                            ; ===========================================================================
0001E238                            
0001E238                            loc_194BC:
0001E238 4268 0012                  		clr.w	$12(a0)
0001E23C 6000                       		bra.s	loc_194EE
0001E23E                            ; ===========================================================================
0001E23E                            
0001E23E                            loc_194C2:
0001E23E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001E244 6500                       		bcs.s	loc_194DA
0001E246 6700                       		beq.s	loc_194E0
0001E248 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001E24E 6500                       		bcs.s	loc_194EE
0001E250 5428 0025                  		addq.b	#2,$25(a0)
0001E254 6000                       		bra.s	loc_194EE
0001E256                            ; ===========================================================================
0001E256                            
0001E256                            loc_194DA:
0001E256 5168 0012                  		subq.w	#8,$12(a0)
0001E25A 6000                       		bra.s	loc_194EE
0001E25C                            ; ===========================================================================
0001E25C                            
0001E25C                            loc_194E0:
0001E25C 4268 0012                  		clr.w	$12(a0)
0001E260 303C 0085                  		move.w	#$85,d0
0001E264 4EB9 0000 1108             		jsr	(PlaySound).l	; play SYZ music
0001E26A                            
0001E26A                            loc_194EE:
0001E26A 6000 FD02                  		bra.w	loc_191F2
0001E26E                            ; ===========================================================================
0001E26E                            
0001E26E                            loc_194F2:				; XREF: Obj75_ShipIndex
0001E26E 317C 0400 0010             		move.w	#$400,$10(a0)
0001E274 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001E27A 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001E280 6400                       		bcc.s	loc_1950C
0001E282 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001E286 6000                       		bra.s	loc_19512
0001E288                            ; ===========================================================================
0001E288                            
0001E288                            loc_1950C:
0001E288 4A28 0001                  		tst.b	1(a0)
0001E28C 6A00                       		bpl.s	Obj75_ShipDelete
0001E28E                            
0001E28E                            loc_19512:
0001E28E 6100 E3A2                  		bsr.w	BossMove
0001E292 6000 FCC6                  		bra.w	loc_191DE
0001E296                            ; ===========================================================================
0001E296                            
0001E296                            Obj75_ShipDelete:
0001E296 4EF9 0001 0A18             		jmp	DeleteObject
0001E29C                            ; ===========================================================================
0001E29C                            
0001E29C                            Obj75_FaceMain:				; XREF: Obj75_Index
0001E29C 7201                       		moveq	#1,d1
0001E29E 2268 0034                  		movea.l	$34(a0),a1
0001E2A2 7000                       		moveq	#0,d0
0001E2A4 1029 0025                  		move.b	$25(a1),d0
0001E2A8 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001E2AC 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001E2B0 1141 001C                  		move.b	d1,$1C(a0)
0001E2B4 1010                       		move.b	(a0),d0
0001E2B6 B011                       		cmp.b	(a1),d0
0001E2B8 6600                       		bne.s	Obj75_FaceDelete
0001E2BA 6000                       		bra.s	loc_195BE
0001E2BC                            ; ===========================================================================
0001E2BC                            
0001E2BC                            Obj75_FaceDelete:
0001E2BC 4EF9 0001 0A18             		jmp	DeleteObject
0001E2C2                            ; ===========================================================================
0001E2C2 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001E2C6 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001E2CA 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001E2CE                            ; ===========================================================================
0001E2CE                            
0001E2CE                            loc_19552:				; XREF: off_19546
0001E2CE 720A                       		moveq	#$A,d1
0001E2D0 4E75                       		rts	
0001E2D2                            ; ===========================================================================
0001E2D2                            
0001E2D2                            loc_19556:				; XREF: off_19546
0001E2D2 7206                       		moveq	#6,d1
0001E2D4 4E75                       		rts	
0001E2D6                            ; ===========================================================================
0001E2D6                            
0001E2D6                            loc_1955A:				; XREF: off_19546
0001E2D6 7000                       		moveq	#0,d0
0001E2D8 1029 0028                  		move.b	$28(a1),d0
0001E2DC 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001E2E0 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001E2E4                            ; ===========================================================================
0001E2E4 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001E2E8 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001E2EC                            ; ===========================================================================
0001E2EC                            
0001E2EC                            loc_19570:				; XREF: off_19568
0001E2EC 6000                       		bra.s	loc_19574
0001E2EE                            ; ===========================================================================
0001E2EE                            
0001E2EE                            loc_19572:				; XREF: off_19568
0001E2EE 7206                       		moveq	#6,d1
0001E2F0                            
0001E2F0                            loc_19574:				; XREF: off_19546
0001E2F0 4A29 0020                  		tst.b	$20(a1)
0001E2F4 6600                       		bne.s	loc_1957E
0001E2F6 7205                       		moveq	#5,d1
0001E2F8 4E75                       		rts	
0001E2FA                            ; ===========================================================================
0001E2FA                            
0001E2FA                            loc_1957E:
0001E2FA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001E300 6500                       		bcs.s	locret_19588
0001E302 7204                       		moveq	#4,d1
0001E304                            
0001E304                            locret_19588:
0001E304 4E75                       		rts	
0001E306                            ; ===========================================================================
0001E306                            
0001E306                            Obj75_FlameMain:			; XREF: Obj75_Index
0001E306 117C 0007 001C             		move.b	#7,$1C(a0)
0001E30C 2268 0034                  		movea.l	$34(a0),a1
0001E310 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001E316 6600                       		bne.s	loc_195AA
0001E318 117C 000B 001C             		move.b	#$B,$1C(a0)
0001E31E 4A28 0001                  		tst.b	1(a0)
0001E322 6A00                       		bpl.s	Obj75_FlameDelete
0001E324 6000                       		bra.s	loc_195B6
0001E326                            ; ===========================================================================
0001E326                            
0001E326                            loc_195AA:
0001E326 4A69 0010                  		tst.w	$10(a1)
0001E32A 6700                       		beq.s	loc_195B6
0001E32C 117C 0008 001C             		move.b	#8,$1C(a0)
0001E332                            
0001E332                            loc_195B6:
0001E332 6000                       		bra.s	loc_195BE
0001E334                            ; ===========================================================================
0001E334                            
0001E334                            Obj75_FlameDelete:
0001E334 4EF9 0001 0A18             		jmp	DeleteObject
0001E33A                            ; ===========================================================================
0001E33A                            
0001E33A                            loc_195BE:
0001E33A 43F9 0001 CA42             		lea	(Ani_Eggman).l,a1
0001E340 4EB9 0000 D7DA             		jsr	AnimateSprite
0001E346 2268 0034                  		movea.l	$34(a0),a1
0001E34A 3169 0008 0008             		move.w	8(a1),8(a0)
0001E350 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001E356                            
0001E356                            loc_195DA:
0001E356 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001E35C 7003                       		moveq	#3,d0
0001E35E C028 0022                  		and.b	$22(a0),d0
0001E362 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001E368 8128 0001                  		or.b	d0,1(a0)
0001E36C 4EF9 0001 09DC             		jmp	DisplaySprite
0001E372                            ; ===========================================================================
0001E372                            
0001E372                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001E372 217C 0001 CB5A 0004        		move.l	#Map_BossItems,4(a0)
0001E37A 317C 246C 0002             		move.w	#$246C,2(a0)
0001E380 117C 0005 001A             		move.b	#5,$1A(a0)
0001E386 2268 0034                  		movea.l	$34(a0),a1
0001E38A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001E390 6600                       		bne.s	loc_1961C
0001E392 4A28 0001                  		tst.b	1(a0)
0001E396 6A00                       		bpl.s	Obj75_SpikeDelete
0001E398                            
0001E398                            loc_1961C:
0001E398 3169 0008 0008             		move.w	8(a1),8(a0)
0001E39E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001E3A4 3028 003C                  		move.w	$3C(a0),d0
0001E3A8 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001E3AE 6600                       		bne.s	loc_19652
0001E3B0 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001E3B6 6700                       		beq.s	loc_1964C
0001E3B8 4A29 0028                  		tst.b	$28(a1)
0001E3BC 6600                       		bne.s	loc_19658
0001E3BE 0C40 0094                  		cmpi.w	#$94,d0
0001E3C2 6C00                       		bge.s	loc_19658
0001E3C4 5E40                       		addq.w	#7,d0
0001E3C6 6000                       		bra.s	loc_19658
0001E3C8                            ; ===========================================================================
0001E3C8                            
0001E3C8                            loc_1964C:
0001E3C8 4A69 003C                  		tst.w	$3C(a1)
0001E3CC 6A00                       		bpl.s	loc_19658
0001E3CE                            
0001E3CE                            loc_19652:
0001E3CE 4A40                       		tst.w	d0
0001E3D0 6F00                       		ble.s	loc_19658
0001E3D2 5B40                       		subq.w	#5,d0
0001E3D4                            
0001E3D4                            loc_19658:
0001E3D4 3140 003C                  		move.w	d0,$3C(a0)
0001E3D8 E440                       		asr.w	#2,d0
0001E3DA D168 000C                  		add.w	d0,$C(a0)
0001E3DE 117C 0008 0019             		move.b	#8,$19(a0)
0001E3E4 117C 000C 0016             		move.b	#$C,$16(a0)
0001E3EA 4228 0020                  		clr.b	$20(a0)
0001E3EE 2268 0034                  		movea.l	$34(a0),a1
0001E3F2 4A29 0020                  		tst.b	$20(a1)
0001E3F6 6700                       		beq.s	loc_19688
0001E3F8 4A29 0029                  		tst.b	$29(a1)
0001E3FC 6600                       		bne.s	loc_19688
0001E3FE 117C 0084 0020             		move.b	#$84,$20(a0)
0001E404                            
0001E404                            loc_19688:
0001E404 6000 FF50                  		bra.w	loc_195DA
0001E408                            ; ===========================================================================
0001E408                            
0001E408                            Obj75_SpikeDelete:
0001E408 4EF9 0001 0A18             		jmp	DeleteObject
0001E40E                            ; ===========================================================================
0001E40E                            ; ---------------------------------------------------------------------------
0001E40E                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001E40E                            ; ---------------------------------------------------------------------------
0001E40E                            
0001E40E                            Obj76:					; XREF: Obj_Index
0001E40E 7000                       		moveq	#0,d0
0001E410 1028 0024                  		move.b	$24(a0),d0
0001E414 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001E418 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001E41C                            ; ===========================================================================
0001E41C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001E41E 0000                       		dc.w Obj76_Action-Obj76_Index
0001E420 0000                       		dc.w loc_19762-Obj76_Index
0001E422                            ; ===========================================================================
0001E422                            
0001E422                            Obj76_Main:				; XREF: Obj76_Index
0001E422 7800                       		moveq	#0,d4
0001E424 3A3C 2C10                  		move.w	#$2C10,d5
0001E428 7C09                       		moveq	#9,d6
0001E42A 43D0                       		lea	(a0),a1
0001E42C 6000                       		bra.s	Obj76_MakeBlock
0001E42E                            ; ===========================================================================
0001E42E                            
0001E42E                            Obj76_Loop:
0001E42E 4EB9 0001 0E72             		jsr	SingleObjLoad
0001E434 6600                       		bne.s	Obj76_ExitLoop
0001E436                            
0001E436                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001E436 12BC 0076                  		move.b	#$76,(a1)
0001E43A 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001E442 337C 4000 0002             		move.w	#$4000,2(a1)
0001E448 137C 0004 0001             		move.b	#4,1(a1)
0001E44E 137C 0010 0019             		move.b	#$10,$19(a1)
0001E454 137C 0010 0016             		move.b	#$10,$16(a1)
0001E45A 137C 0003 0018             		move.b	#3,$18(a1)
0001E460 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001E464 337C 0582 000C             		move.w	#$582,$C(a1)
0001E46A 3344 0028                  		move.w	d4,$28(a1)
0001E46E 0644 0101                  		addi.w	#$101,d4
0001E472 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001E476 5429 0024                  		addq.b	#2,$24(a1)
0001E47A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001E47E                            
0001E47E                            Obj76_ExitLoop:
0001E47E 4E75                       		rts	
0001E480                            ; ===========================================================================
0001E480                            
0001E480                            Obj76_Action:				; XREF: Obj76_Index
0001E480 1028 0029                  		move.b	$29(a0),d0
0001E484 B028 0028                  		cmp.b	$28(a0),d0
0001E488 6700                       		beq.s	Obj76_Solid
0001E48A 4A00                       		tst.b	d0
0001E48C 6B00                       		bmi.s	loc_19718
0001E48E                            
0001E48E                            loc_19712:
0001E48E 6100 0000                  		bsr.w	Obj76_Break
0001E492 6000                       		bra.s	Obj76_Display
0001E494                            ; ===========================================================================
0001E494                            
0001E494                            loc_19718:
0001E494 2268 0034                  		movea.l	$34(a0),a1
0001E498 4A29 0021                  		tst.b	$21(a1)
0001E49C 67F0                       		beq.s	loc_19712
0001E49E 3169 0008 0008             		move.w	8(a1),8(a0)
0001E4A4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001E4AA 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001E4B0 B2C8                       		cmpa.w	a0,a1
0001E4B2 6500                       		bcs.s	Obj76_Display
0001E4B4 3029 0012                  		move.w	$12(a1),d0
0001E4B8 48C0                       		ext.l	d0
0001E4BA E080                       		asr.l	#8,d0
0001E4BC D168 000C                  		add.w	d0,$C(a0)
0001E4C0 6000                       		bra.s	Obj76_Display
0001E4C2                            ; ===========================================================================
0001E4C2                            
0001E4C2                            Obj76_Solid:				; XREF: Obj76_Action
0001E4C2 323C 001B                  		move.w	#$1B,d1
0001E4C6 343C 0010                  		move.w	#$10,d2
0001E4CA 363C 0011                  		move.w	#$11,d3
0001E4CE 3828 0008                  		move.w	8(a0),d4
0001E4D2 4EB9 0001 2DDC             		jsr	SolidObject
0001E4D8                            
0001E4D8                            Obj76_Display:				; XREF: Obj76_Action
0001E4D8 4EF9 0001 09DC             		jmp	DisplaySprite
0001E4DE                            ; ===========================================================================
0001E4DE                            
0001E4DE                            loc_19762:				; XREF: Obj76_Index
0001E4DE 4A28 0001                  		tst.b	1(a0)
0001E4E2 6A00                       		bpl.s	Obj76_Delete
0001E4E4 4EB9 0001 09A2             		jsr	ObjectFall
0001E4EA 4EF9 0001 09DC             		jmp	DisplaySprite
0001E4F0                            ; ===========================================================================
0001E4F0                            
0001E4F0                            Obj76_Delete:
0001E4F0 4EF9 0001 0A18             		jmp	DeleteObject
0001E4F6                            
0001E4F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4F6                            
0001E4F6                            
0001E4F6                            Obj76_Break:				; XREF: Obj76_Action
0001E4F6 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001E4FA 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001E4FE 7801                       		moveq	#1,d4
0001E500 7203                       		moveq	#3,d1
0001E502 7438                       		moveq	#$38,d2
0001E504 5428 0024                  		addq.b	#2,$24(a0)
0001E508 117C 0008 0019             		move.b	#8,$19(a0)
0001E50E 117C 0008 0016             		move.b	#8,$16(a0)
0001E514 43D0                       		lea	(a0),a1
0001E516 6000                       		bra.s	Obj76_MakeFrag
0001E518                            ; ===========================================================================
0001E518                            
0001E518                            Obj76_LoopFrag:
0001E518 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001E51E 6600                       		bne.s	loc_197D4
0001E520                            
0001E520                            Obj76_MakeFrag:
0001E520 45D0                       		lea	(a0),a2
0001E522 47D1                       		lea	(a1),a3
0001E524 7603                       		moveq	#3,d3
0001E526                            
0001E526                            loc_197AA:
0001E526 26DA                       		move.l	(a2)+,(a3)+
0001E528 26DA                       		move.l	(a2)+,(a3)+
0001E52A 26DA                       		move.l	(a2)+,(a3)+
0001E52C 26DA                       		move.l	(a2)+,(a3)+
0001E52E 51CB FFF6                  		dbf	d3,loc_197AA
0001E532                            
0001E532 335C 0010                  		move.w	(a4)+,$10(a1)
0001E536 335C 0012                  		move.w	(a4)+,$12(a1)
0001E53A 361D                       		move.w	(a5)+,d3
0001E53C D769 0008                  		add.w	d3,8(a1)
0001E540 361D                       		move.w	(a5)+,d3
0001E542 D769 000C                  		add.w	d3,$C(a1)
0001E546 1344 001A                  		move.b	d4,$1A(a1)
0001E54A 5244                       		addq.w	#1,d4
0001E54C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001E550                            
0001E550                            loc_197D4:
0001E550 303C 00CB                  		move.w	#$CB,d0
0001E554 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play smashing sound
0001E55A                            ; End of function Obj76_Break
0001E55A                            
0001E55A                            ; ===========================================================================
0001E55A FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001E55E 0180 FE00                  		dc.w $180, $FE00
0001E562 FF00 FF00                  		dc.w $FF00, $FF00
0001E566 0100 FF00                  		dc.w $100, $FF00
0001E56A FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001E56E 0010 0000                  		dc.w $10, 0
0001E572 0000 0010                  		dc.w 0,	$10
0001E576 0010 0010                  		dc.w $10, $10
0001E57A                            ; ---------------------------------------------------------------------------
0001E57A                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001E57A                            ; ---------------------------------------------------------------------------
0001E57A                            Map_obj76:
0001E57A                            	include "_maps\obj76.asm"
0001E57A                            ; ---------------------------------------------------------------------------
0001E57A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001E57A                            ; ---------------------------------------------------------------------------
0001E57A 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001E57E 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001E582 0000                       		dc.w byte_19826-Map_obj76
0001E584 02                         byte_19808:	dc.b 2
0001E585 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001E58A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001E58F 00                         		dc.b 0
0001E590 01                         byte_19814:	dc.b 1
0001E591 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001E596 01                         byte_1981A:	dc.b 1
0001E597 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001E59C 01                         byte_19820:	dc.b 1
0001E59D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001E5A2 01                         byte_19826:	dc.b 1
0001E5A3 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001E5A8                            		even
0001E5A8                            		even
0001E5A8                            
0001E5A8                            ; ===========================================================================
0001E5A8                            
0001E5A8                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001E5A8 4EF9 0001 0A18             		jmp	DeleteObject
0001E5AE                            ; ===========================================================================
0001E5AE                            ; ---------------------------------------------------------------------------
0001E5AE                            ; Object 82 - Eggman (SBZ2)
0001E5AE                            ; ---------------------------------------------------------------------------
0001E5AE                            
0001E5AE                            Obj82:					; XREF: Obj_Index
0001E5AE 7000                       		moveq	#0,d0
0001E5B0 1028 0024                  		move.b	$24(a0),d0
0001E5B4 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001E5B8 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001E5BC                            ; ===========================================================================
0001E5BC 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001E5BE 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001E5C0 0000                       		dc.w Obj82_Switch-Obj82_Index
0001E5C2                            
0001E5C2 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001E5C5 0400 03                    		dc.b 4,	0, 3
0001E5C8                            ; ===========================================================================
0001E5C8                            
0001E5C8                            Obj82_Main:				; XREF: Obj82_Index
0001E5C8 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001E5CC 317C 2160 0008             		move.w	#$2160,8(a0)
0001E5D2 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001E5D8 117C 000F 0020             		move.b	#$F,$20(a0)
0001E5DE 117C 0010 0021             		move.b	#$10,$21(a0)
0001E5E4 08A8 0000 0022             		bclr	#0,$22(a0)
0001E5EA 4228 0025                  		clr.b	$25(a0)
0001E5EE 115A 0024                  		move.b	(a2)+,$24(a0)
0001E5F2 115A 001C                  		move.b	(a2)+,$1C(a0)
0001E5F6 115A 0018                  		move.b	(a2)+,$18(a0)
0001E5FA 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001E602 317C 0400 0002             		move.w	#$400,2(a0)
0001E608 117C 0004 0001             		move.b	#4,1(a0)
0001E60E 08E8 0007 0001             		bset	#7,1(a0)
0001E614 117C 0020 0019             		move.b	#$20,$19(a0)
0001E61A 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001E620 6600                       		bne.s	Obj82_Eggman
0001E622 2348 0034                  		move.l	a0,$34(a1)
0001E626 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001E62A 337C 2130 0008             		move.w	#$2130,8(a1)
0001E630 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001E636 4228 0025                  		clr.b	$25(a0)
0001E63A 135A 0024                  		move.b	(a2)+,$24(a1)
0001E63E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001E642 135A 0018                  		move.b	(a2)+,$18(a1)
0001E646 237C 0000 EF94 0004        		move.l	#Map_obj32,4(a1)
0001E64E 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001E654 137C 0004 0001             		move.b	#4,1(a1)
0001E65A 08E9 0007 0001             		bset	#7,1(a1)
0001E660 137C 0010 0019             		move.b	#$10,$19(a1)
0001E666 137C 0000 001A             		move.b	#0,$1A(a1)
0001E66C                            
0001E66C                            Obj82_Eggman:				; XREF: Obj82_Index
0001E66C 7000                       		moveq	#0,d0
0001E66E 1028 0025                  		move.b	$25(a0),d0
0001E672 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001E676 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001E67A 43FA 0000                  		lea	Ani_obj82(pc),a1
0001E67E 4EB9 0000 D7DA             		jsr	AnimateSprite
0001E684 4EF9 0001 09DC             		jmp	DisplaySprite
0001E68A                            ; ===========================================================================
0001E68A 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001E68C 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001E68E 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001E690 0000                       		dc.w loc_19934-Obj82_EggIndex
0001E692                            ; ===========================================================================
0001E692                            
0001E692                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001E692 3028 0008                  		move.w	8(a0),d0
0001E696 9078 D008                  		sub.w	($FFFFD008).w,d0
0001E69A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001E69E 6400                       		bcc.s	loc_19934	; if not, branch
0001E6A0 5428 0025                  		addq.b	#2,$25(a0)
0001E6A4 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001E6AA 117C 0001 001C             		move.b	#1,$1C(a0)
0001E6B0                            
0001E6B0                            loc_19934:				; XREF: Obj82_EggIndex
0001E6B0 4EF9 0001 09C2             		jmp	SpeedToPos
0001E6B6                            ; ===========================================================================
0001E6B6                            
0001E6B6                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001E6B6 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001E6BA 6600                       		bne.s	loc_19954	; if time remains, branch
0001E6BC 5428 0025                  		addq.b	#2,$25(a0)
0001E6C0 117C 0002 001C             		move.b	#2,$1C(a0)
0001E6C6 5868 000C                  		addq.w	#4,$C(a0)
0001E6CA 317C 000F 003C             		move.w	#15,$3C(a0)
0001E6D0                            
0001E6D0                            loc_19954:
0001E6D0 60DE                       		bra.s	loc_19934
0001E6D2                            ; ===========================================================================
0001E6D2                            
0001E6D2                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001E6D2 5368 003C                  		subq.w	#1,$3C(a0)
0001E6D6 6E00                       		bgt.s	loc_199D0
0001E6D8 6600                       		bne.s	loc_1996A
0001E6DA 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001E6E0 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001E6E6                            
0001E6E6                            loc_1996A:
0001E6E6 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001E6EC 6E00                       		bgt.s	loc_19976
0001E6EE 4268 0010                  		clr.w	$10(a0)
0001E6F2                            
0001E6F2                            loc_19976:
0001E6F2 0668 0024 0012             		addi.w	#$24,$12(a0)
0001E6F8 4A68 0012                  		tst.w	$12(a0)
0001E6FC 6B00                       		bmi.s	Obj82_FindBlocks
0001E6FE 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001E704 6500                       		bcs.s	Obj82_FindBlocks
0001E706 317C 5357 0028             		move.w	#$5357,$28(a0)
0001E70C 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001E712 6500                       		bcs.s	Obj82_FindBlocks
0001E714 317C 059B 000C             		move.w	#$59B,$C(a0)
0001E71A 4268 0012                  		clr.w	$12(a0)
0001E71E                            
0001E71E                            Obj82_FindBlocks:
0001E71E 3028 0010                  		move.w	$10(a0),d0
0001E722 8068 0012                  		or.w	$12(a0),d0
0001E726 6600                       		bne.s	loc_199D0
0001E728 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001E72C 703E                       		moveq	#$3E,d0
0001E72E 7240                       		moveq	#$40,d1
0001E730                            
0001E730                            Obj82_FindLoop:	
0001E730 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001E732 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001E736 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001E73A                            
0001E73A 6600                       		bne.s	loc_199D0
0001E73C 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001E742 5428 0025                  		addq.b	#2,$25(a0)
0001E746 117C 0001 001C             		move.b	#1,$1C(a0)
0001E74C                            
0001E74C                            loc_199D0:
0001E74C 6000 FF62                  		bra.w	loc_19934
0001E750                            ; ===========================================================================
0001E750                            
0001E750                            Obj82_Switch:				; XREF: Obj82_Index
0001E750 7000                       		moveq	#0,d0
0001E752 1028 0025                  		move.b	$25(a0),d0
0001E756 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001E75A 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001E75E                            ; ===========================================================================
0001E75E 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001E760 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001E762                            ; ===========================================================================
0001E762                            
0001E762                            loc_199E6:				; XREF: Obj82_SwIndex
0001E762 2268 0034                  		movea.l	$34(a0),a1
0001E766 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001E76C 6600                       		bne.s	Obj82_SwDisplay
0001E76E 117C 0001 001A             		move.b	#1,$1A(a0)
0001E774 5428 0025                  		addq.b	#2,$25(a0)
0001E778                            
0001E778                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001E778 4EF9 0001 09DC             		jmp	DisplaySprite
0001E77E                            ; ===========================================================================
0001E77E                            Ani_obj82:
0001E77E                            	include "_anim\obj82.asm"
0001E77E                            ; ---------------------------------------------------------------------------
0001E77E                            ; Animation script - Eggman (SBZ2)
0001E77E                            ; ---------------------------------------------------------------------------
0001E77E 0000                       		dc.w byte_19A10-Ani_obj82
0001E780 0000                       		dc.w byte_19A14-Ani_obj82
0001E782 0000                       		dc.w byte_19A18-Ani_obj82
0001E784 0000                       		dc.w byte_19A20-Ani_obj82
0001E786 0000                       		dc.w byte_19A24-Ani_obj82
0001E788 0000                       		dc.w byte_19A2A-Ani_obj82
0001E78A 0000                       		dc.w byte_19A30-Ani_obj82
0001E78C 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001E790 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001E794 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001E79C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001E7A0 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001E7A6 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001E7AC 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001E7B0                            		even
0001E7B0                            		even
0001E7B0                            
0001E7B0                            ; ---------------------------------------------------------------------------
0001E7B0                            ; Sprite mappings - Eggman (SBZ2)
0001E7B0                            ; ---------------------------------------------------------------------------
0001E7B0                            Map_obj82:
0001E7B0                            	include "_maps\obj82.asm"
0001E7B0                            ; ---------------------------------------------------------------------------
0001E7B0                            ; Sprite mappings - Eggman (SBZ2)
0001E7B0                            ; ---------------------------------------------------------------------------
0001E7B0 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001E7B4 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001E7B8 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001E7BC 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001E7C0 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001E7C4 0000                       		dc.w byte_19B4F-Map_obj82
0001E7C6 03                         byte_19A4A:	dc.b 3
0001E7C7 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001E7CC E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001E7D1 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001E7D6 04                         byte_19A5A:	dc.b 4
0001E7D7 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001E7DC E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001E7E1 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001E7E6 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001E7EB 00                         		dc.b 0
0001E7EC 04                         byte_19A70:	dc.b 4
0001E7ED E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001E7F2 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001E7F7 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001E7FC FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001E801 00                         		dc.b 0
0001E802 04                         byte_19A86:	dc.b 4
0001E803 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001E808 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001E80D 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001E812 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001E817 00                         		dc.b 0
0001E818 04                         byte_19A9C:	dc.b 4
0001E819 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001E81E F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001E823 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001E828 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001E82D 00                         		dc.b 0
0001E82E 04                         byte_19AB2:	dc.b 4
0001E82F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001E834 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001E839 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001E83E 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001E843 00                         		dc.b 0
0001E844 07                         byte_19AC8:	dc.b 7
0001E845 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001E84A E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001E84F 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001E854 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001E859 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001E85E F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001E863 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001E868 05                         byte_19AEC:	dc.b 5
0001E869 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001E86E F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001E873 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001E878 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001E87D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001E882 06                         byte_19B06:	dc.b 6
0001E883 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001E888 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001E88D 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001E892 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001E897 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001E89C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001E8A1 00                         		dc.b 0
0001E8A2 08                         byte_19B26:	dc.b 8
0001E8A3 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001E8A8 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001E8AD E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001E8B2 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001E8B7 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001E8BC F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001E8C1 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001E8C6 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001E8CB 03                         byte_19B4F:	dc.b 3
0001E8CC EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001E8D1 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001E8D6 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001E8DC 00                         		even
0001E8DC 00                         		even
0001E8DC                            
0001E8DC                            ; ===========================================================================
0001E8DC                            ; ---------------------------------------------------------------------------
0001E8DC                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001E8DC                            ; ---------------------------------------------------------------------------
0001E8DC                            
0001E8DC                            Obj83:					; XREF: Obj_Index
0001E8DC 7000                       		moveq	#0,d0
0001E8DE 1028 0024                  		move.b	$24(a0),d0
0001E8E2 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001E8E6 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001E8EA                            ; ===========================================================================
0001E8EA 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001E8EC 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001E8EE 0000                       		dc.w loc_19C36-Obj83_Index
0001E8F0 0000                       		dc.w loc_19C62-Obj83_Index
0001E8F2 0000                       		dc.w loc_19C72-Obj83_Index
0001E8F4 0000                       		dc.w loc_19C80-Obj83_Index
0001E8F6                            ; ===========================================================================
0001E8F6                            
0001E8F6                            Obj83_Main:				; XREF: Obj83_Index
0001E8F6 317C 2080 0008             		move.w	#$2080,8(a0)
0001E8FC 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001E902 117C 0080 0019             		move.b	#$80,$19(a0)
0001E908 117C 0010 0016             		move.b	#$10,$16(a0)
0001E90E 117C 0004 0001             		move.b	#4,1(a0)
0001E914 08E8 0007 0001             		bset	#7,1(a0)
0001E91A 7800                       		moveq	#0,d4
0001E91C 3A3C 2010                  		move.w	#$2010,d5
0001E920 7C07                       		moveq	#7,d6
0001E922 45E8 0030                  		lea	$30(a0),a2
0001E926                            
0001E926                            Obj83_MakeBlock:
0001E926 4EB9 0001 0E72             		jsr	SingleObjLoad
0001E92C 6600                       		bne.s	Obj83_ExitMake
0001E92E 34C9                       		move.w	a1,(a2)+
0001E930 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001E934 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001E93C 337C 4518 0002             		move.w	#$4518,2(a1)
0001E942 137C 0004 0001             		move.b	#4,1(a1)
0001E948 137C 0010 0019             		move.b	#$10,$19(a1)
0001E94E 137C 0010 0016             		move.b	#$10,$16(a1)
0001E954 137C 0003 0018             		move.b	#3,$18(a1)
0001E95A 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001E95E 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001E964 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001E968 137C 0008 0024             		move.b	#8,$24(a1)
0001E96E 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001E972                            
0001E972                            Obj83_ExitMake:
0001E972 5428 0024                  		addq.b	#2,$24(a0)
0001E976 4E75                       		rts	
0001E978                            ; ===========================================================================
0001E978                            
0001E978                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001E978 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001E97E 6600                       		bne.s	Obj83_Solid	; if not, branch
0001E980 4228 001A                  		clr.b	$1A(a0)
0001E984 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001E988                            
0001E988                            Obj83_Solid:
0001E988 7000                       		moveq	#0,d0
0001E98A 1028 001A                  		move.b	$1A(a0),d0
0001E98E 4400                       		neg.b	d0
0001E990 4880                       		ext.w	d0
0001E992 5040                       		addq.w	#8,d0
0001E994 E940                       		asl.w	#4,d0
0001E996 383C 2100                  		move.w	#$2100,d4
0001E99A 9840                       		sub.w	d0,d4
0001E99C 1140 0019                  		move.b	d0,$19(a0)
0001E9A0 3144 0008                  		move.w	d4,8(a0)
0001E9A4 720B                       		moveq	#$B,d1
0001E9A6 D240                       		add.w	d0,d1
0001E9A8 7410                       		moveq	#$10,d2
0001E9AA 7611                       		moveq	#$11,d3
0001E9AC 4EF9 0001 2DDC             		jmp	SolidObject
0001E9B2                            ; ===========================================================================
0001E9B2                            
0001E9B2                            loc_19C36:				; XREF: Obj83_Index
0001E9B2 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001E9B8 6400                       		bcc.s	Obj83_Solid2
0001E9BA 70FF                       		moveq	#-1,d0
0001E9BC 1028 001A                  		move.b	$1A(a0),d0
0001E9C0 4880                       		ext.w	d0
0001E9C2 D040                       		add.w	d0,d0
0001E9C4 3030 0030                  		move.w	$30(a0,d0.w),d0
0001E9C8 2240                       		movea.l	d0,a1
0001E9CA 337C 474F 0028             		move.w	#$474F,$28(a1)
0001E9D0 5228 001A                  		addq.b	#1,$1A(a0)
0001E9D4 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001E9DA 6700                       		beq.s	loc_19C62
0001E9DC                            
0001E9DC                            Obj83_Solid2:
0001E9DC 60AA                       		bra.s	Obj83_Solid
0001E9DE                            ; ===========================================================================
0001E9DE                            
0001E9DE                            loc_19C62:				; XREF: Obj83_Index
0001E9DE 08A8 0003 0022             		bclr	#3,$22(a0)
0001E9E4 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001E9EA 6000 FBBC                  		bra.w	loc_1982C
0001E9EE                            ; ===========================================================================
0001E9EE                            
0001E9EE                            loc_19C72:				; XREF: Obj83_Index
0001E9EE 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001E9F4 6700                       		beq.s	Obj83_Break	; if yes, branch
0001E9F6 4EF9 0001 09DC             		jmp	DisplaySprite
0001E9FC                            ; ===========================================================================
0001E9FC                            
0001E9FC                            loc_19C80:				; XREF: Obj83_Index
0001E9FC 4A28 0001                  		tst.b	1(a0)
0001EA00 6A00 FBA6                  		bpl.w	loc_1982C
0001EA04 4EB9 0001 09A2             		jsr	ObjectFall
0001EA0A 4EF9 0001 09DC             		jmp	DisplaySprite
0001EA10                            ; ===========================================================================
0001EA10                            
0001EA10                            Obj83_Break:				; XREF: loc_19C72
0001EA10 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001EA14 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001EA18 7801                       		moveq	#1,d4
0001EA1A 7203                       		moveq	#3,d1
0001EA1C 7438                       		moveq	#$38,d2
0001EA1E 5428 0024                  		addq.b	#2,$24(a0)
0001EA22 117C 0008 0019             		move.b	#8,$19(a0)
0001EA28 117C 0008 0016             		move.b	#8,$16(a0)
0001EA2E 43D0                       		lea	(a0),a1
0001EA30 6000                       		bra.s	Obj83_MakeFrag
0001EA32                            ; ===========================================================================
0001EA32                            
0001EA32                            Obj83_LoopFrag:
0001EA32 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001EA38 6600                       		bne.s	Obj83_BreakSnd
0001EA3A                            
0001EA3A                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001EA3A 45D0                       		lea	(a0),a2
0001EA3C 47D1                       		lea	(a1),a3
0001EA3E 7603                       		moveq	#3,d3
0001EA40                            
0001EA40                            loc_19CC4:
0001EA40 26DA                       		move.l	(a2)+,(a3)+
0001EA42 26DA                       		move.l	(a2)+,(a3)+
0001EA44 26DA                       		move.l	(a2)+,(a3)+
0001EA46 26DA                       		move.l	(a2)+,(a3)+
0001EA48 51CB FFF6                  		dbf	d3,loc_19CC4
0001EA4C                            
0001EA4C 335C 0012                  		move.w	(a4)+,$12(a1)
0001EA50 361D                       		move.w	(a5)+,d3
0001EA52 D769 0008                  		add.w	d3,8(a1)
0001EA56 361D                       		move.w	(a5)+,d3
0001EA58 D769 000C                  		add.w	d3,$C(a1)
0001EA5C 1344 001A                  		move.b	d4,$1A(a1)
0001EA60 5244                       		addq.w	#1,d4
0001EA62 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001EA66                            
0001EA66                            Obj83_BreakSnd:
0001EA66 303C 00CB                  		move.w	#$CB,d0
0001EA6A 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play smashing sound
0001EA70 4EF9 0001 09DC             		jmp	DisplaySprite
0001EA76                            ; ===========================================================================
0001EA76 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001EA7A 0120 00C0                  		dc.w $120, $C0
0001EA7E FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001EA82 0010 0000                  		dc.w $10, 0
0001EA86 0000 0010                  		dc.w 0,	$10
0001EA8A 0010 0010                  		dc.w $10, $10
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E                            Map_obj83:
0001EA8E                            	include "_maps\obj83.asm"
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001EA8E                            ; ---------------------------------------------------------------------------
0001EA8E 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001EA92 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001EA96 0000                       		dc.w byte_19D46-Map_obj83
0001EA98 01                         byte_19D1C:	dc.b 1
0001EA99 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001EA9E 02                         byte_19D22:	dc.b 2
0001EA9F F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001EAA4 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001EAA9 00                         		dc.b 0
0001EAAA 02                         byte_19D2E:	dc.b 2
0001EAAB F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001EAB0 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001EAB5 00                         		dc.b 0
0001EAB6 02                         byte_19D3A:	dc.b 2
0001EAB7 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001EABC F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001EAC1 00                         		dc.b 0
0001EAC2 02                         byte_19D46:	dc.b 2
0001EAC3 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001EAC8 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001EACE 00                         		even
0001EACE 00                         		even
0001EACE                            
0001EACE                            ; ===========================================================================
0001EACE                            ; ---------------------------------------------------------------------------
0001EACE                            ; Object 85 - Eggman (FZ)
0001EACE                            ; ---------------------------------------------------------------------------
0001EACE                            
0001EACE                            Obj85_Delete:
0001EACE 4EF9 0001 0A18             		jmp	DeleteObject
0001EAD4                            ; ===========================================================================
0001EAD4                            
0001EAD4                            Obj85:					; XREF: Obj_Index
0001EAD4 7000                       		moveq	#0,d0
0001EAD6 1028 0024                  		move.b	$24(a0),d0
0001EADA 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001EADE 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001EAE2                            ; ===========================================================================
0001EAE2 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001EAE4 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001EAE6 0000                       		dc.w loc_1A38E-Obj85_Index
0001EAE8 0000                       		dc.w loc_1A346-Obj85_Index
0001EAEA 0000                       		dc.w loc_1A2C6-Obj85_Index
0001EAEC 0000                       		dc.w loc_1A3AC-Obj85_Index
0001EAEE 0000                       		dc.w loc_1A264-Obj85_Index
0001EAF0                            
0001EAF0 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001EAF6 0001 E7B0                  		dc.l Map_obj82		; mappings pointer
0001EAFA 25B0 0590 0300             		dc.w $25B0, $590, $300
0001EB00 0000 0000                  		dc.l Map_obj84
0001EB04 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001EB0A 0000 0000                  		dc.l Map_FZBoss
0001EB0E 26E0 0596 0470             		dc.w $26E0, $596, $470
0001EB14 0001 E7B0                  		dc.l Map_obj82
0001EB18 26E0 0596 0400             		dc.w $26E0, $596, $400
0001EB1E 0001 CA92                  		dc.l Map_Eggman
0001EB22 26E0 0596 0400             		dc.w $26E0, $596, $400
0001EB28 0001 CA92                  		dc.l Map_Eggman
0001EB2C                            
0001EB2C 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001EB31 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001EB36 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001EB3B 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001EB40 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001EB45 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001EB4A                            ; ===========================================================================
0001EB4A                            
0001EB4A                            Obj85_Main:				; XREF: Obj85_Index
0001EB4A 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001EB4E 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001EB52 2248                       		movea.l	a0,a1
0001EB54 7205                       		moveq	#5,d1
0001EB56 6000                       		bra.s	Obj85_LoadBoss
0001EB58                            ; ===========================================================================
0001EB58                            
0001EB58                            Obj85_Loop:
0001EB58 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001EB5E 6600                       		bne.s	loc_19E20
0001EB60                            
0001EB60                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001EB60 12BC 0085                  		move.b	#$85,(a1)
0001EB64 335A 0008                  		move.w	(a2)+,8(a1)
0001EB68 335A 000C                  		move.w	(a2)+,$C(a1)
0001EB6C 335A 0002                  		move.w	(a2)+,2(a1)
0001EB70 235A 0004                  		move.l	(a2)+,4(a1)
0001EB74 135B 0024                  		move.b	(a3)+,$24(a1)
0001EB78 135B 001C                  		move.b	(a3)+,$1C(a1)
0001EB7C 135B 0018                  		move.b	(a3)+,$18(a1)
0001EB80 135B 0017                  		move.b	(a3)+,$17(a1)
0001EB84 135B 0016                  		move.b	(a3)+,$16(a1)
0001EB88 137C 0004 0001             		move.b	#4,1(a1)
0001EB8E 08E8 0007 0001             		bset	#7,1(a0)
0001EB94 2348 0034                  		move.l	a0,$34(a1)
0001EB98 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001EB9C                            
0001EB9C                            loc_19E20:
0001EB9C 45E8 0036                  		lea	$36(a0),a2
0001EBA0 4EB9 0001 0E72             		jsr	SingleObjLoad
0001EBA6 6600                       		bne.s	loc_19E5A
0001EBA8 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001EBAC 3489                       		move.w	a1,(a2)
0001EBAE 2348 0034                  		move.l	a0,$34(a1)
0001EBB2 45E8 0038                  		lea	$38(a0),a2
0001EBB6 7400                       		moveq	#0,d2
0001EBB8 7203                       		moveq	#3,d1
0001EBBA                            
0001EBBA                            loc_19E3E:
0001EBBA 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001EBC0 6600                       		bne.s	loc_19E5A
0001EBC2 34C9                       		move.w	a1,(a2)+
0001EBC4 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001EBC8 2348 0034                  		move.l	a0,$34(a1)
0001EBCC 1342 0028                  		move.b	d2,$28(a1)
0001EBD0 5442                       		addq.w	#2,d2
0001EBD2 51C9 FFE6                  		dbf	d1,loc_19E3E
0001EBD6                            
0001EBD6                            loc_19E5A:
0001EBD6 317C 0000 0034             		move.w	#0,$34(a0)
0001EBDC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001EBE2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001EBE8                            
0001EBE8                            Obj85_Eggman:				; XREF: Obj85_Index
0001EBE8 7000                       		moveq	#0,d0
0001EBEA 1028 0034                  		move.b	$34(a0),d0
0001EBEE 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001EBF2 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001EBF6 4EF9 0001 09DC             		jmp	DisplaySprite
0001EBFC                            ; ===========================================================================
0001EBFC 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001EC00 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001EC04 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001EC08 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001EC0C                            ; ===========================================================================
0001EC0C                            
0001EC0C                            loc_19E90:				; XREF: off_19E80
0001EC0C 4AB8 F680                  		tst.l	($FFFFF680).w
0001EC10 6600                       		bne.s	loc_19EA2
0001EC12 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001EC18 6500                       		bcs.s	loc_19EA2
0001EC1A 5428 0034                  		addq.b	#2,$34(a0)
0001EC1E                            
0001EC1E                            loc_19EA2:
0001EC1E 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001EC22 4E75                       		rts	
0001EC24                            ; ===========================================================================
0001EC24                            
0001EC24                            loc_19EA8:				; XREF: off_19E80
0001EC24 4A68 0030                  		tst.w	$30(a0)
0001EC28 6A00                       		bpl.s	loc_19F10
0001EC2A 4268 0030                  		clr.w	$30(a0)
0001EC2E 4EB9 0000 3710             		jsr	(RandomNumber).l
0001EC34 0240 000C                  		andi.w	#$C,d0
0001EC38 3200                       		move.w	d0,d1
0001EC3A 5441                       		addq.w	#2,d1
0001EC3C 4A80                       		tst.l	d0
0001EC3E 6A00                       		bpl.s	loc_19EC6
0001EC40 C141                       		exg	d1,d0
0001EC42                            
0001EC42                            loc_19EC6:
0001EC42 43FA 0000                  		lea	word_19FD6(pc),a1
0001EC46 3031 0000                  		move.w	(a1,d0.w),d0
0001EC4A 3231 1000                  		move.w	(a1,d1.w),d1
0001EC4E 3140 0030                  		move.w	d0,$30(a0)
0001EC52 74FF                       		moveq	#-1,d2
0001EC54 3430 0038                  		move.w	$38(a0,d0.w),d2
0001EC58 2242                       		movea.l	d2,a1
0001EC5A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001EC60 337C FFFF 0030             		move.w	#-1,$30(a1)
0001EC66 3430 1038                  		move.w	$38(a0,d1.w),d2
0001EC6A 2242                       		movea.l	d2,a1
0001EC6C 137C 0001 0029             		move.b	#1,$29(a1)
0001EC72 337C 0000 0030             		move.w	#0,$30(a1)
0001EC78 317C 0001 0032             		move.w	#1,$32(a0)
0001EC7E 4228 0035                  		clr.b	$35(a0)
0001EC82 303C 00B7                  		move.w	#$B7,d0
0001EC86 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001EC8C                            
0001EC8C                            loc_19F10:
0001EC8C 4A68 0032                  		tst.w	$32(a0)
0001EC90 6B00 0000                  		bmi.w	loc_19FA6
0001EC94 08A8 0000 0022             		bclr	#0,$22(a0)
0001EC9A 3038 D008                  		move.w	($FFFFD008).w,d0
0001EC9E 9068 0008                  		sub.w	8(a0),d0
0001ECA2 6500                       		bcs.s	loc_19F2E
0001ECA4 08E8 0000 0022             		bset	#0,$22(a0)
0001ECAA                            
0001ECAA                            loc_19F2E:
0001ECAA 323C 002B                  		move.w	#$2B,d1
0001ECAE 343C 0014                  		move.w	#$14,d2
0001ECB2 363C 0014                  		move.w	#$14,d3
0001ECB6 3828 0008                  		move.w	8(a0),d4
0001ECBA 4EB9 0001 2DDC             		jsr	SolidObject
0001ECC0 4A44                       		tst.w	d4
0001ECC2 6E00                       		bgt.s	loc_19F50
0001ECC4                            
0001ECC4                            loc_19F48:
0001ECC4 4A28 0035                  		tst.b	$35(a0)
0001ECC8 6600                       		bne.s	loc_19F88
0001ECCA 6000                       		bra.s	loc_19F96
0001ECCC                            ; ===========================================================================
0001ECCC                            
0001ECCC                            loc_19F50:
0001ECCC 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001ECD0 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001ECD6 66EC                       		bne.s	loc_19F48
0001ECD8 303C 0300                  		move.w	#$300,d0
0001ECDC 0828 0000 0022             		btst	#0,$22(a0)
0001ECE2 6600                       		bne.s	loc_19F6A
0001ECE4 4440                       		neg.w	d0
0001ECE6                            
0001ECE6                            loc_19F6A:
0001ECE6 31C0 D010                  		move.w	d0,($FFFFD010).w
0001ECEA 4A28 0035                  		tst.b	$35(a0)
0001ECEE 6600                       		bne.s	loc_19F88
0001ECF0 5328 0021                  		subq.b	#1,$21(a0)
0001ECF4 117C 0064 0035             		move.b	#$64,$35(a0)
0001ECFA 303C 00AC                  		move.w	#$AC,d0
0001ECFE 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ED04                            
0001ED04                            loc_19F88:
0001ED04 5328 0035                  		subq.b	#1,$35(a0)
0001ED08 6700                       		beq.s	loc_19F96
0001ED0A 117C 0003 001C             		move.b	#3,$1C(a0)
0001ED10 6000                       		bra.s	loc_19F9C
0001ED12                            ; ===========================================================================
0001ED12                            
0001ED12                            loc_19F96:
0001ED12 117C 0001 001C             		move.b	#1,$1C(a0)
0001ED18                            
0001ED18                            loc_19F9C:
0001ED18 43FA FA64                  		lea	Ani_obj82(pc),a1
0001ED1C 4EF9 0000 D7DA             		jmp	AnimateSprite
0001ED22                            ; ===========================================================================
0001ED22                            
0001ED22                            loc_19FA6:
0001ED22 4A28 0021                  		tst.b	$21(a0)
0001ED26 6700                       		beq.s	loc_19FBC
0001ED28 5428 0034                  		addq.b	#2,$34(a0)
0001ED2C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001ED32 4268 0032                  		clr.w	$32(a0)
0001ED36 4E75                       		rts	
0001ED38                            ; ===========================================================================
0001ED38                            
0001ED38                            loc_19FBC:
0001ED38 117C 0006 0034             		move.b	#6,$34(a0)
0001ED3E 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001ED44 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ED4A 117C 0014 0016             		move.b	#$14,$16(a0)
0001ED50 4E75                       		rts	
0001ED52                            ; ===========================================================================
0001ED52 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001ED62                            ; ===========================================================================
0001ED62                            
0001ED62                            loc_19FE6:				; XREF: off_19E80
0001ED62 70FF                       		moveq	#-1,d0
0001ED64 3028 0036                  		move.w	$36(a0),d0
0001ED68 2240                       		movea.l	d0,a1
0001ED6A 4A68 0030                  		tst.w	$30(a0)
0001ED6E 6A00                       		bpl.s	loc_1A000
0001ED70 4268 0030                  		clr.w	$30(a0)
0001ED74 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ED7A 6100                       		bsr.s	loc_1A020
0001ED7C                            
0001ED7C                            loc_1A000:
0001ED7C 700F                       		moveq	#$F,d0
0001ED7E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001ED82 6600                       		bne.s	loc_1A00A
0001ED84 6100                       		bsr.s	loc_1A020
0001ED86                            
0001ED86                            loc_1A00A:
0001ED86 4A68 0032                  		tst.w	$32(a0)
0001ED8A 6700                       		beq.s	locret_1A01E
0001ED8C 5528 0034                  		subq.b	#2,$34(a0)
0001ED90 317C FFFF 0030             		move.w	#-1,$30(a0)
0001ED96 4268 0032                  		clr.w	$32(a0)
0001ED9A                            
0001ED9A                            locret_1A01E:
0001ED9A 4E75                       		rts	
0001ED9C                            ; ===========================================================================
0001ED9C                            
0001ED9C                            loc_1A020:
0001ED9C 303C 00B1                  		move.w	#$B1,d0
0001EDA0 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play electricity sound
0001EDA6                            ; ===========================================================================
0001EDA6                            
0001EDA6                            loc_1A02A:				; XREF: off_19E80
0001EDA6 117C 0030 0017             		move.b	#$30,$17(a0)
0001EDAC 08E8 0000 0022             		bset	#0,$22(a0)
0001EDB2 4EB9 0001 09C2             		jsr	SpeedToPos
0001EDB8 117C 0006 001A             		move.b	#6,$1A(a0)
0001EDBE 0668 0010 0012             		addi.w	#$10,$12(a0)
0001EDC4 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001EDCA 6500                       		bcs.s	loc_1A070
0001EDCC 317C 059C 000C             		move.w	#$59C,$C(a0)
0001EDD2 5428 0034                  		addq.b	#2,$34(a0)
0001EDD6 117C 0020 0017             		move.b	#$20,$17(a0)
0001EDDC 317C 0100 0010             		move.w	#$100,$10(a0)
0001EDE2 317C FF00 0012             		move.w	#-$100,$12(a0)
0001EDE8 5438 F742                  		addq.b	#2,($FFFFF742).w
0001EDEC                            
0001EDEC                            loc_1A070:
0001EDEC 6000 0000                  		bra.w	loc_1A166
0001EDF0                            ; ===========================================================================
0001EDF0                            
0001EDF0                            loc_1A074:				; XREF: off_19E80
0001EDF0 08E8 0000 0022             		bset	#0,$22(a0)
0001EDF6 117C 0004 001C             		move.b	#4,$1C(a0)
0001EDFC 4EB9 0001 09C2             		jsr	SpeedToPos
0001EE02 0668 0010 0012             		addi.w	#$10,$12(a0)
0001EE08 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001EE0E 6500                       		bcs.s	loc_1A09A
0001EE10 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001EE16                            
0001EE16                            loc_1A09A:
0001EE16 317C 0400 0010             		move.w	#$400,$10(a0)
0001EE1C 3028 0008                  		move.w	8(a0),d0
0001EE20 9078 D008                  		sub.w	($FFFFD008).w,d0
0001EE24 6A00                       		bpl.s	loc_1A0B4
0001EE26 317C 0500 0010             		move.w	#$500,$10(a0)
0001EE2C 6000 0000                  		bra.w	loc_1A0F2
0001EE30                            ; ===========================================================================
0001EE30                            
0001EE30                            loc_1A0B4:
0001EE30 0440 0070                  		subi.w	#$70,d0
0001EE34 6500                       		bcs.s	loc_1A0F2
0001EE36 0468 0100 0010             		subi.w	#$100,$10(a0)
0001EE3C 5140                       		subq.w	#8,d0
0001EE3E 6500                       		bcs.s	loc_1A0F2
0001EE40 0468 0100 0010             		subi.w	#$100,$10(a0)
0001EE46 5140                       		subq.w	#8,d0
0001EE48 6500                       		bcs.s	loc_1A0F2
0001EE4A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001EE50 5140                       		subq.w	#8,d0
0001EE52 6500                       		bcs.s	loc_1A0F2
0001EE54 0468 0080 0010             		subi.w	#$80,$10(a0)
0001EE5A 5140                       		subq.w	#8,d0
0001EE5C 6500                       		bcs.s	loc_1A0F2
0001EE5E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001EE64 0440 0038                  		subi.w	#$38,d0
0001EE68 6500                       		bcs.s	loc_1A0F2
0001EE6A 4268 0010                  		clr.w	$10(a0)
0001EE6E                            
0001EE6E                            loc_1A0F2:
0001EE6E 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001EE74 6500                       		bcs.s	loc_1A110
0001EE76 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001EE7C 317C 0240 0010             		move.w	#$240,$10(a0)
0001EE82 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001EE88 5428 0034                  		addq.b	#2,$34(a0)
0001EE8C                            
0001EE8C                            loc_1A110:
0001EE8C 6000                       		bra.s	loc_1A15C
0001EE8E                            ; ===========================================================================
0001EE8E                            
0001EE8E                            loc_1A112:				; XREF: off_19E80
0001EE8E 4EB9 0001 09C2             		jsr	SpeedToPos
0001EE94 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001EE9A 6500                       		bcs.s	loc_1A124
0001EE9C 4268 0010                  		clr.w	$10(a0)
0001EEA0                            
0001EEA0                            loc_1A124:
0001EEA0 0668 0034 0012             		addi.w	#$34,$12(a0)
0001EEA6 4A68 0012                  		tst.w	$12(a0)
0001EEAA 6B00                       		bmi.s	loc_1A142
0001EEAC 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001EEB2 6500                       		bcs.s	loc_1A142
0001EEB4 317C 0592 000C             		move.w	#$592,$C(a0)
0001EEBA 4268 0012                  		clr.w	$12(a0)
0001EEBE                            
0001EEBE                            loc_1A142:
0001EEBE 3028 0010                  		move.w	$10(a0),d0
0001EEC2 8068 0012                  		or.w	$12(a0),d0
0001EEC6 6600                       		bne.s	loc_1A15C
0001EEC8 5428 0034                  		addq.b	#2,$34(a0)
0001EECC 317C FE80 0012             		move.w	#-$180,$12(a0)
0001EED2 117C 0001 0021             		move.b	#1,$21(a0)
0001EED8                            
0001EED8                            loc_1A15C:
0001EED8 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001EEDC 4EB9 0000 D7DA             		jsr	AnimateSprite
0001EEE2                            
0001EEE2                            loc_1A166:
0001EEE2 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001EEE8 6C00                       		bge.s	loc_1A172
0001EEEA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001EEEE                            
0001EEEE                            loc_1A172:
0001EEEE 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001EEF4 6C00                       		bge.s	locret_1A190
0001EEF6 323C 001B                  		move.w	#$1B,d1
0001EEFA 343C 0070                  		move.w	#$70,d2
0001EEFE 363C 0071                  		move.w	#$71,d3
0001EF02 3828 0008                  		move.w	8(a0),d4
0001EF06 4EF9 0001 2DDC             		jmp	SolidObject
0001EF0C                            ; ===========================================================================
0001EF0C                            
0001EF0C                            locret_1A190:
0001EF0C 4E75                       		rts	
0001EF0E                            ; ===========================================================================
0001EF0E                            
0001EF0E                            loc_1A192:				; XREF: off_19E80
0001EF0E 217C 0001 CA92 0004        		move.l	#Map_Eggman,4(a0)
0001EF16 317C 0400 0002             		move.w	#$400,2(a0)
0001EF1C 117C 0000 001C             		move.b	#0,$1C(a0)
0001EF22 08E8 0000 0022             		bset	#0,$22(a0)
0001EF28 4EB9 0001 09C2             		jsr	SpeedToPos
0001EF2E 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001EF34 6400                       		bcc.s	loc_1A1D0
0001EF36 317C 0180 0010             		move.w	#$180,$10(a0)
0001EF3C 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001EF42 117C 000F 0020             		move.b	#$F,$20(a0)
0001EF48 5428 0034                  		addq.b	#2,$34(a0)
0001EF4C                            
0001EF4C                            loc_1A1D0:
0001EF4C 6000 FF8A                  		bra.w	loc_1A15C
0001EF50                            ; ===========================================================================
0001EF50                            
0001EF50                            loc_1A1D4:				; XREF: off_19E80
0001EF50 08E8 0000 0022             		bset	#0,$22(a0)
0001EF56 4EB9 0001 09C2             		jsr	SpeedToPos
0001EF5C 4A68 0030                  		tst.w	$30(a0)
0001EF60 6600                       		bne.s	loc_1A1FC
0001EF62 4A28 0020                  		tst.b	$20(a0)
0001EF66 6600                       		bne.s	loc_1A216
0001EF68 317C 001E 0030             		move.w	#$1E,$30(a0)
0001EF6E 303C 00AC                  		move.w	#$AC,d0
0001EF72 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001EF78                            
0001EF78                            loc_1A1FC:
0001EF78 5368 0030                  		subq.w	#1,$30(a0)
0001EF7C 6600                       		bne.s	loc_1A216
0001EF7E 4A28 0022                  		tst.b	$22(a0)
0001EF82 6A00                       		bpl.s	loc_1A210
0001EF84 317C 0060 0012             		move.w	#$60,$12(a0)
0001EF8A 6000                       		bra.s	loc_1A216
0001EF8C                            ; ===========================================================================
0001EF8C                            
0001EF8C                            loc_1A210:
0001EF8C 117C 000F 0020             		move.b	#$F,$20(a0)
0001EF92                            
0001EF92                            loc_1A216:
0001EF92 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001EF98 6D00                       		blt.s	loc_1A23A
0001EF9A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001EFA0 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001EFA6 4278 D014                  		clr.w	($FFFFD014).w
0001EFAA 4A68 0012                  		tst.w	$12(a0)
0001EFAE 6A00                       		bpl.s	loc_1A248
0001EFB0 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001EFB6                            
0001EFB6                            loc_1A23A:
0001EFB6 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001EFBC 6D00                       		blt.s	loc_1A248
0001EFBE 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001EFC4                            
0001EFC4                            loc_1A248:
0001EFC4 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001EFCA 6500                       		bcs.s	loc_1A260
0001EFCC 4A28 0001                  		tst.b	1(a0)
0001EFD0 6B00                       		bmi.s	loc_1A260
0001EFD2 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001EFD8 6000 FAF4                  		bra.w	Obj85_Delete
0001EFDC                            ; ===========================================================================
0001EFDC                            
0001EFDC                            loc_1A260:
0001EFDC 6000 FEFA                  		bra.w	loc_1A15C
0001EFE0                            ; ===========================================================================
0001EFE0                            
0001EFE0                            loc_1A264:				; XREF: Obj85_Index
0001EFE0 2268 0034                  		movea.l	$34(a0),a1
0001EFE4 1011                       		move.b	(a1),d0
0001EFE6 B010                       		cmp.b	(a0),d0
0001EFE8 6600 FAE4                  		bne.w	Obj85_Delete
0001EFEC 117C 0007 001C             		move.b	#7,$1C(a0)
0001EFF2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001EFF8 6C00                       		bge.s	loc_1A280
0001EFFA 6000                       		bra.s	loc_1A2A6
0001EFFC                            ; ===========================================================================
0001EFFC                            
0001EFFC                            loc_1A280:
0001EFFC 4A69 0010                  		tst.w	$10(a1)
0001F000 6700                       		beq.s	loc_1A28C
0001F002 117C 000B 001C             		move.b	#$B,$1C(a0)
0001F008                            
0001F008                            loc_1A28C:
0001F008 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001F00C 4EB9 0000 D7DA             		jsr	AnimateSprite
0001F012                            
0001F012                            loc_1A296:
0001F012 2268 0034                  		movea.l	$34(a0),a1
0001F016 3169 0008 0008             		move.w	8(a1),8(a0)
0001F01C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001F022                            
0001F022                            loc_1A2A6:
0001F022 2268 0034                  		movea.l	$34(a0),a1
0001F026 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001F02C 7003                       		moveq	#3,d0
0001F02E C028 0022                  		and.b	$22(a0),d0
0001F032 0228 00FC 0001             		andi.b	#-4,1(a0)
0001F038 8128 0001                  		or.b	d0,1(a0)
0001F03C 4EF9 0001 09DC             		jmp	DisplaySprite
0001F042                            ; ===========================================================================
0001F042                            
0001F042                            loc_1A2C6:				; XREF: Obj85_Index
0001F042 2268 0034                  		movea.l	$34(a0),a1
0001F046 1011                       		move.b	(a1),d0
0001F048 B010                       		cmp.b	(a0),d0
0001F04A 6600 FA82                  		bne.w	Obj85_Delete
0001F04E 0CA9 0001 CA92 0004        		cmpi.l	#Map_Eggman,4(a1)
0001F056 6700                       		beq.s	loc_1A2E4
0001F058 117C 000A 001A             		move.b	#$A,$1A(a0)
0001F05E 60C2                       		bra.s	loc_1A2A6
0001F060                            ; ===========================================================================
0001F060                            
0001F060                            loc_1A2E4:
0001F060 117C 0001 001C             		move.b	#1,$1C(a0)
0001F066 4A29 0021                  		tst.b	$21(a1)
0001F06A 6F00                       		ble.s	loc_1A312
0001F06C 117C 0006 001C             		move.b	#6,$1C(a0)
0001F072 217C 0001 CA92 0004        		move.l	#Map_Eggman,4(a0)
0001F07A 317C 0400 0002             		move.w	#$400,2(a0)
0001F080 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001F084 4EB9 0000 D7DA             		jsr	AnimateSprite
0001F08A 6000 FF86                  		bra.w	loc_1A296
0001F08E                            ; ===========================================================================
0001F08E                            
0001F08E                            loc_1A312:
0001F08E 4A28 0001                  		tst.b	1(a0)
0001F092 6A00 FA3A                  		bpl.w	Obj85_Delete
0001F096 6100 D558                  		bsr.w	BossDefeated
0001F09A 117C 0002 0018             		move.b	#2,$18(a0)
0001F0A0 117C 0000 001C             		move.b	#0,$1C(a0)
0001F0A6 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001F0AE 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001F0B4 43FA 0000                  		lea	Ani_obj85(pc),a1
0001F0B8 4EB9 0000 D7DA             		jsr	AnimateSprite
0001F0BE 6000 FF52                  		bra.w	loc_1A296
0001F0C2                            ; ===========================================================================
0001F0C2                            
0001F0C2                            loc_1A346:				; XREF: Obj85_Index
0001F0C2 08E8 0000 0022             		bset	#0,$22(a0)
0001F0C8 2268 0034                  		movea.l	$34(a0),a1
0001F0CC 0CA9 0001 CA92 0004        		cmpi.l	#Map_Eggman,4(a1)
0001F0D4 6700                       		beq.s	loc_1A35E
0001F0D6 6000 FF4A                  		bra.w	loc_1A2A6
0001F0DA                            ; ===========================================================================
0001F0DA                            
0001F0DA                            loc_1A35E:
0001F0DA 3169 0008 0008             		move.w	8(a1),8(a0)
0001F0E0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001F0E6 4A28 001E                  		tst.b	$1E(a0)
0001F0EA 6600                       		bne.s	loc_1A376
0001F0EC 117C 0014 001E             		move.b	#$14,$1E(a0)
0001F0F2                            
0001F0F2                            loc_1A376:
0001F0F2 5328 001E                  		subq.b	#1,$1E(a0)
0001F0F6 6E00                       		bgt.s	loc_1A38A
0001F0F8 5228 001A                  		addq.b	#1,$1A(a0)
0001F0FC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001F102 6E00 F9CA                  		bgt.w	Obj85_Delete
0001F106                            
0001F106                            loc_1A38A:
0001F106 6000 FF0A                  		bra.w	loc_1A296
0001F10A                            ; ===========================================================================
0001F10A                            
0001F10A                            loc_1A38E:				; XREF: Obj85_Index
0001F10A 117C 000B 001A             		move.b	#$B,$1A(a0)
0001F110 3038 D008                  		move.w	($FFFFD008).w,d0
0001F114 9068 0008                  		sub.w	8(a0),d0
0001F118 6500                       		bcs.s	loc_1A3A6
0001F11A 4A28 0001                  		tst.b	1(a0)
0001F11E 6A00 F9AE                  		bpl.w	Obj85_Delete
0001F122                            
0001F122                            loc_1A3A6:
0001F122 4EF9 0001 09DC             		jmp	DisplaySprite
0001F128                            ; ===========================================================================
0001F128                            
0001F128                            loc_1A3AC:				; XREF: Obj85_Index
0001F128 117C 0000 001A             		move.b	#0,$1A(a0)
0001F12E 08E8 0000 0022             		bset	#0,$22(a0)
0001F134 2268 0034                  		movea.l	$34(a0),a1
0001F138 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001F13E 6600                       		bne.s	loc_1A3D0
0001F140 0CA9 0001 CA92 0004        		cmpi.l	#Map_Eggman,4(a1)
0001F148 6700 F984                  		beq.w	Obj85_Delete
0001F14C                            
0001F14C                            loc_1A3D0:
0001F14C 6000 FED4                  		bra.w	loc_1A2A6
0001F150                            ; ===========================================================================
0001F150                            Ani_obj85:
0001F150                            	include "_anim\obj85.asm"
0001F150                            ; ---------------------------------------------------------------------------
0001F150                            ; Animation script - Eggman (FZ)
0001F150                            ; ---------------------------------------------------------------------------
0001F150 0000                       		dc.w byte_1A3D6-Ani_obj85
0001F152 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001F156                            		even
0001F156                            		even
0001F156                            
0001F156                            Map_Eggman2:
0001F156                            	include "_maps\Eggman2.asm"
0001F156                            ; ---------------------------------------------------------------------------
0001F156                            ; Sprite mappings - Eggman (FZ)
0001F156                            ; ---------------------------------------------------------------------------
0001F156 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001F158 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001F15A 06                         byte_1A3DE:	dc.b 6
0001F15B E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001F160 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001F165 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001F16A FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001F16F FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001F174 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001F179 06                         byte_1A3FD:	dc.b 6
0001F17A E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001F17F EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001F184 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001F189 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001F18E FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001F193 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001F198                            		even
0001F198                            		even
0001F198                            
0001F198                            Map_FZBoss:
0001F198                            	include "_maps\FZ boss.asm"
0001F198                            ; ---------------------------------------------------------------------------
0001F198                            ; Sprite mappings - boss (FZ)
0001F198                            ; ---------------------------------------------------------------------------
0001F198 0000                       		dc.w byte_1A422-Map_FZBoss
0001F19A 0000                       		dc.w byte_1A42D-Map_FZBoss
0001F19C 0000                       		dc.w byte_1A43D-Map_FZBoss
0001F19E 02                         byte_1A422:	dc.b 2
0001F19F 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001F1A4 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001F1A9 03                         byte_1A42D:	dc.b 3
0001F1AA 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001F1AF 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001F1B4 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001F1B9 02                         byte_1A43D:	dc.b 2
0001F1BA 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001F1BF 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001F1C4                            		even
0001F1C4                            		even
0001F1C4                            
0001F1C4                            ; ===========================================================================
0001F1C4                            
0001F1C4                            Obj84_Delete:
0001F1C4 4EF9 0001 0A18             		jmp	DeleteObject
0001F1CA                            ; ===========================================================================
0001F1CA                            ; ---------------------------------------------------------------------------
0001F1CA                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001F1CA                            ; ---------------------------------------------------------------------------
0001F1CA                            
0001F1CA                            Obj84:					; XREF: Obj_Index
0001F1CA 7000                       		moveq	#0,d0
0001F1CC 1028 0024                  		move.b	$24(a0),d0
0001F1D0 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001F1D4 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001F1D8                            ; ===========================================================================
0001F1D8 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001F1DA 0000                       		dc.w loc_1A4CE-Obj84_Index
0001F1DC 0000                       		dc.w loc_1A57E-Obj84_Index
0001F1DE                            
0001F1DE 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001F1E2 2550 0620                  		dc.w $2550, $620
0001F1E6 2490 04C0                  		dc.w $2490, $4C0
0001F1EA 2510 04C0                  		dc.w $2510, $4C0
0001F1EE                            ; ===========================================================================
0001F1EE                            
0001F1EE                            Obj84_Main:				; XREF: Obj84_Index
0001F1EE 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001F1F2 7000                       		moveq	#0,d0
0001F1F4 1028 0028                  		move.b	$28(a0),d0
0001F1F8 D040                       		add.w	d0,d0
0001F1FA D2C0                       		adda.w	d0,a1
0001F1FC 117C 0004 0001             		move.b	#4,1(a0)
0001F202 08E8 0007 0001             		bset	#7,1(a0)
0001F208 08E8 0004 0001             		bset	#4,1(a0)
0001F20E 317C 0300 0002             		move.w	#$300,2(a0)
0001F214 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001F21C 3159 0008                  		move.w	(a1)+,8(a0)
0001F220 3151 000C                  		move.w	(a1),$C(a0)
0001F224 3159 0038                  		move.w	(a1)+,$38(a0)
0001F228 117C 0020 0016             		move.b	#$20,$16(a0)
0001F22E 117C 0060 0017             		move.b	#$60,$17(a0)
0001F234 117C 0020 0019             		move.b	#$20,$19(a0)
0001F23A 117C 0060 0016             		move.b	#$60,$16(a0)
0001F240 117C 0003 0018             		move.b	#3,$18(a0)
0001F246 5428 0024                  		addq.b	#2,$24(a0)
0001F24A                            
0001F24A                            loc_1A4CE:				; XREF: Obj84_Index
0001F24A 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001F250 6F00                       		ble.s	loc_1A4DC
0001F252 08E8 0001 0001             		bset	#1,1(a0)
0001F258                            
0001F258                            loc_1A4DC:
0001F258 42A8 003C                  		clr.l	$3C(a0)
0001F25C 4A28 0029                  		tst.b	$29(a0)
0001F260 6700                       		beq.s	loc_1A4EA
0001F262 5428 0024                  		addq.b	#2,$24(a0)
0001F266                            
0001F266                            loc_1A4EA:
0001F266 2028 003C                  		move.l	$3C(a0),d0
0001F26A 2228 0038                  		move.l	$38(a0),d1
0001F26E D280                       		add.l	d0,d1
0001F270 4841                       		swap	d1
0001F272 3141 000C                  		move.w	d1,$C(a0)
0001F276 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001F27C 6600                       		bne.s	loc_1A524
0001F27E 4A68 0030                  		tst.w	$30(a0)
0001F282 6A00                       		bpl.s	loc_1A524
0001F284 70F6                       		moveq	#-$A,d0
0001F286 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001F28C 6F00                       		ble.s	loc_1A514
0001F28E 700E                       		moveq	#$E,d0
0001F290                            
0001F290                            loc_1A514:
0001F290 D240                       		add.w	d0,d1
0001F292 2268 0034                  		movea.l	$34(a0),a1
0001F296 3341 000C                  		move.w	d1,$C(a1)
0001F29A 3368 0008 0008             		move.w	8(a0),8(a1)
0001F2A0                            
0001F2A0                            loc_1A524:
0001F2A0 323C 002B                  		move.w	#$2B,d1
0001F2A4 343C 0060                  		move.w	#$60,d2
0001F2A8 363C 0061                  		move.w	#$61,d3
0001F2AC 3828 0008                  		move.w	8(a0),d4
0001F2B0 4EB9 0001 2DDC             		jsr	SolidObject
0001F2B6 7000                       		moveq	#0,d0
0001F2B8 3228 003C                  		move.w	$3C(a0),d1
0001F2BC 6A00                       		bpl.s	loc_1A550
0001F2BE 4441                       		neg.w	d1
0001F2C0 5141                       		subq.w	#8,d1
0001F2C2 6500                       		bcs.s	loc_1A55C
0001F2C4 5200                       		addq.b	#1,d0
0001F2C6 E841                       		asr.w	#4,d1
0001F2C8 D041                       		add.w	d1,d0
0001F2CA 6000                       		bra.s	loc_1A55C
0001F2CC                            ; ===========================================================================
0001F2CC                            
0001F2CC                            loc_1A550:
0001F2CC 0441 0027                  		subi.w	#$27,d1
0001F2D0 6500                       		bcs.s	loc_1A55C
0001F2D2 5200                       		addq.b	#1,d0
0001F2D4 E841                       		asr.w	#4,d1
0001F2D6 D041                       		add.w	d1,d0
0001F2D8                            
0001F2D8                            loc_1A55C:
0001F2D8 1140 001A                  		move.b	d0,$1A(a0)
0001F2DC 3038 D008                  		move.w	($FFFFD008).w,d0
0001F2E0 9068 0008                  		sub.w	8(a0),d0
0001F2E4 6B00                       		bmi.s	loc_1A578
0001F2E6 0440 0140                  		subi.w	#$140,d0
0001F2EA 6B00                       		bmi.s	loc_1A578
0001F2EC 4A28 0001                  		tst.b	1(a0)
0001F2F0 6A00 FED2                  		bpl.w	Obj84_Delete
0001F2F4                            
0001F2F4                            loc_1A578:
0001F2F4 4EF9 0001 09DC             		jmp	DisplaySprite
0001F2FA                            ; ===========================================================================
0001F2FA                            
0001F2FA                            loc_1A57E:				; XREF: Obj84_Index
0001F2FA 7000                       		moveq	#0,d0
0001F2FC 1028 0028                  		move.b	$28(a0),d0
0001F300 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001F304 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001F308 6000 FF5C                  		bra.w	loc_1A4EA
0001F30C                            ; ===========================================================================
0001F30C 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001F30E 0000                       		dc.w loc_1A598-off_1A590
0001F310 0000                       		dc.w loc_1A604-off_1A590
0001F312 0000                       		dc.w loc_1A604-off_1A590
0001F314                            ; ===========================================================================
0001F314                            
0001F314                            loc_1A598:				; XREF: off_1A590
0001F314 4A28 0029                  		tst.b	$29(a0)
0001F318 6600                       		bne.s	loc_1A5D4
0001F31A 2268 0034                  		movea.l	$34(a0),a1
0001F31E 4A29 0021                  		tst.b	$21(a1)
0001F322 6600                       		bne.s	loc_1A5B4
0001F324 6100 D2CA                  		bsr.w	BossDefeated
0001F328 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001F330                            
0001F330                            loc_1A5B4:
0001F330 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001F338 6400                       		bcc.s	locret_1A602
0001F33A 42A8 003C                  		clr.l	$3C(a0)
0001F33E 2268 0034                  		movea.l	$34(a0),a1
0001F342 5369 0032                  		subq.w	#1,$32(a1)
0001F346 4269 0030                  		clr.w	$30(a1)
0001F34A 5528 0024                  		subq.b	#2,$24(a0)
0001F34E 4E75                       		rts	
0001F350                            ; ===========================================================================
0001F350                            
0001F350                            loc_1A5D4:
0001F350 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001F356 6C00                       		bge.s	loc_1A5E4
0001F358 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001F360                            
0001F360                            loc_1A5E4:
0001F360 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001F368 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001F36E 6E00                       		bgt.s	locret_1A602
0001F370 4268 003E                  		clr.w	$3E(a0)
0001F374 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001F37A 4228 0029                  		clr.b	$29(a0)
0001F37E                            
0001F37E                            locret_1A602:
0001F37E 4E75                       		rts	
0001F380                            ; ===========================================================================
0001F380                            
0001F380                            loc_1A604:				; XREF: off_1A590
0001F380 08E8 0001 0001             		bset	#1,1(a0)
0001F386 4A28 0029                  		tst.b	$29(a0)
0001F38A 6600                       		bne.s	loc_1A646
0001F38C 2268 0034                  		movea.l	$34(a0),a1
0001F390 4A29 0021                  		tst.b	$21(a1)
0001F394 6600                       		bne.s	loc_1A626
0001F396 6100 D258                  		bsr.w	BossDefeated
0001F39A 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001F3A2                            
0001F3A2                            loc_1A626:
0001F3A2 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001F3AA 6400                       		bcc.s	locret_1A674
0001F3AC 42A8 003C                  		clr.l	$3C(a0)
0001F3B0 2268 0034                  		movea.l	$34(a0),a1
0001F3B4 5369 0032                  		subq.w	#1,$32(a1)
0001F3B8 4269 0030                  		clr.w	$30(a1)
0001F3BC 5528 0024                  		subq.b	#2,$24(a0)
0001F3C0 4E75                       		rts	
0001F3C2                            ; ===========================================================================
0001F3C2                            
0001F3C2                            loc_1A646:
0001F3C2 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001F3C8 6D00                       		blt.s	loc_1A656
0001F3CA 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001F3D2                            
0001F3D2                            loc_1A656:
0001F3D2 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001F3DA 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001F3E0 6D00                       		blt.s	locret_1A674
0001F3E2 4268 003E                  		clr.w	$3E(a0)
0001F3E6 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001F3EC 4228 0029                  		clr.b	$29(a0)
0001F3F0                            
0001F3F0                            locret_1A674:
0001F3F0 4E75                       		rts	
0001F3F2                            ; ===========================================================================
0001F3F2                            ; ---------------------------------------------------------------------------
0001F3F2                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001F3F2                            ; ---------------------------------------------------------------------------
0001F3F2                            Map_obj84:
0001F3F2                            	include "_maps\obj84.asm"
0001F3F2                            ; ---------------------------------------------------------------------------
0001F3F2                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001F3F2                            ; ---------------------------------------------------------------------------
0001F3F2 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001F3F6 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001F3FA 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001F3FE 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001F402 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001F406 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001F40A 06                         byte_1A68E:	dc.b 6
0001F40B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001F410 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001F415 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001F41A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001F41F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001F424 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001F429 08                         byte_1A6AD:	dc.b 8
0001F42A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001F42F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001F434 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001F439 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001F43E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001F443 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001F448 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001F44D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001F452 0A                         byte_1A6D6:	dc.b $A
0001F453 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001F458 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001F45D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001F462 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001F467 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001F46C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001F471 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001F476 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001F47B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001F480 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001F485 0C                         byte_1A709:	dc.b $C
0001F486 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001F48B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001F490 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001F495 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001F49A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001F49F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001F4A4 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001F4A9 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001F4AE F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001F4B3 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001F4B8 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001F4BD 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001F4C2 0D                         byte_1A746:	dc.b $D
0001F4C3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001F4C8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001F4CD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001F4D2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001F4D7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001F4DC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001F4E1 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001F4E6 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001F4EB F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001F4F0 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001F4F5 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001F4FA 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001F4FF 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001F504 0E                         byte_1A788:	dc.b $E
0001F505 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001F50A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001F50F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001F514 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001F519 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001F51E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001F523 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001F528 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001F52D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001F532 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001F537 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001F53C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001F541 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001F546 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001F54B 02                         byte_1A7CF:	dc.b 2
0001F54C F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001F551 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001F556                            		even
0001F556                            		even
0001F556                            
0001F556                            ; ===========================================================================
0001F556                            ; ---------------------------------------------------------------------------
0001F556                            ; Object 86 - energy balls (FZ)
0001F556                            ; ---------------------------------------------------------------------------
0001F556                            
0001F556                            Obj86:					; XREF: Obj_Index
0001F556 7000                       		moveq	#0,d0
0001F558 1028 0024                  		move.b	$24(a0),d0
0001F55C 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001F560 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001F564                            ; ===========================================================================
0001F564 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001F566 0000                       		dc.w Obj86_Generator-Obj86_Index
0001F568 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001F56A 0000                       		dc.w loc_1A962-Obj86_Index
0001F56C 0000                       		dc.w loc_1A982-Obj86_Index
0001F56E                            ; ===========================================================================
0001F56E                            
0001F56E                            Obj86_Main:				; XREF: Obj86_Index
0001F56E 317C 2588 0008             		move.w	#$2588,8(a0)
0001F574 317C 053C 000C             		move.w	#$53C,$C(a0)
0001F57A 317C 0300 0002             		move.w	#$300,2(a0)
0001F580 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001F588 117C 0000 001C             		move.b	#0,$1C(a0)
0001F58E 117C 0003 0018             		move.b	#3,$18(a0)
0001F594 117C 0008 0017             		move.b	#8,$17(a0)
0001F59A 117C 0008 0016             		move.b	#8,$16(a0)
0001F5A0 117C 0004 0001             		move.b	#4,1(a0)
0001F5A6 08E8 0007 0001             		bset	#7,1(a0)
0001F5AC 5428 0024                  		addq.b	#2,$24(a0)
0001F5B0                            
0001F5B0                            Obj86_Generator:			; XREF: Obj86_Index
0001F5B0 2268 0034                  		movea.l	$34(a0),a1
0001F5B4 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001F5BA 6600                       		bne.s	loc_1A850
0001F5BC 10BC 003F                  		move.b	#$3F,(a0)
0001F5C0 117C 0000 0024             		move.b	#0,$24(a0)
0001F5C6 4EF9 0001 09DC             		jmp	DisplaySprite
0001F5CC                            ; ===========================================================================
0001F5CC                            
0001F5CC                            loc_1A850:
0001F5CC 117C 0000 001C             		move.b	#0,$1C(a0)
0001F5D2 4A28 0029                  		tst.b	$29(a0)
0001F5D6 6700                       		beq.s	loc_1A86C
0001F5D8 5428 0024                  		addq.b	#2,$24(a0)
0001F5DC 117C 0001 001C             		move.b	#1,$1C(a0)
0001F5E2 117C 003E 0028             		move.b	#$3E,$28(a0)
0001F5E8                            
0001F5E8                            loc_1A86C:
0001F5E8 323C 0013                  		move.w	#$13,d1
0001F5EC 343C 0008                  		move.w	#8,d2
0001F5F0 363C 0011                  		move.w	#$11,d3
0001F5F4 3828 0008                  		move.w	8(a0),d4
0001F5F8 4EB9 0001 2DDC             		jsr	SolidObject
0001F5FE 3038 D008                  		move.w	($FFFFD008).w,d0
0001F602 9068 0008                  		sub.w	8(a0),d0
0001F606 6B00                       		bmi.s	loc_1A89A
0001F608 0440 0140                  		subi.w	#$140,d0
0001F60C 6B00                       		bmi.s	loc_1A89A
0001F60E 4A28 0001                  		tst.b	1(a0)
0001F612 6A00 FBB0                  		bpl.w	Obj84_Delete
0001F616                            
0001F616                            loc_1A89A:
0001F616 43FA 0000                  		lea	Ani_obj86(pc),a1
0001F61A 4EB9 0000 D7DA             		jsr	AnimateSprite
0001F620 4EF9 0001 09DC             		jmp	DisplaySprite
0001F626                            ; ===========================================================================
0001F626                            
0001F626                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001F626 4A28 0029                  		tst.b	$29(a0)
0001F62A 6700 0000                  		beq.w	loc_1A954
0001F62E 4228 0029                  		clr.b	$29(a0)
0001F632 D068 0030                  		add.w	$30(a0),d0
0001F636 0240 001E                  		andi.w	#$1E,d0
0001F63A D4C0                       		adda.w	d0,a2
0001F63C 5868 0030                  		addq.w	#4,$30(a0)
0001F640 4268 0032                  		clr.w	$32(a0)
0001F644 7403                       		moveq	#3,d2
0001F646                            
0001F646                            Obj86_Loop:
0001F646 4EB9 0001 0E88             		jsr	SingleObjLoad2
0001F64C 6600 0000                  		bne.w	loc_1A954
0001F650 12BC 0086                  		move.b	#$86,(a1)
0001F654 3368 0008 0008             		move.w	8(a0),8(a1)
0001F65A 337C 053C 000C             		move.w	#$53C,$C(a1)
0001F660 137C 0008 0024             		move.b	#8,$24(a1)
0001F666 337C 2300 0002             		move.w	#$2300,2(a1)
0001F66C 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001F674 137C 000C 0016             		move.b	#$C,$16(a1)
0001F67A 137C 000C 0017             		move.b	#$C,$17(a1)
0001F680 137C 0000 0020             		move.b	#0,$20(a1)
0001F686 137C 0003 0018             		move.b	#3,$18(a1)
0001F68C 337C 003E 0028             		move.w	#$3E,$28(a1)
0001F692 137C 0004 0001             		move.b	#4,1(a1)
0001F698 08E9 0007 0001             		bset	#7,1(a1)
0001F69E 2348 0034                  		move.l	a0,$34(a1)
0001F6A2 4EB9 0000 3710             		jsr	(RandomNumber).l
0001F6A8 3228 0032                  		move.w	$32(a0),d1
0001F6AC C3FC FFB1                  		muls.w	#-$4F,d1
0001F6B0 0641 2578                  		addi.w	#$2578,d1
0001F6B4 0240 001F                  		andi.w	#$1F,d0
0001F6B8 0440 0010                  		subi.w	#$10,d0
0001F6BC D041                       		add.w	d1,d0
0001F6BE 3340 0030                  		move.w	d0,$30(a1)
0001F6C2 5268 0032                  		addq.w	#1,$32(a0)
0001F6C6 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001F6CC 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001F6D0                            
0001F6D0                            loc_1A954:
0001F6D0 4A68 0032                  		tst.w	$32(a0)
0001F6D4 6600                       		bne.s	loc_1A95E
0001F6D6 5428 0024                  		addq.b	#2,$24(a0)
0001F6DA                            
0001F6DA                            loc_1A95E:
0001F6DA 6000 FF0C                  		bra.w	loc_1A86C
0001F6DE                            ; ===========================================================================
0001F6DE                            
0001F6DE                            loc_1A962:				; XREF: Obj86_Index
0001F6DE 117C 0002 001C             		move.b	#2,$1C(a0)
0001F6E4 4A68 0038                  		tst.w	$38(a0)
0001F6E8 6600                       		bne.s	loc_1A97E
0001F6EA 117C 0002 0024             		move.b	#2,$24(a0)
0001F6F0 2268 0034                  		movea.l	$34(a0),a1
0001F6F4 337C FFFF 0032             		move.w	#-1,$32(a1)
0001F6FA                            
0001F6FA                            loc_1A97E:
0001F6FA 6000 FEEC                  		bra.w	loc_1A86C
0001F6FE                            ; ===========================================================================
0001F6FE                            
0001F6FE                            loc_1A982:				; XREF: Obj86_Index
0001F6FE 7000                       		moveq	#0,d0
0001F700 1028 0025                  		move.b	$25(a0),d0
0001F704 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001F708 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001F70C 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001F710 4EB9 0000 D7DA             		jsr	AnimateSprite
0001F716 4EF9 0001 09DC             		jmp	DisplaySprite
0001F71C                            ; ===========================================================================
0001F71C 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001F71E 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001F720 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001F722                            ; ===========================================================================
0001F722                            
0001F722                            loc_1A9A6:				; XREF: Obj86_Index2
0001F722 3028 0030                  		move.w	$30(a0),d0
0001F726 9068 0008                  		sub.w	8(a0),d0
0001F72A E940                       		asl.w	#4,d0
0001F72C 3140 0010                  		move.w	d0,$10(a0)
0001F730 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001F736 5428 0025                  		addq.b	#2,$25(a0)
0001F73A 4E75                       		rts	
0001F73C                            ; ===========================================================================
0001F73C                            
0001F73C                            loc_1A9C0:				; XREF: Obj86_Index2
0001F73C 4A68 0010                  		tst.w	$10(a0)
0001F740 6700                       		beq.s	loc_1A9E6
0001F742 4EB9 0001 09C2             		jsr	SpeedToPos
0001F748 3028 0008                  		move.w	8(a0),d0
0001F74C 9068 0030                  		sub.w	$30(a0),d0
0001F750 6400                       		bcc.s	loc_1A9E6
0001F752 4268 0010                  		clr.w	$10(a0)
0001F756 D168 0008                  		add.w	d0,8(a0)
0001F75A 2268 0034                  		movea.l	$34(a0),a1
0001F75E 5369 0032                  		subq.w	#1,$32(a1)
0001F762                            
0001F762                            loc_1A9E6:
0001F762 117C 0000 001C             		move.b	#0,$1C(a0)
0001F768 5368 0028                  		subq.w	#1,$28(a0)
0001F76C 6600                       		bne.s	locret_1AA1C
0001F76E 5428 0025                  		addq.b	#2,$25(a0)
0001F772 117C 0001 001C             		move.b	#1,$1C(a0)
0001F778 117C 009A 0020             		move.b	#$9A,$20(a0)
0001F77E 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001F784 7000                       		moveq	#0,d0
0001F786 3038 D008                  		move.w	($FFFFD008).w,d0
0001F78A 9068 0008                  		sub.w	8(a0),d0
0001F78E 3140 0010                  		move.w	d0,$10(a0)
0001F792 317C 0140 0012             		move.w	#$140,$12(a0)
0001F798                            
0001F798                            locret_1AA1C:
0001F798 4E75                       		rts	
0001F79A                            ; ===========================================================================
0001F79A                            
0001F79A                            loc_1AA1E:				; XREF: Obj86_Index2
0001F79A 4EB9 0001 09C2             		jsr	SpeedToPos
0001F7A0 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001F7A6 6400                       		bcc.s	loc_1AA34
0001F7A8 5368 0028                  		subq.w	#1,$28(a0)
0001F7AC 6700                       		beq.s	loc_1AA34
0001F7AE 4E75                       		rts	
0001F7B0                            ; ===========================================================================
0001F7B0                            
0001F7B0                            loc_1AA34:
0001F7B0 2268 0034                  		movea.l	$34(a0),a1
0001F7B4 5369 0038                  		subq.w	#1,$38(a1)
0001F7B8 6000 FA0A                  		bra.w	Obj84_Delete
0001F7BC                            ; ===========================================================================
0001F7BC                            Ani_obj86:
0001F7BC                            	include "_anim\obj86.asm"
0001F7BC                            ; ---------------------------------------------------------------------------
0001F7BC                            ; Animation script - energy ball launcher (FZ)
0001F7BC                            ; ---------------------------------------------------------------------------
0001F7BC 0000                       		dc.w byte_1AA46-Ani_obj86
0001F7BE 0000                       		dc.w byte_1AA4A-Ani_obj86
0001F7C0 0000                       		dc.w byte_1AA50-Ani_obj86
0001F7C2 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001F7C6 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001F7CC 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001F7D2                            		even
0001F7D2                            		even
0001F7D2                            
0001F7D2                            ; ---------------------------------------------------------------------------
0001F7D2                            ; Sprite mappings - energy ball	launcher (FZ)
0001F7D2                            ; ---------------------------------------------------------------------------
0001F7D2                            Map_obj86:
0001F7D2                            	include "_maps\obj86.asm"
0001F7D2                            ; ---------------------------------------------------------------------------
0001F7D2                            ; Sprite mappings - energy ball	launcher (FZ)
0001F7D2                            ; ---------------------------------------------------------------------------
0001F7D2 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001F7D6 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001F7DA 01                         byte_1AA5E:	dc.b 1
0001F7DB F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001F7E0 01                         byte_1AA64:	dc.b 1
0001F7E1 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001F7E6 01                         byte_1AA6A:	dc.b 1
0001F7E7 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001F7EC 01                         byte_1AA70:	dc.b 1
0001F7ED F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001F7F2                            		even
0001F7F2                            		even
0001F7F2                            
0001F7F2                            Ani_obj86a:
0001F7F2                            	include "_anim\obj86a.asm"
0001F7F2                            ; ---------------------------------------------------------------------------
0001F7F2                            ; Animation script - energy balls (FZ)
0001F7F2                            ; ---------------------------------------------------------------------------
0001F7F2 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001F7F4 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001F7F6 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001F805 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001F814 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001F818 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001F822                            		even
0001F822                            		even
0001F822                            
0001F822                            ; ---------------------------------------------------------------------------
0001F822                            ; Sprite mappings - energy balls (FZ)
0001F822                            ; ---------------------------------------------------------------------------
0001F822                            Map_obj86a:
0001F822                            	include "_maps\obj86a.asm"
0001F822                            ; ---------------------------------------------------------------------------
0001F822                            ; Sprite mappings - energy balls (FZ)
0001F822                            ; ---------------------------------------------------------------------------
0001F822 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001F826 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001F82A 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001F82E 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001F832 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001F836 0000                       		dc.w byte_1AB20-Map_obj86a
0001F838 02                         byte_1AABC:	dc.b 2
0001F839 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001F83E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001F843 02                         byte_1AAC7:	dc.b 2
0001F844 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001F849 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001F84E 02                         byte_1AAD2:	dc.b 2
0001F84F F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001F854 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001F859 02                         byte_1AADD:	dc.b 2
0001F85A F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001F85F 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001F864 02                         byte_1AAE8:	dc.b 2
0001F865 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001F86A 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001F86F 02                         byte_1AAF3:	dc.b 2
0001F870 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001F875 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001F87A 01                         byte_1AAFE:	dc.b 1
0001F87B F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001F880 01                         byte_1AB04:	dc.b 1
0001F881 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001F886 02                         byte_1AB0A:	dc.b 2
0001F887 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001F88C 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001F891 02                         byte_1AB15:	dc.b 2
0001F892 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001F897 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001F89C 00                         byte_1AB20:	dc.b 0
0001F89E 00                         		even
0001F89E 00                         		even
0001F89E                            
0001F89E                            ; ===========================================================================
0001F89E                            ; ---------------------------------------------------------------------------
0001F89E                            ; Object 3E - prison capsule
0001F89E                            ; ---------------------------------------------------------------------------
0001F89E                            
0001F89E                            Obj3E:					; XREF: Obj_Index
0001F89E 7000                       		moveq	#0,d0
0001F8A0 1028 0024                  		move.b	$24(a0),d0
0001F8A4 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001F8A8 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001F8AC 3028 0008                  		move.w	8(a0),d0
0001F8B0 0240 FF80                  		andi.w	#$FF80,d0
0001F8B4 3238 F700                  		move.w	($FFFFF700).w,d1
0001F8B8 0441 0080                  		subi.w	#$80,d1
0001F8BC 0241 FF80                  		andi.w	#$FF80,d1
0001F8C0 9041                       		sub.w	d1,d0
0001F8C2 0C40 0280                  		cmpi.w	#$280,d0
0001F8C6 6200                       		bhi.s	Obj3E_Delete
0001F8C8 4EF9 0001 09DC             		jmp	DisplaySprite
0001F8CE                            ; ===========================================================================
0001F8CE                            
0001F8CE                            Obj3E_Delete:
0001F8CE 4EF9 0001 0A18             		jmp	DeleteObject
0001F8D4                            ; ===========================================================================
0001F8D4 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001F8D6 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001F8D8 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001F8DA 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001F8DC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001F8DE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001F8E0 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001F8E2 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001F8E4                            
0001F8E4 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001F8E8 040C 0501                  		dc.b 4,	$C, 5, 1
0001F8EC 0610 0403                  		dc.b 6,	$10, 4,	3
0001F8F0 0810 0305                  		dc.b 8,	$10, 3,	5
0001F8F4                            ; ===========================================================================
0001F8F4                            
0001F8F4                            Obj3E_Main:				; XREF: Obj3E_Index
0001F8F4 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001F8FC 317C 049D 0002             		move.w	#$49D,2(a0)
0001F902 117C 0004 0001             		move.b	#4,1(a0)
0001F908 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001F90E 7000                       		moveq	#0,d0
0001F910 1028 0028                  		move.b	$28(a0),d0
0001F914 E548                       		lsl.w	#2,d0
0001F916 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001F91A 1159 0024                  		move.b	(a1)+,$24(a0)
0001F91E 1159 0019                  		move.b	(a1)+,$19(a0)
0001F922 1159 0018                  		move.b	(a1)+,$18(a0)
0001F926 1159 001A                  		move.b	(a1)+,$1A(a0)
0001F92A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001F92E 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001F930 117C 0006 0020             		move.b	#6,$20(a0)
0001F936 117C 0008 0021             		move.b	#8,$21(a0)
0001F93C                            
0001F93C                            Obj3E_Not02:
0001F93C 4E75                       		rts	
0001F93E                            ; ===========================================================================
0001F93E                            
0001F93E                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001F93E 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001F944 6700                       		beq.s	Obj3E_ChkOpened
0001F946 323C 002B                  		move.w	#$2B,d1
0001F94A 343C 0018                  		move.w	#$18,d2
0001F94E 363C 0018                  		move.w	#$18,d3
0001F952 3828 0008                  		move.w	8(a0),d4
0001F956 4EF9 0001 2DDC             		jmp	SolidObject
0001F95C                            ; ===========================================================================
0001F95C                            
0001F95C                            Obj3E_ChkOpened:
0001F95C 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001F960 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001F962 4228 0025                  		clr.b	$25(a0)
0001F966 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001F96C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F972                            
0001F972                            Obj3E_DoOpen:
0001F972 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001F978 4E75                       		rts	
0001F97A                            ; ===========================================================================
0001F97A                            
0001F97A                            Obj3E_Switched:				; XREF: Obj3E_Index
0001F97A 323C 0017                  		move.w	#$17,d1
0001F97E 343C 0008                  		move.w	#8,d2
0001F982 363C 0008                  		move.w	#8,d3
0001F986 3828 0008                  		move.w	8(a0),d4
0001F98A 4EB9 0001 2DDC             		jsr	SolidObject
0001F990 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001F996 4EB9 0000 D7DA             		jsr	AnimateSprite
0001F99C 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001F9A2 4A28 0025                  		tst.b	$25(a0)
0001F9A6 6700                       		beq.s	locret_1AC60
0001F9A8 5068 000C                  		addq.w	#8,$C(a0)
0001F9AC 117C 000A 0024             		move.b	#$A,$24(a0)
0001F9B2 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001F9B8 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001F9BC 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001F9C0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001F9C6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001F9CC 4228 0025                  		clr.b	$25(a0)
0001F9D0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001F9D6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001F9DC                            
0001F9DC                            locret_1AC60:
0001F9DC 4E75                       		rts	
0001F9DE                            ; ===========================================================================
0001F9DE                            
0001F9DE                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001F9DE 7007                       		moveq	#7,d0
0001F9E0 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001F9E4 6600                       		bne.s	loc_1ACA0
0001F9E6 4EB9 0001 0E72             		jsr	SingleObjLoad
0001F9EC 6600                       		bne.s	loc_1ACA0
0001F9EE 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001F9F2 3368 0008 0008             		move.w	8(a0),8(a1)
0001F9F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001F9FE 4EB9 0000 3710             		jsr	(RandomNumber).l
0001FA04 7200                       		moveq	#0,d1
0001FA06 1200                       		move.b	d0,d1
0001FA08 E409                       		lsr.b	#2,d1
0001FA0A 0441 0020                  		subi.w	#$20,d1
0001FA0E D369 0008                  		add.w	d1,8(a1)
0001FA12 E048                       		lsr.w	#8,d0
0001FA14 E608                       		lsr.b	#3,d0
0001FA16 D169 000C                  		add.w	d0,$C(a1)
0001FA1A                            
0001FA1A                            loc_1ACA0:
0001FA1A 5368 001E                  		subq.w	#1,$1E(a0)
0001FA1E 6700                       		beq.s	Obj3E_MakeAnimal
0001FA20 4E75                       		rts	
0001FA22                            ; ===========================================================================
0001FA22                            
0001FA22                            Obj3E_MakeAnimal:
0001FA22 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001FA28 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001FA2E 117C 0006 001A             		move.b	#6,$1A(a0)
0001FA34 317C 0096 001E             		move.w	#$96,$1E(a0)
0001FA3A 0668 0020 000C             		addi.w	#$20,$C(a0)
0001FA40 7C07                       		moveq	#7,d6
0001FA42 3A3C 009A                  		move.w	#$9A,d5
0001FA46 78E4                       		moveq	#-$1C,d4
0001FA48                            
0001FA48                            Obj3E_Loop:
0001FA48 4EB9 0001 0E72             		jsr	SingleObjLoad
0001FA4E 6600                       		bne.s	locret_1ACF8
0001FA50 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001FA54 3368 0008 0008             		move.w	8(a0),8(a1)
0001FA5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001FA60 D969 0008                  		add.w	d4,8(a1)
0001FA64 5E44                       		addq.w	#7,d4
0001FA66 3345 0036                  		move.w	d5,$36(a1)
0001FA6A 5145                       		subq.w	#8,d5
0001FA6C 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001FA70                            
0001FA70                            locret_1ACF8:
0001FA70 4E75                       		rts	
0001FA72                            ; ===========================================================================
0001FA72                            
0001FA72                            Obj3E_Animals:				; XREF: Obj3E_Index
0001FA72 7007                       		moveq	#7,d0
0001FA74 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001FA78 6600                       		bne.s	loc_1AD38
0001FA7A 4EB9 0001 0E72             		jsr	SingleObjLoad
0001FA80 6600                       		bne.s	loc_1AD38
0001FA82 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001FA86 3368 0008 0008             		move.w	8(a0),8(a1)
0001FA8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001FA92 4EB9 0000 3710             		jsr	(RandomNumber).l
0001FA98 0240 001F                  		andi.w	#$1F,d0
0001FA9C 5D40                       		subq.w	#6,d0
0001FA9E 4A41                       		tst.w	d1
0001FAA0 6A00                       		bpl.s	loc_1AD2E
0001FAA2 4440                       		neg.w	d0
0001FAA4                            
0001FAA4                            loc_1AD2E:
0001FAA4 D169 0008                  		add.w	d0,8(a1)
0001FAA8 337C 000C 0036             		move.w	#$C,$36(a1)
0001FAAE                            
0001FAAE                            loc_1AD38:
0001FAAE 5368 001E                  		subq.w	#1,$1E(a0)
0001FAB2 6600                       		bne.s	locret_1AD48
0001FAB4 5428 0024                  		addq.b	#2,$24(a0)
0001FAB8 317C 00B4 001E             		move.w	#180,$1E(a0)
0001FABE                            
0001FABE                            locret_1AD48:
0001FABE 4E75                       		rts	
0001FAC0                            ; ===========================================================================
0001FAC0                            
0001FAC0                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001FAC0 703E                       		moveq	#$3E,d0
0001FAC2 7228                       		moveq	#$28,d1
0001FAC4 7440                       		moveq	#$40,d2
0001FAC6 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001FACA                            
0001FACA                            Obj3E_FindObj28:
0001FACA B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001FACC 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001FACE D2C2                       		adda.w	d2,a1		; next object RAM
0001FAD0 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001FAD4                            
0001FAD4 4EB9 0001 208C             		jsr	GotThroughAct
0001FADA 4EF9 0001 0A18             		jmp	DeleteObject
0001FAE0                            ; ===========================================================================
0001FAE0                            
0001FAE0                            Obj3E_Obj28Found:
0001FAE0 4E75                       		rts	
0001FAE2                            ; ===========================================================================
0001FAE2                            Ani_obj3E:
0001FAE2                            	include "_anim\obj3E.asm"
0001FAE2                            ; ---------------------------------------------------------------------------
0001FAE2                            ; Animation script - prison capsule
0001FAE2                            ; ---------------------------------------------------------------------------
0001FAE2 0000                       		dc.w byte_1AD70-Ani_obj3E
0001FAE4 0000                       		dc.w byte_1AD70-Ani_obj3E
0001FAE6 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001FAEA                            		even
0001FAEA                            		even
0001FAEA                            
0001FAEA                            ; ---------------------------------------------------------------------------
0001FAEA                            ; Sprite mappings - prison capsule
0001FAEA                            ; ---------------------------------------------------------------------------
0001FAEA                            Map_obj3E:
0001FAEA                            	include "_maps\obj3E.asm"
0001FAEA                            ; ---------------------------------------------------------------------------
0001FAEA                            ; Sprite mappings - prison capsule
0001FAEA                            ; ---------------------------------------------------------------------------
0001FAEA 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001FAEE 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001FAF2 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001FAF6 0000                       		dc.w byte_1ADE2-Map_obj3E
0001FAF8 07                         byte_1AD82:	dc.b 7
0001FAF9 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001FAFE E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001FB03 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001FB08 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001FB0D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001FB12 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001FB17 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001FB1C 01                         byte_1ADA6:	dc.b 1
0001FB1D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001FB22 06                         byte_1ADAC:	dc.b 6
0001FB23 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001FB28 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001FB2D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001FB32 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001FB37 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001FB3C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001FB41 01                         byte_1ADCB:	dc.b 1
0001FB42 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001FB47 02                         byte_1ADD1:	dc.b 2
0001FB48 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001FB4D 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001FB52 01                         byte_1ADDC:	dc.b 1
0001FB53 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001FB58 00                         byte_1ADE2:	dc.b 0
0001FB5A 00                         		even
0001FB5A 00                         		even
0001FB5A                            
0001FB5A                            ; ---------------------------------------------------------------------------
0001FB5A                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001FB5A                            ; ---------------------------------------------------------------------------
0001FB5A                            
0001FB5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB5A                            
0001FB5A                            
0001FB5A                            TouchResponse:				; XREF: Obj01
0001FB5A 4E71                       		nop	
0001FB5C 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001FB60 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001FB64 5142                       		subq.w	#8,d2
0001FB66 7A00                       		moveq	#0,d5
0001FB68 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001FB6C 5705                       		subq.b	#3,d5
0001FB6E 9645                       		sub.w	d5,d3
0001FB70 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001FB76 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001FB78 0643 000C                  		addi.w	#$C,d3
0001FB7C 7A0A                       		moveq	#$A,d5
0001FB7E                            
0001FB7E                            Touch_NoDuck:
0001FB7E 383C 0010                  		move.w	#$10,d4
0001FB82 DA45                       		add.w	d5,d5
0001FB84 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001FB88 3C3C 005F                  		move.w	#$5F,d6
0001FB8C                            
0001FB8C                            Touch_Loop:
0001FB8C 4A29 0001                  		tst.b	1(a1)
0001FB90 6A00                       		bpl.s	Touch_NextObj
0001FB92 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001FB96 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001FB98                            
0001FB98                            Touch_NextObj:
0001FB98 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001FB9C 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001FBA0                            
0001FBA0 7000                       		moveq	#0,d0
0001FBA2 4E75                       		rts	
0001FBA4                            ; ===========================================================================
0001FBA4 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001FBA6 0C14                       		dc.b   $C, $14
0001FBA8 140C                       		dc.b  $14,  $C
0001FBAA 0410                       		dc.b	4, $10
0001FBAC 0C12                       		dc.b   $C, $12
0001FBAE 1010                       		dc.b  $10, $10
0001FBB0 0606                       		dc.b	6,   6
0001FBB2 180C                       		dc.b  $18,  $C
0001FBB4 0C10                       		dc.b   $C, $10
0001FBB6 100C                       		dc.b  $10,  $C
0001FBB8 0808                       		dc.b	8,   8
0001FBBA 1410                       		dc.b  $14, $10
0001FBBC 1408                       		dc.b  $14,   8
0001FBBE 0E0E                       		dc.b   $E,  $E
0001FBC0 1818                       		dc.b  $18, $18
0001FBC2 2810                       		dc.b  $28, $10
0001FBC4 1018                       		dc.b  $10, $18
0001FBC6 0810                       		dc.b	8, $10
0001FBC8 2070                       		dc.b  $20, $70
0001FBCA 4020                       		dc.b  $40, $20
0001FBCC 8020                       		dc.b  $80, $20
0001FBCE 2020                       		dc.b  $20, $20
0001FBD0 0808                       		dc.b	8,   8
0001FBD2 0404                       		dc.b	4,   4
0001FBD4 2008                       		dc.b  $20,   8
0001FBD6 0C0C                       		dc.b   $C,  $C
0001FBD8 0804                       		dc.b	8,   4
0001FBDA 1804                       		dc.b  $18,   4
0001FBDC 2804                       		dc.b  $28,   4
0001FBDE 0408                       		dc.b	4,   8
0001FBE0 0418                       		dc.b	4, $18
0001FBE2 0428                       		dc.b	4, $28
0001FBE4 0420                       		dc.b	4, $20
0001FBE6 1818                       		dc.b  $18, $18
0001FBE8 0C18                       		dc.b   $C, $18
0001FBEA 4808                       		dc.b  $48,   8
0001FBEC                            ; ===========================================================================
0001FBEC                            
0001FBEC                            Touch_Height:				; XREF: TouchResponse
0001FBEC 0240 003F                  		andi.w	#$3F,d0
0001FBF0 D040                       		add.w	d0,d0
0001FBF2 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001FBF6 7200                       		moveq	#0,d1
0001FBF8 121A                       		move.b	(a2)+,d1
0001FBFA 3029 0008                  		move.w	8(a1),d0
0001FBFE 9041                       		sub.w	d1,d0
0001FC00 9042                       		sub.w	d2,d0
0001FC02 6400                       		bcc.s	loc_1AE98
0001FC04 D241                       		add.w	d1,d1
0001FC06 D041                       		add.w	d1,d0
0001FC08 6500                       		bcs.s	Touch_Width
0001FC0A 6000 FF8C                  		bra.w	Touch_NextObj
0001FC0E                            ; ===========================================================================
0001FC0E                            
0001FC0E                            loc_1AE98:
0001FC0E B044                       		cmp.w	d4,d0
0001FC10 6200 FF86                  		bhi.w	Touch_NextObj
0001FC14                            
0001FC14                            Touch_Width:
0001FC14 7200                       		moveq	#0,d1
0001FC16 121A                       		move.b	(a2)+,d1
0001FC18 3029 000C                  		move.w	$C(a1),d0
0001FC1C 9041                       		sub.w	d1,d0
0001FC1E 9043                       		sub.w	d3,d0
0001FC20 6400                       		bcc.s	loc_1AEB6
0001FC22 D241                       		add.w	d1,d1
0001FC24 D240                       		add.w	d0,d1
0001FC26 6500                       		bcs.s	Touch_ChkValue
0001FC28 6000 FF6E                  		bra.w	Touch_NextObj
0001FC2C                            ; ===========================================================================
0001FC2C                            
0001FC2C                            loc_1AEB6:
0001FC2C B045                       		cmp.w	d5,d0
0001FC2E 6200 FF68                  		bhi.w	Touch_NextObj
0001FC32                            
0001FC32                            Touch_ChkValue:
0001FC32 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001FC36 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001FC3A 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001FC3E 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001FC42 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001FC46 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001FC48 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001FC4C                            
0001FC4C                            ; touch	response is $40-$7F
0001FC4C                            
0001FC4C 1029 0020                  		move.b	$20(a1),d0
0001FC50 0200 003F                  		andi.b	#$3F,d0
0001FC54 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001FC58 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001FC5A 0C10 0002                  		cmp.b	#2,0(a0)
0001FC5E 6700                       		beq.s	locret_1AEF2
0001FC60 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001FC66 6400 0000                  		bcc.w	locret_1AEF2
0001FC6A 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001FC6E                            
0001FC6E                            locret_1AEF2:
0001FC6E 4E75                       		rts	
0001FC70                            ; ===========================================================================
0001FC70                            
0001FC70                            Touch_Monitor:
0001FC70 0C10 0002                  		cmp.b	#2,0(a0)
0001FC74 6700                       		beq.s	Touch_Monitor_DESTROY
0001FC76 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001FC7A 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001FC7C 3028 000C                  		move.w	$C(a0),d0
0001FC80 0440 0010                  		subi.w	#$10,d0
0001FC84 B069 000C                  		cmp.w	$C(a1),d0
0001FC88 6500                       		bcs.s	locret_1AF2E
0001FC8A 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001FC8E 337C FE80 0012             		move.w	#-$180,$12(a1)
0001FC94 4A29 0025                  		tst.b	$25(a1)
0001FC98 6600                       		bne.s	locret_1AF2E
0001FC9A 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001FC9E 4E75                       		rts	
0001FCA0                            ; ===========================================================================
0001FCA0                            
0001FCA0                            loc_1AF1E:
0001FCA0 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001FCA6 6700                       		beq.s	BreakMonitorFromTop
0001FCA8 0C28 0024 001C             		cmpi.b	#$24,$1C(a0) ; is sonic stomping?
0001FCAE 6600                       		bne.s	IsSonicDKing
0001FCB0 6000                       		bra.s	DontRevYMonitor
0001FCB2                            
0001FCB2                            Touch_Monitor_DESTROY:
0001FCB2 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001FCB6 4E75                       		rts
0001FCB8                            
0001FCB8                            BreakMonitorFromTop:
0001FCB8 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001FCBC                            
0001FCBC                            DontRevYMonitor:
0001FCBC 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001FCC0                            
0001FCC0                            locret_1AF2E:
0001FCC0 4E75                       		rts	
0001FCC2                            
0001FCC2                            IsSonicDKing:
0001FCC2 0C28 0025 001C             		cmpi.b	#$25,$1C(a0) ; is sonic stomping?
0001FCC8 66F6                       		bne.s	locret_1AF2E
0001FCCA 60F0                       		bra.s	DontRevYMonitor
0001FCCC                            ; ===========================================================================
0001FCCC                            
0001FCCC                            Touch_Enemy:				; XREF: Touch_ChkValue
0001FCCC 0C10 0002                  		cmp.b	#2,0(a0)
0001FCD0 6700                       		beq.s	loc_1AF40
0001FCD2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001FCD6 6600                       		bne.s	loc_1AF40	; if yes, branch
0001FCD8 0C28 001F 001C             		cmpi.b	#$1F,$1C(a0)	; is Sonic Spin Dashing?
0001FCDE 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
0001FCE2 0C28 0024 001C             		cmpi.b	#$24,$1C(a0)	; is Sonic Stomping?
0001FCE8 6700 0000                  		beq.w	loc2_1AF40	; if yes, branch
0001FCEC 0C28 0025 001C             		cmpi.b	#$25,$1C(a0)	; is Sonic Stomping?
0001FCF2 6700 0000                  		beq.w	loc2_1AF40	; if yes, branch
0001FCF6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001FCFC 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001FD00                            
0001FD00                            loc_1AF40:
0001FD00 4A29 0021                  		tst.b	$21(a1)
0001FD04 6700                       		beq.s	Touch_KillEnemy
0001FD06 4468 0010                  		neg.w	$10(a0)
0001FD0A 4468 0012                  		neg.w	$12(a0)
0001FD0E E0E8 0010                  		asr	$10(a0)
0001FD12 E0E8 0012                  		asr	$12(a0)
0001FD16 137C 0000 0020             		move.b	#0,$20(a1)
0001FD1C 5329 0021                  		subq.b	#1,$21(a1)
0001FD20 6600                       		bne.s	locret_1AF68
0001FD22 08E9 0007 0022             		bset	#7,$22(a1)
0001FD28                            
0001FD28                            locret_1AF68:
0001FD28 4E75                       		rts	
0001FD2A                            
0001FD2A                            loc2_1AF40:
0001FD2A 4A29 0021                  		tst.b	$21(a1)
0001FD2E 6700                       		beq.s	Touch_KillEnemy
0001FD30 4468 0010                  		neg.w	$10(a0)
0001FD34 E0E8 0010                  		asr	$10(a0)
0001FD38 137C 0000 0020             		move.b	#0,$20(a1)
0001FD3E 5329 0021                  		subq.b	#1,$21(a1)
0001FD42 66E4                       		bne.s	locret_1AF68
0001FD44 08E9 0007 0022             		bset	#7,$22(a1)
0001FD4A                            ; ===========================================================================
0001FD4A                            
0001FD4A                            Touch_KillEnemy:
0001FD4A 08E9 0007 0022             		bset	#7,$22(a1)
0001FD50 7000                       		moveq	#0,d0
0001FD52 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001FD56 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001FD5A 0C40 0006                  		cmpi.w	#6,d0
0001FD5E 6500                       		bcs.s	loc_1AF82
0001FD60 7006                       		moveq	#6,d0
0001FD62                            
0001FD62                            loc_1AF82:
0001FD62 3340 003E                  		move.w	d0,$3E(a1)
0001FD66 45FA 0000                  		lea Enemy_Points(pc),a2
0001FD6A 3032 0000                  		move.w (a2,d0.w),d0
0001FD6E 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001FD74 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001FD76 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001FD7A 337C 000A 003E             		move.w	#$A,$3E(a1)
0001FD80                            
0001FD80                            loc_1AF9C:
0001FD80 0C28 0024 001C             		cmpi.b	#$24,$1C(a0)	; is Sonic Stomping?
0001FD86 6700 0000                  		beq.w	loc2_1AF9C	; if yes, branch
0001FD8A 0C28 0025 001C             		cmpi.b	#$25,$1C(a0)	; is Sonic Stomping?
0001FD90 6700 0000                  		beq.w	loc2_1AF9C	; if yes, branch
0001FD94 6100 0000                  		bsr.w	AddPoints
0001FD98 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001FD9C 137C 0000 0024             		move.b	#0,$24(a1)
0001FDA2 4A68 0012                  		tst.w	$12(a0)
0001FDA6 6B00                       		bmi.s	loc_1AFC2
0001FDA8 3028 000C                  		move.w	$C(a0),d0
0001FDAC B069 000C                  		cmp.w	$C(a1),d0
0001FDB0 6400                       		bcc.s	loc_1AFCA
0001FDB2 4468 0012                  		neg.w	$12(a0)
0001FDB6 4E75                       		rts	
0001FDB8                            
0001FDB8                            loc2_1AF9C:
0001FDB8 6100 0000                  		bsr.w	AddPoints
0001FDBC 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001FDC0 137C 0000 0024             		move.b	#0,$24(a1)
0001FDC6 4A68 0012                  		tst.w	$12(a0)
0001FDCA 6B00                       		bmi.s	loc_1AFC2
0001FDCC 3028 000C                  		move.w	$C(a0),d0
0001FDD0 B069 000C                  		cmp.w	$C(a1),d0
0001FDD4 6400                       		bcc.s	loc_1AFCA
0001FDD6                            ;		neg.w	$12(a0)
0001FDD6 4E75                       		rts	
0001FDD8                            ; ===========================================================================
0001FDD8                            
0001FDD8                            loc_1AFC2:
0001FDD8 0668 0100 0012             		addi.w	#$100,$12(a0)
0001FDDE 4E75                       		rts	
0001FDE0                            ; ===========================================================================
0001FDE0                            
0001FDE0                            loc_1AFCA:
0001FDE0 0468 0100 0012             		subi.w	#$100,$12(a0)
0001FDE6 4E75                       		rts	
0001FDE8                            ; ===========================================================================
0001FDE8 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001FDF0                            ; ===========================================================================
0001FDF0                            
0001FDF0                            loc_1AFDA:				; XREF: Touch_CatKiller
0001FDF0 08E9 0007 0022             		bset	#7,$22(a1)
0001FDF6                            
0001FDF6                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001FDF6 0C10 0002                  		cmp.b	#2,0(a0)
0001FDFA 6700                       		beq.s	loc_1AFE6
0001FDFC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001FE00 6700                       		beq.s	Touch_Hurt	; if not, branch
0001FE02                            
0001FE02                            loc_1AFE6:				; XREF: Touch_Hurt
0001FE02 70FF                       		moveq	#-1,d0
0001FE04 4E75                       		rts	
0001FE06                            ; ===========================================================================
0001FE06                            
0001FE06                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001FE06 4E71                       		nop	
0001FE08 4A68 0030                  		tst.w	$30(a0)
0001FE0C 66F4                       		bne.s	loc_1AFE6
0001FE0E 2449                       		movea.l	a1,a2
0001FE10                            
0001FE10                            ; End of function TouchResponse
0001FE10                            ; continue straight to HurtSonic
0001FE10                            
0001FE10                            ; ---------------------------------------------------------------------------
0001FE10                            ; Hurting Sonic	subroutine
0001FE10                            ; ---------------------------------------------------------------------------
0001FE10                            
0001FE10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE10                            
0001FE10                            
0001FE10                            HurtSonic:
0001FE10 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001FE14 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001FE16 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001FE1A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001FE1E 4EB9 0001 0E72             		jsr	SingleObjLoad
0001FE24 6600                       		bne.s	Hurt_Shield
0001FE26 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001FE2A 3368 0008 0008             		move.w	8(a0),8(a1)
0001FE30 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001FE36                            
0001FE36                            Hurt_Shield:
0001FE36 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001FE3C 117C 0004 0024             		move.b	#4,$24(a0)
0001FE42 4EB9 0001 7808             		jsr		Sonic_ResetOnFloor
0001FE48 08E8 0001 0022             		bset	#1,$22(a0)
0001FE4E 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001FE54 317C FE00 0010             		move.w	#-$200,$10(a0)
0001FE5A 0828 0006 0022             		btst	#6,$22(a0)
0001FE60 6700                       		beq.s	Hurt_Reverse
0001FE62 317C FE00 0012             		move.w	#-$200,$12(a0)
0001FE68 317C FF00 0010             		move.w	#-$100,$10(a0)
0001FE6E                            
0001FE6E                            Hurt_Reverse:
0001FE6E 3028 0008                  		move.w	8(a0),d0
0001FE72 B06A 0008                  		cmp.w	8(a2),d0
0001FE76 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001FE78 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001FE7C                            
0001FE7C                            Hurt_ChkSpikes:
0001FE7C 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
0001FE82 317C 0000 0014             		move.w	#0,$14(a0)
0001FE88 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001FE8E 317C 0078 0030             		move.w	#$78,$30(a0)
0001FE94 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001FE98 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001FE9C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001FE9E 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001FEA2 6600                       		bne.s	Hurt_Sound	; if not, branch
0001FEA4 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001FEA8                            
0001FEA8                            Hurt_Sound:
0001FEA8 303C 00A3                  		move.w	#$A3,d0			;
0001FEAC 4EB9 0000 110E             		jsr	(PlaySound_Special).l
0001FEB2 70FF                       		moveq	#-1,d0
0001FEB4 4E75                       		rts	
0001FEB6                            ; ===========================================================================
0001FEB6                            
0001FEB6                            Hurt_NoRings:
0001FEB6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001FEBA 6600 FF7A                  		bne.w	Hurt_Shield	; if yes, branch
0001FEBE                            ; End of function HurtSonic
0001FEBE                            
0001FEBE                            ; ---------------------------------------------------------------------------
0001FEBE                            ; Subroutine to	kill Sonic
0001FEBE                            ; ---------------------------------------------------------------------------
0001FEBE                            
0001FEBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEBE                            
0001FEBE                            
0001FEBE                            KillSonic:
0001FEBE 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001FEC2 31FC 0600 F760             		move.w #$600,(Sonic_top_speed).w ; Revert speeds
0001FEC8 31FC 000C F762             		move.w #$C,(Sonic_acceleration).w ; ^^^
0001FECE 31FC 0080 F764             		move.w #$80,(Sonic_deceleration).w ; ^^^
0001FED4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001FED8 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001FEDA 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001FEE0 117C 0006 0024             		move.b	#6,$24(a0)
0001FEE6 4EB9 0001 7808             		jsr		Sonic_ResetOnFloor
0001FEEC 08E8 0001 0022             		bset	#1,$22(a0)
0001FEF2 317C F900 0012             		move.w	#-$700,$12(a0)
0001FEF8 317C 0000 0010             		move.w	#0,$10(a0)
0001FEFE 317C 0000 0014             		move.w	#0,$14(a0)
0001FF04 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001FF0A 117C 0018 001C             		move.b	#$18,$1C(a0)
0001FF10 08E8 0007 0002             		bset	#7,2(a0)
0001FF16 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001FF1A 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001FF1E 6600                       		bne.s	Kill_Sound
0001FF20 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001FF24                            
0001FF24                            Kill_Sound:
0001FF24 4EB9 0000 110E             		jsr	(PlaySound_Special).l
0001FF2A 708C                       		moveq	#$FFFFFF8C,d0
0001FF2C 4EB8 10E6                  		jsr	PlaySample
0001FF30                            
0001FF30                            Kill_NoDeath:
0001FF30 70FF                       		moveq	#-1,d0
0001FF32 4E75                       		rts	
0001FF34                            ; End of function KillSonic
0001FF34                            
0001FF34                            
0001FF34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF34                            
0001FF34                            
0001FF34                            Touch_Special:				; XREF: Touch_ChkValue
0001FF34 0C10 0002                  		cmp.b	#2,0(a0)
0001FF38 6700                       		beq.s	@end
0001FF3A                            
0001FF3A 1229 0020                  		move.b	$20(a1),d1
0001FF3E 0201 003F                  		andi.b	#$3F,d1
0001FF42 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001FF46 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001FF48 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001FF4C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001FF4E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001FF52 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001FF54 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001FF58 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001FF5A                            		
0001FF5A                            @end:
0001FF5A 4E75                       		rts	
0001FF5C                            ; ===========================================================================
0001FF5C                            
0001FF5C                            Touch_CatKiller:			; XREF: Touch_Special
0001FF5C 6000 FE92                  		bra.w	loc_1AFDA
0001FF60                            ; ===========================================================================
0001FF60                            
0001FF60                            Touch_Yadrin:				; XREF: Touch_Special
0001FF60 9A40                       		sub.w	d0,d5
0001FF62 0C45 0008                  		cmpi.w	#8,d5
0001FF66 6400                       		bcc.s	loc_1B144
0001FF68 3029 0008                  		move.w	8(a1),d0
0001FF6C 5940                       		subq.w	#4,d0
0001FF6E 0829 0000 0022             		btst	#0,$22(a1)
0001FF74 6700                       		beq.s	loc_1B130
0001FF76 0440 0010                  		subi.w	#$10,d0
0001FF7A                            
0001FF7A                            loc_1B130:
0001FF7A 9042                       		sub.w	d2,d0
0001FF7C 6400                       		bcc.s	loc_1B13C
0001FF7E 0640 0018                  		addi.w	#$18,d0
0001FF82 6500                       		bcs.s	loc_1B140
0001FF84 6000                       		bra.s	loc_1B144
0001FF86                            ; ===========================================================================
0001FF86                            
0001FF86                            loc_1B13C:
0001FF86 B044                       		cmp.w	d4,d0
0001FF88 6200                       		bhi.s	loc_1B144
0001FF8A                            
0001FF8A                            loc_1B140:
0001FF8A 6000 FE6A                  		bra.w	Touch_ChkHurt
0001FF8E                            ; ===========================================================================
0001FF8E                            
0001FF8E                            loc_1B144:
0001FF8E 6000 FD3C                  		bra.w	Touch_Enemy
0001FF92                            ; ===========================================================================
0001FF92                            
0001FF92                            Touch_D7orE1:				; XREF: Touch_Special
0001FF92 5229 0021                  		addq.b	#1,$21(a1)
0001FF96 4E75                       		rts	
0001FF98                            ; End of function Touch_Special
0001FF98                            
0001FF98                            ; ---------------------------------------------------------------------------
0001FF98                            ; Subroutine to	show the special stage layout
0001FF98                            ; ---------------------------------------------------------------------------
0001FF98                            
0001FF98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF98                            
0001FF98                            
0001FF98                            SS_ShowLayout:				; XREF: SpecialStage
0001FF98 6100 0000                  		bsr.w	SS_AniWallsRings
0001FF9C 6100 0000                  		bsr.w	SS_AniItems
0001FFA0 3F05                       		move.w	d5,-(sp)
0001FFA2 43F8 8000                  		lea	($FFFF8000).w,a1
0001FFA6 1038 F780                  		move.b	($FFFFF780).w,d0
0001FFAA 0200 00FC                  		andi.b	#$FC,d0
0001FFAE 4EB9 0000 3736             		jsr	(CalcSine).l
0001FFB4 3800                       		move.w	d0,d4
0001FFB6 3A01                       		move.w	d1,d5
0001FFB8 C9FC 0018                  		muls.w	#$18,d4
0001FFBC CBFC 0018                  		muls.w	#$18,d5
0001FFC0 7400                       		moveq	#0,d2
0001FFC2 3438 F700                  		move.w	($FFFFF700).w,d2
0001FFC6 84FC 0018                  		divu.w	#$18,d2
0001FFCA 4842                       		swap	d2
0001FFCC 4442                       		neg.w	d2
0001FFCE 0642 FF4C                  		addi.w	#-$B4,d2
0001FFD2 7600                       		moveq	#0,d3
0001FFD4 3638 F704                  		move.w	($FFFFF704).w,d3
0001FFD8 86FC 0018                  		divu.w	#$18,d3
0001FFDC 4843                       		swap	d3
0001FFDE 4443                       		neg.w	d3
0001FFE0 0643 FF4C                  		addi.w	#-$B4,d3
0001FFE4 3E3C 000F                  		move.w	#$F,d7
0001FFE8                            
0001FFE8                            loc_1B19E:
0001FFE8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001FFEC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001FFF0 4440                       		neg.w	d0
0001FFF2 C3C2                       		muls.w	d2,d1
0001FFF4 C1C3                       		muls.w	d3,d0
0001FFF6 2C00                       		move.l	d0,d6
0001FFF8 DC81                       		add.l	d1,d6
0001FFFA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001FFFE C1C2                       		muls.w	d2,d0
00020000 C3C3                       		muls.w	d3,d1
00020002 D280                       		add.l	d0,d1
00020004 2406                       		move.l	d6,d2
00020006 3C3C 000F                  		move.w	#$F,d6
0002000A                            
0002000A                            loc_1B1C0:
0002000A 2002                       		move.l	d2,d0
0002000C E080                       		asr.l	#8,d0
0002000E 32C0                       		move.w	d0,(a1)+
00020010 2001                       		move.l	d1,d0
00020012 E080                       		asr.l	#8,d0
00020014 32C0                       		move.w	d0,(a1)+
00020016 D485                       		add.l	d5,d2
00020018 D284                       		add.l	d4,d1
0002001A 51CE FFEE                  		dbf	d6,loc_1B1C0
0002001E                            
0002001E 4C9F 0007                  		movem.w	(sp)+,d0-d2
00020022 0643 0018                  		addi.w	#$18,d3
00020026 51CF FFC0                  		dbf	d7,loc_1B19E
0002002A                            
0002002A 3A1F                       		move.w	(sp)+,d5
0002002C 41F9 00FF 0000             		lea	($FF0000).l,a0
00020032 7000                       		moveq	#0,d0
00020034 3038 F704                  		move.w	($FFFFF704).w,d0
00020038 80FC 0018                  		divu.w	#$18,d0
0002003C C0FC 0080                  		mulu.w	#$80,d0
00020040 D1C0                       		adda.l	d0,a0
00020042 7000                       		moveq	#0,d0
00020044 3038 F700                  		move.w	($FFFFF700).w,d0
00020048 80FC 0018                  		divu.w	#$18,d0
0002004C D0C0                       		adda.w	d0,a0
0002004E 49F8 8000                  		lea	($FFFF8000).w,a4
00020052 3E3C 000F                  		move.w	#$F,d7
00020056                            
00020056                            loc_1B20C:
00020056 3C3C 000F                  		move.w	#$F,d6
0002005A                            
0002005A                            loc_1B210:
0002005A 7000                       		moveq	#0,d0
0002005C 1018                       		move.b	(a0)+,d0
0002005E 6700                       		beq.s	loc_1B268
00020060 0C00 004E                  		cmpi.b	#$4E,d0
00020064 6200                       		bhi.s	loc_1B268
00020066 3614                       		move.w	(a4),d3
00020068 0643 0120                  		addi.w	#$120,d3
0002006C 0C43 0070                  		cmpi.w	#$70,d3
00020070 6500                       		bcs.s	loc_1B268
00020072 0C43 01D0                  		cmpi.w	#$1D0,d3
00020076 6400                       		bcc.s	loc_1B268
00020078 342C 0002                  		move.w	2(a4),d2
0002007C 0642 00F0                  		addi.w	#$F0,d2
00020080 0C42 0070                  		cmpi.w	#$70,d2
00020084 6500                       		bcs.s	loc_1B268
00020086 0C42 0170                  		cmpi.w	#$170,d2
0002008A 6400                       		bcc.s	loc_1B268
0002008C 4BF9 00FF 4000             		lea	($FF4000).l,a5
00020092 E748                       		lsl.w	#3,d0
00020094 4BF5 0000                  		lea	(a5,d0.w),a5
00020098 225D                       		movea.l	(a5)+,a1
0002009A 321D                       		move.w	(a5)+,d1
0002009C D241                       		add.w	d1,d1
0002009E D2F1 1000                  		adda.w	(a1,d1.w),a1
000200A2 365D                       		movea.w	(a5)+,a3
000200A4 7200                       		moveq	#0,d1
000200A6 1219                       		move.b	(a1)+,d1
000200A8 5301                       		subq.b	#1,d1
000200AA 6B00                       		bmi.s	loc_1B268
000200AC 4EB9 0001 0B3C             		jsr	sub_D762
000200B2                            
000200B2                            loc_1B268:
000200B2 584C                       		addq.w	#4,a4
000200B4 51CE FFA4                  		dbf	d6,loc_1B210
000200B8                            
000200B8 41E8 0070                  		lea	$70(a0),a0
000200BC 51CF FF98                  		dbf	d7,loc_1B20C
000200C0                            
000200C0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
000200C4 0C05 0050                  		cmpi.b	#$50,d5
000200C8 6700                       		beq.s	loc_1B288
000200CA 24BC 0000 0000             		move.l	#0,(a2)
000200D0 4E75                       		rts	
000200D2                            ; ===========================================================================
000200D2                            
000200D2                            loc_1B288:
000200D2 157C 0000 FFFB             		move.b	#0,-5(a2)
000200D8 4E75                       		rts	
000200DA                            ; End of function SS_ShowLayout
000200DA                            
000200DA                            ; ---------------------------------------------------------------------------
000200DA                            ; Subroutine to	animate	walls and rings	in the special stage
000200DA                            ; ---------------------------------------------------------------------------
000200DA                            
000200DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000200DA                            
000200DA                            
000200DA                            SS_AniWallsRings:			; XREF: SS_ShowLayout
000200DA 43F9 00FF 400C             		lea	($FF400C).l,a1
000200E0 7000                       		moveq	#0,d0
000200E2 1038 F780                  		move.b	($FFFFF780).w,d0
000200E6 E408                       		lsr.b	#2,d0
000200E8 0240 000F                  		andi.w	#$F,d0
000200EC 7223                       		moveq	#$23,d1
000200EE                            
000200EE                            loc_1B2A4:
000200EE 3280                       		move.w	d0,(a1)
000200F0 5049                       		addq.w	#8,a1
000200F2 51C9 FFFA                  		dbf	d1,loc_1B2A4
000200F6                            
000200F6 43F9 00FF 4005             		lea	($FF4005).l,a1
000200FC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00020100 6A00                       		bpl.s	loc_1B2C8
00020102 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00020108 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0002010C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00020112                            
00020112                            loc_1B2C8:
00020112 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
00020118 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0002011C 6A00                       		bpl.s	loc_1B2E4
0002011E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00020124 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00020128 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0002012E                            
0002012E                            loc_1B2E4:
0002012E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
00020132 1340 0138                  		move.b	d0,$138(a1)
00020136 1340 0160                  		move.b	d0,$160(a1)
0002013A 1340 0148                  		move.b	d0,$148(a1)
0002013E 1340 0150                  		move.b	d0,$150(a1)
00020142 1340 01D8                  		move.b	d0,$1D8(a1)
00020146 1340 01E0                  		move.b	d0,$1E0(a1)
0002014A 1340 01E8                  		move.b	d0,$1E8(a1)
0002014E 1340 01F0                  		move.b	d0,$1F0(a1)
00020152 1340 01F8                  		move.b	d0,$1F8(a1)
00020156 1340 0200                  		move.b	d0,$200(a1)
0002015A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0002015E 6A00                       		bpl.s	loc_1B326
00020160 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
00020166 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0002016A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
00020170                            
00020170                            loc_1B326:
00020170 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
00020174 1340 0168                  		move.b	d0,$168(a1)
00020178 1340 0170                  		move.b	d0,$170(a1)
0002017C 1340 0178                  		move.b	d0,$178(a1)
00020180 1340 0180                  		move.b	d0,$180(a1)
00020184 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00020188 6A00                       		bpl.s	loc_1B350
0002018A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
00020190 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00020194 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0002019A                            
0002019A                            loc_1B350:
0002019A 43F9 00FF 4016             		lea	($FF4016).l,a1
000201A0 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
000201A6 7000                       		moveq	#0,d0
000201A8 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000201AC D040                       		add.w	d0,d0
000201AE 41F0 0000                  		lea	(a0,d0.w),a0
000201B2 3290                       		move.w	(a0),(a1)
000201B4 3368 0002 0008             		move.w	2(a0),8(a1)
000201BA 3368 0004 0010             		move.w	4(a0),$10(a1)
000201C0 3368 0006 0018             		move.w	6(a0),$18(a1)
000201C6 3368 0008 0020             		move.w	8(a0),$20(a1)
000201CC 3368 000A 0028             		move.w	$A(a0),$28(a1)
000201D2 3368 000C 0030             		move.w	$C(a0),$30(a1)
000201D8 3368 000E 0038             		move.w	$E(a0),$38(a1)
000201DE D0FC 0020                  		adda.w	#$20,a0
000201E2 D2FC 0048                  		adda.w	#$48,a1
000201E6 3290                       		move.w	(a0),(a1)
000201E8 3368 0002 0008             		move.w	2(a0),8(a1)
000201EE 3368 0004 0010             		move.w	4(a0),$10(a1)
000201F4 3368 0006 0018             		move.w	6(a0),$18(a1)
000201FA 3368 0008 0020             		move.w	8(a0),$20(a1)
00020200 3368 000A 0028             		move.w	$A(a0),$28(a1)
00020206 3368 000C 0030             		move.w	$C(a0),$30(a1)
0002020C 3368 000E 0038             		move.w	$E(a0),$38(a1)
00020212 D0FC 0020                  		adda.w	#$20,a0
00020216 D2FC 0048                  		adda.w	#$48,a1
0002021A 3290                       		move.w	(a0),(a1)
0002021C 3368 0002 0008             		move.w	2(a0),8(a1)
00020222 3368 0004 0010             		move.w	4(a0),$10(a1)
00020228 3368 0006 0018             		move.w	6(a0),$18(a1)
0002022E 3368 0008 0020             		move.w	8(a0),$20(a1)
00020234 3368 000A 0028             		move.w	$A(a0),$28(a1)
0002023A 3368 000C 0030             		move.w	$C(a0),$30(a1)
00020240 3368 000E 0038             		move.w	$E(a0),$38(a1)
00020246 D0FC 0020                  		adda.w	#$20,a0
0002024A D2FC 0048                  		adda.w	#$48,a1
0002024E 3290                       		move.w	(a0),(a1)
00020250 3368 0002 0008             		move.w	2(a0),8(a1)
00020256 3368 0004 0010             		move.w	4(a0),$10(a1)
0002025C 3368 0006 0018             		move.w	6(a0),$18(a1)
00020262 3368 0008 0020             		move.w	8(a0),$20(a1)
00020268 3368 000A 0028             		move.w	$A(a0),$28(a1)
0002026E 3368 000C 0030             		move.w	$C(a0),$30(a1)
00020274 3368 000E 0038             		move.w	$E(a0),$38(a1)
0002027A D0FC 0020                  		adda.w	#$20,a0
0002027E D2FC 0048                  		adda.w	#$48,a1
00020282 4E75                       		rts	
00020284                            ; End of function SS_AniWallsRings
00020284                            
00020284                            ; ===========================================================================
00020284 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
00020294 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
000202A4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
000202B4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
000202C4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
000202D4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
000202E4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
000202F4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
00020304                            ; ---------------------------------------------------------------------------
00020304                            ; Subroutine to	remove items when you collect them in the special stage
00020304                            ; ---------------------------------------------------------------------------
00020304                            
00020304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020304                            
00020304                            
00020304                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
00020304 45F9 00FF 4400             		lea	($FF4400).l,a2
0002030A 303C 001F                  		move.w	#$1F,d0
0002030E                            
0002030E                            loc_1B4C4:
0002030E 4A12                       		tst.b	(a2)
00020310 6700                       		beq.s	locret_1B4CE
00020312 504A                       		addq.w	#8,a2
00020314 51C8 FFF8                  		dbf	d0,loc_1B4C4
00020318                            
00020318                            locret_1B4CE:
00020318 4E75                       		rts	
0002031A                            ; End of function SS_RemoveCollectedItem
0002031A                            
0002031A                            ; ---------------------------------------------------------------------------
0002031A                            ; Subroutine to	animate	special	stage items when you touch them
0002031A                            ; ---------------------------------------------------------------------------
0002031A                            
0002031A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002031A                            
0002031A                            
0002031A                            SS_AniItems:				; XREF: SS_ShowLayout
0002031A 41F9 00FF 4400             		lea	($FF4400).l,a0
00020320 3E3C 001F                  		move.w	#$1F,d7
00020324                            
00020324                            loc_1B4DA:
00020324 7000                       		moveq	#0,d0
00020326 1010                       		move.b	(a0),d0
00020328 6700                       		beq.s	loc_1B4E8
0002032A E548                       		lsl.w	#2,d0
0002032C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
00020330 4E91                       		jsr	(a1)
00020332                            
00020332                            loc_1B4E8:
00020332 5048                       		addq.w	#8,a0
00020334                            
00020334                            loc_1B4EA:
00020334 51CF FFEE                  		dbf	d7,loc_1B4DA
00020338                            
00020338 4E75                       		rts	
0002033A                            ; End of function SS_AniItems
0002033A                            
0002033A                            ; ===========================================================================
0002033A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0002033E 0000 0000                  		dc.l SS_AniBumper
00020342 0000 0000                  		dc.l SS_Ani1Up
00020346 0000 0000                  		dc.l SS_AniReverse
0002034A 0000 0000                  		dc.l SS_AniEmeraldSparks
0002034E 0000 0000                  		dc.l SS_AniGlassBlock
00020352                            ; ===========================================================================
00020352                            
00020352                            SS_AniRingSparks:			; XREF: SS_AniIndex
00020352 5328 0002                  		subq.b	#1,2(a0)
00020356 6A00                       		bpl.s	locret_1B530
00020358 117C 0005 0002             		move.b	#5,2(a0)
0002035E 7000                       		moveq	#0,d0
00020360 1028 0003                  		move.b	3(a0),d0
00020364 5228 0003                  		addq.b	#1,3(a0)
00020368 2268 0004                  		movea.l	4(a0),a1
0002036C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
00020370 1280                       		move.b	d0,(a1)
00020372 6600                       		bne.s	locret_1B530
00020374 4290                       		clr.l	(a0)
00020376 42A8 0004                  		clr.l	4(a0)
0002037A                            
0002037A                            locret_1B530:
0002037A 4E75                       		rts	
0002037C                            ; ===========================================================================
0002037C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
00020382                            ; ===========================================================================
00020382                            
00020382                            SS_AniBumper:				; XREF: SS_AniIndex
00020382 5328 0002                  		subq.b	#1,2(a0)
00020386 6A00                       		bpl.s	locret_1B566
00020388 117C 0007 0002             		move.b	#7,2(a0)
0002038E 7000                       		moveq	#0,d0
00020390 1028 0003                  		move.b	3(a0),d0
00020394 5228 0003                  		addq.b	#1,3(a0)
00020398 2268 0004                  		movea.l	4(a0),a1
0002039C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
000203A0 6600                       		bne.s	loc_1B564
000203A2 4290                       		clr.l	(a0)
000203A4 42A8 0004                  		clr.l	4(a0)
000203A8 12BC 0025                  		move.b	#$25,(a1)
000203AC 4E75                       		rts	
000203AE                            ; ===========================================================================
000203AE                            
000203AE                            loc_1B564:
000203AE 1280                       		move.b	d0,(a1)
000203B0                            
000203B0                            locret_1B566:
000203B0 4E75                       		rts	
000203B2                            ; ===========================================================================
000203B2 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
000203B8                            ; ===========================================================================
000203B8                            
000203B8                            SS_Ani1Up:				; XREF: SS_AniIndex
000203B8 5328 0002                  		subq.b	#1,2(a0)
000203BC 6A00                       		bpl.s	locret_1B596
000203BE 117C 0005 0002             		move.b	#5,2(a0)
000203C4 7000                       		moveq	#0,d0
000203C6 1028 0003                  		move.b	3(a0),d0
000203CA 5228 0003                  		addq.b	#1,3(a0)
000203CE 2268 0004                  		movea.l	4(a0),a1
000203D2 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
000203D6 1280                       		move.b	d0,(a1)
000203D8 6600                       		bne.s	locret_1B596
000203DA 4290                       		clr.l	(a0)
000203DC 42A8 0004                  		clr.l	4(a0)
000203E0                            
000203E0                            locret_1B596:
000203E0 4E75                       		rts	
000203E2                            ; ===========================================================================
000203E2 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
000203E8                            ; ===========================================================================
000203E8                            
000203E8                            SS_AniReverse:				; XREF: SS_AniIndex
000203E8 5328 0002                  		subq.b	#1,2(a0)
000203EC 6A00                       		bpl.s	locret_1B5CC
000203EE 117C 0007 0002             		move.b	#7,2(a0)
000203F4 7000                       		moveq	#0,d0
000203F6 1028 0003                  		move.b	3(a0),d0
000203FA 5228 0003                  		addq.b	#1,3(a0)
000203FE 2268 0004                  		movea.l	4(a0),a1
00020402 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
00020406 6600                       		bne.s	loc_1B5CA
00020408 4290                       		clr.l	(a0)
0002040A 42A8 0004                  		clr.l	4(a0)
0002040E 12BC 002B                  		move.b	#$2B,(a1)
00020412 4E75                       		rts	
00020414                            ; ===========================================================================
00020414                            
00020414                            loc_1B5CA:
00020414 1280                       		move.b	d0,(a1)
00020416                            
00020416                            locret_1B5CC:
00020416 4E75                       		rts	
00020418                            ; ===========================================================================
00020418 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0002041E                            ; ===========================================================================
0002041E                            
0002041E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0002041E 5328 0002                  		subq.b	#1,2(a0)
00020422 6A00                       		bpl.s	locret_1B60C
00020424 117C 0005 0002             		move.b	#5,2(a0)
0002042A 7000                       		moveq	#0,d0
0002042C 1028 0003                  		move.b	3(a0),d0
00020430 5228 0003                  		addq.b	#1,3(a0)
00020434 2268 0004                  		movea.l	4(a0),a1
00020438 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0002043C 1280                       		move.b	d0,(a1)
0002043E 6600                       		bne.s	locret_1B60C
00020440 4290                       		clr.l	(a0)
00020442 42A8 0004                  		clr.l	4(a0)
00020446 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0002044C 303C 00A8                  		move.w	#$A8,d0
00020450 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
00020456                            
00020456                            locret_1B60C:
00020456 4E75                       		rts	
00020458                            ; ===========================================================================
00020458 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0002045E                            ; ===========================================================================
0002045E                            
0002045E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0002045E 5328 0002                  		subq.b	#1,2(a0)
00020462 6A00                       		bpl.s	locret_1B640
00020464 117C 0001 0002             		move.b	#1,2(a0)
0002046A 7000                       		moveq	#0,d0
0002046C 1028 0003                  		move.b	3(a0),d0
00020470 5228 0003                  		addq.b	#1,3(a0)
00020474 2268 0004                  		movea.l	4(a0),a1
00020478 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0002047C 1280                       		move.b	d0,(a1)
0002047E 6600                       		bne.s	locret_1B640
00020480 12A8 0004                  		move.b	4(a0),(a1)
00020484 4290                       		clr.l	(a0)
00020486 42A8 0004                  		clr.l	4(a0)
0002048A                            
0002048A                            locret_1B640:
0002048A 4E75                       		rts	
0002048C                            ; ===========================================================================
0002048C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
00020496                            ; ---------------------------------------------------------------------------
00020496                            ; Special stage	layout pointers
00020496                            ; ---------------------------------------------------------------------------
00020496                            SS_LayoutIndex:
00020496                            	include "_inc\Special stage layout pointers.asm"
00020496                            ; ---------------------------------------------------------------------------
00020496                            ; Special stage	layout pointers
00020496                            ; ---------------------------------------------------------------------------
00020496 0000 0000                  	dc.l SS_1
0002049A 0000 0000                  	dc.l SS_2
0002049E 0000 0000                  	dc.l SS_3
000204A2 0000 0000                  	dc.l SS_4
000204A6 0000 0000                  	dc.l SS_5
000204AA 0000 0000                  	dc.l SS_6
000204AE                            	even
000204AE                            	even
000204AE                            
000204AE                            ; ---------------------------------------------------------------------------
000204AE                            ; Special stage	start locations
000204AE                            ; ---------------------------------------------------------------------------
000204AE                            SS_StartLoc:	incbin	misc\sloc_ss.bin
000204C6                            		even
000204C6                            
000204C6                            ; ---------------------------------------------------------------------------
000204C6                            ; Subroutine to	load special stage layout
000204C6                            ; ---------------------------------------------------------------------------
000204C6                            
000204C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000204C6                            
000204C6                            
000204C6                            SS_Load:				; XREF: SpecialStage
000204C6 7000                       		moveq	#0,d0
000204C8 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
000204CC 5238 FE16                  		addq.b	#1,($FFFFFE16).w
000204D0 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
000204D6 6500                       		bcs.s	SS_ChkEmldNum
000204D8 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
000204DE                            
000204DE                            SS_ChkEmldNum:
000204DE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
000204E4 6700                       		beq.s	SS_LoadData	; if yes, branch
000204E6 7200                       		moveq	#0,d1
000204E8 1238 FE57                  		move.b	($FFFFFE57).w,d1
000204EC 5301                       		subq.b	#1,d1
000204EE 6500                       		bcs.s	SS_LoadData
000204F0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
000204F4                            
000204F4                            SS_ChkEmldLoop:	
000204F4 B033 1000                  		cmp.b	(a3,d1.w),d0
000204F8 6600                       		bne.s	SS_ChkEmldRepeat
000204FA 60CA                       		bra.s	SS_Load
000204FC                            ; ===========================================================================
000204FC                            
000204FC                            SS_ChkEmldRepeat:
000204FC 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
00020500                            
00020500                            SS_LoadData:
00020500 E548                       		lsl.w	#2,d0
00020502 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
00020506 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0002050A 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0002050E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
00020512 43F9 00FF 4000             		lea	($FF4000).l,a1
00020518 303C 0000                  		move.w	#0,d0
0002051C 4EB9 0000 1540             		jsr	(EniDec).l
00020522 43F9 00FF 0000             		lea	($FF0000).l,a1
00020528 303C 0FFF                  		move.w	#$FFF,d0
0002052C                            
0002052C                            SS_ClrRAM3:
0002052C 4299                       		clr.l	(a1)+
0002052E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
00020532                            
00020532 43F9 00FF 1020             		lea	($FF1020).l,a1
00020538 41F9 00FF 4000             		lea	($FF4000).l,a0
0002053E 723F                       		moveq	#$3F,d1
00020540                            
00020540                            loc_1B6F6:
00020540 743F                       		moveq	#$3F,d2
00020542                            
00020542                            loc_1B6F8:
00020542 12D8                       		move.b	(a0)+,(a1)+
00020544 51CA FFFC                  		dbf	d2,loc_1B6F8
00020548                            
00020548 43E9 0040                  		lea	$40(a1),a1
0002054C 51C9 FFF2                  		dbf	d1,loc_1B6F6
00020550                            
00020550 43F9 00FF 4008             		lea	($FF4008).l,a1
00020556 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0002055C 724D                       		moveq	#$4D,d1
0002055E                            
0002055E                            loc_1B714:
0002055E 22D8                       		move.l	(a0)+,(a1)+
00020560 32FC 0000                  		move.w	#0,(a1)+
00020564 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0002056A 32D8                       		move.w	(a0)+,(a1)+
0002056C 51C9 FFF0                  		dbf	d1,loc_1B714
00020570                            
00020570 43F9 00FF 4400             		lea	($FF4400).l,a1
00020576 323C 003F                  		move.w	#$3F,d1
0002057A                            
0002057A                            loc_1B730:
0002057A                            
0002057A 4299                       		clr.l	(a1)+
0002057C 51C9 FFFC                  		dbf	d1,loc_1B730
00020580                            
00020580 4E75                       		rts	
00020582                            ; End of function SS_Load
00020582                            
00020582                            ; ===========================================================================
00020582                            ; ---------------------------------------------------------------------------
00020582                            ; Special stage	mappings and VRAM pointers
00020582                            ; ---------------------------------------------------------------------------
00020582                            SS_MapIndex:
00020582                            	include "_inc\Special stage mappings and VRAM pointers.asm"
00020582                            ; ---------------------------------------------------------------------------
00020582                            ; Special stage	mappings and VRAM pointers
00020582                            ; ---------------------------------------------------------------------------
00020582 0000 0000                  	dc.l Map_SSWalls	; address of mappings
00020586 0142                       	dc.w $142		; VRAM setting
00020588 0000 0000                  	dc.l Map_SSWalls
0002058C 0142                       	dc.w $142
0002058E 0000 0000                  	dc.l Map_SSWalls
00020592 0142                       	dc.w $142
00020594 0000 0000                  	dc.l Map_SSWalls
00020598 0142                       	dc.w $142
0002059A 0000 0000                  	dc.l Map_SSWalls
0002059E 0142                       	dc.w $142
000205A0 0000 0000                  	dc.l Map_SSWalls
000205A4 0142                       	dc.w $142
000205A6 0000 0000                  	dc.l Map_SSWalls
000205AA 0142                       	dc.w $142
000205AC 0000 0000                  	dc.l Map_SSWalls
000205B0 0142                       	dc.w $142
000205B2 0000 0000                  	dc.l Map_SSWalls
000205B6 0142                       	dc.w $142
000205B8 0000 0000                  	dc.l Map_SSWalls
000205BC 2142                       	dc.w $2142
000205BE 0000 0000                  	dc.l Map_SSWalls
000205C2 2142                       	dc.w $2142
000205C4 0000 0000                  	dc.l Map_SSWalls
000205C8 2142                       	dc.w $2142
000205CA 0000 0000                  	dc.l Map_SSWalls
000205CE 2142                       	dc.w $2142
000205D0 0000 0000                  	dc.l Map_SSWalls
000205D4 2142                       	dc.w $2142
000205D6 0000 0000                  	dc.l Map_SSWalls
000205DA 2142                       	dc.w $2142
000205DC 0000 0000                  	dc.l Map_SSWalls
000205E0 2142                       	dc.w $2142
000205E2 0000 0000                  	dc.l Map_SSWalls
000205E6 2142                       	dc.w $2142
000205E8 0000 0000                  	dc.l Map_SSWalls
000205EC 2142                       	dc.w $2142
000205EE 0000 0000                  	dc.l Map_SSWalls
000205F2 4142                       	dc.w $4142
000205F4 0000 0000                  	dc.l Map_SSWalls
000205F8 4142                       	dc.w $4142
000205FA 0000 0000                  	dc.l Map_SSWalls
000205FE 4142                       	dc.w $4142
00020600 0000 0000                  	dc.l Map_SSWalls
00020604 4142                       	dc.w $4142
00020606 0000 0000                  	dc.l Map_SSWalls
0002060A 4142                       	dc.w $4142
0002060C 0000 0000                  	dc.l Map_SSWalls
00020610 4142                       	dc.w $4142
00020612 0000 0000                  	dc.l Map_SSWalls
00020616 4142                       	dc.w $4142
00020618 0000 0000                  	dc.l Map_SSWalls
0002061C 4142                       	dc.w $4142
0002061E 0000 0000                  	dc.l Map_SSWalls
00020622 4142                       	dc.w $4142
00020624 0000 0000                  	dc.l Map_SSWalls
00020628 6142                       	dc.w $6142
0002062A 0000 0000                  	dc.l Map_SSWalls
0002062E 6142                       	dc.w $6142
00020630 0000 0000                  	dc.l Map_SSWalls
00020634 6142                       	dc.w $6142
00020636 0000 0000                  	dc.l Map_SSWalls
0002063A 6142                       	dc.w $6142
0002063C 0000 0000                  	dc.l Map_SSWalls
00020640 6142                       	dc.w $6142
00020642 0000 0000                  	dc.l Map_SSWalls
00020646 6142                       	dc.w $6142
00020648 0000 0000                  	dc.l Map_SSWalls
0002064C 6142                       	dc.w $6142
0002064E 0000 0000                  	dc.l Map_SSWalls
00020652 6142                       	dc.w $6142
00020654 0000 0000                  	dc.l Map_SSWalls
00020658 6142                       	dc.w $6142
0002065A 0001 1EF2                  	dc.l Map_obj47
0002065E 023B                       	dc.w $23B
00020660 0000 0000                  	dc.l Map_SS_R
00020664 0570                       	dc.w $570
00020666 0000 0000                  	dc.l Map_SS_R
0002066A 0251                       	dc.w $251
0002066C 0000 0000                  	dc.l Map_SS_R
00020670 0370                       	dc.w $370
00020672 0000 0000                  	dc.l Map_SS_Up
00020676 0263                       	dc.w $263
00020678 0000 0000                  	dc.l Map_SS_Down
0002067C 0263                       	dc.w $263
0002067E 0000 0000                  	dc.l Map_SS_R
00020682 22F0                       	dc.w $22F0
00020684 0000 0000                  	dc.l Map_SS_Glass
00020688 0470                       	dc.w $470
0002068A 0000 0000                  	dc.l Map_SS_Glass
0002068E 05F0                       	dc.w $5F0
00020690 0000 0000                  	dc.l Map_SS_Glass
00020694 65F0                       	dc.w $65F0
00020696 0000 0000                  	dc.l Map_SS_Glass
0002069A 25F0                       	dc.w $25F0
0002069C 0000 0000                  	dc.l Map_SS_Glass
000206A0 45F0                       	dc.w $45F0
000206A2 0000 0000                  	dc.l Map_SS_R
000206A6 02F0                       	dc.w $2F0
000206A8 0101 1EF2                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
000206AC 023B                       	dc.w $23B
000206AE 0201 1EF2                  	dc.l Map_obj47+$2000000
000206B2 023B                       	dc.w $23B
000206B4 0000 0000                  	dc.l Map_SS_R
000206B8 0797                       	dc.w $797
000206BA 0000 0000                  	dc.l Map_SS_R
000206BE 07A0                       	dc.w $7A0
000206C0 0000 0000                  	dc.l Map_SS_R
000206C4 07A9                       	dc.w $7A9
000206C6 0000 0000                  	dc.l Map_SS_R
000206CA 0797                       	dc.w $797
000206CC 0000 0000                  	dc.l Map_SS_R
000206D0 07A0                       	dc.w $7A0
000206D2 0000 0000                  	dc.l Map_SS_R
000206D6 07A9                       	dc.w $7A9
000206D8 0000 CF80                  	dc.l Map_obj25
000206DC 27B2                       	dc.w $27B2
000206DE 0000 0000                  	dc.l Map_SS_Chaos3
000206E2 0770                       	dc.w $770
000206E4 0000 0000                  	dc.l Map_SS_Chaos3
000206E8 2770                       	dc.w $2770
000206EA 0000 0000                  	dc.l Map_SS_Chaos3
000206EE 4770                       	dc.w $4770
000206F0 0000 0000                  	dc.l Map_SS_Chaos3
000206F4 6770                       	dc.w $6770
000206F6 0000 0000                  	dc.l Map_SS_Chaos1
000206FA 0770                       	dc.w $770
000206FC 0000 0000                  	dc.l Map_SS_Chaos2
00020700 0770                       	dc.w $770
00020702 0000 0000                  	dc.l Map_SS_R
00020706 04F0                       	dc.w $4F0
00020708 0400 CF80                  	dc.l Map_obj25+$4000000
0002070C 27B2                       	dc.w $27B2
0002070E 0500 CF80                  	dc.l Map_obj25+$5000000
00020712 27B2                       	dc.w $27B2
00020714 0600 CF80                  	dc.l Map_obj25+$6000000
00020718 27B2                       	dc.w $27B2
0002071A 0700 CF80                  	dc.l Map_obj25+$7000000
0002071E 27B2                       	dc.w $27B2
00020720 0000 0000                  	dc.l Map_SS_Glass
00020724 23F0                       	dc.w $23F0
00020726 0000 0000                  	dc.l Map_SS_Glass+$1000000
0002072A 23F0                       	dc.w $23F0
0002072C 0000 0000                  	dc.l Map_SS_Glass+$2000000
00020730 23F0                       	dc.w $23F0
00020732 0000 0000                  	dc.l Map_SS_Glass+$3000000
00020736 23F0                       	dc.w $23F0
00020738 0000 0000                  	dc.l Map_SS_R+$2000000
0002073C 04F0                       	dc.w $4F0
0002073E 0000 0000                  	dc.l Map_SS_Glass
00020742 05F0                       	dc.w $5F0
00020744 0000 0000                  	dc.l Map_SS_Glass
00020748 65F0                       	dc.w $65F0
0002074A 0000 0000                  	dc.l Map_SS_Glass
0002074E 25F0                       	dc.w $25F0
00020750 0000 0000                  	dc.l Map_SS_Glass
00020754 45F0                       	dc.w $45F0
00020754 45F0                       	dc.w $45F0
00020756                            
00020756                            ; ---------------------------------------------------------------------------
00020756                            ; Sprite mappings - special stage "R" block
00020756                            ; ---------------------------------------------------------------------------
00020756                            Map_SS_R:
00020756                            	include "_maps\SSRblock.asm"
00020756                            ; ---------------------------------------------------------------------------
00020756                            ; Sprite mappings - special stage "R" block
00020756                            ; ---------------------------------------------------------------------------
00020756 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0002075A 0000                       		dc.w byte_1B91E-Map_SS_R
0002075C 01                         byte_1B912:	dc.b 1
0002075D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00020762 01                         byte_1B918:	dc.b 1
00020763 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00020768 00                         byte_1B91E:	dc.b 0
0002076A 00                         		even
0002076A 00                         		even
0002076A                            
0002076A                            ; ---------------------------------------------------------------------------
0002076A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0002076A                            ; ---------------------------------------------------------------------------
0002076A                            Map_SS_Glass:
0002076A                            	include "_maps\SSglassblock.asm"
0002076A                            ; ---------------------------------------------------------------------------
0002076A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0002076A                            ; ---------------------------------------------------------------------------
0002076A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0002076E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
00020772 01                         byte_1B928:	dc.b 1
00020773 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00020778 01                         byte_1B92E:	dc.b 1
00020779 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0002077E 01                         byte_1B934:	dc.b 1
0002077F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
00020784 01                         byte_1B93A:	dc.b 1
00020785 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0002078A                            		even
0002078A                            		even
0002078A                            
0002078A                            ; ---------------------------------------------------------------------------
0002078A                            ; Sprite mappings - special stage "UP" block
0002078A                            ; ---------------------------------------------------------------------------
0002078A                            Map_SS_Up:
0002078A                            	include "_maps\SSUPblock.asm"
0002078A                            ; ---------------------------------------------------------------------------
0002078A                            ; Sprite mappings - special stage "UP" block
0002078A                            ; ---------------------------------------------------------------------------
0002078A 0000                       		dc.w byte_1B944-Map_SS_Up
0002078C 0000                       		dc.w byte_1B94A-Map_SS_Up
0002078E 01                         byte_1B944:	dc.b 1
0002078F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00020794 01                         byte_1B94A:	dc.b 1
00020795 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0002079A                            		even
0002079A                            		even
0002079A                            
0002079A                            ; ---------------------------------------------------------------------------
0002079A                            ; Sprite mappings - special stage "DOWN" block
0002079A                            ; ---------------------------------------------------------------------------
0002079A                            Map_SS_Down:
0002079A                            	include "_maps\SSDOWNblock.asm"
0002079A                            ; ---------------------------------------------------------------------------
0002079A                            ; Sprite mappings - special stage "DOWN" block
0002079A                            ; ---------------------------------------------------------------------------
0002079A 0000                       		dc.w byte_1B954-Map_SS_Down
0002079C 0000                       		dc.w byte_1B95A-Map_SS_Down
0002079E 01                         byte_1B954:	dc.b 1
0002079F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000207A4 01                         byte_1B95A:	dc.b 1
000207A5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000207AA                            		even
000207AA                            		even
000207AA                            
000207AA                            ; ---------------------------------------------------------------------------
000207AA                            ; Sprite mappings - special stage chaos	emeralds
000207AA                            ; ---------------------------------------------------------------------------
000207AA 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
000207AC 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
000207AE 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
000207B0 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
000207B2 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
000207B4 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
000207B6 01                         byte_1B96C:	dc.b 1
000207B7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000207BC 01                         byte_1B972:	dc.b 1
000207BD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000207C2 01                         byte_1B978:	dc.b 1
000207C3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000207C8 01                         byte_1B97E:	dc.b 1
000207C9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000207CE                            		even
000207CE                            ; ===========================================================================
000207CE                            ; ---------------------------------------------------------------------------
000207CE                            ; Object 09 - Sonic (special stage)
000207CE                            ; ---------------------------------------------------------------------------
000207CE                            
000207CE                            Obj09:					; XREF: Obj_Index
000207CE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000207D2 6700                       		beq.s	Obj09_Normal	; if not, branch
000207D4 6100 0000                  		bsr.w	SS_FixCamera
000207D8 6000 0000                  		bra.w	DebugMode
000207DC                            ; ===========================================================================
000207DC                            
000207DC                            Obj09_Normal:
000207DC 7000                       		moveq	#0,d0
000207DE 1028 0024                  		move.b	$24(a0),d0
000207E2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
000207E6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
000207EA                            ; ===========================================================================
000207EA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
000207EC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
000207EE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
000207F0 0000                       		dc.w Obj09_Exit2-Obj09_Index
000207F2                            ; ===========================================================================
000207F2                            
000207F2                            Obj09_Main:				; XREF: Obj09_Index
000207F2 5428 0024                  		addq.b	#2,$24(a0)
000207F6 117C 000E 0016             		move.b	#$E,$16(a0)
000207FC 117C 0007 0017             		move.b	#7,$17(a0)
00020802 0C38 0001 FFF6             		cmpi.b	#$01, ($FFFFFFF6).w ; if player flag set?
00020808 6700                       		beq.s	Shadow_SpecS
0002080A 0C38 0002 FFF6             		cmpi.b	#$02, ($FFFFFFF6).w ; if player flag set?
00020810 6700                       		beq.s	Metal_SpecS
00020812 0C38 0003 FFF6             		cmpi.b	#$03, ($FFFFFFF6).w ; if player flag set?
00020818 6600                       		bne.s	Sonic_SpecS
0002081A 217C 0000 0000 0004        		move.l	#Map_Mighty,4(a0)
00020822 4EF9 0000 0000             		jmp		SpecS_Continue
00020828                            
00020828                            Metal_SpecS:
00020828 217C 0000 0000 0004        		move.l	#Map_Metal,4(a0)
00020830 4EF9 0000 0000             		jmp		SpecS_Continue
00020836                            
00020836                            Shadow_SpecS:
00020836 217C 0000 0000 0004        		move.l	#Map_Shadow,4(a0)
0002083E 4EF9 0000 0000             		jmp		SpecS_Continue
00020844                            
00020844                            Sonic_SpecS:
00020844 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0002084C                            
0002084C                            SpecS_Continue:
0002084C 317C 0780 0002             		move.w	#$780,2(a0)
00020852 117C 0004 0001             		move.b	#4,1(a0)
00020858 117C 0000 0018             		move.b	#0,$18(a0)
0002085E 117C 0002 001C             		move.b	#2,$1C(a0)
00020864 08E8 0002 0022             		bset	#2,$22(a0)
0002086A 08E8 0001 0022             		bset	#1,$22(a0)
00020870                            
00020870                            Obj09_ChkDebug:				; XREF: Obj09_Index
00020870 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
00020874 6700                       		beq.s	Obj09_NoDebug	; if not, branch
00020876 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0002087C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0002087E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
00020884                            
00020884                            Obj09_NoDebug:
00020884 117C 0000 0030             		move.b	#0,$30(a0)
0002088A 7000                       		moveq	#0,d0
0002088C 1028 0022                  		move.b	$22(a0),d0
00020890 0240 0002                  		andi.w	#2,d0
00020894 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
00020898 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0002089C 4EB9 0001 86F6             		jsr	LoadSonicDynPLC
000208A2 4EF9 0001 09DC             		jmp	DisplaySprite
000208A8                            ; ===========================================================================
000208A8 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
000208AA 0000                       		dc.w Obj09_InAir-Obj09_Modes
000208AC                            ; ===========================================================================
000208AC                            
000208AC                            Obj09_OnWall:				; XREF: Obj09_Modes
000208AC 6100 0000                  		bsr.w	Obj09_Jump
000208B0 6100 0000                  		bsr.w	Obj09_Move
000208B4 6100 0000                  		bsr.w	Obj09_Fall
000208B8 6000                       		bra.s	Obj09_Display
000208BA 08A8 0007 0022             		bclr	#7,$22(a0)	; clear "Sonic has jumped" flag
000208C0                            ; ===========================================================================
000208C0                            
000208C0                            Obj09_InAir:				; XREF: Obj09_Modes
000208C0 6100 0000                  		bsr.w	Obj09_JumpHeight
000208C4 6100 0000                  		bsr.w	Obj09_Move
000208C8 6100 0000                  		bsr.w	Obj09_Fall
000208CC                            
000208CC                            Obj09_Display:				; XREF: Obj09_OnWall
000208CC 6100 0000                  		bsr.w	Obj09_ChkItems
000208D0 6100 0000                  		bsr.w	Obj09_ChkItems2
000208D4 4EB9 0001 09C2             		jsr	SpeedToPos
000208DA 6100 0000                  		bsr.w	SS_FixCamera
000208DE 3038 F780                  		move.w	($FFFFF780).w,d0
000208E2 D078 F782                  		add.w	($FFFFF782).w,d0
000208E6 31C0 F780                  		move.w	d0,($FFFFF780).w
000208EA 4EB9 0001 7A50             		jsr	Sonic_Animate
000208F0 4E75                       		rts	
000208F2                            
000208F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000208F2                            
000208F2                            
000208F2                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
000208F2 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000208F8 6700                       		beq.s	Obj09_ChkRight	; if not, branch
000208FA 6100 0000                  		bsr.w	Obj09_MoveLeft
000208FE                            
000208FE                            Obj09_ChkRight:
000208FE 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00020904 6700                       		beq.s	loc_1BA78	; if not, branch
00020906 6100 0000                  		bsr.w	Obj09_MoveRight
0002090A                            
0002090A                            loc_1BA78:
0002090A 1038 F602                  		move.b	($FFFFF602).w,d0
0002090E 0200 000C                  		andi.b	#$C,d0
00020912 6600                       		bne.s	loc_1BAA8
00020914 3028 0014                  		move.w	$14(a0),d0
00020918 6700                       		beq.s	loc_1BAA8
0002091A 6B00                       		bmi.s	loc_1BA9A
0002091C 0440 000C                  		subi.w	#$C,d0
00020920 6400                       		bcc.s	loc_1BA94
00020922 303C 0000                  		move.w	#0,d0
00020926                            
00020926                            loc_1BA94:
00020926 3140 0014                  		move.w	d0,$14(a0)
0002092A 6000                       		bra.s	loc_1BAA8
0002092C                            ; ===========================================================================
0002092C                            
0002092C                            loc_1BA9A:
0002092C 0640 000C                  		addi.w	#$C,d0
00020930 6400                       		bcc.s	loc_1BAA4
00020932 303C 0000                  		move.w	#0,d0
00020936                            
00020936                            loc_1BAA4:
00020936 3140 0014                  		move.w	d0,$14(a0)
0002093A                            
0002093A                            loc_1BAA8:
0002093A 1038 F780                  		move.b	($FFFFF780).w,d0
0002093E 0600 0020                  		addi.b	#$20,d0
00020942 0200 00C0                  		andi.b	#$C0,d0
00020946 4400                       		neg.b	d0
00020948 4EB9 0000 3736             		jsr	(CalcSine).l
0002094E C3E8 0014                  		muls.w	$14(a0),d1
00020952 D3A8 0008                  		add.l	d1,8(a0)
00020956 C1E8 0014                  		muls.w	$14(a0),d0
0002095A D1A8 000C                  		add.l	d0,$C(a0)
0002095E 48E7 C000                  		movem.l	d0-d1,-(sp)
00020962 2428 000C                  		move.l	$C(a0),d2
00020966 2628 0008                  		move.l	8(a0),d3
0002096A 6100 0000                  		bsr.w	sub_1BCE8
0002096E 6700                       		beq.s	loc_1BAF2
00020970 4CDF 0003                  		movem.l	(sp)+,d0-d1
00020974 93A8 0008                  		sub.l	d1,8(a0)
00020978 91A8 000C                  		sub.l	d0,$C(a0)
0002097C 317C 0000 0014             		move.w	#0,$14(a0)
00020982 4E75                       		rts	
00020984                            ; ===========================================================================
00020984                            
00020984                            loc_1BAF2:
00020984 4CDF 0003                  		movem.l	(sp)+,d0-d1
00020988 4E75                       		rts	
0002098A                            ; End of function Obj09_Move
0002098A                            
0002098A                            
0002098A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002098A                            
0002098A                            
0002098A                            Obj09_MoveLeft:				; XREF: Obj09_Move
0002098A 08E8 0000 0022             		bset	#0,$22(a0)
00020990 3028 0014                  		move.w	$14(a0),d0
00020994 6700                       		beq.s	loc_1BB06
00020996 6A00                       		bpl.s	loc_1BB1A
00020998                            
00020998                            loc_1BB06:
00020998 0440 000C                  		subi.w	#$C,d0
0002099C 0C40 F800                  		cmpi.w	#-$800,d0
000209A0 6E00                       		bgt.s	loc_1BB14
000209A2 303C F800                  		move.w	#-$800,d0
000209A6                            
000209A6                            loc_1BB14:
000209A6 3140 0014                  		move.w	d0,$14(a0)
000209AA 4E75                       		rts	
000209AC                            ; ===========================================================================
000209AC                            
000209AC                            loc_1BB1A:
000209AC 0440 0040                  		subi.w	#$40,d0
000209B0 6400                       		bcc.s	loc_1BB22
000209B2 4E71                       		nop	
000209B4                            
000209B4                            loc_1BB22:
000209B4 3140 0014                  		move.w	d0,$14(a0)
000209B8 4E75                       		rts	
000209BA                            ; End of function Obj09_MoveLeft
000209BA                            
000209BA                            
000209BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209BA                            
000209BA                            
000209BA                            Obj09_MoveRight:			; XREF: Obj09_Move
000209BA 08A8 0000 0022             		bclr	#0,$22(a0)
000209C0 3028 0014                  		move.w	$14(a0),d0
000209C4 6B00                       		bmi.s	loc_1BB48
000209C6 0640 000C                  		addi.w	#$C,d0
000209CA 0C40 0800                  		cmpi.w	#$800,d0
000209CE 6D00                       		blt.s	loc_1BB42
000209D0 303C 0800                  		move.w	#$800,d0
000209D4                            
000209D4                            loc_1BB42:
000209D4 3140 0014                  		move.w	d0,$14(a0)
000209D8 6000                       		bra.s	locret_1BB54
000209DA                            ; ===========================================================================
000209DA                            
000209DA                            loc_1BB48:
000209DA 0640 0040                  		addi.w	#$40,d0
000209DE 6400                       		bcc.s	loc_1BB50
000209E0 4E71                       		nop	
000209E2                            
000209E2                            loc_1BB50:
000209E2 3140 0014                  		move.w	d0,$14(a0)
000209E6                            
000209E6                            locret_1BB54:
000209E6 4E75                       		rts	
000209E8                            ; End of function Obj09_MoveRight
000209E8                            
000209E8                            
000209E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209E8                            
000209E8                            
000209E8                            Obj09_Jump:				; XREF: Obj09_OnWall
000209E8 1038 F603                  		move.b	($FFFFF603).w,d0
000209EC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000209F0 6700                       		beq.s	Obj09_NoJump	; if not, branch
000209F2 1038 F780                  		move.b	($FFFFF780).w,d0
000209F6 0200 00FC                  		andi.b	#$FC,d0
000209FA 4400                       		neg.b	d0
000209FC 0400 0040                  		subi.b	#$40,d0
00020A00 4EB9 0000 3736             		jsr	(CalcSine).l
00020A06 C3FC 0680                  		muls.w	#$680,d1
00020A0A E081                       		asr.l	#8,d1
00020A0C 3141 0010                  		move.w	d1,$10(a0)
00020A10 C1FC 0680                  		muls.w	#$680,d0
00020A14 E080                       		asr.l	#8,d0
00020A16 3140 0012                  		move.w	d0,$12(a0)
00020A1A 08E8 0001 0022             		bset	#1,$22(a0)
00020A20 08E8 0007 0022             		bset	#7,$22(a0)	; set "Sonic has jumped" flag
00020A26 303C 00A0                  		move.w	#$A0,d0
00020A2A 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play jumping sound
00020A30                            
00020A30                            Obj09_NoJump:
00020A30 4E75                       		rts	
00020A32                            ; End of function Obj09_Jump
00020A32                            
00020A32                            
00020A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A32                            
00020A32                            
00020A32                            ; ===========================================================================
00020A32                            ; ---------------------------------------------------------------------------
00020A32                            ; Subroutine to limit Sonic's upward vertical speed
00020A32                            ; ---------------------------------------------------------------------------
00020A32                            
00020A32                            Obj09_JumpHeight:			; XREF: Obj09_InAir
00020A32 1038 F602                  		move.b	($FFFFF602).w,d0	; is the jump button up?
00020A36 0200 0070                  		andi.b	#$70,d0
00020A3A 6600                       		bne.s	locret_1BBB4		; if not, branch to return
00020A3C                            
00020A3C 0828 0007 0022             		btst	#7,$22(a0)		; did Sonic jump or is he just falling or hit by a bumper?
00020A42 6700                       		beq.s	locret_1BBB4		; if not, branch to return
00020A44 1038 F780                  		move.b	($FFFFF780).w,d0	; get SS angle
00020A48 0200 00FC                  		andi.b	#$FC,d0
00020A4C 4400                       		neg.b	d0
00020A4E 0400 0040                  		subi.b	#$40,d0
00020A52 4EB9 0000 3736             		jsr	(CalcSine).l			
00020A58 3428 0012                  		move.w	$12(a0),d2		; get Y speed
00020A5C C1C2                       		muls.w	d2,d0			; multiply Y speed by sin
00020A5E E080                       		asr.l	#8,d0			; find the new Y speed
00020A60 3428 0010                  		move.w	$10(a0),d2		; get X speed
00020A64 C3C2                       		muls.w	d2,d1			; multiply X speed by cos
00020A66 E081                       		asr.l	#8,d1			; find the new X speed
00020A68 D240                       		add.w	d0,d1			; combine the two speeds
00020A6A 0C41 0400                  		cmpi.w	#$400,d1		; compare the combined speed with the jump release speed
00020A6E 6F00                       		ble.s	locret_1BBB4		; if it's less, branch to return
00020A70 1038 F780                  		move.b	($FFFFF780).w,d0
00020A74 0200 00FC                  		andi.b	#$FC,d0
00020A78 4400                       		neg.b	d0
00020A7A 0400 0040                  		subi.b	#$40,d0
00020A7E 4EB9 0000 3736             		jsr	(CalcSine).l
00020A84 C3FC 0400                  		muls.w	#$400,d1
00020A88 E081                       		asr.l	#8,d1
00020A8A 3141 0010                  		move.w	d1,$10(a0)
00020A8E C1FC 0400                  		muls.w	#$400,d0
00020A92 E080                       		asr.l	#8,d0
00020A94 3140 0012                  		move.w	d0,$12(a0)		; set the speed to the jump release speed
00020A98 08A8 0007 0022             		bclr	#7,$22(a0)		; clear "Sonic has jumped" flag
00020A9E                            
00020A9E                            locret_1BBB4:
00020A9E 4E75                       		rts	
00020AA0                            ; ---------------------------------------------------------------------------
00020AA0                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
00020AA0                            ; ---------------------------------------------------------------------------
00020AA0                            
00020AA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020AA0                            
00020AA0                            
00020AA0                            SS_FixCamera:				; XREF: Obj09
00020AA0 3428 000C                  		move.w	$C(a0),d2
00020AA4 3628 0008                  		move.w	8(a0),d3
00020AA8 3038 F700                  		move.w	($FFFFF700).w,d0
00020AAC 0443 00A0                  		subi.w	#$A0,d3
00020AB0 6500                       		bcs.s	loc_1BBCE
00020AB2 9043                       		sub.w	d3,d0
00020AB4 9178 F700                  		sub.w	d0,($FFFFF700).w
00020AB8                            
00020AB8                            loc_1BBCE:
00020AB8 3038 F704                  		move.w	($FFFFF704).w,d0
00020ABC 0442 0070                  		subi.w	#$70,d2
00020AC0 6500                       		bcs.s	locret_1BBDE
00020AC2 9042                       		sub.w	d2,d0
00020AC4 9178 F704                  		sub.w	d0,($FFFFF704).w
00020AC8                            
00020AC8                            locret_1BBDE:
00020AC8 4E75                       		rts	
00020ACA                            ; End of function SS_FixCamera
00020ACA                            
00020ACA                            ; ===========================================================================
00020ACA                            
00020ACA                            Obj09_ExitStage:			; XREF: Obj09_Index
00020ACA 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
00020AD0 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
00020AD6 6600                       		bne.s	loc_1BBF4
00020AD8 11FC 000C F600             		move.b	#$C,($FFFFF600).w
00020ADE                            
00020ADE                            loc_1BBF4:
00020ADE 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
00020AE4 6D00                       		blt.s	loc_1BC12
00020AE6 31FC 0000 F782             		move.w	#0,($FFFFF782).w
00020AEC 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
00020AF2 5428 0024                  		addq.b	#2,$24(a0)
00020AF6 317C 003C 0038             		move.w	#$3C,$38(a0)
00020AFC                            
00020AFC                            loc_1BC12:
00020AFC 3038 F780                  		move.w	($FFFFF780).w,d0
00020B00 D078 F782                  		add.w	($FFFFF782).w,d0
00020B04 31C0 F780                  		move.w	d0,($FFFFF780).w
00020B08 4EB9 0001 7A50             		jsr	Sonic_Animate
00020B0E 4EB9 0001 86F6             		jsr	LoadSonicDynPLC
00020B14 6100 FF8A                  		bsr.w	SS_FixCamera
00020B18 4EF9 0001 09DC             		jmp	DisplaySprite
00020B1E                            ; ===========================================================================
00020B1E                            
00020B1E                            Obj09_Exit2:				; XREF: Obj09_Index
00020B1E 5368 0038                  		subq.w	#1,$38(a0)
00020B22 6600                       		bne.s	loc_1BC40
00020B24 11FC 000C F600             		move.b	#$C,($FFFFF600).w
00020B2A                            
00020B2A                            loc_1BC40:
00020B2A 4EB9 0001 7A50             		jsr	Sonic_Animate
00020B30 4EB9 0001 86F6             		jsr	LoadSonicDynPLC
00020B36 6100 FF68                  		bsr.w	SS_FixCamera
00020B3A 4EF9 0001 09DC             		jmp	DisplaySprite
00020B40                            
00020B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B40                            
00020B40                            
00020B40                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
00020B40 2428 000C                  		move.l	$C(a0),d2
00020B44 2628 0008                  		move.l	8(a0),d3
00020B48 1038 F780                  		move.b	($FFFFF780).w,d0
00020B4C 0200 00FC                  		andi.b	#$FC,d0
00020B50 4EB9 0000 3736             		jsr	(CalcSine).l
00020B56 3828 0010                  		move.w	$10(a0),d4
00020B5A 48C4                       		ext.l	d4
00020B5C E184                       		asl.l	#8,d4
00020B5E C1FC 002A                  		muls.w	#$2A,d0
00020B62 D084                       		add.l	d4,d0
00020B64 3828 0012                  		move.w	$12(a0),d4
00020B68 48C4                       		ext.l	d4
00020B6A E184                       		asl.l	#8,d4
00020B6C C3FC 002A                  		muls.w	#$2A,d1
00020B70 D284                       		add.l	d4,d1
00020B72 D680                       		add.l	d0,d3
00020B74 6100 0000                  		bsr.w	sub_1BCE8
00020B78 6700                       		beq.s	loc_1BCB0
00020B7A 9680                       		sub.l	d0,d3
00020B7C 7000                       		moveq	#0,d0
00020B7E 3140 0010                  		move.w	d0,$10(a0)
00020B82 08A8 0001 0022             		bclr	#1,$22(a0)
00020B88 D481                       		add.l	d1,d2
00020B8A 6100 0000                  		bsr.w	sub_1BCE8
00020B8E 6700                       		beq.s	loc_1BCC6
00020B90 9481                       		sub.l	d1,d2
00020B92 7200                       		moveq	#0,d1
00020B94 3141 0012                  		move.w	d1,$12(a0)
00020B98 4E75                       		rts	
00020B9A                            ; ===========================================================================
00020B9A                            
00020B9A                            loc_1BCB0:
00020B9A D481                       		add.l	d1,d2
00020B9C 6100 0000                  		bsr.w	sub_1BCE8
00020BA0 6700                       		beq.s	loc_1BCD4
00020BA2 9481                       		sub.l	d1,d2
00020BA4 7200                       		moveq	#0,d1
00020BA6 3141 0012                  		move.w	d1,$12(a0)
00020BAA 08A8 0001 0022             		bclr	#1,$22(a0)
00020BB0                            
00020BB0                            loc_1BCC6:
00020BB0 E080                       		asr.l	#8,d0
00020BB2 E081                       		asr.l	#8,d1
00020BB4 3140 0010                  		move.w	d0,$10(a0)
00020BB8 3141 0012                  		move.w	d1,$12(a0)
00020BBC 4E75                       		rts	
00020BBE                            ; ===========================================================================
00020BBE                            
00020BBE                            loc_1BCD4:
00020BBE E080                       		asr.l	#8,d0
00020BC0 E081                       		asr.l	#8,d1
00020BC2 3140 0010                  		move.w	d0,$10(a0)
00020BC6 3141 0012                  		move.w	d1,$12(a0)
00020BCA 08E8 0001 0022             		bset	#1,$22(a0)
00020BD0 4E75                       		rts	
00020BD2                            ; End of function Obj09_Fall
00020BD2                            
00020BD2                            
00020BD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020BD2                            
00020BD2                            
00020BD2                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
00020BD2 43F9 00FF 0000             		lea	($FF0000).l,a1
00020BD8 7800                       		moveq	#0,d4
00020BDA 4842                       		swap	d2
00020BDC 3802                       		move.w	d2,d4
00020BDE 4842                       		swap	d2
00020BE0 0644 0044                  		addi.w	#$44,d4
00020BE4 88FC 0018                  		divu.w	#$18,d4
00020BE8 C8FC 0080                  		mulu.w	#$80,d4
00020BEC D3C4                       		adda.l	d4,a1
00020BEE 7800                       		moveq	#0,d4
00020BF0 4843                       		swap	d3
00020BF2 3803                       		move.w	d3,d4
00020BF4 4843                       		swap	d3
00020BF6 0644 0014                  		addi.w	#$14,d4
00020BFA 88FC 0018                  		divu.w	#$18,d4
00020BFE D2C4                       		adda.w	d4,a1
00020C00 7A00                       		moveq	#0,d5
00020C02 1819                       		move.b	(a1)+,d4
00020C04 6100                       		bsr.s	sub_1BD30
00020C06 1819                       		move.b	(a1)+,d4
00020C08 6100                       		bsr.s	sub_1BD30
00020C0A D2FC 007E                  		adda.w	#$7E,a1
00020C0E 1819                       		move.b	(a1)+,d4
00020C10 6100                       		bsr.s	sub_1BD30
00020C12 1819                       		move.b	(a1)+,d4
00020C14 6100                       		bsr.s	sub_1BD30
00020C16 4A05                       		tst.b	d5
00020C18 4E75                       		rts	
00020C1A                            ; End of function sub_1BCE8
00020C1A                            
00020C1A                            
00020C1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020C1A                            
00020C1A                            
00020C1A                            sub_1BD30:				; XREF: sub_1BCE8
00020C1A 6700                       		beq.s	locret_1BD44
00020C1C 0C04 0028                  		cmpi.b	#$28,d4
00020C20 6700                       		beq.s	locret_1BD44
00020C22 0C04 003A                  		cmpi.b	#$3A,d4
00020C26 6500                       		bcs.s	loc_1BD46
00020C28 0C04 004B                  		cmpi.b	#$4B,d4
00020C2C 6400                       		bcc.s	loc_1BD46
00020C2E                            
00020C2E                            locret_1BD44:
00020C2E 4E75                       		rts	
00020C30                            ; ===========================================================================
00020C30                            
00020C30                            loc_1BD46:
00020C30 1144 0030                  		move.b	d4,$30(a0)
00020C34 2149 0032                  		move.l	a1,$32(a0)
00020C38 7AFF                       		moveq	#-1,d5
00020C3A 4E75                       		rts	
00020C3C                            ; End of function sub_1BD30
00020C3C                            
00020C3C                            
00020C3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020C3C                            
00020C3C                            
00020C3C                            Obj09_ChkItems:				; XREF: Obj09_Display
00020C3C 43F9 00FF 0000             		lea	($FF0000).l,a1
00020C42 7800                       		moveq	#0,d4
00020C44 3828 000C                  		move.w	$C(a0),d4
00020C48 0644 0050                  		addi.w	#$50,d4
00020C4C 88FC 0018                  		divu.w	#$18,d4
00020C50 C8FC 0080                  		mulu.w	#$80,d4
00020C54 D3C4                       		adda.l	d4,a1
00020C56 7800                       		moveq	#0,d4
00020C58 3828 0008                  		move.w	8(a0),d4
00020C5C 0644 0020                  		addi.w	#$20,d4
00020C60 88FC 0018                  		divu.w	#$18,d4
00020C64 D2C4                       		adda.w	d4,a1
00020C66 1811                       		move.b	(a1),d4
00020C68 6600                       		bne.s	Obj09_ChkCont
00020C6A 4A28 003A                  		tst.b	$3A(a0)
00020C6E 6600 0000                  		bne.w	Obj09_MakeGhostSolid
00020C72 7800                       		moveq	#0,d4
00020C74 4E75                       		rts	
00020C76                            ; ===========================================================================
00020C76                            
00020C76                            Obj09_ChkCont:
00020C76 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
00020C7A 6600                       		bne.s	Obj09_Chk1Up
00020C7C 6100 F686                  		bsr.w	SS_RemoveCollectedItem
00020C80 6600                       		bne.s	Obj09_GetCont
00020C82 14BC 0001                  		move.b	#1,(a2)
00020C86 2549 0004                  		move.l	a1,4(a2)
00020C8A                            
00020C8A                            Obj09_GetCont:
00020C8A 4EB9 0000 CC16             		jsr	CollectRing
00020C90 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
00020C96 6500                       		bcs.s	Obj09_NoCont
00020C98 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
00020C9E 6600                       		bne.s	Obj09_NoCont
00020CA0 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
00020CA4 303C 00BF                  		move.w	#$BF,d0
00020CA8 4EB9 0000 1108             		jsr	(PlaySound).l	; play extra continue sound
00020CAE                            
00020CAE                            Obj09_NoCont:
00020CAE 7800                       		moveq	#0,d4
00020CB0 4E75                       		rts	
00020CB2                            ; ===========================================================================
00020CB2                            
00020CB2                            Obj09_Chk1Up:
00020CB2 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
00020CB6 6600                       		bne.s	Obj09_ChkEmer
00020CB8 6100 F64A                  		bsr.w	SS_RemoveCollectedItem
00020CBC 6600                       		bne.s	Obj09_Get1Up
00020CBE 14BC 0003                  		move.b	#3,(a2)
00020CC2 2549 0004                  		move.l	a1,4(a2)
00020CC6                            
00020CC6                            Obj09_Get1Up:
00020CC6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
00020CCA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
00020CCE 303C 0088                  		move.w	#$88,d0
00020CD2 4EB9 0000 1108             		jsr	(PlaySound).l	; play extra life music
00020CD8 7800                       		moveq	#0,d4
00020CDA 4E75                       		rts	
00020CDC                            ; ===========================================================================
00020CDC                            
00020CDC                            Obj09_ChkEmer:
00020CDC 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
00020CE0 6500                       		bcs.s	Obj09_ChkGhost
00020CE2 0C04 0040                  		cmpi.b	#$40,d4
00020CE6 6200                       		bhi.s	Obj09_ChkGhost
00020CE8 6100 F61A                  		bsr.w	SS_RemoveCollectedItem
00020CEC 6600                       		bne.s	Obj09_GetEmer
00020CEE 14BC 0005                  		move.b	#5,(a2)
00020CF2 2549 0004                  		move.l	a1,4(a2)
00020CF6                            
00020CF6                            Obj09_GetEmer:
00020CF6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
00020CFC 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
00020CFE 0404 003B                  		subi.b	#$3B,d4
00020D02 7000                       		moveq	#0,d0
00020D04 1038 FE57                  		move.b	($FFFFFE57).w,d0
00020D08 45F8 FE58                  		lea	($FFFFFE58).w,a2
00020D0C 1584 0000                  		move.b	d4,(a2,d0.w)
00020D10 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
00020D14                            
00020D14                            Obj09_NoEmer:
00020D14 303C 0093                  		move.w	#$93,d0
00020D18 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play emerald music
00020D1E 7800                       		moveq	#0,d4
00020D20 4E75                       		rts	
00020D22                            ; ===========================================================================
00020D22                            
00020D22                            Obj09_ChkGhost:
00020D22 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
00020D26 6600                       		bne.s	Obj09_ChkGhostTag
00020D28 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
00020D2E                            
00020D2E                            Obj09_ChkGhostTag:
00020D2E 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
00020D32 6600                       		bne.s	Obj09_NoGhost
00020D34 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
00020D3A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
00020D3C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
00020D42                            
00020D42                            Obj09_NoGhost:
00020D42 78FF                       		moveq	#-1,d4
00020D44 4E75                       		rts	
00020D46                            ; ===========================================================================
00020D46                            
00020D46                            Obj09_MakeGhostSolid:
00020D46 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
00020D4C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
00020D4E 43F9 00FF 1020             		lea	($FF1020).l,a1
00020D54 723F                       		moveq	#$3F,d1
00020D56                            
00020D56                            Obj09_GhostLoop2:
00020D56 743F                       		moveq	#$3F,d2
00020D58                            
00020D58                            Obj09_GhostLoop:
00020D58 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
00020D5C 6600                       		bne.s	Obj09_NoReplace	; if not, branch
00020D5E 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
00020D62                            
00020D62                            Obj09_NoReplace:
00020D62 5249                       		addq.w	#1,a1
00020D64 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
00020D68 43E9 0040                  		lea	$40(a1),a1
00020D6C 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
00020D70                            
00020D70                            Obj09_GhostNotSolid:
00020D70 4228 003A                  		clr.b	$3A(a0)
00020D74 7800                       		moveq	#0,d4
00020D76 4E75                       		rts	
00020D78                            ; End of function Obj09_ChkItems
00020D78                            
00020D78                            
00020D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020D78                            
00020D78                            
00020D78                            Obj09_ChkItems2:			; XREF: Obj09_Display
00020D78 1028 0030                  		move.b	$30(a0),d0
00020D7C 6600                       		bne.s	Obj09_ChkBumper
00020D7E 5328 0036                  		subq.b	#1,$36(a0)
00020D82 6A00                       		bpl.s	loc_1BEA0
00020D84 117C 0000 0036             		move.b	#0,$36(a0)
00020D8A                            
00020D8A                            loc_1BEA0:
00020D8A 5328 0037                  		subq.b	#1,$37(a0)
00020D8E 6A00                       		bpl.s	locret_1BEAC
00020D90 117C 0000 0037             		move.b	#0,$37(a0)
00020D96                            
00020D96                            locret_1BEAC:
00020D96 4E75                       		rts	
00020D98                            ; ===========================================================================
00020D98                            
00020D98                            Obj09_ChkBumper:
00020D98 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
00020D9C 6600                       		bne.s	Obj09_GOAL
00020D9E 2228 0032                  		move.l	$32(a0),d1
00020DA2 0481 00FF 0001             		subi.l	#$FF0001,d1
00020DA8 3401                       		move.w	d1,d2
00020DAA 0241 007F                  		andi.w	#$7F,d1
00020DAE C2FC 0018                  		mulu.w	#$18,d1
00020DB2 0441 0014                  		subi.w	#$14,d1
00020DB6 EE4A                       		lsr.w	#7,d2
00020DB8 0242 007F                  		andi.w	#$7F,d2
00020DBC C4FC 0018                  		mulu.w	#$18,d2
00020DC0 0442 0044                  		subi.w	#$44,d2
00020DC4 9268 0008                  		sub.w	8(a0),d1
00020DC8 9468 000C                  		sub.w	$C(a0),d2
00020DCC 4EB9 0000 3A04             		jsr	(CalcAngle).l
00020DD2 4EB9 0000 3736             		jsr	(CalcSine).l
00020DD8 C3FC F900                  		muls.w	#-$700,d1
00020DDC E081                       		asr.l	#8,d1
00020DDE 3141 0010                  		move.w	d1,$10(a0)
00020DE2 C1FC F900                  		muls.w	#-$700,d0
00020DE6 E080                       		asr.l	#8,d0
00020DE8 3140 0012                  		move.w	d0,$12(a0)
00020DEC 08E8 0001 0022             		bset	#1,$22(a0)
00020DF2 08A8 0007 0022             		bclr	#7,$22(a0)	; clear "Sonic has jumped" flag
00020DF8 6100 F50A                  		bsr.w	SS_RemoveCollectedItem
00020DFC 6600                       		bne.s	Obj09_BumpSnd
00020DFE 14BC 0002                  		move.b	#2,(a2)
00020E02 2028 0032                  		move.l	$32(a0),d0
00020E06 5380                       		subq.l	#1,d0
00020E08 2540 0004                  		move.l	d0,4(a2)
00020E0C                            
00020E0C                            Obj09_BumpSnd:
00020E0C 303C 00B4                  		move.w	#$B4,d0
00020E10 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play bumper sound
00020E16                            ; ===========================================================================
00020E16                            
00020E16                            Obj09_GOAL:
00020E16 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
00020E1A 6600                       		bne.s	Obj09_UPblock
00020E1C 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
00020E20 303C 00A8                  		move.w	#$A8,d0		; change item
00020E24 4EB9 0000 110E             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
00020E2A 4E75                       		rts	
00020E2C                            ; ===========================================================================
00020E2C                            
00020E2C                            Obj09_UPblock:
00020E2C 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
00020E30 6600                       		bne.s	Obj09_DOWNblock
00020E32 4A28 0036                  		tst.b	$36(a0)
00020E36 6600 0000                  		bne.w	Obj09_NoGlass
00020E3A 117C 001E 0036             		move.b	#$1E,$36(a0)
00020E40 0838 0006 F783             		btst	#6,($FFFFF783).w
00020E46 6700                       		beq.s	Obj09_UPsnd
00020E48 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
00020E4C 2268 0032                  		movea.l	$32(a0),a1
00020E50 5389                       		subq.l	#1,a1
00020E52 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
00020E56                            
00020E56                            Obj09_UPsnd:
00020E56 303C 00A9                  		move.w	#$A9,d0
00020E5A 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play up/down sound
00020E60                            ; ===========================================================================
00020E60                            
00020E60                            Obj09_DOWNblock:
00020E60 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
00020E64 6600                       		bne.s	Obj09_Rblock
00020E66 4A28 0036                  		tst.b	$36(a0)
00020E6A 6600 0000                  		bne.w	Obj09_NoGlass
00020E6E 117C 001E 0036             		move.b	#$1E,$36(a0)
00020E74 0838 0006 F783             		btst	#6,($FFFFF783).w
00020E7A 6600                       		bne.s	Obj09_DOWNsnd
00020E7C E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
00020E80 2268 0032                  		movea.l	$32(a0),a1
00020E84 5389                       		subq.l	#1,a1
00020E86 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
00020E8A                            
00020E8A                            Obj09_DOWNsnd:
00020E8A 303C 00A9                  		move.w	#$A9,d0
00020E8E 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play up/down sound
00020E94                            ; ===========================================================================
00020E94                            
00020E94                            Obj09_Rblock:
00020E94 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
00020E98 6600                       		bne.s	Obj09_ChkGlass
00020E9A 4A28 0037                  		tst.b	$37(a0)
00020E9E 6600 0000                  		bne.w	Obj09_NoGlass
00020EA2 117C 001E 0037             		move.b	#$1E,$37(a0)
00020EA8 6100 F45A                  		bsr.w	SS_RemoveCollectedItem
00020EAC 6600                       		bne.s	Obj09_RevStage
00020EAE 14BC 0004                  		move.b	#4,(a2)
00020EB2 2028 0032                  		move.l	$32(a0),d0
00020EB6 5380                       		subq.l	#1,d0
00020EB8 2540 0004                  		move.l	d0,4(a2)
00020EBC                            
00020EBC                            Obj09_RevStage:
00020EBC 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
00020EC0 303C 00A9                  		move.w	#$A9,d0
00020EC4 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play sound
00020ECA                            ; ===========================================================================
00020ECA                            
00020ECA                            Obj09_ChkGlass:
00020ECA 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
00020ECE 6700                       		beq.s	Obj09_Glass	; if yes, branch
00020ED0 0C00 002E                  		cmpi.b	#$2E,d0
00020ED4 6700                       		beq.s	Obj09_Glass
00020ED6 0C00 002F                  		cmpi.b	#$2F,d0
00020EDA 6700                       		beq.s	Obj09_Glass
00020EDC 0C00 0030                  		cmpi.b	#$30,d0
00020EE0 6600                       		bne.s	Obj09_NoGlass	; if not, branch
00020EE2                            
00020EE2                            Obj09_Glass:
00020EE2 6100 F420                  		bsr.w	SS_RemoveCollectedItem
00020EE6 6600                       		bne.s	Obj09_GlassSnd
00020EE8 14BC 0006                  		move.b	#6,(a2)
00020EEC 2268 0032                  		movea.l	$32(a0),a1
00020EF0 5389                       		subq.l	#1,a1
00020EF2 2549 0004                  		move.l	a1,4(a2)
00020EF6 1011                       		move.b	(a1),d0
00020EF8 5200                       		addq.b	#1,d0		; change glass type when touched
00020EFA 0C00 0030                  		cmpi.b	#$30,d0
00020EFE 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
00020F00 4200                       		clr.b	d0		; remove the glass block when it's destroyed
00020F02                            
00020F02                            Obj09_GlassUpdate:
00020F02 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
00020F06                            
00020F06                            Obj09_GlassSnd:
00020F06 303C 00BA                  		move.w	#$BA,d0
00020F0A 4EF9 0000 110E             		jmp	(PlaySound_Special).l ;	play glass block sound
00020F10                            ; ===========================================================================
00020F10                            
00020F10                            Obj09_NoGlass:
00020F10 4E75                       		rts	
00020F12                            ; End of function Obj09_ChkItems2
00020F12                            
00020F12                            ; ===========================================================================
00020F12                            ; ---------------------------------------------------------------------------
00020F12                            ; Object 10 - blank
00020F12                            ; ---------------------------------------------------------------------------
00020F12                            
00020F12                            Obj10:					; XREF: Obj_Index
00020F12 4E75                       		rts	
00020F14                            ; ---------------------------------------------------------------------------
00020F14                            ; Subroutine to	animate	level graphics
00020F14                            ; ---------------------------------------------------------------------------
00020F14                            
00020F14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020F14                            
00020F14                            
00020F14                            AniArt_Load:				; XREF: Demo_Time; loc_F54
00020F14 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00020F18 6600                       		bne.s	AniArt_Pause	; if yes, branch
00020F1A 4DF9 00C0 0000             		lea	($C00000).l,a6
00020F20 6100 0000                  		bsr.w	AniArt_GiantRing
00020F24 7000                       		moveq	#0,d0
00020F26 1038 FE10                  		move.b	($FFFFFE10).w,d0
00020F2A D040                       		add.w	d0,d0
00020F2C 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
00020F30 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
00020F34                            ; ===========================================================================
00020F34                            
00020F34                            AniArt_Pause:
00020F34 4E75                       		rts	
00020F36                            ; End of function AniArt_Load
00020F36                            
00020F36                            ; ===========================================================================
00020F36 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
00020F3A 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
00020F3E 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
00020F42 0000                       		dc.w AniArt_Ending-AniArt_Index
00020F44                            ; ===========================================================================
00020F44                            ; ---------------------------------------------------------------------------
00020F44                            ; Animated pattern routine - Green Hill
00020F44                            ; ---------------------------------------------------------------------------
00020F44                            
00020F44                            AniArt_GHZ:				; XREF: AniArt_Index
00020F44 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00020F48 6A00                       		bpl.s	loc_1C08A
00020F4A 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
00020F50 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
00020F56 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00020F5A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
00020F5E 0240 0001                  		andi.w	#1,d0
00020F62 6700                       		beq.s	loc_1C078
00020F64 43E9 0100                  		lea	$100(a1),a1	; load next frame
00020F68                            
00020F68                            loc_1C078:
00020F68 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
00020F72 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
00020F76 6000 0000                  		bra.w	LoadTiles
00020F7A                            ; ===========================================================================
00020F7A                            
00020F7A                            loc_1C08A:
00020F7A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00020F7E 6A00                       		bpl.s	loc_1C0C0
00020F80 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
00020F86 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
00020F8C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00020F90 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00020F94 0240 0001                  		andi.w	#1,d0
00020F98 6700                       		beq.s	loc_1C0AE
00020F9A 43E9 0200                  		lea	$200(a1),a1
00020F9E                            
00020F9E                            loc_1C0AE:
00020F9E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
00020FA8 323C 000F                  		move.w	#$F,d1
00020FAC 6000 0000                  		bra.w	LoadTiles
00020FB0                            ; ===========================================================================
00020FB0                            
00020FB0                            loc_1C0C0:
00020FB0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
00020FB4 6A00                       		bpl.s	locret_1C10C
00020FB6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
00020FBC 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
00020FC0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
00020FC4 0240 0003                  		andi.w	#3,d0
00020FC8 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
00020FCC 0800 0000                  		btst	#0,d0
00020FD0 6600                       		bne.s	loc_1C0E8
00020FD2 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
00020FD8                            
00020FD8                            loc_1C0E8:
00020FD8 EF48                       		lsl.w	#7,d0
00020FDA 3200                       		move.w	d0,d1
00020FDC D040                       		add.w	d0,d0
00020FDE D041                       		add.w	d1,d0
00020FE0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
00020FEA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
00020FF0 43F1 0000                  		lea	(a1,d0.w),a1
00020FF4 323C 000B                  		move.w	#$B,d1
00020FF8 6100 0000                  		bsr.w	LoadTiles
00020FFC                            
00020FFC                            locret_1C10C:
00020FFC 4E75                       		rts	
00020FFE                            ; ===========================================================================
00020FFE 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
00021002                            ; ===========================================================================
00021002                            ; ---------------------------------------------------------------------------
00021002                            ; Animated pattern routine - Marble
00021002                            ; ---------------------------------------------------------------------------
00021002                            
00021002                            AniArt_MZ:				; XREF: AniArt_Index
00021002 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00021006 6A00                       		bpl.s	loc_1C150
00021008 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0002100E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
00021014 7000                       		moveq	#0,d0
00021016 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0002101A 5200                       		addq.b	#1,d0
0002101C 0C00 0003                  		cmpi.b	#3,d0
00021020 6600                       		bne.s	loc_1C134
00021022 7000                       		moveq	#0,d0
00021024                            
00021024                            loc_1C134:
00021024 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
00021028 C0FC 0100                  		mulu.w	#$100,d0
0002102C D2C0                       		adda.w	d0,a1
0002102E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
00021038 323C 0007                  		move.w	#7,d1
0002103C 6100 0000                  		bsr.w	LoadTiles
00021040                            
00021040                            loc_1C150:
00021040 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00021044 6A00                       		bpl.s	loc_1C1AE
00021046 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0002104C 7000                       		moveq	#0,d0
0002104E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00021052 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
00021058 EE58                       		ror.w	#7,d0
0002105A D8C0                       		adda.w	d0,a4
0002105C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
00021066 7600                       		moveq	#0,d3
00021068 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0002106C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00021070 1638 FE68                  		move.b	($FFFFFE68).w,d3
00021074 343C 0003                  		move.w	#3,d2
00021078                            
00021078                            loc_1C188:
00021078 3003                       		move.w	d3,d0
0002107A D040                       		add.w	d0,d0
0002107C 0240 001E                  		andi.w	#$1E,d0
00021080 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
00021086 3033 0000                  		move.w	(a3,d0.w),d0
0002108A 47F3 0000                  		lea	(a3,d0.w),a3
0002108E 224C                       		movea.l	a4,a1
00021090 323C 001F                  		move.w	#$1F,d1
00021094 4E93                       		jsr	(a3)
00021096 5843                       		addq.w	#4,d3
00021098 51CA FFDE                  		dbf	d2,loc_1C188
0002109C 4E75                       		rts	
0002109E                            ; ===========================================================================
0002109E                            
0002109E                            loc_1C1AE:
0002109E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
000210A2 6A00 0000                  		bpl.w	locret_1C1EA
000210A6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
000210AC 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
000210B2 7000                       		moveq	#0,d0
000210B4 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
000210B8 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
000210BC 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
000210C2 C0FC 00C0                  		mulu.w	#$C0,d0
000210C6 D2C0                       		adda.w	d0,a1
000210C8 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
000210D2 323C 0005                  		move.w	#5,d1
000210D6 6000 0000                  		bra.w	LoadTiles
000210DA                            ; ===========================================================================
000210DA                            
000210DA                            locret_1C1EA:
000210DA 4E75                       		rts	
000210DC                            ; ===========================================================================
000210DC                            ; ---------------------------------------------------------------------------
000210DC                            ; Animated pattern routine - Scrap Brain
000210DC                            ; ---------------------------------------------------------------------------
000210DC                            
000210DC                            AniArt_SBZ:				; XREF: AniArt_Index
000210DC 4A38 F7B4                  		tst.b	($FFFFF7B4).w
000210E0 6700                       		beq.s	loc_1C1F8
000210E2 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
000210E6 6000                       		bra.s	loc_1C250
000210E8                            ; ===========================================================================
000210E8                            
000210E8                            loc_1C1F8:
000210E8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
000210EC 6A00                       		bpl.s	loc_1C250
000210EE 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
000210F4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
000210FA 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
00021104 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00021108 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0002110C 0240 0007                  		andi.w	#7,d0
00021110 6700                       		beq.s	loc_1C234
00021112 5340                       		subq.w	#1,d0
00021114 C0FC 0180                  		mulu.w	#$180,d0
00021118 43F1 0000                  		lea	(a1,d0.w),a1
0002111C 323C 000B                  		move.w	#$B,d1
00021120 6000 0000                  		bra.w	LoadTiles
00021124                            ; ===========================================================================
00021124                            
00021124                            loc_1C234:
00021124 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0002112A                            
0002112A                            loc_1C23A:
0002112A 323C 0005                  		move.w	#5,d1
0002112E 6100 0000                  		bsr.w	LoadTiles
00021132 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
00021138 323C 0005                  		move.w	#5,d1
0002113C 6000 0000                  		bra.w	LoadTiles
00021140                            ; ===========================================================================
00021140                            
00021140                            loc_1C250:
00021140 4A38 F7B5                  		tst.b	($FFFFF7B5).w
00021144 6700                       		beq.s	loc_1C25C
00021146 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0002114A 6000                       		bra.s	locret_1C2A0
0002114C                            ; ===========================================================================
0002114C                            
0002114C                            loc_1C25C:
0002114C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00021150 6A00                       		bpl.s	locret_1C2A0
00021152 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
00021158 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0002115E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
00021168 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0002116C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00021170 0240 0007                  		andi.w	#7,d0
00021174 6700                       		beq.s	loc_1C298
00021176 5340                       		subq.w	#1,d0
00021178 C0FC 0180                  		mulu.w	#$180,d0
0002117C 43F1 0000                  		lea	(a1,d0.w),a1
00021180 323C 000B                  		move.w	#$B,d1
00021184 6000 0000                  		bra.w	LoadTiles
00021188                            ; ===========================================================================
00021188                            
00021188                            loc_1C298:
00021188 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0002118E 609A                       		bra.s	loc_1C23A
00021190                            ; ===========================================================================
00021190                            
00021190                            locret_1C2A0:
00021190 4E75                       		rts	
00021192                            ; ===========================================================================
00021192                            ; ---------------------------------------------------------------------------
00021192                            ; Animated pattern routine - ending sequence
00021192                            ; ---------------------------------------------------------------------------
00021192                            
00021192                            AniArt_Ending:				; XREF: AniArt_Index
00021192 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00021196 6A00                       		bpl.s	loc_1C2F4
00021198 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0002119E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
000211A4 45F8 9400                  		lea	($FFFF9400).w,a2
000211A8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
000211AC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
000211B0 0240 0001                  		andi.w	#1,d0
000211B4 6700                       		beq.s	loc_1C2CE
000211B6 43E9 0200                  		lea	$200(a1),a1
000211BA 45EA 0200                  		lea	$200(a2),a2
000211BE                            
000211BE                            loc_1C2CE:
000211BE 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
000211C8 323C 000F                  		move.w	#$F,d1
000211CC 6100 0000                  		bsr.w	LoadTiles
000211D0 224A                       		movea.l	a2,a1
000211D2 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
000211DC 323C 000F                  		move.w	#$F,d1
000211E0 6000 0000                  		bra.w	LoadTiles
000211E4                            ; ===========================================================================
000211E4                            
000211E4                            loc_1C2F4:
000211E4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
000211E8 6A00                       		bpl.s	loc_1C33C
000211EA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
000211F0 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
000211F4 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
000211F8 0240 0007                  		andi.w	#7,d0
000211FC 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
00021200 EF48                       		lsl.w	#7,d0
00021202 3200                       		move.w	d0,d1
00021204 D040                       		add.w	d0,d0
00021206 D041                       		add.w	d1,d0
00021208 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
00021212 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
00021218 43F1 0000                  		lea	(a1,d0.w),a1
0002121C 323C 000B                  		move.w	#$B,d1
00021220 6000 0000                  		bra.w	LoadTiles
00021224                            ; ===========================================================================
00021224 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0002122C                            ; ===========================================================================
0002122C                            
0002122C                            loc_1C33C:
0002122C 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
00021230 6A00                       		bpl.s	loc_1C37A
00021232 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
00021238 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0002123C 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
00021240 0240 0003                  		andi.w	#3,d0
00021244 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
00021248 E148                       		lsl.w	#8,d0
0002124A D040                       		add.w	d0,d0
0002124C 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
00021256 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0002125A 43F1 0000                  		lea	(a1,d0.w),a1
0002125E 323C 000F                  		move.w	#$F,d1
00021262 6000 0000                  		bra.w	LoadTiles
00021266                            ; ===========================================================================
00021266 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0002126A                            ; ===========================================================================
0002126A                            
0002126A                            loc_1C37A:
0002126A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0002126E 6A00                       		bpl.s	locret_1C3B4
00021270 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
00021276 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0002127A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0002127E 0240 0003                  		andi.w	#3,d0
00021282 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
00021286 E148                       		lsl.w	#8,d0
00021288 D040                       		add.w	d0,d0
0002128A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
00021294 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
00021298 43F1 0000                  		lea	(a1,d0.w),a1
0002129C 323C 000F                  		move.w	#$F,d1
000212A0 6000 0000                  		bra.w	LoadTiles
000212A4                            ; ===========================================================================
000212A4                            
000212A4                            locret_1C3B4:
000212A4 4E75                       		rts	
000212A6                            ; ===========================================================================
000212A6                            
000212A6                            AniArt_none:				; XREF: AniArt_Index
000212A6 4E75                       		rts	
000212A8                            
000212A8                            ; ---------------------------------------------------------------------------
000212A8                            ; Subroutine to	load (d1 - 1) 8x8 tiles
000212A8                            ; ---------------------------------------------------------------------------
000212A8                            
000212A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000212A8                            
000212A8                            
000212A8                            LoadTiles:
000212A8 2C99                       		move.l	(a1)+,(a6)
000212AA 2C99                       		move.l	(a1)+,(a6)
000212AC 2C99                       		move.l	(a1)+,(a6)
000212AE 2C99                       		move.l	(a1)+,(a6)
000212B0 2C99                       		move.l	(a1)+,(a6)
000212B2 2C99                       		move.l	(a1)+,(a6)
000212B4 2C99                       		move.l	(a1)+,(a6)
000212B6 2C99                       		move.l	(a1)+,(a6)
000212B8 51C9 FFEE                  		dbf	d1,LoadTiles
000212BC 4E75                       		rts	
000212BE                            ; End of function LoadTiles
000212BE                            
000212BE                            ; ===========================================================================
000212BE                            ; ---------------------------------------------------------------------------
000212BE                            ; Animated pattern routine - more Marble Zone
000212BE                            ; ---------------------------------------------------------------------------
000212BE 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
000212C2 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
000212C6 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
000212CA 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
000212CE 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
000212D2 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
000212D6 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
000212DA 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
000212DE                            ; ===========================================================================
000212DE                            
000212DE                            loc_1C3EE:				; XREF: AniArt_MZextra
000212DE 2C91                       		move.l	(a1),(a6)
000212E0 43E9 0010                  		lea	$10(a1),a1
000212E4 51C9 FFF8                  		dbf	d1,loc_1C3EE
000212E8 4E75                       		rts	
000212EA                            ; ===========================================================================
000212EA                            
000212EA                            loc_1C3FA:				; XREF: AniArt_MZextra
000212EA 2029 0002                  		move.l	2(a1),d0
000212EE 1029 0001                  		move.b	1(a1),d0
000212F2 E098                       		ror.l	#8,d0
000212F4 2C80                       		move.l	d0,(a6)
000212F6 43E9 0010                  		lea	$10(a1),a1
000212FA 51C9 FFEE                  		dbf	d1,loc_1C3FA
000212FE 4E75                       		rts	
00021300                            ; ===========================================================================
00021300                            
00021300                            loc_1C410:				; XREF: AniArt_MZextra
00021300 2CA9 0002                  		move.l	2(a1),(a6)
00021304 43E9 0010                  		lea	$10(a1),a1
00021308 51C9 FFF6                  		dbf	d1,loc_1C410
0002130C 4E75                       		rts	
0002130E                            ; ===========================================================================
0002130E                            
0002130E                            loc_1C41E:				; XREF: AniArt_MZextra
0002130E 2029 0004                  		move.l	4(a1),d0
00021312 1029 0003                  		move.b	3(a1),d0
00021316 E098                       		ror.l	#8,d0
00021318 2C80                       		move.l	d0,(a6)
0002131A 43E9 0010                  		lea	$10(a1),a1
0002131E 51C9 FFEE                  		dbf	d1,loc_1C41E
00021322 4E75                       		rts	
00021324                            ; ===========================================================================
00021324                            
00021324                            loc_1C434:				; XREF: AniArt_MZextra
00021324 2CA9 0004                  		move.l	4(a1),(a6)
00021328 43E9 0010                  		lea	$10(a1),a1
0002132C 51C9 FFF6                  		dbf	d1,loc_1C434
00021330 4E75                       		rts	
00021332                            ; ===========================================================================
00021332                            
00021332                            loc_1C442:				; XREF: AniArt_MZextra
00021332 2029 0006                  		move.l	6(a1),d0
00021336 1029 0005                  		move.b	5(a1),d0
0002133A E098                       		ror.l	#8,d0
0002133C 2C80                       		move.l	d0,(a6)
0002133E 43E9 0010                  		lea	$10(a1),a1
00021342 51C9 FFEE                  		dbf	d1,loc_1C442
00021346 4E75                       		rts	
00021348                            ; ===========================================================================
00021348                            
00021348                            loc_1C458:				; XREF: AniArt_MZextra
00021348 2CA9 0006                  		move.l	6(a1),(a6)
0002134C 43E9 0010                  		lea	$10(a1),a1
00021350 51C9 FFF6                  		dbf	d1,loc_1C458
00021354 4E75                       		rts	
00021356                            ; ===========================================================================
00021356                            
00021356                            loc_1C466:				; XREF: AniArt_MZextra
00021356 2029 0008                  		move.l	8(a1),d0
0002135A 1029 0007                  		move.b	7(a1),d0
0002135E E098                       		ror.l	#8,d0
00021360 2C80                       		move.l	d0,(a6)
00021362 43E9 0010                  		lea	$10(a1),a1
00021366 51C9 FFEE                  		dbf	d1,loc_1C466
0002136A 4E75                       		rts	
0002136C                            ; ===========================================================================
0002136C                            
0002136C                            loc_1C47C:				; XREF: AniArt_MZextra
0002136C 2CA9 0008                  		move.l	8(a1),(a6)
00021370 43E9 0010                  		lea	$10(a1),a1
00021374 51C9 FFF6                  		dbf	d1,loc_1C47C
00021378 4E75                       		rts	
0002137A                            ; ===========================================================================
0002137A                            
0002137A                            loc_1C48A:				; XREF: AniArt_MZextra
0002137A 2029 000A                  		move.l	$A(a1),d0
0002137E 1029 0009                  		move.b	9(a1),d0
00021382 E098                       		ror.l	#8,d0
00021384 2C80                       		move.l	d0,(a6)
00021386 43E9 0010                  		lea	$10(a1),a1
0002138A 51C9 FFEE                  		dbf	d1,loc_1C48A
0002138E 4E75                       		rts	
00021390                            ; ===========================================================================
00021390                            
00021390                            loc_1C4A0:				; XREF: AniArt_MZextra
00021390 2CA9 000A                  		move.l	$A(a1),(a6)
00021394 43E9 0010                  		lea	$10(a1),a1
00021398 51C9 FFF6                  		dbf	d1,loc_1C4A0
0002139C 4E75                       		rts	
0002139E                            ; ===========================================================================
0002139E                            
0002139E                            loc_1C4AE:				; XREF: AniArt_MZextra
0002139E 2029 000C                  		move.l	$C(a1),d0
000213A2 1029 000B                  		move.b	$B(a1),d0
000213A6 E098                       		ror.l	#8,d0
000213A8 2C80                       		move.l	d0,(a6)
000213AA 43E9 0010                  		lea	$10(a1),a1
000213AE 51C9 FFEE                  		dbf	d1,loc_1C4AE
000213B2 4E75                       		rts	
000213B4                            ; ===========================================================================
000213B4                            
000213B4                            loc_1C4C4:				; XREF: AniArt_MZextra
000213B4 2CA9 000C                  		move.l	$C(a1),(a6)
000213B8 43E9 0010                  		lea	$10(a1),a1
000213BC 51C9 FFF6                  		dbf	d1,loc_1C4C4
000213C0 4E75                       		rts	
000213C2                            ; ===========================================================================
000213C2                            
000213C2                            loc_1C4D2:				; XREF: AniArt_MZextra
000213C2 2029 000C                  		move.l	$C(a1),d0
000213C6 E198                       		rol.l	#8,d0
000213C8 1011                       		move.b	0(a1),d0
000213CA 2C80                       		move.l	d0,(a6)
000213CC 43E9 0010                  		lea	$10(a1),a1
000213D0 51C9 FFF0                  		dbf	d1,loc_1C4D2
000213D4 4E75                       		rts	
000213D6                            ; ===========================================================================
000213D6                            
000213D6                            loc_1C4E8:				; XREF: AniArt_MZextra
000213D6 3CA9 000E                  		move.w	$E(a1),(a6)
000213DA 3C91                       		move.w	0(a1),(a6)
000213DC 43E9 0010                  		lea	$10(a1),a1
000213E0 51C9 FFF4                  		dbf	d1,loc_1C4E8
000213E4 4E75                       		rts	
000213E6                            ; ===========================================================================
000213E6                            
000213E6                            loc_1C4FA:				; XREF: AniArt_MZextra
000213E6 2011                       		move.l	0(a1),d0
000213E8 1029 000F                  		move.b	$F(a1),d0
000213EC E098                       		ror.l	#8,d0
000213EE 2C80                       		move.l	d0,(a6)
000213F0 43E9 0010                  		lea	$10(a1),a1
000213F4 51C9 FFF0                  		dbf	d1,loc_1C4FA
000213F8 4E75                       		rts	
000213FA                            
000213FA                            ; ---------------------------------------------------------------------------
000213FA                            ; Animated pattern routine - giant ring
000213FA                            ; ---------------------------------------------------------------------------
000213FA                            
000213FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000213FA                            
000213FA                            
000213FA                            AniArt_GiantRing:			; XREF: AniArt_Load
000213FA 4A78 F7BE                  		tst.w	($FFFFF7BE).w
000213FE 6600                       		bne.s	loc_1C518
00021400 4E75                       		rts	
00021402                            ; ===========================================================================
00021402                            
00021402                            loc_1C518:
00021402 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
00021408 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0002140E 7000                       		moveq	#0,d0
00021410 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
00021414 43F1 0000                  		lea	(a1,d0.w),a1
00021418 0640 8000                  		addi.w	#$8000,d0
0002141C E588                       		lsl.l	#2,d0
0002141E E448                       		lsr.w	#2,d0
00021420 0040 4000                  		ori.w	#$4000,d0
00021424 4840                       		swap	d0
00021426 2D40 0004                  		move.l	d0,4(a6)
0002142A 323C 000D                  		move.w	#$D,d1
0002142E 6000 FE78                  		bra.w	LoadTiles
00021432                            ; End of function AniArt_GiantRing
00021432                            
00021432                            ; ===========================================================================
00021432                            ; ---------------------------------------------------------------------------
00021432                            ; Object 21 - SCORE, TIME, RINGS
00021432                            ; ---------------------------------------------------------------------------
00021432                            
00021432                            Obj21:					; XREF: Obj_Index
00021432 7000                       		moveq	#0,d0
00021434 1028 0024                  		move.b	$24(a0),d0
00021438 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0002143C 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
00021440                            ; ===========================================================================
00021440 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
00021442 0000                       		dc.w Obj21_Flash-Obj21_Index
00021444                            ; ===========================================================================
00021444                            
00021444                            Obj21_Main:				; XREF: Obj21_Main
00021444 5428 0024                  		addq.b	#2,$24(a0)
00021448 317C 0090 0008             		move.w	#$90,8(a0)
0002144E 317C 0108 000A             		move.w	#$108,$A(a0)
00021454 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0002145C 317C 06CA 0002             		move.w	#$6CA,2(a0)
00021462 117C 0000 0001             		move.b	#0,1(a0)
00021468 117C 0000 0018             		move.b	#0,$18(a0)
0002146E                            
0002146E                            Obj21_Flash:				; XREF: Obj21_Main
0002146E 7000                       		moveq	#0,d0
00021470 0838 0003 FE05             		btst	#3,($FFFFFE05).w
00021476 6600                       		bne.s	Obj21_Display
00021478 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0002147C 6600                       		bne.s	Obj21_Flash2	; if not, branch
0002147E 5240                       		addq.w	#1,d0		; make ring counter flash red
00021480                            ; ===========================================================================
00021480                            
00021480                            Obj21_Flash2:
00021480 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
00021486 6600                       		bne.s	Obj21_Display	; if not, branch
00021488 5440                       		addq.w	#2,d0		; make time counter flash red
0002148A                            
0002148A                            Obj21_Display:
0002148A 1140 001A                  		move.b	d0,$1A(a0)
0002148E 4EF9 0001 09DC             		jmp	DisplaySprite
00021494                            ; ===========================================================================
00021494                            ; ---------------------------------------------------------------------------
00021494                            ; Sprite mappings - SCORE, TIME, RINGS
00021494                            ; ---------------------------------------------------------------------------
00021494                            Map_obj21:
00021494                            	include "_maps\obj21.asm"
00021494                            ; ---------------------------------------------------------------------------
00021494                            ; Sprite mappings - SCORE, TIME, RINGS
00021494                            ; ---------------------------------------------------------------------------
00021494 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
00021498 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0002149C 0A                         byte_1C5BC:	dc.b $A
0002149D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000214A2 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000214A7 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000214AC 900D 8010 00               		dc.b $90, $D, $80, $10,	0
000214B1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000214B6 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
000214BB A001 8000 20               		dc.b $A0, 1, $80, 0, $20
000214C0 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000214C5 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000214CA 400D 810E 10               		dc.b $40, $D, $81, $E, $10
000214CF 00                         		dc.b 0
000214D0 0A                         byte_1C5F0:	dc.b $A
000214D1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
000214D6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
000214DB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
000214E0 900D 8010 00               		dc.b $90, $D, $80, $10,	0
000214E5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
000214EA A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
000214EF A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
000214F4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
000214F9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
000214FE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
00021503 00                         		dc.b 0
00021504 0A                         byte_1C624:	dc.b $A
00021505 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0002150A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0002150F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
00021514 900D A010 00               		dc.b $90, $D, $A0, $10,	0
00021519 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0002151E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
00021523 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
00021528 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0002152D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00021532 400D 810E 10               		dc.b $40, $D, $81, $E, $10
00021537 00                         		dc.b 0
00021538 0A                         byte_1C658:	dc.b $A
00021539 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0002153E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
00021543 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
00021548 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0002154D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
00021552 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
00021557 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0002155C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
00021561 4005 810A 00               		dc.b $40, 5, $81, $A, 0
00021566 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0002156C 00                         		even
0002156C 00                         		even
0002156C                            
0002156C                            ; ---------------------------------------------------------------------------
0002156C                            ; Add points subroutine
0002156C                            ; ---------------------------------------------------------------------------
0002156C                            
0002156C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002156C                            
0002156C                            
0002156C                            AddPoints:
0002156C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
00021572 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
00021576 47F8 FE26                  		lea	($FFFFFE26).w,a3
0002157A D193                       		add.l	d0,(a3)		; add d0*10 to the score
0002157C 223C 000F 423F             		move.l	#999999,d1
00021582 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
00021584 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
00021588 2681                       		move.l	d1,(a3)		; reset	score to #999999
0002158A 2481                       		move.l	d1,(a2)
0002158C                            
0002158C                            loc_1C6AC:
0002158C 2013                       		move.l	(a3),d0
0002158E B092                       		cmp.l	(a2),d0
00021590 6500 0000                  		bcs.w	locret_1C6B6
00021594 2480                       		move.l	d0,(a2)
00021596                            
00021596                            locret_1C6B6:
00021596 4E75                       		rts	
00021598                            ; End of function AddPoints
00021598                            
00021598                            ; ---------------------------------------------------------------------------
00021598                            ; Subroutine to	update the HUD
00021598                            ; ---------------------------------------------------------------------------
00021598                            
00021598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021598                            
00021598                            
00021598                            HudUpdate:
00021598 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0002159C 6600 0000                  		bne.w	HudDebug	; if yes, branch
000215A0 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
000215A4 6700                       		beq.s	Hud_ChkRings	; if not, branch
000215A6 4238 FE1F                  		clr.b	($FFFFFE1F).w
000215AA 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
000215B0 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
000215B4 6100 0000                  		bsr.w	Hud_Score
000215B8                            
000215B8                            Hud_ChkRings:
000215B8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
000215BC 6700                       		beq.s	Hud_ChkTime	; if not, branch
000215BE 6A00                       		bpl.s	loc_1C6E4
000215C0 6100 0000                  		bsr.w	Hud_LoadZero
000215C4                            
000215C4                            loc_1C6E4:
000215C4 4238 FE1D                  		clr.b	($FFFFFE1D).w
000215C8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
000215CE 7200                       		moveq	#0,d1
000215D0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
000215D4 6100 0000                  		bsr.w	Hud_Rings
000215D8                            
000215D8                            Hud_ChkTime:
000215D8 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
000215DC 6700                       		beq.s	Hud_ChkLives	; if not, branch
000215DE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000215E2 6600                       		bne.s	Hud_ChkLives	; if yes, branch
000215E4 43F8 FE22                  		lea	($FFFFFE22).w,a1
000215E8 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
000215EE 6700                       		beq.s	TimeOver	; if yes, branch
000215F0 5221                       		addq.b	#1,-(a1)
000215F2 0C11 003C                  		cmpi.b	#60,(a1)
000215F6 6500                       		bcs.s	Hud_ChkLives
000215F8 12BC 0000                  		move.b	#0,(a1)
000215FC 5221                       		addq.b	#1,-(a1)
000215FE 0C11 003C                  		cmpi.b	#60,(a1)
00021602 6500                       		bcs.s	loc_1C734
00021604 12BC 0000                  		move.b	#0,(a1)
00021608 5221                       		addq.b	#1,-(a1)
0002160A 0C11 0009                  		cmpi.b	#9,(a1)
0002160E 6500                       		bcs.s	loc_1C734
00021610 12BC 0009                  		move.b	#9,(a1)
00021614                            
00021614                            loc_1C734:
00021614 203C 5E40 0003             		move.l	#$5E400003,d0
0002161A 7200                       		moveq	#0,d1
0002161C 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
00021620 6100 0000                  		bsr.w	Hud_Mins
00021624 203C 5EC0 0003             		move.l	#$5EC00003,d0
0002162A 7200                       		moveq	#0,d1
0002162C 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
00021630 6100 0000                  		bsr.w	Hud_Secs
00021634                            
00021634                            Hud_ChkLives:
00021634 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
00021638 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0002163A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0002163E 6100 0000                  		bsr.w	Hud_Lives
00021642                            
00021642                            Hud_ChkBonus:
00021642 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
00021646 6700                       		beq.s	Hud_End		; if not, branch
00021648 4238 F7D6                  		clr.b	($FFFFF7D6).w
0002164C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
00021656 7200                       		moveq	#0,d1
00021658 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0002165C 6100 0000                  		bsr.w	Hud_TimeRingBonus
00021660 7200                       		moveq	#0,d1
00021662 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
00021666 6100 0000                  		bsr.w	Hud_TimeRingBonus
0002166A                            
0002166A                            Hud_End:
0002166A 4E75                       		rts	
0002166C                            ; ===========================================================================
0002166C                            
0002166C                            TimeOver:				; XREF: Hud_ChkTime
0002166C 4238 FE1E                  		clr.b	($FFFFFE1E).w
00021670 41F8 D000                  		lea	($FFFFD000).w,a0
00021674 2448                       		movea.l	a0,a2
00021676 6100 E846                  		bsr.w	KillSonic
0002167A 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
00021680 4E75                       		rts	
00021682                            ; ===========================================================================
00021682                            
00021682                            HudDebug:				; XREF: HudUpdate
00021682 6100 0000                  		bsr.w	HudDb_XY
00021686 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0002168A 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0002168C 6A00                       		bpl.s	HudDb_Rings
0002168E 6100 0000                  		bsr.w	Hud_LoadZero
00021692                            
00021692                            HudDb_Rings:
00021692 4238 FE1D                  		clr.b	($FFFFFE1D).w
00021696 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0002169C 7200                       		moveq	#0,d1
0002169E 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
000216A2 6100 0000                  		bsr.w	Hud_Rings
000216A6                            
000216A6                            HudDb_ObjCount:
000216A6 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
000216AC 7200                       		moveq	#0,d1
000216AE 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
000216B2 6100 0000                  		bsr.w	Hud_Secs
000216B6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
000216BA 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
000216BC 4238 FE1C                  		clr.b	($FFFFFE1C).w
000216C0 6100 0000                  		bsr.w	Hud_Lives
000216C4                            
000216C4                            HudDb_ChkBonus:
000216C4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
000216C8 6700                       		beq.s	HudDb_End	; if not, branch
000216CA 4238 F7D6                  		clr.b	($FFFFF7D6).w
000216CE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
000216D8 7200                       		moveq	#0,d1
000216DA 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
000216DE 6100 0000                  		bsr.w	Hud_TimeRingBonus
000216E2 7200                       		moveq	#0,d1
000216E4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
000216E8 6100 0000                  		bsr.w	Hud_TimeRingBonus
000216EC                            
000216EC                            HudDb_End:
000216EC 4E75                       		rts	
000216EE                            ; End of function HudUpdate
000216EE                            
000216EE                            ; ---------------------------------------------------------------------------
000216EE                            ; Subroutine to	load "0" on the	HUD
000216EE                            ; ---------------------------------------------------------------------------
000216EE                            
000216EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000216EE                            
000216EE                            
000216EE                            Hud_LoadZero:				; XREF: HudUpdate
000216EE 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
000216F8 45FA 0000                  		lea	Hud_TilesZero(pc),a2
000216FC 343C 0002                  		move.w	#2,d2
00021700 6000                       		bra.s	loc_1C83E
00021702                            ; End of function Hud_LoadZero
00021702                            
00021702                            ; ---------------------------------------------------------------------------
00021702                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
00021702                            ; ---------------------------------------------------------------------------
00021702                            
00021702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021702                            
00021702                            
00021702                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
00021702 4DF9 00C0 0000             		lea	($C00000).l,a6
00021708 6100 0000                  		bsr.w	Hud_Lives
0002170C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
00021716 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0002171A 343C 000E                  		move.w	#$E,d2
0002171E                            
0002171E                            loc_1C83E:				; XREF: Hud_LoadZero
0002171E 43FA 0000                  		lea	Art_Hud(pc),a1
00021722                            
00021722                            loc_1C842:
00021722 323C 000F                  		move.w	#$F,d1
00021726 101A                       		move.b	(a2)+,d0
00021728 6B00                       		bmi.s	loc_1C85E
0002172A 4880                       		ext.w	d0
0002172C EB48                       		lsl.w	#5,d0
0002172E 47F1 0000                  		lea	(a1,d0.w),a3
00021732                            
00021732                            loc_1C852:
00021732 2C9B                       		move.l	(a3)+,(a6)
00021734 51C9 FFFC                  		dbf	d1,loc_1C852
00021738                            
00021738                            loc_1C858:
00021738 51CA FFE8                  		dbf	d2,loc_1C842
0002173C                            
0002173C 4E75                       		rts	
0002173E                            ; ===========================================================================
0002173E                            
0002173E                            loc_1C85E:
0002173E 2CBC 0000 0000             		move.l	#0,(a6)
00021744 51C9 FFF8                  		dbf	d1,loc_1C85E
00021748                            
00021748 60EE                       		bra.s	loc_1C858
0002174A                            ; End of function Hud_Base
0002174A                            
0002174A                            ; ===========================================================================
0002174A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
00021756 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0002175A                            ; ---------------------------------------------------------------------------
0002175A                            ; Subroutine to	load debug mode	numbers	patterns
0002175A                            ; ---------------------------------------------------------------------------
0002175A                            
0002175A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002175A                            
0002175A                            
0002175A                            HudDb_XY:				; XREF: HudDebug
0002175A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
00021764 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
00021768 4841                       		swap	d1
0002176A 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0002176E 6100                       		bsr.s	HudDb_XY2
00021770 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
00021774 4841                       		swap	d1
00021776 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0002177A                            ; End of function HudDb_XY
0002177A                            
0002177A                            
0002177A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002177A                            
0002177A                            
0002177A                            HudDb_XY2:
0002177A 7C07                       		moveq	#7,d6
0002177C 43F9 0000 03E0             		lea	(Art_Text).l,a1
00021782                            
00021782                            HudDb_XYLoop:
00021782 E959                       		rol.w	#4,d1
00021784 3401                       		move.w	d1,d2
00021786 0242 000F                  		andi.w	#$F,d2
0002178A 0C42 000A                  		cmpi.w	#$A,d2
0002178E 6500                       		bcs.s	loc_1C8B2
00021790 5E42                       		addq.w	#7,d2
00021792                            
00021792                            loc_1C8B2:
00021792 EB4A                       		lsl.w	#5,d2
00021794 47F1 2000                  		lea	(a1,d2.w),a3
00021798 2C9B                       		move.l	(a3)+,(a6)
0002179A 2C9B                       		move.l	(a3)+,(a6)
0002179C 2C9B                       		move.l	(a3)+,(a6)
0002179E 2C9B                       		move.l	(a3)+,(a6)
000217A0 2C9B                       		move.l	(a3)+,(a6)
000217A2 2C9B                       		move.l	(a3)+,(a6)
000217A4 2C9B                       		move.l	(a3)+,(a6)
000217A6 2C9B                       		move.l	(a3)+,(a6)
000217A8 4841                       		swap	d1
000217AA 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
000217AE                            
000217AE 4E75                       		rts	
000217B0                            ; End of function HudDb_XY2
000217B0                            
000217B0                            ; ---------------------------------------------------------------------------
000217B0                            ; Subroutine to	load rings numbers patterns
000217B0                            ; ---------------------------------------------------------------------------
000217B0                            
000217B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000217B0                            
000217B0                            
000217B0                            Hud_Rings:				; XREF: HudUpdate
000217B0 45F9 0000 0000             		lea	(Hud_100).l,a2
000217B6 7C02                       		moveq	#2,d6
000217B8 6000                       		bra.s	Hud_LoadArt
000217BA                            ; End of function Hud_Rings
000217BA                            
000217BA                            ; ---------------------------------------------------------------------------
000217BA                            ; Subroutine to	load score numbers patterns
000217BA                            ; ---------------------------------------------------------------------------
000217BA                            
000217BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000217BA                            
000217BA                            
000217BA                            Hud_Score:				; XREF: HudUpdate
000217BA 45F9 0000 0000             		lea	(Hud_100000).l,a2
000217C0 7C05                       		moveq	#5,d6
000217C2                            
000217C2                            Hud_LoadArt:
000217C2 7800                       		moveq	#0,d4
000217C4 43FA 0000                  		lea	Art_Hud(pc),a1
000217C8                            
000217C8                            Hud_ScoreLoop:
000217C8 7400                       		moveq	#0,d2
000217CA 261A                       		move.l	(a2)+,d3
000217CC                            
000217CC                            loc_1C8EC:
000217CC 9283                       		sub.l	d3,d1
000217CE 6500                       		bcs.s	loc_1C8F4
000217D0 5242                       		addq.w	#1,d2
000217D2 60F8                       		bra.s	loc_1C8EC
000217D4                            ; ===========================================================================
000217D4                            
000217D4                            loc_1C8F4:
000217D4 D283                       		add.l	d3,d1
000217D6 4A42                       		tst.w	d2
000217D8 6700                       		beq.s	loc_1C8FE
000217DA 383C 0001                  		move.w	#1,d4
000217DE                            
000217DE                            loc_1C8FE:
000217DE 4A44                       		tst.w	d4
000217E0 6700                       		beq.s	loc_1C92C
000217E2 ED4A                       		lsl.w	#6,d2
000217E4 2D40 0004                  		move.l	d0,4(a6)
000217E8 47F1 2000                  		lea	(a1,d2.w),a3
000217EC 2C9B                       		move.l	(a3)+,(a6)
000217EE 2C9B                       		move.l	(a3)+,(a6)
000217F0 2C9B                       		move.l	(a3)+,(a6)
000217F2 2C9B                       		move.l	(a3)+,(a6)
000217F4 2C9B                       		move.l	(a3)+,(a6)
000217F6 2C9B                       		move.l	(a3)+,(a6)
000217F8 2C9B                       		move.l	(a3)+,(a6)
000217FA 2C9B                       		move.l	(a3)+,(a6)
000217FC 2C9B                       		move.l	(a3)+,(a6)
000217FE 2C9B                       		move.l	(a3)+,(a6)
00021800 2C9B                       		move.l	(a3)+,(a6)
00021802 2C9B                       		move.l	(a3)+,(a6)
00021804 2C9B                       		move.l	(a3)+,(a6)
00021806 2C9B                       		move.l	(a3)+,(a6)
00021808 2C9B                       		move.l	(a3)+,(a6)
0002180A 2C9B                       		move.l	(a3)+,(a6)
0002180C                            
0002180C                            loc_1C92C:
0002180C 0680 0040 0000             		addi.l	#$400000,d0
00021812 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
00021816                            
00021816 4E75                       		rts	
00021818                            ; End of function Hud_Score
00021818                            
00021818                            ; ---------------------------------------------------------------------------
00021818                            ; Subroutine to	load countdown numbers on the continue screen
00021818                            ; ---------------------------------------------------------------------------
00021818                            
00021818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021818                            
00021818                            
00021818                            ContScrCounter:				; XREF: ContinueScreen
00021818 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
00021822 4DF9 00C0 0000             		lea	($C00000).l,a6
00021828 45F9 0000 0000             		lea	(Hud_10).l,a2
0002182E 7C01                       		moveq	#1,d6
00021830 7800                       		moveq	#0,d4
00021832 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
00021836                            
00021836                            ContScr_Loop:
00021836 7400                       		moveq	#0,d2
00021838 261A                       		move.l	(a2)+,d3
0002183A                            
0002183A                            loc_1C95A:
0002183A 9283                       		sub.l	d3,d1
0002183C 6500                       		bcs.s	loc_1C962
0002183E 5242                       		addq.w	#1,d2
00021840 60F8                       		bra.s	loc_1C95A
00021842                            ; ===========================================================================
00021842                            
00021842                            loc_1C962:
00021842 D283                       		add.l	d3,d1
00021844 ED4A                       		lsl.w	#6,d2
00021846 47F1 2000                  		lea	(a1,d2.w),a3
0002184A 2C9B                       		move.l	(a3)+,(a6)
0002184C 2C9B                       		move.l	(a3)+,(a6)
0002184E 2C9B                       		move.l	(a3)+,(a6)
00021850 2C9B                       		move.l	(a3)+,(a6)
00021852 2C9B                       		move.l	(a3)+,(a6)
00021854 2C9B                       		move.l	(a3)+,(a6)
00021856 2C9B                       		move.l	(a3)+,(a6)
00021858 2C9B                       		move.l	(a3)+,(a6)
0002185A 2C9B                       		move.l	(a3)+,(a6)
0002185C 2C9B                       		move.l	(a3)+,(a6)
0002185E 2C9B                       		move.l	(a3)+,(a6)
00021860 2C9B                       		move.l	(a3)+,(a6)
00021862 2C9B                       		move.l	(a3)+,(a6)
00021864 2C9B                       		move.l	(a3)+,(a6)
00021866 2C9B                       		move.l	(a3)+,(a6)
00021868 2C9B                       		move.l	(a3)+,(a6)
0002186A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0002186E                            
0002186E 4E75                       		rts	
00021870                            ; End of function ContScrCounter
00021870                            
00021870                            ; ===========================================================================
00021870                            ; ---------------------------------------------------------------------------
00021870                            ; HUD counter sizes
00021870                            ; ---------------------------------------------------------------------------
00021870 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
00021874 0000 2710                  Hud_10000:	dc.l 10000
00021878 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0002187C 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
00021880 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
00021884 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
00021888                            
00021888                            ; ---------------------------------------------------------------------------
00021888                            ; Subroutine to	load time numbers patterns
00021888                            ; ---------------------------------------------------------------------------
00021888                            
00021888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021888                            
00021888                            
00021888                            Hud_Mins:				; XREF: Hud_ChkTime
00021888 45F9 0002 1884             		lea	(Hud_1).l,a2
0002188E 7C00                       		moveq	#0,d6
00021890 6000                       		bra.s	loc_1C9BA
00021892                            ; End of function Hud_Mins
00021892                            
00021892                            
00021892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021892                            
00021892                            
00021892                            Hud_Secs:				; XREF: Hud_ChkTime
00021892 45F9 0002 1880             		lea	(Hud_10).l,a2
00021898 7C01                       		moveq	#1,d6
0002189A                            
0002189A                            loc_1C9BA:
0002189A 7800                       		moveq	#0,d4
0002189C 43FA 0000                  		lea	Art_Hud(pc),a1
000218A0                            
000218A0                            Hud_TimeLoop:
000218A0 7400                       		moveq	#0,d2
000218A2 261A                       		move.l	(a2)+,d3
000218A4                            
000218A4                            loc_1C9C4:
000218A4 9283                       		sub.l	d3,d1
000218A6 6500                       		bcs.s	loc_1C9CC
000218A8 5242                       		addq.w	#1,d2
000218AA 60F8                       		bra.s	loc_1C9C4
000218AC                            ; ===========================================================================
000218AC                            
000218AC                            loc_1C9CC:
000218AC D283                       		add.l	d3,d1
000218AE 4A42                       		tst.w	d2
000218B0 6700                       		beq.s	loc_1C9D6
000218B2 383C 0001                  		move.w	#1,d4
000218B6                            
000218B6                            loc_1C9D6:
000218B6 ED4A                       		lsl.w	#6,d2
000218B8 2D40 0004                  		move.l	d0,4(a6)
000218BC 47F1 2000                  		lea	(a1,d2.w),a3
000218C0 2C9B                       		move.l	(a3)+,(a6)
000218C2 2C9B                       		move.l	(a3)+,(a6)
000218C4 2C9B                       		move.l	(a3)+,(a6)
000218C6 2C9B                       		move.l	(a3)+,(a6)
000218C8 2C9B                       		move.l	(a3)+,(a6)
000218CA 2C9B                       		move.l	(a3)+,(a6)
000218CC 2C9B                       		move.l	(a3)+,(a6)
000218CE 2C9B                       		move.l	(a3)+,(a6)
000218D0 2C9B                       		move.l	(a3)+,(a6)
000218D2 2C9B                       		move.l	(a3)+,(a6)
000218D4 2C9B                       		move.l	(a3)+,(a6)
000218D6 2C9B                       		move.l	(a3)+,(a6)
000218D8 2C9B                       		move.l	(a3)+,(a6)
000218DA 2C9B                       		move.l	(a3)+,(a6)
000218DC 2C9B                       		move.l	(a3)+,(a6)
000218DE 2C9B                       		move.l	(a3)+,(a6)
000218E0 0680 0040 0000             		addi.l	#$400000,d0
000218E6 51CE FFB8                  		dbf	d6,Hud_TimeLoop
000218EA                            
000218EA 4E75                       		rts	
000218EC                            ; End of function Hud_Secs
000218EC                            
000218EC                            ; ---------------------------------------------------------------------------
000218EC                            ; Subroutine to	load time/ring bonus numbers patterns
000218EC                            ; ---------------------------------------------------------------------------
000218EC                            
000218EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000218EC                            
000218EC                            
000218EC                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
000218EC 45F9 0002 1878             		lea	(Hud_1000).l,a2
000218F2 7C03                       		moveq	#3,d6
000218F4 7800                       		moveq	#0,d4
000218F6 43FA 0000                  		lea	Art_Hud(pc),a1
000218FA                            
000218FA                            Hud_BonusLoop:
000218FA 7400                       		moveq	#0,d2
000218FC 261A                       		move.l	(a2)+,d3
000218FE                            
000218FE                            loc_1CA1E:
000218FE 9283                       		sub.l	d3,d1
00021900 6500                       		bcs.s	loc_1CA26
00021902 5242                       		addq.w	#1,d2
00021904 60F8                       		bra.s	loc_1CA1E
00021906                            ; ===========================================================================
00021906                            
00021906                            loc_1CA26:
00021906 D283                       		add.l	d3,d1
00021908 4A42                       		tst.w	d2
0002190A 6700                       		beq.s	loc_1CA30
0002190C 383C 0001                  		move.w	#1,d4
00021910                            
00021910                            loc_1CA30:
00021910 4A44                       		tst.w	d4
00021912 6700                       		beq.s	Hud_ClrBonus
00021914 ED4A                       		lsl.w	#6,d2
00021916 47F1 2000                  		lea	(a1,d2.w),a3
0002191A 2C9B                       		move.l	(a3)+,(a6)
0002191C 2C9B                       		move.l	(a3)+,(a6)
0002191E 2C9B                       		move.l	(a3)+,(a6)
00021920 2C9B                       		move.l	(a3)+,(a6)
00021922 2C9B                       		move.l	(a3)+,(a6)
00021924 2C9B                       		move.l	(a3)+,(a6)
00021926 2C9B                       		move.l	(a3)+,(a6)
00021928 2C9B                       		move.l	(a3)+,(a6)
0002192A 2C9B                       		move.l	(a3)+,(a6)
0002192C 2C9B                       		move.l	(a3)+,(a6)
0002192E 2C9B                       		move.l	(a3)+,(a6)
00021930 2C9B                       		move.l	(a3)+,(a6)
00021932 2C9B                       		move.l	(a3)+,(a6)
00021934 2C9B                       		move.l	(a3)+,(a6)
00021936 2C9B                       		move.l	(a3)+,(a6)
00021938 2C9B                       		move.l	(a3)+,(a6)
0002193A                            
0002193A                            loc_1CA5A:
0002193A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0002193E                            
0002193E 4E75                       		rts	
00021940                            ; ===========================================================================
00021940                            
00021940                            Hud_ClrBonus:
00021940 7A0F                       		moveq	#$F,d5
00021942                            
00021942                            Hud_ClrBonusLoop:
00021942 2CBC 0000 0000             		move.l	#0,(a6)
00021948 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0002194C                            
0002194C 60EC                       		bra.s	loc_1CA5A
0002194E                            ; End of function Hud_TimeRingBonus
0002194E                            
0002194E                            ; ---------------------------------------------------------------------------
0002194E                            ; Subroutine to	load uncompressed lives	counter	patterns
0002194E                            ; ---------------------------------------------------------------------------
0002194E                            
0002194E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002194E                            
0002194E                            
0002194E                            Hud_Lives:				; XREF: Hud_ChkLives
0002194E 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
00021954 7200                       		moveq	#0,d1
00021956 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0002195A 45F9 0002 1880             		lea	(Hud_10).l,a2
00021960 7C01                       		moveq	#1,d6
00021962 7800                       		moveq	#0,d4
00021964 43FA 0000                  		lea	Art_LivesNums(pc),a1
00021968                            
00021968                            Hud_LivesLoop:
00021968 2D40 0004                  		move.l	d0,4(a6)
0002196C 7400                       		moveq	#0,d2
0002196E 261A                       		move.l	(a2)+,d3
00021970                            
00021970                            loc_1CA90:
00021970 9283                       		sub.l	d3,d1
00021972 6500                       		bcs.s	loc_1CA98
00021974 5242                       		addq.w	#1,d2
00021976 60F8                       		bra.s	loc_1CA90
00021978                            ; ===========================================================================
00021978                            
00021978                            loc_1CA98:
00021978 D283                       		add.l	d3,d1
0002197A 4A42                       		tst.w	d2
0002197C 6700                       		beq.s	loc_1CAA2
0002197E 383C 0001                  		move.w	#1,d4
00021982                            
00021982                            loc_1CAA2:
00021982 4A44                       		tst.w	d4
00021984 6700                       		beq.s	Hud_ClrLives
00021986                            
00021986                            loc_1CAA6:
00021986 EB4A                       		lsl.w	#5,d2
00021988 47F1 2000                  		lea	(a1,d2.w),a3
0002198C 2C9B                       		move.l	(a3)+,(a6)
0002198E 2C9B                       		move.l	(a3)+,(a6)
00021990 2C9B                       		move.l	(a3)+,(a6)
00021992 2C9B                       		move.l	(a3)+,(a6)
00021994 2C9B                       		move.l	(a3)+,(a6)
00021996 2C9B                       		move.l	(a3)+,(a6)
00021998 2C9B                       		move.l	(a3)+,(a6)
0002199A 2C9B                       		move.l	(a3)+,(a6)
0002199C                            
0002199C                            loc_1CABC:
0002199C 0680 0040 0000             		addi.l	#$400000,d0
000219A2 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
000219A6                            
000219A6 4E75                       		rts	
000219A8                            ; ===========================================================================
000219A8                            
000219A8                            Hud_ClrLives:
000219A8 4A46                       		tst.w	d6
000219AA 67DA                       		beq.s	loc_1CAA6
000219AC 7A07                       		moveq	#7,d5
000219AE                            
000219AE                            Hud_ClrLivesLoop:
000219AE 2CBC 0000 0000             		move.l	#0,(a6)
000219B4 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
000219B8 60E2                       		bra.s	loc_1CABC
000219BA                            ; End of function Hud_Lives
000219BA                            
000219BA                            ; ===========================================================================
000219BA                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
00021CBA                            		even
00021CBA                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
00021DFA                            		even
00021DFA                            ; ===========================================================================
00021DFA                            ; ---------------------------------------------------------------------------
00021DFA                            ; When debug mode is currently in use
00021DFA                            ; ---------------------------------------------------------------------------
00021DFA                            
00021DFA                            DebugMode:				; XREF: Obj01; Obj09
00021DFA 7000                       		moveq	#0,d0
00021DFC 1038 FE08                  		move.b	($FFFFFE08).w,d0
00021E00 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00021E04 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00021E08                            ; ===========================================================================
00021E08 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00021E0A 0000                       		dc.w Debug_Skip-Debug_Index
00021E0C                            ; ===========================================================================
00021E0C                            
00021E0C                            Debug_Main:				; XREF: Debug_Index
00021E0C 5438 FE08                  		addq.b	#2,($FFFFFE08).w
00021E10 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
00021E16 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
00021E1C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00021E22 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00021E28 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00021E2E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00021E34 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00021E3A 117C 0000 001A             		move.b	#0,$1A(a0)
00021E40 117C 0000 001C             		move.b	#0,$1C(a0)
00021E46 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
00021E4C 6600                       		bne.s	Debug_Zone	; if not, branch
00021E4E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
00021E54 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
00021E5A 7006                       		moveq	#6,d0		; use 6th debug	item list
00021E5C 6000                       		bra.s	Debug_UseList
00021E5E                            ; ===========================================================================
00021E5E                            
00021E5E                            Debug_Zone:
00021E5E 7000                       		moveq	#0,d0
00021E60 1038 FE10                  		move.b	($FFFFFE10).w,d0
00021E64                            
00021E64                            Debug_UseList:
00021E64 45F9 0000 0000             		lea	(DebugList).l,a2
00021E6A D040                       		add.w	d0,d0
00021E6C D4F2 0000                  		adda.w	(a2,d0.w),a2
00021E70 3C1A                       		move.w	(a2)+,d6
00021E72 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
00021E76 6200                       		bhi.s	loc_1CF9E
00021E78 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
00021E7E                            
00021E7E                            loc_1CF9E:
00021E7E 6100 0000                  		bsr.w	Debug_ShowItem
00021E82 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
00021E88 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
00021E8E                            
00021E8E                            Debug_Skip:				; XREF: Debug_Index
00021E8E 7006                       		moveq	#6,d0
00021E90 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00021E96 6700                       		beq.s	loc_1CFBE
00021E98 7000                       		moveq	#0,d0
00021E9A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00021E9E                            
00021E9E                            loc_1CFBE:
00021E9E 45F9 0000 0000             		lea	(DebugList).l,a2
00021EA4 D040                       		add.w	d0,d0
00021EA6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00021EAA 3C1A                       		move.w	(a2)+,d6
00021EAC 6100 0000                  		bsr.w	Debug_Control
00021EB0 4EF9 0001 09DC             		jmp	DisplaySprite
00021EB6                            
00021EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021EB6                            
00021EB6                            
00021EB6                            Debug_Control:
00021EB6 7800                       		moveq	#0,d4
00021EB8 323C 0001                  		move.w	#1,d1
00021EBC 1838 F605                  		move.b	($FFFFF605).w,d4
00021EC0 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
00021EC4 6600                       		bne.s	loc_1D018	; if yes, branch
00021EC6 1038 F604                  		move.b	($FFFFF604).w,d0
00021ECA 0240 000F                  		andi.w	#$F,d0
00021ECE 6600                       		bne.s	loc_1D000
00021ED0 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
00021ED6 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
00021EDC 6000 0000                  		bra.w	Debug_BackItem
00021EE0                            ; ===========================================================================
00021EE0                            
00021EE0                            loc_1D000:
00021EE0 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
00021EE4 6600                       		bne.s	loc_1D01C
00021EE6 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
00021EEC 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
00021EF0 6600                       		bne.s	loc_1D018
00021EF2 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
00021EF8                            
00021EF8                            loc_1D018:
00021EF8 1838 F604                  		move.b	($FFFFF604).w,d4
00021EFC                            
00021EFC                            loc_1D01C:
00021EFC 7200                       		moveq	#0,d1
00021EFE 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
00021F02 5241                       		addq.w	#1,d1
00021F04 4841                       		swap	d1
00021F06 E881                       		asr.l	#4,d1
00021F08 2428 000C                  		move.l	$C(a0),d2
00021F0C 2628 0008                  		move.l	8(a0),d3
00021F10 0804 0000                  		btst	#0,d4		; is up	being pressed?
00021F14 6700                       		beq.s	loc_1D03C	; if not, branch
00021F16 9481                       		sub.l	d1,d2
00021F18 6400                       		bcc.s	loc_1D03C
00021F1A 7400                       		moveq	#0,d2
00021F1C                            
00021F1C                            loc_1D03C:
00021F1C 0804 0001                  		btst	#1,d4		; is down being	pressed?
00021F20 6700                       		beq.s	loc_1D052	; if not, branch
00021F22 D481                       		add.l	d1,d2
00021F24 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
00021F2A 6500                       		bcs.s	loc_1D052
00021F2C 243C 07FF 0000             		move.l	#$7FF0000,d2
00021F32                            
00021F32                            loc_1D052:
00021F32 0804 0002                  		btst	#2,d4
00021F36 6700                       		beq.s	loc_1D05E
00021F38 9681                       		sub.l	d1,d3
00021F3A 6400                       		bcc.s	loc_1D05E
00021F3C 7600                       		moveq	#0,d3
00021F3E                            
00021F3E                            loc_1D05E:
00021F3E 0804 0003                  		btst	#3,d4
00021F42 6700                       		beq.s	loc_1D066
00021F44 D681                       		add.l	d1,d3
00021F46                            
00021F46                            loc_1D066:
00021F46 2142 000C                  		move.l	d2,$C(a0)
00021F4A 2143 0008                  		move.l	d3,8(a0)
00021F4E                            
00021F4E                            Debug_BackItem:
00021F4E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00021F54 6700                       		beq.s	Debug_MakeItem	; if not, branch
00021F56 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00021F5C 6700                       		beq.s	Debug_NextItem	; if not, branch
00021F5E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
00021F62 6400                       		bcc.s	Debug_NoLoop
00021F64 DD38 FE06                  		add.b	d6,($FFFFFE06).w
00021F68 6000                       		bra.s	Debug_NoLoop
00021F6A                            ; ===========================================================================
00021F6A                            
00021F6A                            Debug_NextItem:
00021F6A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00021F70 6700                       		beq.s	Debug_MakeItem	; if not, branch
00021F72 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
00021F76 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
00021F7A 6200                       		bhi.s	Debug_NoLoop
00021F7C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
00021F82                            
00021F82                            Debug_NoLoop:
00021F82 6000 0000                  		bra.w	Debug_ShowItem
00021F86                            ; ===========================================================================
00021F86                            
00021F86                            Debug_MakeItem:
00021F86 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00021F8C 6700                       		beq.s	Debug_Exit	; if not, branch
00021F8E 4EB9 0001 0E72             		jsr	SingleObjLoad
00021F94 6600                       		bne.s	Debug_Exit
00021F96 3368 0008 0008             		move.w	8(a0),8(a1)
00021F9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00021FA2 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00021FA6 1368 0001 0001             		move.b	1(a0),1(a1)
00021FAC 1368 0001 0022             		move.b	1(a0),$22(a1)
00021FB2 0229 007F 0022             		andi.b	#$7F,$22(a1)
00021FB8 7000                       		moveq	#0,d0
00021FBA 1038 FE06                  		move.b	($FFFFFE06).w,d0
00021FBE E748                       		lsl.w	#3,d0
00021FC0 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
00021FC6 4E75                       		rts	
00021FC8                            ; ===========================================================================
00021FC8                            
00021FC8                            Debug_Exit:
00021FC8 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
00021FCE 6700 0000                  		beq.w	Debug_DoNothing	; if not, branch
00021FD2 7000                       		moveq	#0,d0
00021FD4 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
00021FD8 0C38 0001 FFF6             		cmpi.b	 #$01, ($FFFFFFF6).w
00021FDE 6700 0000                          beq.w   debugexitshadowmaps
00021FE2 0C38 0002 FFF6             		cmpi.b	 #$02, ($FFFFFFF6).w
00021FE8 6700 0000                  		beq.w	debugexitmetalmaps
00021FEC 0C38 0003 FFF6             		cmpi.b	 #$03, ($FFFFFFF6).w
00021FF2 6600 0000                  		bne.w	debugexitnormalmaps
00021FF6 21FC 0000 0000 D004        		move.l	#Map_Mighty,($FFFFD004).w
00021FFE 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
00022004 11C0 D01C                  		move.b	d0,($FFFFD01C).w
00022008 3140 000A                  		move.w	d0,$A(a0)
0002200C 3140 000E                  		move.w	d0,$E(a0)
00022010 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
00022016 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0002201C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
00022022 6600 0000                  		bne.w	Debug_DoNothing	; if not, branch
00022026 4278 F780                  		clr.w	($FFFFF780).w
0002202A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
00022030 21FC 0000 0000 D004        		move.l	#Map_Mighty,($FFFFD004).w
00022038 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0002203E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
00022044 08F8 0002 D022             		bset	#2,($FFFFD022).w
0002204A 08F8 0001 D022             		bset	#1,($FFFFD022).w
00022050 4EF9 0000 0000             		jmp		Debug_DoNothing
00022056                            
00022056                            debugexitmetalmaps:
00022056 21FC 0000 0000 D004        		move.l	#Map_Metal,($FFFFD004).w
0002205E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
00022064 11C0 D01C                  		move.b	d0,($FFFFD01C).w
00022068 3140 000A                  		move.w	d0,$A(a0)
0002206C 3140 000E                  		move.w	d0,$E(a0)
00022070 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
00022076 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0002207C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
00022082 6600 0000                  		bne.w	Debug_DoNothing	; if not, branch
00022086 4278 F780                  		clr.w	($FFFFF780).w
0002208A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
00022090 21FC 0000 0000 D004        		move.l	#Map_Metal,($FFFFD004).w
00022098 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0002209E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
000220A4 08F8 0002 D022             		bset	#2,($FFFFD022).w
000220AA 08F8 0001 D022             		bset	#1,($FFFFD022).w
000220B0 4EF9 0000 0000             		jmp		Debug_DoNothing
000220B6                            
000220B6                            debugexitshadowmaps:
000220B6 21FC 0000 0000 D004        		move.l	#Map_Shadow,($FFFFD004).w
000220BE 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
000220C4 11C0 D01C                  		move.b	d0,($FFFFD01C).w
000220C8 3140 000A                  		move.w	d0,$A(a0)
000220CC 3140 000E                  		move.w	d0,$E(a0)
000220D0 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
000220D6 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
000220DC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
000220E2 6600 0000                  		bne.w	Debug_DoNothing	; if not, branch
000220E6 4278 F780                  		clr.w	($FFFFF780).w
000220EA 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
000220F0 21FC 0000 0000 D004        		move.l	#Map_Shadow,($FFFFD004).w
000220F8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
000220FE 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
00022104 08F8 0002 D022             		bset	#2,($FFFFD022).w
0002210A 08F8 0001 D022             		bset	#1,($FFFFD022).w
00022110 4EF9 0000 0000             		jmp		Debug_DoNothing
00022116                            
00022116                            debugexitnormalmaps:
00022116 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0002211E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
00022124 11C0 D01C                  		move.b	d0,($FFFFD01C).w
00022128 3140 000A                  		move.w	d0,$A(a0)
0002212C 3140 000E                  		move.w	d0,$E(a0)
00022130 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
00022136 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0002213C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
00022142 6600                       		bne.s	Debug_DoNothing	; if not, branch
00022144 4278 F780                  		clr.w	($FFFFF780).w
00022148 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0002214E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
00022156 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0002215C 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
00022162 08F8 0002 D022             		bset	#2,($FFFFD022).w
00022168 08F8 0001 D022             		bset	#1,($FFFFD022).w
0002216E                            
0002216E                            Debug_DoNothing:
0002216E 4E75                       		rts	
00022170                            ; End of function Debug_Control
00022170                            
00022170                            
00022170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022170                            
00022170                            
00022170                            Debug_ShowItem:				; XREF: Debug_Main
00022170 7000                       		moveq	#0,d0
00022172 1038 FE06                  		move.b	($FFFFFE06).w,d0
00022176 E748                       		lsl.w	#3,d0
00022178 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0002217E 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
00022184 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0002218A 4E75                       		rts	
0002218C                            ; End of function Debug_ShowItem
0002218C                            
0002218C                            ; ===========================================================================
0002218C                            ; ---------------------------------------------------------------------------
0002218C                            ; Debug	list pointers
0002218C                            ; ---------------------------------------------------------------------------
0002218C                            DebugList:
0002218C                            	include "_inc\Debug list pointers.asm"
0002218C                            ; ---------------------------------------------------------------------------
0002218C                            ; Debug	list pointers
0002218C                            ; ---------------------------------------------------------------------------
0002218C 0000                       	dc.w Debug_GHZ-DebugList
0002218E 0000                       	dc.w Debug_LZ-DebugList
00022190 0000                       	dc.w Debug_MZ-DebugList
00022192 0000                       	dc.w Debug_SLZ-DebugList
00022194 0000                       	dc.w Debug_SYZ-DebugList
00022196 0000                       	dc.w Debug_SBZ-DebugList
00022198 0000                       	dc.w Debug_Ending-DebugList
00022198 0000                       	dc.w Debug_Ending-DebugList
0002219A                            
0002219A                            ; ---------------------------------------------------------------------------
0002219A                            ; Debug	list - Green Hill
0002219A                            ; ---------------------------------------------------------------------------
0002219A                            Debug_GHZ:
0002219A                            	include "_inc\Debug list - GHZ.asm"
0002219A                            ; ---------------------------------------------------------------------------
0002219A                            ; Debug	list - Green Hill
0002219A                            ; ---------------------------------------------------------------------------
0002219A 0018                       	dc.w $18			; number of items in list
0002219C 2500 CF80                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
000221A0 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
000221A4 2600 D608                  	dc.l Map_obj26+$26000000
000221A8 0000 0680                  	dc.b 0,	0, 6, $80
000221AC 2600 D608                  	dc.l Map_obj26+$26000000
000221B0 0103 0680                  	dc.b 1,	3, 6, $80
000221B4 2600 D608                  	dc.l Map_obj26+$26000000
000221B8 0204 0680                  	dc.b 2,	4, 6, $80
000221BC 2600 D608                  	dc.l Map_obj26+$26000000
000221C0 0305 0680                  	dc.b 3,	5, 6, $80
000221C4 2600 D608                  	dc.l Map_obj26+$26000000
000221C8 0406 0680                  	dc.b 4,	6, 6, $80
000221CC 2600 D608                  	dc.l Map_obj26+$26000000
000221D0 0507 0680                  	dc.b 5,	7, 6, $80
000221D4 2600 D608                  	dc.l Map_obj26+$26000000
000221D8 0608 0680                  	dc.b 6,	8, 6, $80
000221DC 2600 D608                  	dc.l Map_obj26+$26000000
000221E0 0709 0680                  	dc.b 7,	9, 6, $80
000221E4 2600 D608                  	dc.l Map_obj26+$26000000
000221E8 080A 0680                  	dc.b 8,	$0A, 6, $80
000221EC 1F00 C6F8                  	dc.l Map_obj1F+$1F000000
000221F0 0000 0400                  	dc.b 0,	0, 4, 0
000221F4 2200 C9D8                  	dc.l Map_obj22+$22000000
000221F8 0000 0444                  	dc.b 0,	0, 4, $44
000221FC 2B00 DCC4                  	dc.l Map_obj2B+$2B000000
00022200 0000 047B                  	dc.b 0,	0, 4, $7B
00022204 3601 03CC                  	dc.l Map_obj36+$36000000
00022208 0000 051B                  	dc.b 0,	0, 5, $1B
0002220C 1800 B162                  	dc.l Map_obj18+$18000000
00022210 0000 4000                  	dc.b 0,	0, $40,	0
00022214 3B01 04F2                  	dc.l Map_obj3B+$3B000000
00022218 0000 63D0                  	dc.b 0,	0, $63,	$D0
0002221C 4001 2BA6                  	dc.l Map_obj40+$40000000
00022220 0000 04F0                  	dc.b 0,	0, 4, $F0
00022224 4101 1104                  	dc.l Map_obj41+$41000000
00022228 0000 0523                  	dc.b 0,	0, 5, $23
0002222C 4201 132E                  	dc.l Map_obj42+$42000000
00022230 0000 249B                  	dc.b 0,	0, $24,	$9B
00022234 4401 1642                  	dc.l Map_obj44+$44000000
00022238 0000 434C                  	dc.b 0,	0, $43,	$4C
0002223C 1900 B1D0                  	dc.l Map_obj48+$19000000
00022240 0000 43AA                  	dc.b 0,	0, $43,	$AA
00022244 7901 BF8A                  	dc.l Map_obj79+$79000000
00022248 0100 07A0                  	dc.b 1,	0, 7, $A0
0002224C 4B00 CFC0                  	dc.l Map_obj4B+$4B000000
00022250 0000 2400                  	dc.b 0,	0, $24,	0
00022254 7D01 C0DA                  	dc.l Map_obj7D+$7D000000
00022258 0101 84B6                  	dc.b 1,	1, $84,	$B6
0002225C                            	even
0002225C                            	even
0002225C                            
0002225C                            ; ---------------------------------------------------------------------------
0002225C                            ; Debug	list - Labyrinth
0002225C                            ; ---------------------------------------------------------------------------
0002225C                            Debug_LZ:
0002225C                            	include "_inc\Debug list - LZ.asm"
0002225C                            ; ---------------------------------------------------------------------------
0002225C                            ; Debug	list - Labyrinth
0002225C                            ; ---------------------------------------------------------------------------
0002225C 0021                       	dc.w $21
0002225E 2500 CF80                  	dc.l Map_obj25+$25000000
00022262 0000 27B2                  	dc.b 0,	0, $27,	$B2
00022266 2600 D608                  	dc.l Map_obj26+$26000000
0002226A 0000 0680                  	dc.b 0,	0, 6, $80
0002226E 2600 D608                  	dc.l Map_obj26+$26000000
00022272 0103 0680                  	dc.b 1,	3, 6, $80
00022276 2600 D608                  	dc.l Map_obj26+$26000000
0002227A 0204 0680                  	dc.b 2,	4, 6, $80
0002227E 2600 D608                  	dc.l Map_obj26+$26000000
00022282 0305 0680                  	dc.b 3,	5, 6, $80
00022286 2600 D608                  	dc.l Map_obj26+$26000000
0002228A 0406 0680                  	dc.b 4,	6, 6, $80
0002228E 2600 D608                  	dc.l Map_obj26+$26000000
00022292 0507 0680                  	dc.b 5,	7, 6, $80
00022296 2600 D608                  	dc.l Map_obj26+$26000000
0002229A 0608 0680                  	dc.b 6,	8, 6, $80
0002229E 2600 D608                  	dc.l Map_obj26+$26000000
000222A2 0709 0680                  	dc.b 7,	9, 6, $80
000222A6 2600 D608                  	dc.l Map_obj26+$26000000
000222AA 080A 0680                  	dc.b 8,	$0A, 6, $80
000222AE 4101 1104                  	dc.l Map_obj41+$41000000
000222B2 0000 0523                  	dc.b 0,	0, 5, $23
000222B6 2C00 DD6A                  	dc.l Map_obj2C+$2C000000
000222BA 0800 2486                  	dc.b 8,	0, $24,	$86
000222BE 2D00 DF56                  	dc.l Map_obj2D+$2D000000
000222C2 0002 84A6                  	dc.b 0,	2, $84,	$A6
000222C6 1601 53B6                  	dc.l Map_obj16+$16000000
000222CA 0000 03CC                  	dc.b 0,	0, 3, $CC
000222CE 1601 53B6                  	dc.l Map_obj16+$16000000
000222D2 0203 03CC                  	dc.b 2,	3, 3, $CC
000222D6 3300 F3D4                  	dc.l Map_obj33+$33000000
000222DA 0000 43DE                  	dc.b 0,	0, $43,	$DE
000222DE 3200 EF94                  	dc.l Map_obj32+$32000000
000222E2 0000 0513                  	dc.b 0,	0, 5, $13
000222E6 3601 03CC                  	dc.l Map_obj36+$36000000
000222EA 0000 051B                  	dc.b 0,	0, 5, $1B
000222EE 5201 34D8                  	dc.l Map_obj52a+$52000000
000222F2 0400 43BC                  	dc.b 4,	0, $43,	$BC
000222F6 6101 55DE                  	dc.l Map_obj61+$61000000
000222FA 0100 43E6                  	dc.b 1,	0, $43,	$E6
000222FE 6101 55DE                  	dc.l Map_obj61+$61000000
00022302 1301 43E6                  	dc.b $13, 1, $43, $E6
00022306 6101 55DE                  	dc.l Map_obj61+$61000000
0002230A 0500 43E6                  	dc.b 5,	0, $43,	$E6
0002230E 6201 5732                  	dc.l Map_obj62+$62000000
00022312 0000 443E                  	dc.b 0,	0, $44,	$3E
00022316 6101 55DE                  	dc.l Map_obj61+$61000000
0002231A 2702 43E6                  	dc.b $27, 2, $43, $E6
0002231E 6101 55DE                  	dc.l Map_obj61+$61000000
00022322 3003 43E6                  	dc.b $30, 3, $43, $E6
00022326 6301 5A94                  	dc.l Map_obj63+$63000000
0002232A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0002232E 6001 5300                  	dc.l Map_obj60+$60000000
00022332 0000 0467                  	dc.b 0,	0, 4, $67
00022336 6401 5DDA                  	dc.l Map_obj64+$64000000
0002233A 8413 8348                  	dc.b $84, $13, $83, $48
0002233E 6501 5F62                  	dc.l Map_obj65+$65000000
00022342 0202 C259                  	dc.b 2,	2, $C2,	$59
00022346 6501 5F62                  	dc.l Map_obj65+$65000000
0002234A 0909 C259                  	dc.b 9,	9, $C2,	$59
0002234E 0B01 4750                  	dc.l Map_obj0B+$B000000
00022352 0000 43DE                  	dc.b 0,	0, $43,	$DE
00022356 0C01 4820                  	dc.l Map_obj0C+$C000000
0002235A 0200 4328                  	dc.b 2,	0, $43,	$28
0002235E 7901 BF8A                  	dc.l Map_obj79+$79000000
00022362 0100 07A0                  	dc.b 1,	0, 7, $A0
00022366                            	even
00022366                            	even
00022366                            
00022366                            ; ---------------------------------------------------------------------------
00022366                            ; Debug	list - Marble
00022366                            ; ---------------------------------------------------------------------------
00022366                            Debug_MZ:
00022366                            	include "_inc\Debug list - MZ.asm"
00022366                            ; ---------------------------------------------------------------------------
00022366                            ; Debug	list - Marble
00022366                            ; ---------------------------------------------------------------------------
00022366 001A                       	dc.w $1A
00022368 2500 CF80                  	dc.l Map_obj25+$25000000
0002236C 0000 27B2                  	dc.b 0,	0, $27,	$B2
00022370 2600 D608                  	dc.l Map_obj26+$26000000
00022374 0000 0680                  	dc.b 0,	0, 6, $80
00022378 2600 D608                  	dc.l Map_obj26+$26000000
0002237C 0103 0680                  	dc.b 1,	3, 6, $80
00022380 2600 D608                  	dc.l Map_obj26+$26000000
00022384 0204 0680                  	dc.b 2,	4, 6, $80
00022388 2600 D608                  	dc.l Map_obj26+$26000000
0002238C 0305 0680                  	dc.b 3,	5, 6, $80
00022390 2600 D608                  	dc.l Map_obj26+$26000000
00022394 0406 0680                  	dc.b 4,	6, 6, $80
00022398 2600 D608                  	dc.l Map_obj26+$26000000
0002239C 0507 0680                  	dc.b 5,	7, 6, $80
000223A0 2600 D608                  	dc.l Map_obj26+$26000000
000223A4 0608 0680                  	dc.b 6,	8, 6, $80
000223A8 2600 D608                  	dc.l Map_obj26+$26000000
000223AC 0709 0680                  	dc.b 7,	9, 6, $80
000223B0 2600 D608                  	dc.l Map_obj26+$26000000
000223B4 080A 0680                  	dc.b 8,	$0A, 6, $80
000223B8 2200 C9D8                  	dc.l Map_obj22+$22000000
000223BC 0000 0444                  	dc.b 0,	0, 4, $44
000223C0 3601 03CC                  	dc.l Map_obj36+$36000000
000223C4 0000 051B                  	dc.b 0,	0, 5, $1B
000223C8 4101 1104                  	dc.l Map_obj41+$41000000
000223CC 0000 0523                  	dc.b 0,	0, 5, $23
000223D0 1300 E464                  	dc.l Map_obj14+$13000000
000223D4 0000 0345                  	dc.b 0,	0, 3, $45
000223D8 4601 1CFC                  	dc.l Map_obj46+$46000000
000223DC 0000 4000                  	dc.b 0,	0, $40,	0
000223E0 4C01 2652                  	dc.l Map_obj4C+$4C000000
000223E4 0000 63A8                  	dc.b 0,	0, $63,	$A8
000223E8 4E01 2936                  	dc.l Map_obj4E+$4E000000
000223EC 0000 63A8                  	dc.b 0,	0, $63,	$A8
000223F0 3300 F3D4                  	dc.l Map_obj33+$33000000
000223F4 0000 42B8                  	dc.b 0,	0, $42,	$B8
000223F8 5001 2D34                  	dc.l Map_obj50+$50000000
000223FC 0000 247B                  	dc.b 0,	0, $24,	$7B
00022400 5101 320C                  	dc.l Map_obj51+$51000000
00022404 0000 42B8                  	dc.b 0,	0, $42,	$B8
00022408 5201 3482                  	dc.l Map_obj52+$52000000
0002240C 0000 02B8                  	dc.b 0,	0, 2, $B8
00022410 5300 B776                  	dc.l Map_obj53+$53000000
00022414 0000 62B8                  	dc.b 0,	0, $62,	$B8
00022418 5401 2618                  	dc.l Map_obj54+$54000000
0002241C 0000 8680                  	dc.b 0,	0, $86,	$80
00022420 5501 3676                  	dc.l Map_obj55+$55000000
00022424 0000 04B8                  	dc.b 0,	0, 4, $B8
00022428 7801 BC02                  	dc.l Map_obj78+$78000000
0002242C 0000 24FF                  	dc.b 0,	0, $24,	$FF
00022430 7901 BF8A                  	dc.l Map_obj79+$79000000
00022434 0100 07A0                  	dc.b 1,	0, 7, $A0
00022438                            	even
00022438                            	even
00022438                            
00022438                            ; ---------------------------------------------------------------------------
00022438                            ; Debug	list - Star Light
00022438                            ; ---------------------------------------------------------------------------
00022438                            Debug_SLZ:
00022438                            	include "_inc\Debug list - SLZ.asm"
00022438                            ; ---------------------------------------------------------------------------
00022438                            ; Debug	list - Star Light
00022438                            ; ---------------------------------------------------------------------------
00022438 0017                       	dc.w $17
0002243A 2500 CF80                  	dc.l Map_obj25+$25000000
0002243E 0000 27B2                  	dc.b 0,	0, $27,	$B2
00022442 2600 D608                  	dc.l Map_obj26+$26000000
00022446 0000 0680                  	dc.b 0,	0, 6, $80
0002244A 2600 D608                  	dc.l Map_obj26+$26000000
0002244E 0103 0680                  	dc.b 1,	3, 6, $80
00022452 2600 D608                  	dc.l Map_obj26+$26000000
00022456 0204 0680                  	dc.b 2,	4, 6, $80
0002245A 2600 D608                  	dc.l Map_obj26+$26000000
0002245E 0305 0680                  	dc.b 3,	5, 6, $80
00022462 2600 D608                  	dc.l Map_obj26+$26000000
00022466 0406 0680                  	dc.b 4,	6, 6, $80
0002246A 2600 D608                  	dc.l Map_obj26+$26000000
0002246E 0507 0680                  	dc.b 5,	7, 6, $80
00022472 2600 D608                  	dc.l Map_obj26+$26000000
00022476 0608 0680                  	dc.b 6,	8, 6, $80
0002247A 2600 D608                  	dc.l Map_obj26+$26000000
0002247E 0709 0680                  	dc.b 7,	9, 6, $80
00022482 2600 D608                  	dc.l Map_obj26+$26000000
00022486 080A 0680                  	dc.b 8,	$0A, 6, $80
0002248A 5901 4178                  	dc.l Map_obj59+$59000000
0002248E 0000 4000                  	dc.b 0,	0, $40,	0
00022492 5300 B776                  	dc.l Map_obj53+$53000000
00022496 0002 44E0                  	dc.b 0,	2, $44,	$E0
0002249A 1800 B1C0                  	dc.l Map_obj18b+$18000000
0002249E 0000 4000                  	dc.b 0,	0, $40,	0
000224A2 5A01 42B2                  	dc.l Map_obj5A+$5A000000
000224A6 0000 4000                  	dc.b 0,	0, $40,	0
000224AA 5B01 446A                  	dc.l Map_obj5B+$5B000000
000224AE 0000 4000                  	dc.b 0,	0, $40,	0
000224B2 5D01 4A3A                  	dc.l Map_obj5D+$5D000000
000224B6 0000 43A0                  	dc.b 0,	0, $43,	$A0
000224BA 5E01 4DCC                  	dc.l Map_obj5E+$5E000000
000224BE 0000 0374                  	dc.b 0,	0, 3, $74
000224C2 4101 1104                  	dc.l Map_obj41+$41000000
000224C6 0000 0523                  	dc.b 0,	0, 5, $23
000224CA 1300 E464                  	dc.l Map_obj14+$13000000
000224CE 0000 0480                  	dc.b 0,	0, 4, $80
000224D2 1C00 B886                  	dc.l Map_obj1C+$1C000000
000224D6 0000 44D8                  	dc.b 0,	0, $44,	$D8
000224DA 5F01 504A                  	dc.l Map_obj5F+$5F000000
000224DE 0000 0400                  	dc.b 0,	0, 4, 0
000224E2 6001 5300                  	dc.l Map_obj60+$60000000
000224E6 0000 2429                  	dc.b 0,	0, $24,	$29
000224EA 7901 BF8A                  	dc.l Map_obj79+$79000000
000224EE 0100 07A0                  	dc.b 1,	0, 7, $A0
000224F2                            	even
000224F2                            	even
000224F2                            
000224F2                            ; ---------------------------------------------------------------------------
000224F2                            ; Debug	list - Spring Yard
000224F2                            ; ---------------------------------------------------------------------------
000224F2                            Debug_SYZ:
000224F2                            	include "_inc\Debug list - SYZ.asm"
000224F2                            ; ---------------------------------------------------------------------------
000224F2                            ; Debug	list - Spring Yard
000224F2                            ; ---------------------------------------------------------------------------
000224F2 0017                       	dc.w $17
000224F4 2500 CF80                  	dc.l Map_obj25+$25000000
000224F8 0000 27B2                  	dc.b 0,	0, $27,	$B2
000224FC 2600 D608                  	dc.l Map_obj26+$26000000
00022500 0000 0680                  	dc.b 0,	0, 6, $80
00022504 2600 D608                  	dc.l Map_obj26+$26000000
00022508 0103 0680                  	dc.b 1,	3, 6, $80
0002250C 2600 D608                  	dc.l Map_obj26+$26000000
00022510 0204 0680                  	dc.b 2,	4, 6, $80
00022514 2600 D608                  	dc.l Map_obj26+$26000000
00022518 0305 0680                  	dc.b 3,	5, 6, $80
0002251C 2600 D608                  	dc.l Map_obj26+$26000000
00022520 0406 0680                  	dc.b 4,	6, 6, $80
00022524 2600 D608                  	dc.l Map_obj26+$26000000
00022528 0507 0680                  	dc.b 5,	7, 6, $80
0002252C 2600 D608                  	dc.l Map_obj26+$26000000
00022530 0608 0680                  	dc.b 6,	8, 6, $80
00022534 2600 D608                  	dc.l Map_obj26+$26000000
00022538 0709 0680                  	dc.b 7,	9, 6, $80
0002253C 2600 D608                  	dc.l Map_obj26+$26000000
00022540 080A 0680                  	dc.b 8,	$0A, 6, $80
00022544 3601 03CC                  	dc.l Map_obj36+$36000000
00022548 0000 051B                  	dc.b 0,	0, 5, $1B
0002254C 4101 1104                  	dc.l Map_obj41+$41000000
00022550 0000 0523                  	dc.b 0,	0, 5, $23
00022554 4301 1594                  	dc.l Map_obj43+$43000000
00022558 0000 04B8                  	dc.b 0,	0, 4, $B8
0002255C 1201 1D7A                  	dc.l Map_obj12+$12000000
00022560 0000 0000                  	dc.b 0,	0, 0, 0
00022564 4701 1EF2                  	dc.l Map_obj47+$47000000
00022568 0000 0380                  	dc.b 0,	0, 3, $80
0002256C 1F00 C6F8                  	dc.l Map_obj1F+$1F000000
00022570 0000 0400                  	dc.b 0,	0, 4, 0
00022574 2200 C9D8                  	dc.l Map_obj22+$22000000
00022578 0000 0444                  	dc.b 0,	0, 4, $44
0002257C 5001 2D34                  	dc.l Map_obj50+$50000000
00022580 0000 247B                  	dc.b 0,	0, $24,	$7B
00022584 1800 B1AE                  	dc.l Map_obj18a+$18000000
00022588 0000 4000                  	dc.b 0,	0, $40,	0
0002258C 5601 3B38                  	dc.l Map_obj56+$56000000
00022590 0000 4000                  	dc.b 0,	0, $40,	0
00022594 3200 EF94                  	dc.l Map_obj32+$32000000
00022598 0000 0513                  	dc.b 0,	0, 5, $13
0002259C 7801 BC02                  	dc.l Map_obj78+$78000000
000225A0 0000 24FF                  	dc.b 0,	0, $24,	$FF
000225A4 7901 BF8A                  	dc.l Map_obj79+$79000000
000225A8 0100 07A0                  	dc.b 1,	0, 7, $A0
000225AC                            	even
000225AC                            	even
000225AC                            
000225AC                            ; ---------------------------------------------------------------------------
000225AC                            ; Debug	list - Scrap Brain
000225AC                            ; ---------------------------------------------------------------------------
000225AC                            Debug_SBZ:
000225AC                            	include "_inc\Debug list - SBZ.asm"
000225AC                            ; ---------------------------------------------------------------------------
000225AC                            ; Debug	list - Scrap Brain
000225AC                            ; ---------------------------------------------------------------------------
000225AC 0025                       	dc.w $25
000225AE 2500 CF80                  	dc.l Map_obj25+$25000000
000225B2 0000 27B2                  	dc.b 0,	0, $27,	$B2
000225B6 2600 D608                  	dc.l Map_obj26+$26000000
000225BA 0000 0680                  	dc.b 0,	0, 6, $80
000225BE 2600 D608                  	dc.l Map_obj26+$26000000
000225C2 0103 0680                  	dc.b 1,	3, 6, $80
000225C6 2600 D608                  	dc.l Map_obj26+$26000000
000225CA 0204 0680                  	dc.b 2,	4, 6, $80
000225CE 2600 D608                  	dc.l Map_obj26+$26000000
000225D2 0305 0680                  	dc.b 3,	5, 6, $80
000225D6 2600 D608                  	dc.l Map_obj26+$26000000
000225DA 0406 0680                  	dc.b 4,	6, 6, $80
000225DE 2600 D608                  	dc.l Map_obj26+$26000000
000225E2 0507 0680                  	dc.b 5,	7, 6, $80
000225E6 2600 D608                  	dc.l Map_obj26+$26000000
000225EA 0608 0680                  	dc.b 6,	8, 6, $80
000225EE 2600 D608                  	dc.l Map_obj26+$26000000
000225F2 0709 0680                  	dc.b 7,	9, 6, $80
000225F6 2600 D608                  	dc.l Map_obj26+$26000000
000225FA 080A 0680                  	dc.b 8,	$0A, 6, $80
000225FE 5F01 504A                  	dc.l Map_obj5F+$5F000000
00022602 0000 0400                  	dc.b 0,	0, 4, 0
00022606 6001 5300                  	dc.l Map_obj60+$60000000
0002260A 0000 0429                  	dc.b 0,	0, 4, $29
0002260E 7801 BC02                  	dc.l Map_obj78+$78000000
00022612 0000 22B0                  	dc.b 0,	0, $22,	$B0
00022616 1501 3ED4                  	dc.l Map_obj15b+$15000000
0002261A 0702 4391                  	dc.b 7,	2, $43,	$91
0002261E 6701 A514                  	dc.l Map_obj67+$67000000
00022622 E000 C344                  	dc.b $E0, 0, $C3, $44
00022626 5201 3482                  	dc.l Map_obj52+$52000000
0002262A 2802 22C0                  	dc.b $28, 2, $22, $C0
0002262E 3200 EF94                  	dc.l Map_obj32+$32000000
00022632 0000 0513                  	dc.b 0,	0, 5, $13
00022636 6901 A76E                  	dc.l Map_obj69+$69000000
0002263A 0300 4492                  	dc.b 3,	0, $44,	$92
0002263E 6901 A7C8                  	dc.l Map_obj69a+$69000000
00022642 8300 04DF                  	dc.b $83, 0, 4,	$DF
00022646 6A01 AA26                  	dc.l Map_obj6A+$6A000000
0002264A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0002264E 5300 B776                  	dc.l Map_obj53+$53000000
00022652 0000 43F5                  	dc.b 0,	0, $43,	$F5
00022656 5201 3482                  	dc.l Map_obj52+$52000000
0002265A 3903 4460                  	dc.b $39, 3, $44, $60
0002265E 6B01 ADF6                  	dc.l Map_obj6B+$6B000000
00022662 0000 22C0                  	dc.b 0,	0, $22,	$C0
00022666 2A00 BA1C                  	dc.l Map_obj2A+$2A000000
0002266A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0002266E 6B01 ADF6                  	dc.l Map_obj6B+$6B000000
00022672 1301 22C0                  	dc.b $13, 1, $22, $C0
00022676 6A01 AA26                  	dc.l Map_obj6A+$6A000000
0002267A 0100 43B5                  	dc.b 1,	0, $43,	$B5
0002267E 6B01 ADF6                  	dc.l Map_obj6B+$6B000000
00022682 2401 22C0                  	dc.b $24, 1, $22, $C0
00022686 6A01 AA26                  	dc.l Map_obj6A+$6A000000
0002268A 0402 43B5                  	dc.b 4,	2, $43,	$B5
0002268E 6B01 ADF6                  	dc.l Map_obj6B+$6B000000
00022692 3401 22C0                  	dc.b $34, 1, $22, $C0
00022696 6C01 AFC0                  	dc.l Map_obj6C+$6C000000
0002269A 0000 44C3                  	dc.b 0,	0, $44,	$C3
0002269E 6D01 19EA                  	dc.l Map_obj6D+$6D000000
000226A2 6400 83D9                  	dc.b $64, 0, $83, $D9
000226A6 6D01 19EA                  	dc.l Map_obj6D+$6D000000
000226AA 640B 83D9                  	dc.b $64, $B, $83, $D9
000226AE 6E01 B078                  	dc.l Map_obj6E+$6E000000
000226B2 0400 047E                  	dc.b 4,	0, 4, $7E
000226B6 7001 B4C2                  	dc.l Map_obj70+$70000000
000226BA 0000 42F0                  	dc.b 0,	0, $42,	$F0
000226BE 7101 48E0                  	dc.l Map_obj71+$71000000
000226C2 1100 8680                  	dc.b $11, 0, $86, $80
000226C6 1E00 BEAA                  	dc.l Map_obj1E+$1E000000
000226CA 0400 2302                  	dc.b 4,	0, $23,	2
000226CE 7901 BF8A                  	dc.l Map_obj79+$79000000
000226D2 0100 07A0                  	dc.b 1,	0, 7, $A0
000226D6                            	even
000226D6                            	even
000226D6                            
000226D6                            ; ---------------------------------------------------------------------------
000226D6                            ; Debug	list - ending sequence / special stage
000226D6                            ; ---------------------------------------------------------------------------
000226D6                            Debug_Ending:
000226D6                            	include "_inc\Debug list - Ending and SS.asm"
000226D6                            ; ---------------------------------------------------------------------------
000226D6                            ; Debug	list - ending sequence / special stage
000226D6                            ; ---------------------------------------------------------------------------
000226D6 000D                       	dc.w $D
000226D8 2500 CF80                  	dc.l Map_obj25+$25000000
000226DC 0000 27B2                  	dc.b 0,	0, $27,	$B2
000226E0 4701 1EF2                  	dc.l Map_obj47+$47000000
000226E4 0000 0380                  	dc.b 0,	0, 3, $80
000226E8 2800 C46C                  	dc.l Map_obj28a+$28000000
000226EC 0A00 05A0                  	dc.b $A, 0, 5, $A0
000226F0 2800 C46C                  	dc.l Map_obj28a+$28000000
000226F4 0B00 05A0                  	dc.b $B, 0, 5, $A0
000226F8 2800 C46C                  	dc.l Map_obj28a+$28000000
000226FC 0C00 05A0                  	dc.b $C, 0, 5, $A0
00022700 2800 C454                  	dc.l Map_obj28+$28000000
00022704 0D00 0553                  	dc.b $D, 0, 5, $53
00022708 2800 C454                  	dc.l Map_obj28+$28000000
0002270C 0E00 0553                  	dc.b $E, 0, 5, $53
00022710 2800 C454                  	dc.l Map_obj28+$28000000
00022714 0F00 0573                  	dc.b $F, 0, 5, $73
00022718 2800 C454                  	dc.l Map_obj28+$28000000
0002271C 1000 0573                  	dc.b $10, 0, 5,	$73
00022720 2800 C46C                  	dc.l Map_obj28a+$28000000
00022724 1100 0585                  	dc.b $11, 0, 5,	$85
00022728 2800 C484                  	dc.l Map_obj28b+$28000000
0002272C 1200 0593                  	dc.b $12, 0, 5,	$93
00022730 2800 C46C                  	dc.l Map_obj28a+$28000000
00022734 1300 0565                  	dc.b $13, 0, 5,	$65
00022738 2800 C484                  	dc.l Map_obj28b+$28000000
0002273C 1400 05B3                  	dc.b $14, 0, 5,	$B3
00022740                            	even
00022740                            	even
00022740                            
00022740                            ; ---------------------------------------------------------------------------
00022740                            ; Main level load blocks
00022740                            ; ---------------------------------------------------------------------------
00022740                            MainLoadBlocks:
00022740                            	include "_inc\Main level load blocks.asm"
00022740                            ; ---------------------------------------------------------------------------
00022740                            ; Main level load blocks
00022740                            ;
00022740                            ; ===FORMAT===
00022740                            ; level	patterns + (1st	PLC num	* 10^6)
00022740                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
00022740                            ; 256x256 mappings
00022740                            ; blank, music (unused), pal index (unused), pal index
00022740                            ; ---------------------------------------------------------------------------
00022740 0000 0000                  	dc.l Comp_GHZ+$4000000
00022744 0000 0000                  	dc.l Blk16_GHZ+$5000000
00022748 0000 0000                  	dc.l Blk256_GHZ
0002274C 0081 0404                  	dc.b 0,	$81, 4,	4
00022750 0000 0000                  	dc.l Comp_LZ+$6000000
00022754 0000 0000                  	dc.l Blk16_LZ+$7000000
00022758 0000 0000                  	dc.l Blk256_LZ
0002275C 0082 0505                  	dc.b 0,	$82, 5,	5
00022760 0000 0000                  	dc.l Comp_MZ+$8000000
00022764 0000 0000                  	dc.l Blk16_MZ+$9000000
00022768 0000 0000                  	dc.l Blk256_MZ
0002276C 0083 0606                  	dc.b 0,	$83, 6,	6
00022770 0000 0000                  	dc.l Comp_SLZ+$A000000
00022774 0000 0000                  	dc.l Blk16_SLZ+$B000000
00022778 0000 0000                  	dc.l Blk256_SLZ
0002277C 0084 0707                  	dc.b 0,	$84, 7,	7
00022780 0000 0000                  	dc.l Comp_SYZ+$C000000
00022784 0000 0000                  	dc.l Blk16_SYZ+$D000000
00022788 0000 0000                  	dc.l Blk256_SYZ
0002278C 0085 0808                  	dc.b 0,	$85, 8,	8
00022790 0000 0000                  	dc.l Comp_SBZ+$E000000
00022794 0000 0000                  	dc.l Blk16_SBZ+$F000000
00022798 0000 0000                  	dc.l Blk256_SBZ
0002279C 0086 0909                  	dc.b 0,	$86, 9,	9
000227A0 0000 0000                  	dc.l Comp_End	; main load block for ending
000227A4 0000 0000                  	dc.l Blk16_End
000227A8 0000 0000                  	dc.l Blk256_End
000227AC 0086 1313                  	dc.b 0,	$86, $13, $13
000227B0                            	even
000227B0                            	even
000227B0                            
000227B0                            ; ---------------------------------------------------------------------------
000227B0                            ; Pattern load cues
000227B0                            ; ---------------------------------------------------------------------------
000227B0                            ArtLoadCues:
000227B0                            	include "_inc\Pattern load cues.asm"
000227B0                            ; ---------------------------------------------------------------------------
000227B0                            ; Pattern load cues - index
000227B0                            ; ---------------------------------------------------------------------------
000227B0 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
000227B4 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
000227B8 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
000227BC 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
000227C0 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
000227C4 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
000227C8 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
000227CC 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
000227D0 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
000227D4 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
000227D8 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
000227DC 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
000227E0 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
000227E4 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
000227E8 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
000227EC 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
000227F0 0000 0000                  	dc.w PLC_ShadowLives-ArtLoadCues, PLC_MetalLives-ArtLoadCues
000227F4 0000                       	dc.w PLC_MightyLives-ArtLoadCues
000227F6                            ; ---------------------------------------------------------------------------
000227F6                            ; Pattern load cues - standard block 1
000227F6                            ; ---------------------------------------------------------------------------
000227F6 0003                       PLC_Main:	dc.w 3
000227F8 0000 0000                  		dc.l Nem_Lamp		; lamppost
000227FC D800                       		dc.w $D800
000227FE 0000 0000                  		dc.l Nem_Hud		; HUD
00022802 D940                       		dc.w $D940
00022804 0000 0000                  		dc.l Nem_Lives		; lives	counter
00022808 FA80                       		dc.w $FA80
0002280A 0000 0000                  		dc.l Nem_Ring		; rings
0002280E F640                       		dc.w $F640
00022810                            ; ---------------------------------------------------------------------------
00022810                            ; Pattern load cues - standard block 2
00022810                            ; ---------------------------------------------------------------------------
00022810 0003                       PLC_Main2:	dc.w 3
00022812 0000 0000                  		dc.l Nem_Monitors	; monitors
00022816 D000                       		dc.w $D000
00022818 0000 0000                  		dc.l Nem_Shield		; shield
0002281C A820                       		dc.w $A820
0002281E 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
00022822 AB80                       		dc.w $AB80
00022824 0001 890A                  		dc.l Nem_ShadProj    ; Sonic's bullets
00022828 F320                               dc.w $F320
0002282A                            ; ---------------------------------------------------------------------------
0002282A                            ; Pattern load cues - explosion
0002282A                            ; ---------------------------------------------------------------------------
0002282A 0000                       PLC_Explode:	dc.w 0
0002282C 0000 0000                  		dc.l Nem_Explode	; explosion
00022830 B400                       		dc.w $B400
00022832                            ; ---------------------------------------------------------------------------
00022832                            ; Pattern load cues - game/time	over
00022832                            ; ---------------------------------------------------------------------------
00022832 0000                       PLC_GameOver:	dc.w 0
00022834 0000 0000                  		dc.l Nem_GameOver	; game/time over
00022838 ABC0                       		dc.w $ABC0
0002283A                            ; ---------------------------------------------------------------------------
0002283A                            ; Pattern load cues - Green Hill
0002283A                            ; ---------------------------------------------------------------------------
0002283A 0009                       PLC_GHZ:	dc.w $9
0002283C                            ;		dc.l Nem_GHZ_1st	; GHZ main patterns
0002283C                            ;		dc.w 0
0002283C                            ;		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0002283C                            ;		dc.w $39A0
0002283C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
00022840 6B00                       		dc.w $6B00
00022842 0000 0000                  		dc.l Nem_PplRock	; purple rock
00022846 7A00                       		dc.w $7A00
00022848 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0002284C 8000                       		dc.w $8000
0002284E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
00022852 8880                       		dc.w $8880
00022854 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
00022858 8F60                       		dc.w $8F60
0002285A 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0002285E 9360                       		dc.w $9360
00022860 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
00022864 9E00                       		dc.w $9E00
00022866 0000 0000                  		dc.l Nem_Spikes		; spikes
0002286A A360                       		dc.w $A360
0002286C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00022870 A460                       		dc.w $A460
00022872 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00022876 A660                       		dc.w $A660
00022878 0005                       PLC_GHZ2:	dc.w 5
0002287A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0002287E 7000                       		dc.w $7000
00022880 0000 0000                  		dc.l Nem_Bridge		; bridge
00022884 71C0                       		dc.w $71C0
00022886 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0002288A 7300                       		dc.w $7300
0002288C 0000 0000                  		dc.l Nem_Ball		; giant	ball
00022890 7540                       		dc.w $7540
00022892 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
00022896 A1E0                       		dc.w $A1E0
00022898 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0002289C 6980                       		dc.w $6980
0002289E                            ; ---------------------------------------------------------------------------
0002289E                            ; Pattern load cues - Labyrinth
0002289E                            ; ---------------------------------------------------------------------------
0002289E 000A                       PLC_LZ:		dc.w $A
000228A0                            ;		dc.l Nem_LZ		; LZ main patterns
000228A0                            ;		dc.w 0
000228A0 0000 0000                  		dc.l Nem_LzBlock1	; block
000228A4 3C00                       		dc.w $3C00
000228A6 0000 0000                  		dc.l Nem_LzBlock2	; blocks
000228AA 3E00                       		dc.w $3E00
000228AC 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
000228B0 4B20                       		dc.w $4B20
000228B2 0000 0000                  		dc.l Nem_Water		; water	surface
000228B6 6000                       		dc.w $6000
000228B8 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
000228BC 6200                       		dc.w $6200
000228BE 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
000228C2 6500                       		dc.w $6500
000228C4 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
000228C8 6900                       		dc.w $6900
000228CA 0000 0000                  		dc.l Nem_LzBlock3	; block
000228CE 7780                       		dc.w $7780
000228D0 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
000228D4 7880                       		dc.w $7880
000228D6 0000 0000                  		dc.l Nem_Harpoon	; harpoon
000228DA 7980                       		dc.w $7980
000228DC 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
000228E0 94C0                       		dc.w $94C0
000228E2 000C                       PLC_LZ2:	dc.w $C
000228E4 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
000228E8 7BC0                       		dc.w $7BC0
000228EA 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
000228EE 7CC0                       		dc.w $7CC0
000228F0 0000 0000                  		dc.l Nem_LzWheel	; wheel
000228F4 7EC0                       		dc.w $7EC0
000228F6 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
000228FA 5D20                       		dc.w $5D20
000228FC 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
00022900 8800                       		dc.w $8800
00022902 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
00022906 89E0                       		dc.w $89E0
00022908 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002290C 8CE0                       		dc.w $8CE0
0002290E 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
00022912 90C0                       		dc.w $90C0
00022914 0000 0000                  		dc.l Nem_LzSwitch	; switch
00022918 A1E0                       		dc.w $A1E0
0002291A 0000 0000                  		dc.l Nem_Cork		; cork block
0002291E A000                       		dc.w $A000
00022920 0000 0000                  		dc.l Nem_Spikes		; spikes
00022924 A360                       		dc.w $A360
00022926 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002292A A460                       		dc.w $A460
0002292C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00022930 A660                       		dc.w $A660
00022932                            ; ---------------------------------------------------------------------------
00022932                            ; Pattern load cues - Marble
00022932                            ; ---------------------------------------------------------------------------
00022932 0008                       PLC_MZ:		dc.w 8
00022934                            ;		dc.l Nem_MZ		; MZ main patterns
00022934                            ;		dc.w 0
00022934 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
00022938 6000                       		dc.w $6000
0002293A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0002293E 68A0                       		dc.w $68A0
00022940 0000 0000                  		dc.l Nem_Swing		; swinging platform
00022944 7000                       		dc.w $7000
00022946 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0002294A 71C0                       		dc.w $71C0
0002294C 0000 0000                  		dc.l Nem_Lava		; lava
00022950 7500                       		dc.w $7500
00022952 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
00022956 8880                       		dc.w $8880
00022958 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0002295C 8F60                       		dc.w $8F60
0002295E 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
00022962 9700                       		dc.w $9700
00022964 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
00022968 9FE0                       		dc.w $9FE0
0002296A 0004                       PLC_MZ2:	dc.w 4
0002296C 0000 0000                  		dc.l Nem_MzSwitch	; switch
00022970 A260                       		dc.w $A260
00022972 0000 0000                  		dc.l Nem_Spikes		; spikes
00022976 A360                       		dc.w $A360
00022978 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002297C A460                       		dc.w $A460
0002297E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00022982 A660                       		dc.w $A660
00022984 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
00022988 5700                       		dc.w $5700
0002298A                            ; ---------------------------------------------------------------------------
0002298A                            ; Pattern load cues - Star Light
0002298A                            ; ---------------------------------------------------------------------------
0002298A 0007                       PLC_SLZ:	dc.w 7
0002298C                            ;		dc.l Nem_SLZ		; SLZ main patterns
0002298C                            ;		dc.w 0
0002298C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
00022990 8000                       		dc.w $8000
00022992 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
00022996 8520                       		dc.w $8520
00022998 0000 0000                  		dc.l Nem_MzFire		; fireballs
0002299C 9000                       		dc.w $9000
0002299E 0000 0000                  		dc.l Nem_SlzBlock	; block
000229A2 9C00                       		dc.w $9C00
000229A4 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
000229A8 A260                       		dc.w $A260
000229AA 0000 0000                  		dc.l Nem_Spikes		; spikes
000229AE A360                       		dc.w $A360
000229B0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
000229B4 A460                       		dc.w $A460
000229B6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
000229BA A660                       		dc.w $A660
000229BC 0005                       PLC_SLZ2:	dc.w 5
000229BE 0000 0000                  		dc.l Nem_Seesaw		; seesaw
000229C2 6E80                       		dc.w $6E80
000229C4 0000 0000                  		dc.l Nem_Fan		; fan
000229C8 7400                       		dc.w $7400
000229CA 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
000229CE 7980                       		dc.w $7980
000229D0 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
000229D4 7B80                       		dc.w $7B80
000229D6 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
000229DA 9B00                       		dc.w $9B00
000229DC 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
000229E0 9E00                       		dc.w $9E00
000229E2                            ; ---------------------------------------------------------------------------
000229E2                            ; Pattern load cues - Spring Yard
000229E2                            ; ---------------------------------------------------------------------------
000229E2 0003                       PLC_SYZ:	dc.w 3
000229E4                            ;		dc.l Nem_SYZ		; SYZ main patterns
000229E4                            ;		dc.w 0
000229E4 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
000229E8 8000                       		dc.w $8000
000229EA 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
000229EE 8880                       		dc.w $8880
000229F0 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
000229F4 8F60                       		dc.w $8F60
000229F6 0000 0000                  		dc.l Nem_Roller		; roller enemy
000229FA 9700                       		dc.w $9700
000229FC 0007                       PLC_SYZ2:	dc.w 7
000229FE 0000 0000                  		dc.l Nem_Bumper		; bumper
00022A02 7000                       		dc.w $7000
00022A04 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
00022A08 72C0                       		dc.w $72C0
00022A0A 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
00022A0E 7740                       		dc.w $7740
00022A10 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
00022A14 9FE0                       		dc.w $9FE0
00022A16 0000 0000                  		dc.l Nem_LzSwitch	; switch
00022A1A A1E0                       		dc.w $A1E0
00022A1C 0000 0000                  		dc.l Nem_Spikes		; spikes
00022A20 A360                       		dc.w $A360
00022A22 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00022A26 A460                       		dc.w $A460
00022A28 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00022A2C A660                       		dc.w $A660
00022A2E                            ; ---------------------------------------------------------------------------
00022A2E                            ; Pattern load cues - Scrap Brain
00022A2E                            ; ---------------------------------------------------------------------------
00022A2E 000A                       PLC_SBZ:	dc.w $A
00022A30                            ;		dc.l Nem_SBZ		; SBZ main patterns
00022A30                            ;		dc.w 0
00022A30 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
00022A34 5800                       		dc.w $5800
00022A36 0000 0000                  		dc.l Nem_SbzDoor1	; door
00022A3A 5D00                       		dc.w $5D00
00022A3C 0000 0000                  		dc.l Nem_Girder		; girder
00022A40 5E00                       		dc.w $5E00
00022A42 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
00022A46 6040                       		dc.w $6040
00022A48 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
00022A4C 6880                       		dc.w $6880
00022A4E 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
00022A52 6900                       		dc.w $6900
00022A54 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
00022A58 7220                       		dc.w $7220
00022A5A 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
00022A5E 76A0                       		dc.w $76A0
00022A60 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
00022A64 7B20                       		dc.w $7B20
00022A66 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
00022A6A 7EA0                       		dc.w $7EA0
00022A6C 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
00022A70 9860                       		dc.w $9860
00022A72 000C                       PLC_SBZ2:	dc.w $C
00022A74 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
00022A78 5600                       		dc.w $5600
00022A7A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
00022A7E 8000                       		dc.w $8000
00022A80 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
00022A84 8520                       		dc.w $8520
00022A86 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
00022A8A 8C00                       		dc.w $8C00
00022A8C 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
00022A90 8DE0                       		dc.w $8DE0
00022A92 0000 0000                  		dc.l Nem_Electric	; electric orb
00022A96 8FC0                       		dc.w $8FC0
00022A98 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
00022A9C 9240                       		dc.w $9240
00022A9E 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
00022AA2 7F20                       		dc.w $7F20
00022AA4 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
00022AA8 9BE0                       		dc.w $9BE0
00022AAA 0000 0000                  		dc.l Nem_LzSwitch	; switch
00022AAE A1E0                       		dc.w $A1E0
00022AB0 0000 0000                  		dc.l Nem_Spikes		; spikes
00022AB4 A360                       		dc.w $A360
00022AB6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
00022ABA A460                       		dc.w $A460
00022ABC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
00022AC0 A660                       		dc.w $A660
00022AC2                            ; ---------------------------------------------------------------------------
00022AC2                            ; Pattern load cues - title card
00022AC2                            ; ---------------------------------------------------------------------------
00022AC2 0000                       PLC_TitleCard:	dc.w 0
00022AC4 0000 0000                  		dc.l Nem_TitleCard
00022AC8 B000                       		dc.w $B000
00022ACA                            ; ---------------------------------------------------------------------------
00022ACA                            ; Pattern load cues - act 3 boss
00022ACA                            ; ---------------------------------------------------------------------------
00022ACA 0005                       PLC_Boss:	dc.w 5
00022ACC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
00022AD0 8000                       		dc.w $8000
00022AD2 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
00022AD6 8D80                       		dc.w $8D80
00022AD8 0000 0000                  		dc.l Nem_Prison		; prison capsule
00022ADC 93A0                       		dc.w $93A0
00022ADE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
00022AE2 A300                       		dc.w $A300
00022AE4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
00022AE8 A300                       		dc.w $A300
00022AEA 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
00022AEE A540                       		dc.w $A540
00022AF0                            ; ---------------------------------------------------------------------------
00022AF0                            ; Pattern load cues - act 1/2 signpost
00022AF0                            ; ---------------------------------------------------------------------------
00022AF0 0002                       PLC_Signpost:	dc.w 2
00022AF2 0000 0000                  		dc.l Nem_SignPost	; signpost
00022AF6 D000                       		dc.w $D000
00022AF8 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
00022AFC 96C0                       		dc.w $96C0
00022AFE 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
00022B02 8C40                       		dc.w $8C40
00022B04                            ; ---------------------------------------------------------------------------
00022B04                            ; Pattern load cues - beta special stage warp effect
00022B04                            ; ---------------------------------------------------------------------------
00022B04 0000                       PLC_Warp:	dc.w 0
00022B06 0000 0000                  		dc.l Nem_Warp
00022B0A A820                       		dc.w $A820
00022B0C                            ; ---------------------------------------------------------------------------
00022B0C                            ; Pattern load cues - special stage
00022B0C                            ; ---------------------------------------------------------------------------
00022B0C 0010                       PLC_SpeStage:	dc.w $10
00022B0E 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
00022B12 0000                       		dc.w 0
00022B14 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
00022B18 0A20                       		dc.w $A20
00022B1A 0000 0000                  		dc.l Nem_SSWalls	; walls
00022B1E 2840                       		dc.w $2840
00022B20 0000 0000                  		dc.l Nem_Bumper		; bumper
00022B24 4760                       		dc.w $4760
00022B26 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
00022B2A 4A20                       		dc.w $4A20
00022B2C 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
00022B30 4C60                       		dc.w $4C60
00022B32 0000 0000                  		dc.l Nem_SSRBlock	; R block
00022B36 5E00                       		dc.w $5E00
00022B38 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
00022B3C 6E00                       		dc.w $6E00
00022B3E 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
00022B42 7E00                       		dc.w $7E00
00022B44 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
00022B48 8E00                       		dc.w $8E00
00022B4A 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
00022B4E 9E00                       		dc.w $9E00
00022B50 0000 0000                  		dc.l Nem_SSWBlock	; W block
00022B54 AE00                       		dc.w $AE00
00022B56 0000 0000                  		dc.l Nem_SSGlass	; glass	block
00022B5A BE00                       		dc.w $BE00
00022B5C 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
00022B60 EE00                       		dc.w $EE00
00022B62 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
00022B66 F2E0                       		dc.w $F2E0
00022B68 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
00022B6C F400                       		dc.w $F400
00022B6E 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
00022B72 F520                       		dc.w $F520
00022B74 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
00022B78 F2E0                       		dc.w $F2E0
00022B7A 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
00022B7E F400                       		dc.w $F400
00022B80 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
00022B84 F520                       		dc.w $F520
00022B86                            ; ---------------------------------------------------------------------------
00022B86                            ; Pattern load cues - GHZ animals
00022B86                            ; ---------------------------------------------------------------------------
00022B86 0001                       PLC_GHZAnimals:	dc.w 1
00022B88 0000 0000                  		dc.l Nem_Rabbit		; rabbit
00022B8C B000                       		dc.w $B000
00022B8E 0000 0000                  		dc.l Nem_Flicky		; flicky
00022B92 B240                       		dc.w $B240
00022B94                            ; ---------------------------------------------------------------------------
00022B94                            ; Pattern load cues - LZ animals
00022B94                            ; ---------------------------------------------------------------------------
00022B94 0001                       PLC_LZAnimals:	dc.w 1
00022B96 0000 0000                  		dc.l Nem_BlackBird	; blackbird
00022B9A B000                       		dc.w $B000
00022B9C 0000 0000                  		dc.l Nem_Seal		; seal
00022BA0 B240                       		dc.w $B240
00022BA2                            ; ---------------------------------------------------------------------------
00022BA2                            ; Pattern load cues - MZ animals
00022BA2                            ; ---------------------------------------------------------------------------
00022BA2 0001                       PLC_MZAnimals:	dc.w 1
00022BA4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
00022BA8 B000                       		dc.w $B000
00022BAA 0000 0000                  		dc.l Nem_Seal		; seal
00022BAE B240                       		dc.w $B240
00022BB0                            ; ---------------------------------------------------------------------------
00022BB0                            ; Pattern load cues - SLZ animals
00022BB0                            ; ---------------------------------------------------------------------------
00022BB0 0001                       PLC_SLZAnimals:	dc.w 1
00022BB2 0000 0000                  		dc.l Nem_Pig		; pig
00022BB6 B000                       		dc.w $B000
00022BB8 0000 0000                  		dc.l Nem_Flicky		; flicky
00022BBC B240                       		dc.w $B240
00022BBE                            ; ---------------------------------------------------------------------------
00022BBE                            ; Pattern load cues - SYZ animals
00022BBE                            ; ---------------------------------------------------------------------------
00022BBE 0001                       PLC_SYZAnimals:	dc.w 1
00022BC0 0000 0000                  		dc.l Nem_Pig		; pig
00022BC4 B000                       		dc.w $B000
00022BC6 0000 0000                  		dc.l Nem_Chicken	; chicken
00022BCA B240                       		dc.w $B240
00022BCC                            ; ---------------------------------------------------------------------------
00022BCC                            ; Pattern load cues - SBZ animals
00022BCC                            ; ---------------------------------------------------------------------------
00022BCC 0001                       PLC_SBZAnimals:	dc.w 1
00022BCE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
00022BD2 B000                       		dc.w $B000
00022BD4 0000 0000                  		dc.l Nem_Chicken	; chicken
00022BD8 B240                       		dc.w $B240
00022BDA                            ; ---------------------------------------------------------------------------
00022BDA                            ; Pattern load cues - special stage results screen
00022BDA                            ; ---------------------------------------------------------------------------
00022BDA 0001                       PLC_SpeStResult:dc.w 1
00022BDC 0000 0000                  		dc.l Nem_ResultEm	; emeralds
00022BE0 A820                       		dc.w $A820
00022BE2 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
00022BE6 AA20                       		dc.w $AA20
00022BE8                            ; ---------------------------------------------------------------------------
00022BE8                            ; Pattern load cues - ending sequence
00022BE8                            ; ---------------------------------------------------------------------------
00022BE8 000C                       PLC_Ending:	dc.w $C
00022BEA                            ;		dc.l Nem_GHZ_1st	; GHZ main patterns
00022BEA                            ;		dc.w 0
00022BEA                            ;		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
00022BEA                            ;		dc.w $39A0
00022BEA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
00022BEE 6B00                       		dc.w $6B00
00022BF0 0000 0000                  		dc.l Nem_EndFlower	; flowers
00022BF4 7400                       		dc.w $7400
00022BF6 0000 0000                  		dc.l Nem_EndEm		; emeralds
00022BFA 78A0                       		dc.w $78A0
00022BFC 0000 0000                  		dc.l Nem_EndSonic	; Sonic
00022C00 7C20                       		dc.w $7C20
00022C02 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
00022C06 A480                       		dc.w $A480
00022C08 0000 0000                  		dc.l Nem_Rabbit		; rabbit
00022C0C AA60                       		dc.w $AA60
00022C0E 0000 0000                  		dc.l Nem_Chicken	; chicken
00022C12 ACA0                       		dc.w $ACA0
00022C14 0000 0000                  		dc.l Nem_BlackBird	; blackbird
00022C18 AE60                       		dc.w $AE60
00022C1A 0000 0000                  		dc.l Nem_Seal		; seal
00022C1E B0A0                       		dc.w $B0A0
00022C20 0000 0000                  		dc.l Nem_Pig		; pig
00022C24 B260                       		dc.w $B260
00022C26 0000 0000                  		dc.l Nem_Flicky		; flicky
00022C2A B4A0                       		dc.w $B4A0
00022C2C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
00022C30 B660                       		dc.w $B660
00022C32 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
00022C36 B8A0                       		dc.w $B8A0
00022C38                            ; ---------------------------------------------------------------------------
00022C38                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00022C38                            ; ---------------------------------------------------------------------------
00022C38 0002                       PLC_TryAgain:	dc.w 2
00022C3A 0000 0000                  		dc.l Nem_EndEm		; emeralds
00022C3E 78A0                       		dc.w $78A0
00022C40 0000 0000                  		dc.l Nem_TryAgain	; Eggman
00022C44 7C20                       		dc.w $7C20
00022C46 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
00022C4A B400                       		dc.w $B400
00022C4C                            ; ---------------------------------------------------------------------------
00022C4C                            ; Pattern load cues - Eggman on SBZ 2
00022C4C                            ; ---------------------------------------------------------------------------
00022C4C 0002                       PLC_EggmanSBZ2:	dc.w 2
00022C4E 0000 0000                  		dc.l Nem_SbzBlock	; block
00022C52 A300                       		dc.w $A300
00022C54 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
00022C58 8000                       		dc.w $8000
00022C5A 0000 0000                  		dc.l Nem_LzSwitch	; switch
00022C5E 9400                       		dc.w $9400
00022C60                            ; ---------------------------------------------------------------------------
00022C60                            ; Pattern load cues - final boss
00022C60                            ; ---------------------------------------------------------------------------
00022C60 0004                       PLC_FZBoss:	dc.w 4
00022C62 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
00022C66 7400                       		dc.w $7400
00022C68 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
00022C6C 6000                       		dc.w $6000
00022C6E 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
00022C72 8000                       		dc.w $8000
00022C74 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
00022C78 8E00                       		dc.w $8E00
00022C7A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
00022C7E A540                       		dc.w $A540
00022C80                            ; ---------------------------------------------------------------------------
00022C80                            ; Pattern load cues - Shadow's life icon
00022C80                            ; ---------------------------------------------------------------------------
00022C80 0000                       PLC_ShadowLives: dc.w 0
00022C82 0000 0000                  		dc.l Nem_LivesShadow		; lives	counter
00022C86 FA80                       		dc.w $FA80
00022C88                            ; ---------------------------------------------------------------------------
00022C88                            ; Pattern load cues - Metal's life icon
00022C88                            ; ---------------------------------------------------------------------------
00022C88 0000                       PLC_MetalLives: dc.w 0
00022C8A 0000 0000                  		dc.l Nem_LivesMetal		; lives	counter
00022C8E FA80                       		dc.w $FA80
00022C90                            ; ---------------------------------------------------------------------------
00022C90                            ; Pattern load cues - Mighty's life icon
00022C90                            ; ---------------------------------------------------------------------------
00022C90 0000                       PLC_MightyLives: dc.w 0
00022C92 0000 0000                  		dc.l Nem_LivesMighty	; lives	counter
00022C96 FA80                       		dc.w $FA80
00022C98                            		even
00022C98                            		even
00022C98                            
00022C98                            		incbin	misc\padding.bin
00022D86                            		even
00022D86                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
000231E8                            		even
000231E8                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
000232E0                            		even
000232E0                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
000233BC                            		even
000233BC                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00024336                            		even
00024336                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000254BE                            		even
000254BE                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000254F2                            		even
000254F2                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000255B0                            		even
000255B0                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00025A58                            		even
00025A58                            ; ---------------------------------------------------------------------------
00025A58                            ; Sprite mappings - Sonic
00025A58                            ; ---------------------------------------------------------------------------
00025A58                            Map_Sonic:
00025A58                            	include "_maps\Sonic.asm"
00025A58                            ; ================================================================================
00025A58                            ; Sprite Mappings - generated by Flex 2 Sat May 05 2018 15:27:48 GMT-0400 (Eastern Daylight Time)
00025A58                            ; ================================================================================
00025A58                            
00025A58                            Sonic_Map:
00025A58 0000 0000                  	dc.w $0, Sonic_Map_1-Sonic_Map
00025A5C 0000 0000                  	dc.w Sonic_Map_2-Sonic_Map, Sonic_Map_3-Sonic_Map
00025A60 0000 0000                  	dc.w Sonic_Map_4-Sonic_Map, Sonic_Map_5-Sonic_Map
00025A64 0000 0000                  	dc.w Sonic_Map_6-Sonic_Map, Sonic_Map_7-Sonic_Map
00025A68 0000 0000                  	dc.w Sonic_Map_8-Sonic_Map, Sonic_Map_9-Sonic_Map
00025A6C 0000 0000                  	dc.w Sonic_Map_A-Sonic_Map, Sonic_Map_B-Sonic_Map
00025A70 0000 0000                  	dc.w Sonic_Map_C-Sonic_Map, Sonic_Map_D-Sonic_Map
00025A74 0000 0000                  	dc.w Sonic_Map_E-Sonic_Map, Sonic_Map_F-Sonic_Map
00025A78 0000 0000                  	dc.w Sonic_Map_10-Sonic_Map, Sonic_Map_11-Sonic_Map
00025A7C 0000 0000                  	dc.w Sonic_Map_12-Sonic_Map, Sonic_Map_13-Sonic_Map
00025A80 0000 0000                  	dc.w Sonic_Map_14-Sonic_Map, Sonic_Map_15-Sonic_Map
00025A84 0000 0000                  	dc.w Sonic_Map_16-Sonic_Map, Sonic_Map_17-Sonic_Map
00025A88 0000 0000                  	dc.w Sonic_Map_18-Sonic_Map, Sonic_Map_19-Sonic_Map
00025A8C 0000 0000                  	dc.w Sonic_Map_1A-Sonic_Map, Sonic_Map_1B-Sonic_Map
00025A90 0000 0000                  	dc.w Sonic_Map_1C-Sonic_Map, Sonic_Map_1D-Sonic_Map
00025A94 0000 0000                  	dc.w Sonic_Map_1E-Sonic_Map, Sonic_Map_1F-Sonic_Map
00025A98 0000 0000                  	dc.w Sonic_Map_20-Sonic_Map, Sonic_Map_21-Sonic_Map
00025A9C 0000 0000                  	dc.w Sonic_Map_22-Sonic_Map, Sonic_Map_23-Sonic_Map
00025AA0 0000 0000                  	dc.w Sonic_Map_24-Sonic_Map, Sonic_Map_25-Sonic_Map
00025AA4 0000 0000                  	dc.w Sonic_Map_26-Sonic_Map, Sonic_Map_27-Sonic_Map
00025AA8 0000 0000                  	dc.w Sonic_Map_28-Sonic_Map, Sonic_Map_29-Sonic_Map
00025AAC 0000 0000                  	dc.w Sonic_Map_2A-Sonic_Map, Sonic_Map_2B-Sonic_Map
00025AB0 0000 0000                  	dc.w Sonic_Map_2C-Sonic_Map, Sonic_Map_2D-Sonic_Map
00025AB4 0000 0000                  	dc.w Sonic_Map_2E-Sonic_Map, Sonic_Map_2F-Sonic_Map
00025AB8 0000 0000                  	dc.w Sonic_Map_30-Sonic_Map, Sonic_Map_31-Sonic_Map
00025ABC 0000 0000                  	dc.w Sonic_Map_32-Sonic_Map, Sonic_Map_33-Sonic_Map
00025AC0 0000 0000                  	dc.w Sonic_Map_34-Sonic_Map, Sonic_Map_35-Sonic_Map
00025AC4 0000 0000                  	dc.w Sonic_Map_36-Sonic_Map, Sonic_Map_37-Sonic_Map
00025AC8 0000 0000                  	dc.w Sonic_Map_38-Sonic_Map, Sonic_Map_39-Sonic_Map
00025ACC 0000 0000                  	dc.w Sonic_Map_3A-Sonic_Map, Sonic_Map_3B-Sonic_Map
00025AD0 0000 0000                  	dc.w Sonic_Map_3C-Sonic_Map, Sonic_Map_3D-Sonic_Map
00025AD4 0000 0000                  	dc.w Sonic_Map_3E-Sonic_Map, Sonic_Map_3F-Sonic_Map
00025AD8 0000 0000                  	dc.w Sonic_Map_40-Sonic_Map, Sonic_Map_41-Sonic_Map
00025ADC 0000 0000                  	dc.w Sonic_Map_42-Sonic_Map, Sonic_Map_43-Sonic_Map
00025AE0 0000 0000                  	dc.w Sonic_Map_44-Sonic_Map, Sonic_Map_45-Sonic_Map
00025AE4 0000 0000                  	dc.w Sonic_Map_46-Sonic_Map, Sonic_Map_47-Sonic_Map
00025AE8 0000 0000                  	dc.w Sonic_Map_48-Sonic_Map, $0
00025AEC 0000 0000                  	dc.w Sonic_Map_4A-Sonic_Map, Sonic_Map_4B-Sonic_Map
00025AF0 0000 0000                  	dc.w Sonic_Map_4C-Sonic_Map, Sonic_Map_4D-Sonic_Map
00025AF4 0000 0000                  	dc.w Sonic_Map_4E-Sonic_Map, Sonic_Map_4F-Sonic_Map
00025AF8 0000 0000                  	dc.w Sonic_Map_50-Sonic_Map, Sonic_Map_51-Sonic_Map
00025AFC 0000 0000                  	dc.w Sonic_Map_52-Sonic_Map, Sonic_Map_53-Sonic_Map
00025B00 0000 0000                  	dc.w Sonic_Map_54-Sonic_Map, Sonic_Map_55-Sonic_Map
00025B04 0000 0000                  	dc.w Sonic_Map_56-Sonic_Map, Sonic_Map_57-Sonic_Map
00025B08 0000 0000                  	dc.w Sonic_Map_58-Sonic_Map, Sonic_Map_59-Sonic_Map
00025B0C 0000 0000                  	dc.w Sonic_Map_5A-Sonic_Map, Sonic_Map_5B-Sonic_Map
00025B10 0000 0000                  	dc.w Sonic_Map_5C-Sonic_Map, Sonic_Map_5D-Sonic_Map
00025B14 0000 0000                  	dc.w Sonic_Map_5E-Sonic_Map, Sonic_Map_5F-Sonic_Map
00025B18 0000 0000                  	dc.w Sonic_Map_60-Sonic_Map, Sonic_Map_61-Sonic_Map
00025B1C 0000 0000                  	dc.w Sonic_Map_62-Sonic_Map, Sonic_Map_63-Sonic_Map
00025B20 0000 0000                  	dc.w Sonic_Map_64-Sonic_Map, Sonic_Map_65-Sonic_Map
00025B24 0000 0000                  	dc.w Sonic_Map_66-Sonic_Map, Sonic_Map_67-Sonic_Map
00025B28 0000 0000                  	dc.w Sonic_Map_68-Sonic_Map, Sonic_Map_69-Sonic_Map
00025B2C 0000 0000                  	dc.w Sonic_Map_6A-Sonic_Map, Sonic_Map_6B-Sonic_Map
00025B30 0000 0000                  	dc.w Sonic_Map_6C-Sonic_Map, Sonic_Map_6D-Sonic_Map
00025B34 0000 0000                  	dc.w Sonic_Map_6E-Sonic_Map, Sonic_Map_6F-Sonic_Map
00025B38 0000 0000                  	dc.w Sonic_Map_70-Sonic_Map, Sonic_Map_71-Sonic_Map
00025B3C 0000 0000                  	dc.w Sonic_Map_72-Sonic_Map, Sonic_Map_73-Sonic_Map
00025B40 0000 0000                  	dc.w Sonic_Map_74-Sonic_Map, Sonic_Map_75-Sonic_Map
00025B44 0000 0000                  	dc.w Sonic_Map_76-Sonic_Map, Sonic_Map_77-Sonic_Map
00025B48 0000 0000                  	dc.w Sonic_Map_78-Sonic_Map, Sonic_Map_79-Sonic_Map
00025B4C 0000 0000                  	dc.w Sonic_Map_7A-Sonic_Map, Sonic_Map_7B-Sonic_Map
00025B50 0000 0000                  	dc.w Sonic_Map_7C-Sonic_Map, Sonic_Map_7D-Sonic_Map
00025B54 0000 0000                  	dc.w Sonic_Map_7E-Sonic_Map, Sonic_Map_7F-Sonic_Map
00025B58 0000 0000                  	dc.w Sonic_Map_80-Sonic_Map, Sonic_Map_81-Sonic_Map
00025B5C 0000 0000                  	dc.w Sonic_Map_82-Sonic_Map, Sonic_Map_83-Sonic_Map
00025B60 0000 0000                  	dc.w Sonic_Map_84-Sonic_Map, Sonic_Map_85-Sonic_Map
00025B64 0000 0000                  	dc.w Sonic_Map_86-Sonic_Map, Sonic_Map_87-Sonic_Map
00025B68 0000                       	dc.w Sonic_Map_88-Sonic_Map
00025B6A 04                         Sonic_Map_1: dc.b $4
00025B6B EC0F 0000 ED               	dc.b $EC, $F, $0, $0, $ED
00025B70 FC02 0010 0D               	dc.b $FC, $2, $0, $10, $D
00025B75 0C04 0013 ED               	dc.b $C, $4, $0, $13, $ED
00025B7A 0C00 0015 05               	dc.b $C, $0, $0, $15, $5
00025B7F 04                         Sonic_Map_2: dc.b $4
00025B80 ED0D 0000 ED               	dc.b $ED, $D, $0, $0, $ED
00025B85 FD0A 0008 F5               	dc.b $FD, $A, $0, $8, $F5
00025B8A 0501 0011 ED               	dc.b $5, $1, $0, $11, $ED
00025B8F 0501 0013 0D               	dc.b $5, $1, $0, $13, $D
00025B94 02                         Sonic_Map_3: dc.b $2
00025B95 EE0D 0000 F2               	dc.b $EE, $D, $0, $0, $F2
00025B9A FE0A 0008 F2               	dc.b $FE, $A, $0, $8, $F2
00025B9F 03                         Sonic_Map_4: dc.b $3
00025BA0 EC0B 0000 F2               	dc.b $EC, $B, $0, $0, $F2
00025BA5 F403 000C 0A               	dc.b $F4, $3, $0, $C, $A
00025BAA 0C08 0010 F2               	dc.b $C, $8, $0, $10, $F2
00025BAF 04                         Sonic_Map_5: dc.b $4
00025BB0 EC0F 0000 EE               	dc.b $EC, $F, $0, $0, $EE
00025BB5 FC01 0010 0E               	dc.b $FC, $1, $0, $10, $E
00025BBA 0C04 0012 EE               	dc.b $C, $4, $0, $12, $EE
00025BBF 0C00 0014 06               	dc.b $C, $0, $0, $14, $6
00025BC4 05                         Sonic_Map_6: dc.b $5
00025BC5 ED0D 0000 EE               	dc.b $ED, $D, $0, $0, $EE
00025BCA FD09 0008 F6               	dc.b $FD, $9, $0, $8, $F6
00025BCF 0501 000E EE               	dc.b $5, $1, $0, $E, $EE
00025BD4 0501 0010 0E               	dc.b $5, $1, $0, $10, $E
00025BD9 0D00 0012 06               	dc.b $D, $0, $0, $12, $6
00025BDE 02                         Sonic_Map_7: dc.b $2
00025BDF EE0D 0000 F2               	dc.b $EE, $D, $0, $0, $F2
00025BE4 FE0A 0008 F2               	dc.b $FE, $A, $0, $8, $F2
00025BE9 03                         Sonic_Map_8: dc.b $3
00025BEA EC0B 0000 F2               	dc.b $EC, $B, $0, $0, $F2
00025BEF F400 000C 0A               	dc.b $F4, $0, $0, $C, $A
00025BF4 0C0C 000D F2               	dc.b $C, $C, $0, $D, $F2
00025BF9 04                         Sonic_Map_9: dc.b $4
00025BFA F00E 0000 EB               	dc.b $F0, $E, $0, $0, $EB
00025BFF F002 000C 0B               	dc.b $F0, $2, $0, $C, $B
00025C04 0808 000F F3               	dc.b $8, $8, $0, $F, $F3
00025C09 1005 0012 FB               	dc.b $10, $5, $0, $12, $FB
00025C0E 04                         Sonic_Map_A: dc.b $4
00025C0F F20E 0000 ED               	dc.b $F2, $E, $0, $0, $ED
00025C14 FA05 000C 0D               	dc.b $FA, $5, $0, $C, $D
00025C19 0A08 0010 FD               	dc.b $A, $8, $0, $10, $FD
00025C1E 1200 0013 FD               	dc.b $12, $0, $0, $13, $FD
00025C23 03                         Sonic_Map_B: dc.b $3
00025C24 ED0E 0000 EF               	dc.b $ED, $E, $0, $0, $EF
00025C29 050C 000C F7               	dc.b $5, $C, $0, $C, $F7
00025C2E 0D04 0010 07               	dc.b $D, $4, $0, $10, $7
00025C33 04                         Sonic_Map_C: dc.b $4
00025C34 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00025C39 FD05 000C 0D               	dc.b $FD, $5, $0, $C, $D
00025C3E 0508 0010 F5               	dc.b $5, $8, $0, $10, $F5
00025C43 0D08 0013 FD               	dc.b $D, $8, $0, $13, $FD
00025C48 04                         Sonic_Map_D: dc.b $4
00025C49 EE0F 0000 ED               	dc.b $EE, $F, $0, $0, $ED
00025C4E F602 0010 0D               	dc.b $F6, $2, $0, $10, $D
00025C53 0E08 0013 ED               	dc.b $E, $8, $0, $13, $ED
00025C58 1604 0016 FD               	dc.b $16, $4, $0, $16, $FD
00025C5D 04                         Sonic_Map_E: dc.b $4
00025C5E ED0A 0000 ED               	dc.b $ED, $A, $0, $0, $ED
00025C63 F50A 0009 05               	dc.b $F5, $A, $0, $9, $5
00025C68 0505 0012 F5               	dc.b $5, $5, $0, $12, $F5
00025C6D 1500 0016 FD               	dc.b $15, $0, $0, $16, $FD
00025C72 03                         Sonic_Map_F: dc.b $3
00025C73 F10E 0000 EC               	dc.b $F1, $E, $0, $0, $EC
00025C78 090C 000C F4               	dc.b $9, $C, $0, $C, $F4
00025C7D 1104 0010 FC               	dc.b $11, $4, $0, $10, $FC
00025C82 03                         Sonic_Map_10: dc.b $3
00025C83 F20E 0000 EC               	dc.b $F2, $E, $0, $0, $EC
00025C88 0202 000C 0C               	dc.b $2, $2, $0, $C, $C
00025C8D 0A05 000F FC               	dc.b $A, $5, $0, $F, $FC
00025C92 05                         Sonic_Map_11: dc.b $5
00025C93 ED09 0000 FC               	dc.b $ED, $9, $0, $0, $FC
00025C98 F507 0006 EC               	dc.b $F5, $7, $0, $6, $EC
00025C9D FD05 000E FC               	dc.b $FD, $5, $0, $E, $FC
00025CA2 0501 0012 0C               	dc.b $5, $1, $0, $12, $C
00025CA7 0D00 0014 04               	dc.b $D, $0, $0, $14, $4
00025CAC 05                         Sonic_Map_12: dc.b $5
00025CAD ED05 0000 05               	dc.b $ED, $5, $0, $0, $5
00025CB2 F50A 0004 ED               	dc.b $F5, $A, $0, $4, $ED
00025CB7 FD02 000D 05               	dc.b $FD, $2, $0, $D, $5
00025CBC 0501 0010 0D               	dc.b $5, $1, $0, $10, $D
00025CC1 0D04 0012 ED               	dc.b $D, $4, $0, $12, $ED
00025CC6 03                         Sonic_Map_13: dc.b $3
00025CC7 F50E 0000 EE               	dc.b $F5, $E, $0, $0, $EE
00025CCC F502 000C 0E               	dc.b $F5, $2, $0, $C, $E
00025CD1 0D00 000F F6               	dc.b $D, $0, $0, $F, $F6
00025CD6 02                         Sonic_Map_14: dc.b $2
00025CD7 F30F 0000 EC               	dc.b $F3, $F, $0, $0, $EC
00025CDC F303 0010 0C               	dc.b $F3, $3, $0, $10, $C
00025CE1 05                         Sonic_Map_15: dc.b $5
00025CE2 EE0D 0000 F4               	dc.b $EE, $D, $0, $0, $F4
00025CE7 F602 0008 EC               	dc.b $F6, $2, $0, $8, $EC
00025CEC FE09 000B F4               	dc.b $FE, $9, $0, $B, $F4
00025CF1 0601 0011 0C               	dc.b $6, $1, $0, $11, $C
00025CF6 0E04 0013 FC               	dc.b $E, $4, $0, $13, $FC
00025CFB 06                         Sonic_Map_16: dc.b $6
00025CFC ED09 0000 FD               	dc.b $ED, $9, $0, $0, $FD
00025D01 F506 0006 ED               	dc.b $F5, $6, $0, $6, $ED
00025D06 FD05 000C FD               	dc.b $FD, $5, $0, $C, $FD
00025D0B 0501 0010 0D               	dc.b $5, $1, $0, $10, $D
00025D10 0D00 0012 F5               	dc.b $D, $0, $0, $12, $F5
00025D15 0D00 0013 05               	dc.b $D, $0, $0, $13, $5
00025D1A 03                         Sonic_Map_17: dc.b $3
00025D1B F50E 0000 EE               	dc.b $F5, $E, $0, $0, $EE
00025D20 F502 000C 0E               	dc.b $F5, $2, $0, $C, $E
00025D25 0D00 000F F6               	dc.b $D, $0, $0, $F, $F6
00025D2A 03                         Sonic_Map_18: dc.b $3
00025D2B F50E 0000 EC               	dc.b $F5, $E, $0, $0, $EC
00025D30 F502 000C 0C               	dc.b $F5, $2, $0, $C, $C
00025D35 0D04 000F EC               	dc.b $D, $4, $0, $F, $EC
00025D3A 04                         Sonic_Map_19: dc.b $4
00025D3B EF0B 0000 F1               	dc.b $EF, $B, $0, $0, $F1
00025D40 F709 000C 09               	dc.b $F7, $9, $0, $C, $9
00025D45 0700 0012 09               	dc.b $7, $0, $0, $12, $9
00025D4A 0F08 0013 F1               	dc.b $F, $8, $0, $13, $F1
00025D4F 05                         Sonic_Map_1A: dc.b $5
00025D50 EA08 0000 F8               	dc.b $EA, $8, $0, $0, $F8
00025D55 F207 0003 F8               	dc.b $F2, $7, $0, $3, $F8
00025D5A FA03 000B F0               	dc.b $FA, $3, $0, $B, $F0
00025D5F FA05 000F 08               	dc.b $FA, $5, $0, $F, $8
00025D64 1200 0013 F8               	dc.b $12, $0, $0, $13, $F8
00025D69 03                         Sonic_Map_1B: dc.b $3
00025D6A EF05 0000 07               	dc.b $EF, $5, $0, $0, $7
00025D6F F70B 0004 EF               	dc.b $F7, $B, $0, $4, $EF
00025D74 FF01 0010 07               	dc.b $FF, $1, $0, $10, $7
00025D79 06                         Sonic_Map_1C: dc.b $6
00025D7A ED07 0000 00               	dc.b $ED, $7, $0, $0, $0
00025D7F F503 0008 F8               	dc.b $F5, $3, $0, $8, $F8
00025D84 F501 000C 10               	dc.b $F5, $1, $0, $C, $10
00025D89 FD02 000E F0               	dc.b $FD, $2, $0, $E, $F0
00025D8E 0D00 0011 00               	dc.b $D, $0, $0, $11, $0
00025D93 1500 0012 F8               	dc.b $15, $0, $0, $12, $F8
00025D98 04                         Sonic_Map_1D: dc.b $4
00025D99 EE0F 0000 EF               	dc.b $EE, $F, $0, $0, $EF
00025D9E F601 0010 17               	dc.b $F6, $1, $0, $10, $17
00025DA3 FE01 0012 0F               	dc.b $FE, $1, $0, $12, $F
00025DA8 0E0C 0014 EF               	dc.b $E, $C, $0, $14, $EF
00025DAD 05                         Sonic_Map_1E: dc.b $5
00025DAE EC08 0000 F8               	dc.b $EC, $8, $0, $0, $F8
00025DB3 F407 0003 F8               	dc.b $F4, $7, $0, $3, $F8
00025DB8 FC02 000B F0               	dc.b $FC, $2, $0, $B, $F0
00025DBD FC09 000E 08               	dc.b $FC, $9, $0, $E, $8
00025DC2 1400 0014 F8               	dc.b $14, $0, $0, $14, $F8
00025DC7 03                         Sonic_Map_1F: dc.b $3
00025DC8 EF05 0000 08               	dc.b $EF, $5, $0, $0, $8
00025DCD F70B 0004 F0               	dc.b $F7, $B, $0, $4, $F0
00025DD2 FF01 0010 08               	dc.b $FF, $1, $0, $10, $8
00025DD7 03                         Sonic_Map_20: dc.b $3
00025DD8 EE0A 0000 02               	dc.b $EE, $A, $0, $0, $2
00025DDD F607 0009 F2               	dc.b $F6, $7, $0, $9, $F2
00025DE2 0601 0011 02               	dc.b $6, $1, $0, $11, $2
00025DE7 02                         Sonic_Map_21: dc.b $2
00025DE8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025DED 100C 0010 F0               	dc.b $10, $C, $0, $10, $F0
00025DF2 03                         Sonic_Map_22: dc.b $3
00025DF3 F00B 0000 F8               	dc.b $F0, $B, $0, $0, $F8
00025DF8 F803 000C F0               	dc.b $F8, $3, $0, $C, $F0
00025DFD 1008 0010 F8               	dc.b $10, $8, $0, $10, $F8
00025E02 02                         Sonic_Map_23: dc.b $2
00025E03 F00F 0000 F1               	dc.b $F0, $F, $0, $0, $F1
00025E08 1008 0010 F1               	dc.b $10, $8, $0, $10, $F1
00025E0D 03                         Sonic_Map_24: dc.b $3
00025E0E F00B 0000 F8               	dc.b $F0, $B, $0, $0, $F8
00025E13 F803 000C F0               	dc.b $F8, $3, $0, $C, $F0
00025E18 1008 0010 F8               	dc.b $10, $8, $0, $10, $F8
00025E1D 03                         Sonic_Map_25: dc.b $3
00025E1E EF0E 0000 ED               	dc.b $EF, $E, $0, $0, $ED
00025E23 FF01 000C 0D               	dc.b $FF, $1, $0, $C, $D
00025E28 0709 000E F5               	dc.b $7, $9, $0, $E, $F5
00025E2D 03                         Sonic_Map_26: dc.b $3
00025E2E EE0B 0000 F0               	dc.b $EE, $B, $0, $0, $F0
00025E33 F603 000C 08               	dc.b $F6, $3, $0, $C, $8
00025E38 0E08 0010 F0               	dc.b $E, $8, $0, $10, $F0
00025E3D 03                         Sonic_Map_27: dc.b $3
00025E3E EF0E 0000 ED               	dc.b $EF, $E, $0, $0, $ED
00025E43 FF01 000C 0D               	dc.b $FF, $1, $0, $C, $D
00025E48 0709 000E F5               	dc.b $7, $9, $0, $E, $F5
00025E4D 03                         Sonic_Map_28: dc.b $3
00025E4E EE0B 0000 F0               	dc.b $EE, $B, $0, $0, $F0
00025E53 F603 000C 08               	dc.b $F6, $3, $0, $C, $8
00025E58 0E08 0010 F0               	dc.b $E, $8, $0, $10, $F0
00025E5D 02                         Sonic_Map_29: dc.b $2
00025E5E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025E63 F003 0010 10               	dc.b $F0, $3, $0, $10, $10
00025E68 03                         Sonic_Map_2A: dc.b $3
00025E69 F00E 0000 F0               	dc.b $F0, $E, $0, $0, $F0
00025E6E F003 000C 10               	dc.b $F0, $3, $0, $C, $10
00025E73 0808 0010 F8               	dc.b $8, $8, $0, $10, $F8
00025E78 02                         Sonic_Map_2B: dc.b $2
00025E79 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025E7E F003 0010 10               	dc.b $F0, $3, $0, $10, $10
00025E83 03                         Sonic_Map_2C: dc.b $3
00025E84 F00E 0000 F0               	dc.b $F0, $E, $0, $0, $F0
00025E89 F003 000C 10               	dc.b $F0, $3, $0, $C, $10
00025E8E 0808 0010 F8               	dc.b $8, $8, $0, $10, $F8
00025E93 03                         Sonic_Map_2D: dc.b $3
00025E94 EE0F 0000 F6               	dc.b $EE, $F, $0, $0, $F6
00025E99 F602 0010 EE               	dc.b $F6, $2, $0, $10, $EE
00025E9E 0E00 0013 F6               	dc.b $E, $0, $0, $13, $F6
00025EA3 02                         Sonic_Map_2E: dc.b $2
00025EA4 EF0F 0000 F5               	dc.b $EF, $F, $0, $0, $F5
00025EA9 F702 0010 ED               	dc.b $F7, $2, $0, $10, $ED
00025EAE 04                         Sonic_Map_2F: dc.b $4
00025EAF EF0E 0000 EE               	dc.b $EF, $E, $0, $0, $EE
00025EB4 EF02 000C 0E               	dc.b $EF, $2, $0, $C, $E
00025EB9 0708 000F EE               	dc.b $7, $8, $0, $F, $EE
00025EBE 0F00 0012 F6               	dc.b $F, $0, $0, $12, $F6
00025EC3 02                         Sonic_Map_30: dc.b $2
00025EC4 EF0F 0000 F5               	dc.b $EF, $F, $0, $0, $F5
00025EC9 F702 0010 ED               	dc.b $F7, $2, $0, $10, $ED
00025ECE 02                         Sonic_Map_31: dc.b $2
00025ECF F90E 0000 F5               	dc.b $F9, $E, $0, $0, $F5
00025ED4 1108 000C F5               	dc.b $11, $8, $0, $C, $F5
00025ED9 02                         Sonic_Map_32: dc.b $2
00025EDA F90E 0000 F5               	dc.b $F9, $E, $0, $0, $F5
00025EDF 1108 000C F5               	dc.b $11, $8, $0, $C, $F5
00025EE4 02                         Sonic_Map_33: dc.b $2
00025EE5 F90E 0000 F5               	dc.b $F9, $E, $0, $0, $F5
00025EEA 1108 000C F5               	dc.b $11, $8, $0, $C, $F5
00025EEF 02                         Sonic_Map_34: dc.b $2
00025EF0 F90E 0000 F5               	dc.b $F9, $E, $0, $0, $F5
00025EF5 1108 000C F5               	dc.b $11, $8, $0, $C, $F5
00025EFA 02                         Sonic_Map_35: dc.b $2
00025EFB F90E 0000 F5               	dc.b $F9, $E, $0, $0, $F5
00025F00 1108 000C F5               	dc.b $11, $8, $0, $C, $F5
00025F05 02                         Sonic_Map_36: dc.b $2
00025F06 F90E 0000 F5               	dc.b $F9, $E, $0, $0, $F5
00025F0B 1108 000C F5               	dc.b $11, $8, $0, $C, $F5
00025F10 03                         Sonic_Map_37: dc.b $3
00025F11 F00E 0000 ED               	dc.b $F0, $E, $0, $0, $ED
00025F16 F002 000C 0D               	dc.b $F0, $2, $0, $C, $D
00025F1B 0808 000F F5               	dc.b $8, $8, $0, $F, $F5
00025F20 03                         Sonic_Map_38: dc.b $3
00025F21 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025F26 F002 000C 0C               	dc.b $F0, $2, $0, $C, $C
00025F2B 0808 000F F4               	dc.b $8, $8, $0, $F, $F4
00025F30 02                         Sonic_Map_39: dc.b $2
00025F31 EB0A 0000 F1               	dc.b $EB, $A, $0, $0, $F1
00025F36 0306 0009 F9               	dc.b $3, $6, $0, $9, $F9
00025F3B 01                         Sonic_Map_3A: dc.b $1
00025F3C F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00025F41 02                         Sonic_Map_3B: dc.b $2
00025F42 F10E 0000 F1               	dc.b $F1, $E, $0, $0, $F1
00025F47 0908 000C F1               	dc.b $9, $8, $0, $C, $F1
00025F4C 01                         Sonic_Map_3C: dc.b $1
00025F4D F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00025F52 01                         Sonic_Map_3D: dc.b $1
00025F53 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00025F58 01                         Sonic_Map_3E: dc.b $1
00025F59 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00025F5E 02                         Sonic_Map_3F: dc.b $2
00025F5F F20B 0000 F8               	dc.b $F2, $B, $0, $0, $F8
00025F64 1208 000C F8               	dc.b $12, $8, $0, $C, $F8
00025F69 02                         Sonic_Map_40: dc.b $2
00025F6A FA0B 0000 F7               	dc.b $FA, $B, $0, $0, $F7
00025F6F 0201 000C 0F               	dc.b $2, $1, $0, $C, $F
00025F74 04                         Sonic_Map_41: dc.b $4
00025F75 EE0B 0000 F5               	dc.b $EE, $B, $0, $0, $F5
00025F7A F601 000C ED               	dc.b $F6, $1, $0, $C, $ED
00025F7F FE02 000E 0D               	dc.b $FE, $2, $0, $E, $D
00025F84 0E04 0011 FD               	dc.b $E, $4, $0, $11, $FD
00025F89 04                         Sonic_Map_42: dc.b $4
00025F8A EE0B 0000 F6               	dc.b $EE, $B, $0, $0, $F6
00025F8F F601 000C EE               	dc.b $F6, $1, $0, $C, $EE
00025F94 FE01 000E 0E               	dc.b $FE, $1, $0, $E, $E
00025F99 0E04 0010 FE               	dc.b $E, $4, $0, $10, $FE
00025F9E 03                         Sonic_Map_43: dc.b $3
00025F9F EF0B 0000 F9               	dc.b $EF, $B, $0, $0, $F9
00025FA4 F701 000C F1               	dc.b $F7, $1, $0, $C, $F1
00025FA9 0F04 000E 01               	dc.b $F, $4, $0, $E, $1
00025FAE 04                         Sonic_Map_44: dc.b $4
00025FAF EB0A 0000 ED               	dc.b $EB, $A, $0, $0, $ED
00025FB4 0309 0009 F5               	dc.b $3, $9, $0, $9, $F5
00025FB9 F301 000F 05               	dc.b $F3, $1, $0, $F, $5
00025FBE 0B01 0011 0D               	dc.b $B, $1, $0, $11, $D
00025FC3 03                         Sonic_Map_45: dc.b $3
00025FC4 EC0D 0000 EB               	dc.b $EC, $D, $0, $0, $EB
00025FC9 EC00 0008 0B               	dc.b $EC, $0, $0, $8, $B
00025FCE FC0A 0009 EB               	dc.b $FC, $A, $0, $9, $EB
00025FD3 05                         Sonic_Map_46: dc.b $5
00025FD4 EA0E 0000 EA               	dc.b $EA, $E, $0, $0, $EA
00025FD9 FA00 000C 0A               	dc.b $FA, $0, $0, $C, $A
00025FDE 0208 000D F2               	dc.b $2, $8, $0, $D, $F2
00025FE3 0A08 0010 EA               	dc.b $A, $8, $0, $10, $EA
00025FE8 1204 0013 F2               	dc.b $12, $4, $0, $13, $F2
00025FED 04                         Sonic_Map_47: dc.b $4
00025FEE EA0A 0000 EB               	dc.b $EA, $A, $0, $0, $EB
00025FF3 F202 0009 03               	dc.b $F2, $2, $0, $9, $3
00025FF8 0206 000C F3               	dc.b $2, $6, $0, $C, $F3
00025FFD 0A00 0012 EB               	dc.b $A, $0, $0, $12, $EB
00026002 04                         Sonic_Map_48: dc.b $4
00026003 EC0B 0000 F8               	dc.b $EC, $B, $0, $0, $F8
00026008 F403 000C F0               	dc.b $F4, $3, $0, $C, $F0
0002600D F400 0010 10               	dc.b $F4, $0, $0, $10, $10
00026012 0C08 0011 F8               	dc.b $C, $8, $0, $11, $F8
00026017 03                         Sonic_Map_4A: dc.b $3
00026018 EE0F 0000 F0               	dc.b $EE, $F, $0, $0, $F0
0002601D F600 0010 10               	dc.b $F6, $0, $0, $10, $10
00026022 0E0C 0011 F0               	dc.b $E, $C, $0, $11, $F0
00026027 03                         Sonic_Map_4B: dc.b $3
00026028 F40E 0000 E6               	dc.b $F4, $E, $0, $0, $E6
0002602D F402 000C 06               	dc.b $F4, $2, $0, $C, $6
00026032 FC05 000F 0E               	dc.b $FC, $5, $0, $F, $E
00026037 03                         Sonic_Map_4C: dc.b $3
00026038 F40E 0000 E6               	dc.b $F4, $E, $0, $0, $E6
0002603D F402 000C 06               	dc.b $F4, $2, $0, $C, $6
00026042 FC05 000F 0E               	dc.b $FC, $5, $0, $F, $E
00026047 03                         Sonic_Map_4D: dc.b $3
00026048 EC0F 0000 EF               	dc.b $EC, $F, $0, $0, $EF
0002604D 0400 0010 0F               	dc.b $4, $0, $0, $10, $F
00026052 0C0C 0011 EF               	dc.b $C, $C, $0, $11, $EF
00026057 05                         Sonic_Map_4E: dc.b $5
00026058 ED0A 0000 EE               	dc.b $ED, $A, $0, $0, $EE
0002605D 0500 0009 F6               	dc.b $5, $0, $0, $9, $F6
00026062 F500 000A 06               	dc.b $F5, $0, $0, $A, $6
00026067 0500 000B FE               	dc.b $5, $0, $0, $B, $FE
0002606C 0D08 000C F6               	dc.b $D, $8, $0, $C, $F6
00026071 05                         Sonic_Map_4F: dc.b $5
00026072 F500 0000 06               	dc.b $F5, $0, $0, $0, $6
00026077 ED0A 0001 EE               	dc.b $ED, $A, $0, $1, $EE
0002607C 0500 000A FE               	dc.b $5, $0, $0, $A, $FE
00026081 0500 000B F6               	dc.b $5, $0, $0, $B, $F6
00026086 0D08 000C F6               	dc.b $D, $8, $0, $C, $F6
0002608B 03                         Sonic_Map_50: dc.b $3
0002608C EE0B 0000 ED               	dc.b $EE, $B, $0, $0, $ED
00026091 F602 000C 05               	dc.b $F6, $2, $0, $C, $5
00026096 0D08 000F F6               	dc.b $D, $8, $0, $F, $F6
0002609B 04                         Sonic_Map_51: dc.b $4
0002609C EF0B 0000 F9               	dc.b $EF, $B, $0, $0, $F9
000260A1 F700 000C F1               	dc.b $F7, $0, $0, $C, $F1
000260A6 0701 000D F1               	dc.b $7, $1, $0, $D, $F1
000260AB 0F08 000F F9               	dc.b $F, $8, $0, $F, $F9
000260B0 02                         Sonic_Map_52: dc.b $2
000260B1 EF0B 0000 F5               	dc.b $EF, $B, $0, $0, $F5
000260B6 0F04 000C F5               	dc.b $F, $4, $0, $C, $F5
000260BB 04                         Sonic_Map_53: dc.b $4
000260BC EF0B 0000 F9               	dc.b $EF, $B, $0, $0, $F9
000260C1 F700 000C F1               	dc.b $F7, $0, $0, $C, $F1
000260C6 0701 000D F1               	dc.b $7, $1, $0, $D, $F1
000260CB 0F04 000F F9               	dc.b $F, $4, $0, $F, $F9
000260D0 02                         Sonic_Map_54: dc.b $2
000260D1 EF0B 0000 F5               	dc.b $EF, $B, $0, $0, $F5
000260D6 0F04 000C F5               	dc.b $F, $4, $0, $C, $F5
000260DB 03                         Sonic_Map_55: dc.b $3
000260DC ED0A 0000 F0               	dc.b $ED, $A, $0, $0, $F0
000260E1 F503 0009 08               	dc.b $F5, $3, $0, $9, $8
000260E6 0505 000D F8               	dc.b $5, $5, $0, $D, $F8
000260EB 05                         Sonic_Map_56: dc.b $5
000260EC ED0B 0000 EF               	dc.b $ED, $B, $0, $0, $EF
000260F1 0D00 000C F8               	dc.b $D, $0, $0, $C, $F8
000260F6 0D00 000D 08               	dc.b $D, $0, $0, $D, $8
000260FB 0D00 000E 00               	dc.b $D, $0, $0, $E, $0
00026100 F500 000F 07               	dc.b $F5, $0, $0, $F, $7
00026105 0A                         Sonic_Map_57: dc.b $A
00026106 FD00 0000 FE               	dc.b $FD, $0, $0, $0, $FE
0002610B F500 0001 FE               	dc.b $F5, $0, $0, $1, $FE
00026110 0D08 0002 F6               	dc.b $D, $8, $0, $2, $F6
00026115 F500 0005 06               	dc.b $F5, $0, $0, $5, $6
0002611A ED03 0006 EE               	dc.b $ED, $3, $0, $6, $EE
0002611F ED01 000A F6               	dc.b $ED, $1, $0, $A, $F6
00026124 FD00 000C F6               	dc.b $FD, $0, $0, $C, $F6
00026129 0500 000D F6               	dc.b $5, $0, $0, $D, $F6
0002612E 0500 000E FE               	dc.b $5, $0, $0, $E, $FE
00026133 ED00 000F FE               	dc.b $ED, $0, $0, $F, $FE
00026138 03                         Sonic_Map_58: dc.b $3
00026139 ED0B 0000 EE               	dc.b $ED, $B, $0, $0, $EE
0002613E 0D08 000C F6               	dc.b $D, $8, $0, $C, $F6
00026143 F500 000F 06               	dc.b $F5, $0, $0, $F, $6
00026148 07                         Sonic_Map_59: dc.b $7
00026149 F500 0000 06               	dc.b $F5, $0, $0, $0, $6
0002614E 0500 0001 06               	dc.b $5, $0, $0, $1, $6
00026153 0500 0002 FE               	dc.b $5, $0, $0, $2, $FE
00026158 0D00 0003 06               	dc.b $D, $0, $0, $3, $6
0002615D 0D04 0004 F6               	dc.b $D, $4, $0, $4, $F6
00026162 ED07 0006 EE               	dc.b $ED, $7, $0, $6, $EE
00026167 ED02 000E FE               	dc.b $ED, $2, $0, $E, $FE
0002616C 03                         Sonic_Map_5A: dc.b $3
0002616D EC0A 0000 ED               	dc.b $EC, $A, $0, $0, $ED
00026172 F403 0009 05               	dc.b $F4, $3, $0, $9, $5
00026177 0405 000D F5               	dc.b $4, $5, $0, $D, $F5
0002617C 03                         Sonic_Map_5B: dc.b $3
0002617D EE0E 0000 EA               	dc.b $EE, $E, $0, $0, $EA
00026182 0609 000C F2               	dc.b $6, $9, $0, $C, $F2
00026187 0E00 0012 0A               	dc.b $E, $0, $0, $12, $A
0002618C 03                         Sonic_Map_5C: dc.b $3
0002618D F40A 0800 FB               	dc.b $F4, $A, $8, $0, $FB
00026192 FC05 0809 EB               	dc.b $FC, $5, $8, $9, $EB
00026197 0400 080D E3               	dc.b $4, $0, $8, $D, $E3
0002619C 03                         Sonic_Map_5D: dc.b $3
0002619D F40A 0800 F4               	dc.b $F4, $A, $8, $0, $F4
000261A2 0400 0809 0C               	dc.b $4, $0, $8, $9, $C
000261A7 0400 080A EC               	dc.b $4, $0, $8, $A, $EC
000261AC 02                         Sonic_Map_5E: dc.b $2
000261AD F40A 0000 F2               	dc.b $F4, $A, $0, $0, $F2
000261B2 0400 0009 0A               	dc.b $4, $0, $0, $9, $A
000261B7 03                         Sonic_Map_5F: dc.b $3
000261B8 F40A 0000 F3               	dc.b $F4, $A, $0, $0, $F3
000261BD 0400 0009 EB               	dc.b $4, $0, $0, $9, $EB
000261C2 0400 000A 0B               	dc.b $4, $0, $0, $A, $B
000261C7 03                         Sonic_Map_60: dc.b $3
000261C8 F40A 0000 EE               	dc.b $F4, $A, $0, $0, $EE
000261CD FC05 0009 06               	dc.b $FC, $5, $0, $9, $6
000261D2 0400 000D 16               	dc.b $4, $0, $0, $D, $16
000261D7 02                         Sonic_Map_61: dc.b $2
000261D8 F40E 0000 F0               	dc.b $F4, $E, $0, $0, $F0
000261DD 0400 000C 10               	dc.b $4, $0, $0, $C, $10
000261E2 02                         Sonic_Map_62: dc.b $2
000261E3 F40A 0000 F2               	dc.b $F4, $A, $0, $0, $F2
000261E8 0400 0009 0A               	dc.b $4, $0, $0, $9, $A
000261ED 02                         Sonic_Map_63: dc.b $2
000261EE F40E 0800 F1               	dc.b $F4, $E, $8, $0, $F1
000261F3 0400 080C E9               	dc.b $4, $0, $8, $C, $E9
000261F8 03                         Sonic_Map_64: dc.b $3
000261F9 F40E 0000 E9               	dc.b $F4, $E, $0, $0, $E9
000261FE F402 000C 09               	dc.b $F4, $2, $0, $C, $9
00026203 0C08 000F F1               	dc.b $C, $8, $0, $F, $F1
00026208 03                         Sonic_Map_65: dc.b $3
00026209 F40E 0000 E8               	dc.b $F4, $E, $0, $0, $E8
0002620E F402 000C 08               	dc.b $F4, $2, $0, $C, $8
00026213 0C08 000F F0               	dc.b $C, $8, $0, $F, $F0
00026218 05                         Sonic_Map_66: dc.b $5
00026219 EE0A 0000 EC               	dc.b $EE, $A, $0, $0, $EC
0002621E F603 0009 04               	dc.b $F6, $3, $0, $9, $4
00026223 FE00 000D 0C               	dc.b $FE, $0, $0, $D, $C
00026228 0605 000E F4               	dc.b $6, $5, $0, $E, $F4
0002622D 0E00 0012 0C               	dc.b $E, $0, $0, $12, $C
00026232 04                         Sonic_Map_67: dc.b $4
00026233 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00026238 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
0002623D F200 000E 0C               	dc.b $F2, $0, $0, $E, $C
00026242 1400 000F F5               	dc.b $14, $0, $0, $F, $F5
00026247 04                         Sonic_Map_68: dc.b $4
00026248 FC0E 0000 F0               	dc.b $FC, $E, $0, $0, $F0
0002624D 1400 000C 01               	dc.b $14, $0, $0, $C, $1
00026252 F700 000D 10               	dc.b $F7, $0, $0, $D, $10
00026257 EC09 000E F8               	dc.b $EC, $9, $0, $E, $F8
0002625C 03                         Sonic_Map_69: dc.b $3
0002625D F00B 0000 EC               	dc.b $F0, $B, $0, $0, $EC
00026262 F802 000C 04               	dc.b $F8, $2, $0, $C, $4
00026267 F802 000F 0C               	dc.b $F8, $2, $0, $F, $C
0002626C 02                         Sonic_Map_6A: dc.b $2
0002626D F10F 0000 F2               	dc.b $F1, $F, $0, $0, $F2
00026272 110C 0010 F2               	dc.b $11, $C, $0, $10, $F2
00026277 02                         Sonic_Map_6B: dc.b $2
00026278 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002627D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00026282 02                         Sonic_Map_6C: dc.b $2
00026283 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00026288 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002628D 03                         Sonic_Map_6D: dc.b $3
0002628E EC0A 0000 EF               	dc.b $EC, $A, $0, $0, $EF
00026293 0406 0009 F7               	dc.b $4, $6, $0, $9, $F7
00026298 F401 000F 07               	dc.b $F4, $1, $0, $F, $7
0002629D 03                         Sonic_Map_6E: dc.b $3
0002629E E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
000262A3 0805 000C F8               	dc.b $8, $5, $0, $C, $F8
000262A8 F801 0010 08               	dc.b $F8, $1, $0, $10, $8
000262AD 08                         Sonic_Map_6F: dc.b $8
000262AE 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000262B3 F000 0004 08               	dc.b $F0, $0, $0, $4, $8
000262B8 0000 0005 08               	dc.b $0, $0, $0, $5, $8
000262BD F002 0006 F8               	dc.b $F0, $2, $0, $6, $F8
000262C2 E803 0009 00               	dc.b $E8, $3, $0, $9, $0
000262C7 F002 000D F0               	dc.b $F0, $2, $0, $D, $F0
000262CC E800 0010 F8               	dc.b $E8, $0, $0, $10, $F8
000262D1 E800 0011 F0               	dc.b $E8, $0, $0, $11, $F0
000262D6 09                         Sonic_Map_70: dc.b $9
000262D7 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000262DC F000 0004 08               	dc.b $F0, $0, $0, $4, $8
000262E1 0000 0005 08               	dc.b $0, $0, $0, $5, $8
000262E6 F002 0006 F8               	dc.b $F0, $2, $0, $6, $F8
000262EB E803 0009 00               	dc.b $E8, $3, $0, $9, $0
000262F0 F801 000D F0               	dc.b $F8, $1, $0, $D, $F0
000262F5 E800 000F F0               	dc.b $E8, $0, $0, $F, $F0
000262FA F000 0010 F0               	dc.b $F0, $0, $0, $10, $F0
000262FF E800 0011 F8               	dc.b $E8, $0, $0, $11, $F8
00026304 04                         Sonic_Map_71: dc.b $4
00026305 F00D 0000 EE               	dc.b $F0, $D, $0, $0, $EE
0002630A E808 0008 F6               	dc.b $E8, $8, $0, $8, $F6
0002630F F000 000B 0E               	dc.b $F0, $0, $0, $B, $E
00026314 FF06 000C F7               	dc.b $FF, $6, $0, $C, $F7
00026319 04                         Sonic_Map_72: dc.b $4
0002631A E70A 0000 F7               	dc.b $E7, $A, $0, $0, $F7
0002631F EF00 0009 EF               	dc.b $EF, $0, $0, $9, $EF
00026324 EF00 000A 0F               	dc.b $EF, $0, $0, $A, $F
00026329 FF06 000B F7               	dc.b $FF, $6, $0, $B, $F7
0002632E 03                         Sonic_Map_73: dc.b $3
0002632F F40D 0000 EE               	dc.b $F4, $D, $0, $0, $EE
00026334 EC04 0008 F6               	dc.b $EC, $4, $0, $8, $F6
00026339 0409 000A F6               	dc.b $4, $9, $0, $A, $F6
0002633E 03                         Sonic_Map_74: dc.b $3
0002633F F90F 0000 EE               	dc.b $F9, $F, $0, $0, $EE
00026344 F10C 0010 F6               	dc.b $F1, $C, $0, $10, $F6
00026349 F901 0014 0E               	dc.b $F9, $1, $0, $14, $E
0002634E 03                         Sonic_Map_75: dc.b $3
0002634F F10E 0000 F6               	dc.b $F1, $E, $0, $0, $F6
00026354 F902 000C EE               	dc.b $F9, $2, $0, $C, $EE
00026359 0909 000F F6               	dc.b $9, $9, $0, $F, $F6
0002635E 03                         Sonic_Map_76: dc.b $3
0002635F F90F 0000 EE               	dc.b $F9, $F, $0, $0, $EE
00026364 F10C 0010 F6               	dc.b $F1, $C, $0, $10, $F6
00026369 F901 0014 0E               	dc.b $F9, $1, $0, $14, $E
0002636E 03                         Sonic_Map_77: dc.b $3
0002636F F10E 0000 F6               	dc.b $F1, $E, $0, $0, $F6
00026374 F902 000C EE               	dc.b $F9, $2, $0, $C, $EE
00026379 0909 000F F6               	dc.b $9, $9, $0, $F, $F6
0002637E 04                         Sonic_Map_78: dc.b $4
0002637F EF0F 0000 ED               	dc.b $EF, $F, $0, $0, $ED
00026384 0F08 0010 F5               	dc.b $F, $8, $0, $10, $F5
00026389 E700 0013 FD               	dc.b $E7, $0, $0, $13, $FD
0002638E FF01 0014 0D               	dc.b $FF, $1, $0, $14, $D
00026393 04                         Sonic_Map_79: dc.b $4
00026394 F00F 0000 ED               	dc.b $F0, $F, $0, $0, $ED
00026399 1008 0010 F5               	dc.b $10, $8, $0, $10, $F5
0002639E E800 0013 FD               	dc.b $E8, $0, $0, $13, $FD
000263A3 0001 0014 0D               	dc.b $0, $1, $0, $14, $D
000263A8 04                         Sonic_Map_7A: dc.b $4
000263A9 F00F 0000 ED               	dc.b $F0, $F, $0, $0, $ED
000263AE 1008 0010 F5               	dc.b $10, $8, $0, $10, $F5
000263B3 E800 0013 FD               	dc.b $E8, $0, $0, $13, $FD
000263B8 0001 0014 0D               	dc.b $0, $1, $0, $14, $D
000263BD 04                         Sonic_Map_7B: dc.b $4
000263BE F10F 0000 ED               	dc.b $F1, $F, $0, $0, $ED
000263C3 1108 0010 F5               	dc.b $11, $8, $0, $10, $F5
000263C8 E900 0013 FD               	dc.b $E9, $0, $0, $13, $FD
000263CD 0101 0014 0D               	dc.b $1, $1, $0, $14, $D
000263D2 04                         Sonic_Map_7C: dc.b $4
000263D3 ED0F 0000 F1               	dc.b $ED, $F, $0, $0, $F1
000263D8 0D08 0010 F9               	dc.b $D, $8, $0, $10, $F9
000263DD F502 0013 11               	dc.b $F5, $2, $0, $13, $11
000263E2 E500 0016 F9               	dc.b $E5, $0, $0, $16, $F9
000263E7 03                         Sonic_Map_7D: dc.b $3
000263E8 EA0B 0000 F1               	dc.b $EA, $B, $0, $0, $F1
000263ED 0A08 000C F9               	dc.b $A, $8, $0, $C, $F9
000263F2 F206 000F 09               	dc.b $F2, $6, $0, $F, $9
000263F7 04                         Sonic_Map_7E: dc.b $4
000263F8 ED0F 0000 F1               	dc.b $ED, $F, $0, $0, $F1
000263FD 0D08 0010 F9               	dc.b $D, $8, $0, $10, $F9
00026402 F502 0013 11               	dc.b $F5, $2, $0, $13, $11
00026407 E500 0016 F9               	dc.b $E5, $0, $0, $16, $F9
0002640C 03                         Sonic_Map_7F: dc.b $3
0002640D EA0B 0000 F1               	dc.b $EA, $B, $0, $0, $F1
00026412 0A08 000C F9               	dc.b $A, $8, $0, $C, $F9
00026417 F206 000F 09               	dc.b $F2, $6, $0, $F, $9
0002641C 04                         Sonic_Map_80: dc.b $4
0002641D EE0F 0000 ED               	dc.b $EE, $F, $0, $0, $ED
00026422 0E00 0010 05               	dc.b $E, $0, $0, $10, $5
00026427 EE03 0011 0D               	dc.b $EE, $3, $0, $11, $D
0002642C F601 0015 15               	dc.b $F6, $1, $0, $15, $15
00026431 04                         Sonic_Map_81: dc.b $4
00026432 EE0F 0000 EE               	dc.b $EE, $F, $0, $0, $EE
00026437 EE03 0010 0E               	dc.b $EE, $3, $0, $10, $E
0002643C F600 0014 E6               	dc.b $F6, $0, $0, $14, $E6
00026441 0E00 0015 06               	dc.b $E, $0, $0, $15, $6
00026446 04                         Sonic_Map_82: dc.b $4
00026447 EE0F 0000 ED               	dc.b $EE, $F, $0, $0, $ED
0002644C 0E00 0010 05               	dc.b $E, $0, $0, $10, $5
00026451 EE02 0011 0D               	dc.b $EE, $2, $0, $11, $D
00026456 F601 0014 15               	dc.b $F6, $1, $0, $14, $15
0002645B 04                         Sonic_Map_83: dc.b $4
0002645C EE0F 0000 EE               	dc.b $EE, $F, $0, $0, $EE
00026461 EE03 0010 0E               	dc.b $EE, $3, $0, $10, $E
00026466 F600 0014 E6               	dc.b $F6, $0, $0, $14, $E6
0002646B 0E00 0015 06               	dc.b $E, $0, $0, $15, $6
00026470 01                         Sonic_Map_84: dc.b $1
00026471 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00026476 03                         Sonic_Map_85: dc.b $3
00026477 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0002647C 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
00026481 F800 0012 0C               	dc.b $F8, $0, $0, $12, $C
00026486 05                         Sonic_Map_86: dc.b $5
00026487 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0002648C F000 000C EC               	dc.b $F0, $0, $0, $C, $EC
00026491 0000 000D EC               	dc.b $0, $0, $0, $D, $EC
00026496 0000 000E 0C               	dc.b $0, $0, $0, $E, $C
0002649B 0809 000F F4               	dc.b $8, $9, $0, $F, $F4
000264A0 07                         Sonic_Map_87: dc.b $7
000264A1 F000 0000 EC               	dc.b $F0, $0, $0, $0, $EC
000264A6 0000 0001 EC               	dc.b $0, $0, $0, $1, $EC
000264AB 0000 0002 0C               	dc.b $0, $0, $0, $2, $C
000264B0 0809 0003 F4               	dc.b $8, $9, $0, $3, $F4
000264B5 E807 0009 F4               	dc.b $E8, $7, $0, $9, $F4
000264BA E800 0011 04               	dc.b $E8, $0, $0, $11, $4
000264BF F002 0012 04               	dc.b $F0, $2, $0, $12, $4
000264C4 07                         Sonic_Map_88: dc.b $7
000264C5 F000 0000 EC               	dc.b $F0, $0, $0, $0, $EC
000264CA 0000 0001 EC               	dc.b $0, $0, $0, $1, $EC
000264CF 0000 0002 0C               	dc.b $0, $0, $0, $2, $C
000264D4 0809 0003 F4               	dc.b $8, $9, $0, $3, $F4
000264D9 E807 0009 F4               	dc.b $E8, $7, $0, $9, $F4
000264DE F002 0011 04               	dc.b $F0, $2, $0, $11, $4
000264E3 E800 0014 04               	dc.b $E8, $0, $0, $14, $4
000264E8                            	even
000264E8                            	even
000264E8                            Map_Shadow:
000264E8                            	include "_maps\Shadow.asm"
000264E8                            ; ================================================================================
000264E8                            ; Sprite Mappings - generated by Flex 2 Fri May 04 2018 20:28:17 GMT-0400 (Eastern Daylight Time)
000264E8                            ; ================================================================================
000264E8                            
000264E8                            Shadow_Map:
000264E8 0000 0000                  	dc.w $0, Shadow_Map_1-Shadow_Map
000264EC 0000 0000                  	dc.w Shadow_Map_2-Shadow_Map, Shadow_Map_3-Shadow_Map
000264F0 0000 0000                  	dc.w Shadow_Map_4-Shadow_Map, Shadow_Map_5-Shadow_Map
000264F4 0000 0000                  	dc.w Shadow_Map_6-Shadow_Map, Shadow_Map_7-Shadow_Map
000264F8 0000 0000                  	dc.w Shadow_Map_8-Shadow_Map, Shadow_Map_9-Shadow_Map
000264FC 0000 0000                  	dc.w Shadow_Map_A-Shadow_Map, Shadow_Map_B-Shadow_Map
00026500 0000 0000                  	dc.w Shadow_Map_C-Shadow_Map, Shadow_Map_D-Shadow_Map
00026504 0000 0000                  	dc.w Shadow_Map_E-Shadow_Map, Shadow_Map_F-Shadow_Map
00026508 0000 0000                  	dc.w Shadow_Map_10-Shadow_Map, Shadow_Map_11-Shadow_Map
0002650C 0000 0000                  	dc.w Shadow_Map_12-Shadow_Map, Shadow_Map_13-Shadow_Map
00026510 0000 0000                  	dc.w Shadow_Map_14-Shadow_Map, Shadow_Map_15-Shadow_Map
00026514 0000 0000                  	dc.w Shadow_Map_16-Shadow_Map, Shadow_Map_17-Shadow_Map
00026518 0000 0000                  	dc.w Shadow_Map_18-Shadow_Map, Shadow_Map_19-Shadow_Map
0002651C 0000 0000                  	dc.w Shadow_Map_1A-Shadow_Map, Shadow_Map_1B-Shadow_Map
00026520 0000 0000                  	dc.w Shadow_Map_1C-Shadow_Map, Shadow_Map_1D-Shadow_Map
00026524 0000 0000                  	dc.w Shadow_Map_1E-Shadow_Map, Shadow_Map_1F-Shadow_Map
00026528 0000 0000                  	dc.w Shadow_Map_20-Shadow_Map, Shadow_Map_21-Shadow_Map
0002652C 0000 0000                  	dc.w Shadow_Map_22-Shadow_Map, Shadow_Map_23-Shadow_Map
00026530 0000 0000                  	dc.w Shadow_Map_24-Shadow_Map, Shadow_Map_25-Shadow_Map
00026534 0000 0000                  	dc.w Shadow_Map_26-Shadow_Map, Shadow_Map_27-Shadow_Map
00026538 0000 0000                  	dc.w Shadow_Map_28-Shadow_Map, Shadow_Map_29-Shadow_Map
0002653C 0000 0000                  	dc.w Shadow_Map_2A-Shadow_Map, Shadow_Map_2B-Shadow_Map
00026540 0000 0000                  	dc.w Shadow_Map_2C-Shadow_Map, Shadow_Map_2D-Shadow_Map
00026544 0000 0000                  	dc.w Shadow_Map_2E-Shadow_Map, Shadow_Map_2F-Shadow_Map
00026548 0000 0000                  	dc.w Shadow_Map_30-Shadow_Map, Shadow_Map_31-Shadow_Map
0002654C 0000 0000                  	dc.w Shadow_Map_32-Shadow_Map, Shadow_Map_33-Shadow_Map
00026550 0000 0000                  	dc.w Shadow_Map_34-Shadow_Map, Shadow_Map_35-Shadow_Map
00026554 0000 0000                  	dc.w Shadow_Map_36-Shadow_Map, Shadow_Map_37-Shadow_Map
00026558 0000 0000                  	dc.w Shadow_Map_38-Shadow_Map, Shadow_Map_39-Shadow_Map
0002655C 0000 0000                  	dc.w Shadow_Map_3A-Shadow_Map, Shadow_Map_3B-Shadow_Map
00026560 0000 0000                  	dc.w Shadow_Map_3C-Shadow_Map, Shadow_Map_3D-Shadow_Map
00026564 0000 0000                  	dc.w Shadow_Map_3E-Shadow_Map, Shadow_Map_3F-Shadow_Map
00026568 0000 0000                  	dc.w Shadow_Map_40-Shadow_Map, Shadow_Map_41-Shadow_Map
0002656C 0000 0000                  	dc.w Shadow_Map_42-Shadow_Map, Shadow_Map_43-Shadow_Map
00026570 0000 0000                  	dc.w Shadow_Map_44-Shadow_Map, Shadow_Map_45-Shadow_Map
00026574 0000 0000                  	dc.w Shadow_Map_46-Shadow_Map, Shadow_Map_47-Shadow_Map
00026578 0000 0000                  	dc.w Shadow_Map_48-Shadow_Map, Shadow_Map_49-Shadow_Map
0002657C 0000 0000                  	dc.w Shadow_Map_4A-Shadow_Map, Shadow_Map_4B-Shadow_Map
00026580 0000 0000                  	dc.w Shadow_Map_4C-Shadow_Map, Shadow_Map_4D-Shadow_Map
00026584 0000 0000                  	dc.w Shadow_Map_4E-Shadow_Map, Shadow_Map_4F-Shadow_Map
00026588 0000 0000                  	dc.w Shadow_Map_50-Shadow_Map, Shadow_Map_51-Shadow_Map
0002658C 0000 0000                  	dc.w Shadow_Map_52-Shadow_Map, Shadow_Map_53-Shadow_Map
00026590 0000 0000                  	dc.w Shadow_Map_54-Shadow_Map, Shadow_Map_55-Shadow_Map
00026594 0000 0000                  	dc.w Shadow_Map_56-Shadow_Map, Shadow_Map_57-Shadow_Map
00026598 0000 0000                  	dc.w Shadow_Map_58-Shadow_Map, Shadow_Map_59-Shadow_Map
0002659C 0000 0000                  	dc.w Shadow_Map_5A-Shadow_Map, Shadow_Map_5B-Shadow_Map
000265A0 0000 0000                  	dc.w Shadow_Map_5C-Shadow_Map, Shadow_Map_5D-Shadow_Map
000265A4 0000 0000                  	dc.w Shadow_Map_5E-Shadow_Map, Shadow_Map_5F-Shadow_Map
000265A8 0000 0000                  	dc.w Shadow_Map_60-Shadow_Map, Shadow_Map_61-Shadow_Map
000265AC 0000 0000                  	dc.w Shadow_Map_62-Shadow_Map, Shadow_Map_63-Shadow_Map
000265B0 0000 0000                  	dc.w Shadow_Map_64-Shadow_Map, Shadow_Map_65-Shadow_Map
000265B4 0000 0000                  	dc.w Shadow_Map_66-Shadow_Map, Shadow_Map_67-Shadow_Map
000265B8 0000 0000                  	dc.w Shadow_Map_68-Shadow_Map, Shadow_Map_69-Shadow_Map
000265BC 0000 0000                  	dc.w Shadow_Map_6A-Shadow_Map, Shadow_Map_6B-Shadow_Map
000265C0 0000 0000                  	dc.w Shadow_Map_6C-Shadow_Map, Shadow_Map_6D-Shadow_Map
000265C4 0000 0000                  	dc.w Shadow_Map_6E-Shadow_Map, Shadow_Map_6F-Shadow_Map
000265C8 0000 0000                  	dc.w Shadow_Map_70-Shadow_Map, Shadow_Map_71-Shadow_Map
000265CC 04                         Shadow_Map_1: dc.b $4
000265CD EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000265D2 F40D 0003 F0               	dc.b $F4, $D, $0, $3, $F0
000265D7 0408 000B F8               	dc.b $4, $8, $0, $B, $F8
000265DC 0C08 000E F8               	dc.b $C, $8, $0, $E, $F8
000265E1 06                         Shadow_Map_2: dc.b $6
000265E2 EC09 0000 F1               	dc.b $EC, $9, $0, $0, $F1
000265E7 0C08 0006 F9               	dc.b $C, $8, $0, $6, $F9
000265EC FE00 0009 09               	dc.b $FE, $0, $0, $9, $9
000265F1 FC05 000A F9               	dc.b $FC, $5, $0, $A, $F9
000265F6 FC00 000E F1               	dc.b $FC, $0, $0, $E, $F1
000265FB F500 000F 09               	dc.b $F5, $0, $0, $F, $9
00026600 06                         Shadow_Map_3: dc.b $6
00026601 0C08 0000 F9               	dc.b $C, $8, $0, $0, $F9
00026606 FE00 0003 09               	dc.b $FE, $0, $0, $3, $9
0002660B FC05 0004 F9               	dc.b $FC, $5, $0, $4, $F9
00026610 FC00 0008 F1               	dc.b $FC, $0, $0, $8, $F1
00026615 F500 0009 09               	dc.b $F5, $0, $0, $9, $9
0002661A EC09 000A F1               	dc.b $EC, $9, $0, $A, $F1
0002661F 08                         Shadow_Map_4: dc.b $8
00026620 FE00 0000 09               	dc.b $FE, $0, $0, $0, $9
00026625 FC00 0001 F1               	dc.b $FC, $0, $0, $1, $F1
0002662A F500 0002 09               	dc.b $F5, $0, $0, $2, $9
0002662F 0C08 0003 F9               	dc.b $C, $8, $0, $3, $F9
00026634 FC01 0006 F9               	dc.b $FC, $1, $0, $6, $F9
00026639 FC01 0008 01               	dc.b $FC, $1, $0, $8, $1
0002663E 0400 000A 06               	dc.b $4, $0, $0, $A, $6
00026643 EC09 000B F1               	dc.b $EC, $9, $0, $B, $F1
00026648 03                         Shadow_Map_5: dc.b $3
00026649 EC0A 0000 F1               	dc.b $EC, $A, $0, $0, $F1
0002664E 0408 0009 F8               	dc.b $4, $8, $0, $9, $F8
00026653 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00026658 05                         Shadow_Map_6: dc.b $5
00026659 FB09 0000 ED               	dc.b $FB, $9, $0, $0, $ED
0002665E FB06 0006 05               	dc.b $FB, $6, $0, $6, $5
00026663 0B04 000C ED               	dc.b $B, $4, $0, $C, $ED
00026668 F300 000E ED               	dc.b $F3, $0, $0, $E, $ED
0002666D EB09 000F F5               	dc.b $EB, $9, $0, $F, $F5
00026672 04                         Shadow_Map_7: dc.b $4
00026673 EC09 0000 F5               	dc.b $EC, $9, $0, $0, $F5
00026678 FC0A 0006 F5               	dc.b $FC, $A, $0, $6, $F5
0002667D FC00 000F 0D               	dc.b $FC, $0, $0, $F, $D
00026682 0C00 0010 0D               	dc.b $C, $0, $0, $10, $D
00026687 03                         Shadow_Map_8: dc.b $3
00026688 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
0002668D FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00026692 F700 000F 0B               	dc.b $F7, $0, $0, $F, $B
00026697 05                         Shadow_Map_9: dc.b $5
00026698 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
0002669D FD09 0006 EB               	dc.b $FD, $9, $0, $6, $EB
000266A2 FD06 000C 03               	dc.b $FD, $6, $0, $C, $3
000266A7 0D04 0012 EB               	dc.b $D, $4, $0, $12, $EB
000266AC F500 0014 0B               	dc.b $F5, $0, $0, $14, $B
000266B1 03                         Shadow_Map_A: dc.b $3
000266B2 EC09 0000 F2               	dc.b $EC, $9, $0, $0, $F2
000266B7 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
000266BC F600 0012 0A               	dc.b $F6, $0, $0, $12, $A
000266C1 03                         Shadow_Map_B: dc.b $3
000266C2 EF0D 0000 F3               	dc.b $EF, $D, $0, $0, $F3
000266C7 0F0C 0008 F3               	dc.b $F, $C, $0, $8, $F3
000266CC FF09 000C F3               	dc.b $FF, $9, $0, $C, $F3
000266D1 06                         Shadow_Map_C: dc.b $6
000266D2 F20D 0000 EB               	dc.b $F2, $D, $0, $0, $EB
000266D7 EA04 0008 F3               	dc.b $EA, $4, $0, $8, $F3
000266DC 0205 000A F3               	dc.b $2, $5, $0, $A, $F3
000266E1 1200 000E FB               	dc.b $12, $0, $0, $E, $FB
000266E6 0200 000F 03               	dc.b $2, $0, $0, $F, $3
000266EB F201 0010 0B               	dc.b $F2, $1, $0, $10, $B
000266F0 05                         Shadow_Map_D: dc.b $5
000266F1 EB07 0000 F4               	dc.b $EB, $7, $0, $0, $F4
000266F6 F301 0008 EC               	dc.b $F3, $1, $0, $8, $EC
000266FB F303 000A 04               	dc.b $F3, $3, $0, $A, $4
00026700 FB05 000E 0C               	dc.b $FB, $5, $0, $E, $C
00026705 0B00 0012 FC               	dc.b $B, $0, $0, $12, $FC
0002670A 07                         Shadow_Map_E: dc.b $7
0002670B F90C 0000 E9               	dc.b $F9, $C, $0, $0, $E9
00026710 F108 0004 F1               	dc.b $F1, $8, $0, $4, $F1
00026715 010C 0007 F1               	dc.b $1, $C, $0, $7, $F1
0002671A E900 000B F9               	dc.b $E9, $0, $0, $B, $F9
0002671F 0908 000C F9               	dc.b $9, $8, $0, $C, $F9
00026724 1100 000F 01               	dc.b $11, $0, $0, $F, $1
00026729 0100 0010 11               	dc.b $1, $0, $0, $10, $11
0002672E 05                         Shadow_Map_F: dc.b $5
0002672F EC0B 0000 ED               	dc.b $EC, $B, $0, $0, $ED
00026734 0C08 000C F5               	dc.b $C, $8, $0, $C, $F5
00026739 1404 000F FD               	dc.b $14, $4, $0, $F, $FD
0002673E F405 0011 05               	dc.b $F4, $5, $0, $11, $5
00026743 0400 0015 05               	dc.b $4, $0, $0, $15, $5
00026748 04                         Shadow_Map_10: dc.b $4
00026749 EF0E 0000 EB               	dc.b $EF, $E, $0, $0, $EB
0002674E E700 000C FB               	dc.b $E7, $0, $0, $C, $FB
00026753 0705 000D FB               	dc.b $7, $5, $0, $D, $FB
00026758 FF01 0011 0B               	dc.b $FF, $1, $0, $11, $B
0002675D 06                         Shadow_Map_11: dc.b $6
0002675E F40D 0000 EF               	dc.b $F4, $D, $0, $0, $EF
00026763 EC04 0008 F7               	dc.b $EC, $4, $0, $8, $F7
00026768 040C 000A F7               	dc.b $4, $C, $0, $A, $F7
0002676D 0C04 000E FF               	dc.b $C, $4, $0, $E, $FF
00026772 FC00 0010 0F               	dc.b $FC, $0, $0, $10, $F
00026777 0400 0011 17               	dc.b $4, $0, $0, $11, $17
0002677C 03                         Shadow_Map_12: dc.b $3
0002677D F30F 0000 ED               	dc.b $F3, $F, $0, $0, $ED
00026782 EB08 0010 F5               	dc.b $EB, $8, $0, $10, $F5
00026787 0B00 0013 0D               	dc.b $B, $0, $0, $13, $D
0002678C 03                         Shadow_Map_13: dc.b $3
0002678D F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00026792 EC00 000C FC               	dc.b $EC, $0, $0, $C, $FC
00026797 EC03 000D 0C               	dc.b $EC, $3, $0, $D, $C
0002679C 03                         Shadow_Map_14: dc.b $3
0002679D F50E 0000 EF               	dc.b $F5, $E, $0, $0, $EF
000267A2 ED00 000C F7               	dc.b $ED, $0, $0, $C, $F7
000267A7 FD01 000D 0F               	dc.b $FD, $1, $0, $D, $F
000267AC 04                         Shadow_Map_15: dc.b $4
000267AD F20F 0000 EC               	dc.b $F2, $F, $0, $0, $EC
000267B2 EA04 0010 04               	dc.b $EA, $4, $0, $10, $4
000267B7 F200 0012 0C               	dc.b $F2, $0, $0, $12, $C
000267BC 0201 0013 0C               	dc.b $2, $1, $0, $13, $C
000267C1 04                         Shadow_Map_16: dc.b $4
000267C2 F50E 0000 EE               	dc.b $F5, $E, $0, $0, $EE
000267C7 ED00 000C F6               	dc.b $ED, $0, $0, $C, $F6
000267CC 0D04 000D 06               	dc.b $D, $4, $0, $D, $6
000267D1 F501 000F 0E               	dc.b $F5, $1, $0, $F, $E
000267D6 03                         Shadow_Map_17: dc.b $3
000267D7 F50E 0000 EF               	dc.b $F5, $E, $0, $0, $EF
000267DC ED00 000C F7               	dc.b $ED, $0, $0, $C, $F7
000267E1 ED03 000D 0F               	dc.b $ED, $3, $0, $D, $F
000267E6 06                         Shadow_Map_18: dc.b $6
000267E7 FD0D 0000 EB               	dc.b $FD, $D, $0, $0, $EB
000267EC ED05 0008 F3               	dc.b $ED, $5, $0, $8, $F3
000267F1 0D04 000C F3               	dc.b $D, $4, $0, $C, $F3
000267F6 F500 000E 03               	dc.b $F5, $0, $0, $E, $3
000267FB FD04 000F 0B               	dc.b $FD, $4, $0, $F, $B
00026800 0500 0011 0B               	dc.b $5, $0, $0, $11, $B
00026805 05                         Shadow_Map_19: dc.b $5
00026806 FD0D 0000 EA               	dc.b $FD, $D, $0, $0, $EA
0002680B F50C 0008 F2               	dc.b $F5, $C, $0, $8, $F2
00026810 0D04 000C F2               	dc.b $D, $4, $0, $C, $F2
00026815 E505 000E FA               	dc.b $E5, $5, $0, $E, $FA
0002681A FD00 0012 0A               	dc.b $FD, $0, $0, $12, $A
0002681F 07                         Shadow_Map_1A: dc.b $7
00026820 E703 0000 02               	dc.b $E7, $3, $0, $0, $2
00026825 EF02 0004 0A               	dc.b $EF, $2, $0, $4, $A
0002682A F706 0007 F2               	dc.b $F7, $6, $0, $7, $F2
0002682F F700 000D 12               	dc.b $F7, $0, $0, $D, $12
00026834 FF00 000E EA               	dc.b $FF, $0, $0, $E, $EA
00026839 0700 000F 02               	dc.b $7, $0, $0, $F, $2
0002683E 0F00 0010 FA               	dc.b $F, $0, $0, $10, $FA
00026843 05                         Shadow_Map_1B: dc.b $5
00026844 FA0E 0000 EB               	dc.b $FA, $E, $0, $0, $EB
00026849 EA05 000C F3               	dc.b $EA, $5, $0, $C, $F3
0002684E F208 0010 03               	dc.b $F2, $8, $0, $10, $3
00026853 FA04 0013 0B               	dc.b $FA, $4, $0, $13, $B
00026858 0200 0015 0B               	dc.b $2, $0, $0, $15, $B
0002685D 04                         Shadow_Map_1C: dc.b $4
0002685E F30E 0000 EC               	dc.b $F3, $E, $0, $0, $EC
00026863 0B08 000C EC               	dc.b $B, $8, $0, $C, $EC
00026868 EB04 000F FC               	dc.b $EB, $4, $0, $F, $FC
0002686D FB04 0011 0C               	dc.b $FB, $4, $0, $11, $C
00026872 06                         Shadow_Map_1D: dc.b $6
00026873 FA0D 0000 ED               	dc.b $FA, $D, $0, $0, $ED
00026878 F20C 0008 F5               	dc.b $F2, $C, $0, $8, $F5
0002687D 0A04 000C F5               	dc.b $A, $4, $0, $C, $F5
00026882 EA04 000E FD               	dc.b $EA, $4, $0, $E, $FD
00026887 E200 0010 05               	dc.b $E2, $0, $0, $10, $5
0002688C FA00 0011 0D               	dc.b $FA, $0, $0, $11, $D
00026891 04                         Shadow_Map_1E: dc.b $4
00026892 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00026897 FF0E 0006 EC               	dc.b $FF, $E, $0, $6, $EC
0002689C EF01 0012 EC               	dc.b $EF, $1, $0, $12, $EC
000268A1 FF00 0014 0C               	dc.b $FF, $0, $0, $14, $C
000268A6 03                         Shadow_Map_1F: dc.b $3
000268A7 FE0E 0000 F2               	dc.b $FE, $E, $0, $0, $F2
000268AC EE01 000C F2               	dc.b $EE, $1, $0, $C, $F2
000268B1 EE05 000E FA               	dc.b $EE, $5, $0, $E, $FA
000268B6 06                         Shadow_Map_20: dc.b $6
000268B7 FF0E 0000 EE               	dc.b $FF, $E, $0, $0, $EE
000268BC EF01 000C EE               	dc.b $EF, $1, $0, $C, $EE
000268C1 EF05 000E F6               	dc.b $EF, $5, $0, $E, $F6
000268C6 EF01 0012 06               	dc.b $EF, $1, $0, $12, $6
000268CB FF00 0014 0E               	dc.b $FF, $0, $0, $14, $E
000268D0 0701 0015 0E               	dc.b $7, $1, $0, $15, $E
000268D5 06                         Shadow_Map_21: dc.b $6
000268D6 FF0E 0000 ED               	dc.b $FF, $E, $0, $0, $ED
000268DB EF01 000C ED               	dc.b $EF, $1, $0, $C, $ED
000268E0 EF05 000E F5               	dc.b $EF, $5, $0, $E, $F5
000268E5 EF01 0012 05               	dc.b $EF, $1, $0, $12, $5
000268EA FF00 0014 0D               	dc.b $FF, $0, $0, $14, $D
000268EF 1000 0015 0D               	dc.b $10, $0, $0, $15, $D
000268F4 02                         Shadow_Map_22: dc.b $2
000268F5 EE09 0000 F7               	dc.b $EE, $9, $0, $0, $F7
000268FA FE0E 0006 EF               	dc.b $FE, $E, $0, $6, $EF
000268FF 04                         Shadow_Map_23: dc.b $4
00026900 EE09 0000 F3               	dc.b $EE, $9, $0, $0, $F3
00026905 FE0E 0006 EE               	dc.b $FE, $E, $0, $6, $EE
0002690A F700 0012 0B               	dc.b $F7, $0, $0, $12, $B
0002690F 0000 0013 0E               	dc.b $0, $0, $0, $13, $E
00026914 04                         Shadow_Map_24: dc.b $4
00026915 F009 0000 F3               	dc.b $F0, $9, $0, $0, $F3
0002691A 000E 0006 EE               	dc.b $0, $E, $0, $6, $EE
0002691F F701 0012 0B               	dc.b $F7, $1, $0, $12, $B
00026924 1000 0014 0E               	dc.b $10, $0, $0, $14, $E
00026929 04                         Shadow_Map_25: dc.b $4
0002692A F009 0000 F6               	dc.b $F0, $9, $0, $0, $F6
0002692F 000E 0006 EE               	dc.b $0, $E, $0, $6, $EE
00026934 F001 0012 EE               	dc.b $F0, $1, $0, $12, $EE
00026939 1000 0014 0E               	dc.b $10, $0, $0, $14, $E
0002693E 05                         Shadow_Map_26: dc.b $5
0002693F F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00026944 EC04 0008 F4               	dc.b $EC, $4, $0, $8, $F4
00026949 040C 000A F4               	dc.b $4, $C, $0, $A, $F4
0002694E 0C05 000E FC               	dc.b $C, $5, $0, $E, $FC
00026953 0C00 0012 0C               	dc.b $C, $0, $0, $12, $C
00026958 04                         Shadow_Map_27: dc.b $4
00026959 F20E 0000 ED               	dc.b $F2, $E, $0, $0, $ED
0002695E 0A05 000C FD               	dc.b $A, $5, $0, $C, $FD
00026963 F203 0010 0D               	dc.b $F2, $3, $0, $10, $D
00026968 FA01 0014 15               	dc.b $FA, $1, $0, $14, $15
0002696D 05                         Shadow_Map_28: dc.b $5
0002696E EE0B 0000 F1               	dc.b $EE, $B, $0, $0, $F1
00026973 F601 000C E9               	dc.b $F6, $1, $0, $C, $E9
00026978 F603 000E 09               	dc.b $F6, $3, $0, $E, $9
0002697D 0600 0012 11               	dc.b $6, $0, $0, $12, $11
00026982 0E05 0013 F9               	dc.b $E, $5, $0, $13, $F9
00026987 05                         Shadow_Map_29: dc.b $5
00026988 F30E 0000 EC               	dc.b $F3, $E, $0, $0, $EC
0002698D 0B0D 000C F4               	dc.b $B, $D, $0, $C, $F4
00026992 1B00 0014 FC               	dc.b $1B, $0, $0, $14, $FC
00026997 F300 0015 0C               	dc.b $F3, $0, $0, $15, $C
0002699C 0304 0016 0C               	dc.b $3, $4, $0, $16, $C
000269A1 04                         Shadow_Map_2A: dc.b $4
000269A2 F30E 0000 EE               	dc.b $F3, $E, $0, $0, $EE
000269A7 EB00 000C F6               	dc.b $EB, $0, $0, $C, $F6
000269AC 0B05 000D FE               	dc.b $B, $5, $0, $D, $FE
000269B1 0301 0011 0E               	dc.b $3, $1, $0, $11, $E
000269B6 06                         Shadow_Map_2B: dc.b $6
000269B7 F60D 0000 EE               	dc.b $F6, $D, $0, $0, $EE
000269BC EE04 0008 F6               	dc.b $EE, $4, $0, $8, $F6
000269C1 060C 000A F6               	dc.b $6, $C, $0, $A, $F6
000269C6 0E05 000E FE               	dc.b $E, $5, $0, $E, $FE
000269CB 0E00 0012 0E               	dc.b $E, $0, $0, $12, $E
000269D0 FE01 0013 16               	dc.b $FE, $1, $0, $13, $16
000269D5 05                         Shadow_Map_2C: dc.b $5
000269D6 F40D 0000 F0               	dc.b $F4, $D, $0, $0, $F0
000269DB EC04 0008 F8               	dc.b $EC, $4, $0, $8, $F8
000269E0 040A 000A F8               	dc.b $4, $A, $0, $A, $F8
000269E5 0404 0013 10               	dc.b $4, $4, $0, $13, $10
000269EA 0C00 0015 10               	dc.b $C, $0, $0, $15, $10
000269EF 05                         Shadow_Map_2D: dc.b $5
000269F0 F60D 0000 ED               	dc.b $F6, $D, $0, $0, $ED
000269F5 EE08 0008 F5               	dc.b $EE, $8, $0, $8, $F5
000269FA 060D 000B F5               	dc.b $6, $D, $0, $B, $F5
000269FF 1600 0013 FD               	dc.b $16, $0, $0, $13, $FD
00026A04 FE01 0014 15               	dc.b $FE, $1, $0, $14, $15
00026A09 04                         Shadow_Map_2E: dc.b $4
00026A0A F80E 0000 ED               	dc.b $F8, $E, $0, $0, $ED
00026A0F F004 000C F5               	dc.b $F0, $4, $0, $C, $F5
00026A14 1004 000E 05               	dc.b $10, $4, $0, $E, $5
00026A19 F003 0010 0D               	dc.b $F0, $3, $0, $10, $D
00026A1E 04                         Shadow_Map_2F: dc.b $4
00026A1F F80E 0000 EC               	dc.b $F8, $E, $0, $0, $EC
00026A24 F008 000C FC               	dc.b $F0, $8, $0, $C, $FC
00026A29 E800 000F 0C               	dc.b $E8, $0, $0, $F, $C
00026A2E F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00026A33 03                         Shadow_Map_30: dc.b $3
00026A34 EF0F 0000 F6               	dc.b $EF, $F, $0, $0, $F6
00026A39 F702 0010 EE               	dc.b $F7, $2, $0, $10, $EE
00026A3E 0F04 0013 06               	dc.b $F, $4, $0, $13, $6
00026A43 04                         Shadow_Map_31: dc.b $4
00026A44 F70E 0000 EE               	dc.b $F7, $E, $0, $0, $EE
00026A49 EF04 000C F6               	dc.b $EF, $4, $0, $C, $F6
00026A4E 0F0C 000E F6               	dc.b $F, $C, $0, $E, $F6
00026A53 EF03 0012 0E               	dc.b $EF, $3, $0, $12, $E
00026A58 03                         Shadow_Map_32: dc.b $3
00026A59 F30E 0000 EE               	dc.b $F3, $E, $0, $0, $EE
00026A5E 0B04 000C EE               	dc.b $B, $4, $0, $C, $EE
00026A63 F303 000E 0E               	dc.b $F3, $3, $0, $E, $E
00026A68 04                         Shadow_Map_33: dc.b $4
00026A69 F60E 0000 EE               	dc.b $F6, $E, $0, $0, $EE
00026A6E EE04 000C F6               	dc.b $EE, $4, $0, $C, $F6
00026A73 0E04 000E 06               	dc.b $E, $4, $0, $E, $6
00026A78 EE03 0010 0E               	dc.b $EE, $3, $0, $10, $E
00026A7D 03                         Shadow_Map_34: dc.b $3
00026A7E F40F 0000 EE               	dc.b $F4, $F, $0, $0, $EE
00026A83 EC03 0010 0E               	dc.b $EC, $3, $0, $10, $E
00026A88 0C00 0014 0E               	dc.b $C, $0, $0, $14, $E
00026A8D 03                         Shadow_Map_35: dc.b $3
00026A8E F107 0000 EE               	dc.b $F1, $7, $0, $0, $EE
00026A93 F103 0008 0E               	dc.b $F1, $3, $0, $8, $E
00026A98 F907 000C FE               	dc.b $F9, $7, $0, $C, $FE
00026A9D 05                         Shadow_Map_36: dc.b $5
00026A9E E906 0000 01               	dc.b $E9, $6, $0, $0, $1
00026AA3 F107 0006 F1               	dc.b $F1, $7, $0, $6, $F1
00026AA8 F101 000E 11               	dc.b $F1, $1, $0, $E, $11
00026AAD F901 0010 E9               	dc.b $F9, $1, $0, $10, $E9
00026AB2 0100 0012 01               	dc.b $1, $0, $0, $12, $1
00026AB7 04                         Shadow_Map_37: dc.b $4
00026AB8 E80E 0000 EF               	dc.b $E8, $E, $0, $0, $EF
00026ABD 0009 000C EF               	dc.b $0, $9, $0, $C, $EF
00026AC2 E004 0012 F7               	dc.b $E0, $4, $0, $12, $F7
00026AC7 F001 0014 0F               	dc.b $F0, $1, $0, $14, $F
00026ACC 05                         Shadow_Map_38: dc.b $5
00026ACD F40E 0000 EB               	dc.b $F4, $E, $0, $0, $EB
00026AD2 EC0C 000C F3               	dc.b $EC, $C, $0, $C, $F3
00026AD7 0C04 0010 F3               	dc.b $C, $4, $0, $10, $F3
00026ADC E400 0012 03               	dc.b $E4, $0, $0, $12, $3
00026AE1 F405 0013 0B               	dc.b $F4, $5, $0, $13, $B
00026AE6 05                         Shadow_Map_39: dc.b $5
00026AE7 E90F 0000 EC               	dc.b $E9, $F, $0, $0, $EC
00026AEC 0904 0010 F4               	dc.b $9, $4, $0, $10, $F4
00026AF1 E100 0012 04               	dc.b $E1, $0, $0, $12, $4
00026AF6 E903 0013 0C               	dc.b $E9, $3, $0, $13, $C
00026AFB F900 0017 14               	dc.b $F9, $0, $0, $17, $14
00026B00 05                         Shadow_Map_3A: dc.b $5
00026B01 FF0C 0000 E7               	dc.b $FF, $C, $0, $0, $E7
00026B06 EF0D 0004 EF               	dc.b $EF, $D, $0, $4, $EF
00026B0B 0708 000C EF               	dc.b $7, $8, $0, $C, $EF
00026B10 E704 000F FF               	dc.b $E7, $4, $0, $F, $FF
00026B15 EF01 0011 0F               	dc.b $EF, $1, $0, $11, $F
00026B1A 06                         Shadow_Map_3B: dc.b $6
00026B1B E104 0000 FA               	dc.b $E1, $4, $0, $0, $FA
00026B20 E906 0002 02               	dc.b $E9, $6, $0, $2, $2
00026B25 F107 0008 F2               	dc.b $F1, $7, $0, $8, $F2
00026B2A F101 0010 12               	dc.b $F1, $1, $0, $10, $12
00026B2F F901 0012 EA               	dc.b $F9, $1, $0, $12, $EA
00026B34 0100 0014 02               	dc.b $1, $0, $0, $14, $2
00026B39 05                         Shadow_Map_3C: dc.b $5
00026B3A E104 0000 FA               	dc.b $E1, $4, $0, $0, $FA
00026B3F E907 0002 02               	dc.b $E9, $7, $0, $2, $2
00026B44 F107 000A F2               	dc.b $F1, $7, $0, $A, $F2
00026B49 F101 0012 12               	dc.b $F1, $1, $0, $12, $12
00026B4E F901 0014 EA               	dc.b $F9, $1, $0, $14, $EA
00026B53 05                         Shadow_Map_3D: dc.b $5
00026B54 E104 0000 FA               	dc.b $E1, $4, $0, $0, $FA
00026B59 E907 0002 02               	dc.b $E9, $7, $0, $2, $2
00026B5E F107 000A F2               	dc.b $F1, $7, $0, $A, $F2
00026B63 F901 0012 EA               	dc.b $F9, $1, $0, $12, $EA
00026B68 F901 0014 12               	dc.b $F9, $1, $0, $14, $12
00026B6D 01                         Shadow_Map_3E: dc.b $1
00026B6E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00026B73 01                         Shadow_Map_3F: dc.b $1
00026B74 F00F 0000 F1               	dc.b $F0, $F, $0, $0, $F1
00026B79 01                         Shadow_Map_40: dc.b $1
00026B7A EF0F 0000 F0               	dc.b $EF, $F, $0, $0, $F0
00026B7F 01                         Shadow_Map_41: dc.b $1
00026B80 F00F 0000 EF               	dc.b $F0, $F, $0, $0, $EF
00026B85 01                         Shadow_Map_42: dc.b $1
00026B86 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00026B8B 04                         Shadow_Map_43: dc.b $4
00026B8C F40D 0000 EE               	dc.b $F4, $D, $0, $0, $EE
00026B91 EC08 0008 F6               	dc.b $EC, $8, $0, $8, $F6
00026B96 040C 000B F6               	dc.b $4, $C, $0, $B, $F6
00026B9B 0C08 000F FE               	dc.b $C, $8, $0, $F, $FE
00026BA0 05                         Shadow_Map_44: dc.b $5
00026BA1 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00026BA6 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00026BAB 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00026BB0 F900 0010 E8               	dc.b $F9, $0, $0, $10, $E8
00026BB5 ED01 0011 08               	dc.b $ED, $1, $0, $11, $8
00026BBA 08                         Shadow_Map_45: dc.b $8
00026BBB F404 0000 00               	dc.b $F4, $4, $0, $0, $0
00026BC0 FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
00026BC5 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00026BCA 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
00026BCF F400 000E F8               	dc.b $F4, $0, $0, $E, $F8
00026BD4 0C00 000F EC               	dc.b $C, $0, $0, $F, $EC
00026BD9 0C00 0010 0C               	dc.b $C, $0, $0, $10, $C
00026BDE FC00 0011 EC               	dc.b $FC, $0, $0, $11, $EC
00026BE3 03                         Shadow_Map_46: dc.b $3
00026BE4 EC08 0800 E3               	dc.b $EC, $8, $8, $0, $E3
00026BE9 F702 0803 00               	dc.b $F7, $2, $8, $3, $0
00026BEE F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00026BF3 03                         Shadow_Map_47: dc.b $3
00026BF4 EC0E 0800 E0               	dc.b $EC, $E, $8, $0, $E0
00026BF9 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00026BFE 0500 1814 00               	dc.b $5, $0, $18, $14, $0
00026C03 03                         Shadow_Map_48: dc.b $3
00026C04 F30D 0000 FC               	dc.b $F3, $D, $0, $0, $FC
00026C09 FB05 0008 EC               	dc.b $FB, $5, $0, $8, $EC
00026C0E 0308 000C FC               	dc.b $3, $8, $0, $C, $FC
00026C13 02                         Shadow_Map_49: dc.b $2
00026C14 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00026C19 F40A 0009 00               	dc.b $F4, $A, $0, $9, $0
00026C1E 03                         Shadow_Map_4A: dc.b $3
00026C1F F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00026C24 FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00026C29 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00026C2E 03                         Shadow_Map_4B: dc.b $3
00026C2F F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00026C34 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00026C39 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00026C3E 05                         Shadow_Map_4C: dc.b $5
00026C3F E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00026C44 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00026C49 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00026C4E 1000 000F 00               	dc.b $10, $0, $0, $F, $0
00026C53 F000 0010 08               	dc.b $F0, $0, $0, $10, $8
00026C58 03                         Shadow_Map_4D: dc.b $3
00026C59 F70E 0000 E8               	dc.b $F7, $E, $0, $0, $E8
00026C5E F702 000C 08               	dc.b $F7, $2, $0, $C, $8
00026C63 FF05 000F 10               	dc.b $FF, $5, $0, $F, $10
00026C68 03                         Shadow_Map_4E: dc.b $3
00026C69 F70E 0000 E8               	dc.b $F7, $E, $0, $0, $E8
00026C6E F702 000C 08               	dc.b $F7, $2, $0, $C, $8
00026C73 FF05 000F 10               	dc.b $FF, $5, $0, $F, $10
00026C78 02                         Shadow_Map_4F: dc.b $2
00026C79 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00026C7E 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00026C83 03                         Shadow_Map_50: dc.b $3
00026C84 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00026C89 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00026C8E 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00026C93 02                         Shadow_Map_51: dc.b $2
00026C94 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00026C99 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00026C9E 03                         Shadow_Map_52: dc.b $3
00026C9F EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00026CA4 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00026CA9 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00026CAE 08                         Shadow_Map_53: dc.b $8
00026CAF F809 0000 F4               	dc.b $F8, $9, $0, $0, $F4
00026CB4 080C 0006 F4               	dc.b $8, $C, $0, $6, $F4
00026CB9 1000 000A F4               	dc.b $10, $0, $0, $A, $F4
00026CBE E80D 000B F4               	dc.b $E8, $D, $0, $B, $F4
00026CC3 F000 0013 EC               	dc.b $F0, $0, $0, $13, $EC
00026CC8 F800 0014 0C               	dc.b $F8, $0, $0, $14, $C
00026CCD 1000 0015 0C               	dc.b $10, $0, $0, $15, $C
00026CD2 0000 0016 0C               	dc.b $0, $0, $0, $16, $C
00026CD7 08                         Shadow_Map_54: dc.b $8
00026CD8 E90D 0800 FB               	dc.b $E9, $D, $8, $0, $FB
00026CDD E901 0808 F3               	dc.b $E9, $1, $8, $8, $F3
00026CE2 F909 080A FB               	dc.b $F9, $9, $8, $A, $FB
00026CE7 F900 0810 F3               	dc.b $F9, $0, $8, $10, $F3
00026CEC 080C 0011 F4               	dc.b $8, $C, $0, $11, $F4
00026CF1 1000 0015 F4               	dc.b $10, $0, $0, $15, $F4
00026CF6 1000 0016 0C               	dc.b $10, $0, $0, $16, $C
00026CFB 0000 0017 F4               	dc.b $0, $0, $0, $17, $F4
00026D00 03                         Shadow_Map_55: dc.b $3
00026D01 F30D 0800 E4               	dc.b $F3, $D, $8, $0, $E4
00026D06 FB05 0808 04               	dc.b $FB, $5, $8, $8, $4
00026D0B 0308 080C EC               	dc.b $3, $8, $8, $C, $EC
00026D10 03                         Shadow_Map_56: dc.b $3
00026D11 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
00026D16 FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00026D1B 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00026D20 03                         Shadow_Map_57: dc.b $3
00026D21 F80E 0000 EC               	dc.b $F8, $E, $0, $0, $EC
00026D26 F301 000C 0C               	dc.b $F3, $1, $0, $C, $C
00026D2B F00C 000E EC               	dc.b $F0, $C, $0, $E, $EC
00026D30 05                         Shadow_Map_58: dc.b $5
00026D31 EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
00026D36 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
00026D3B 0401 0012 0B               	dc.b $4, $1, $0, $12, $B
00026D40 FC00 0014 0B               	dc.b $FC, $0, $0, $14, $B
00026D45 F400 0015 EB               	dc.b $F4, $0, $0, $15, $EB
00026D4A 02                         Shadow_Map_59: dc.b $2
00026D4B F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00026D50 F301 0010 0C               	dc.b $F3, $1, $0, $10, $C
00026D55 03                         Shadow_Map_5A: dc.b $3
00026D56 FC0A 0000 F4               	dc.b $FC, $A, $0, $0, $F4
00026D5B F408 0009 FC               	dc.b $F4, $8, $0, $9, $FC
00026D60 FC01 000C 0C               	dc.b $FC, $1, $0, $C, $C
00026D65 03                         Shadow_Map_5B: dc.b $3
00026D66 FC0A 0000 F4               	dc.b $FC, $A, $0, $0, $F4
00026D6B F408 0009 FC               	dc.b $F4, $8, $0, $9, $FC
00026D70 FC01 000C 0C               	dc.b $FC, $1, $0, $C, $C
00026D75 03                         Shadow_Map_5C: dc.b $3
00026D76 FC0A 0000 F4               	dc.b $FC, $A, $0, $0, $F4
00026D7B F408 0009 FC               	dc.b $F4, $8, $0, $9, $FC
00026D80 FC01 000C 0C               	dc.b $FC, $1, $0, $C, $C
00026D85 03                         Shadow_Map_5D: dc.b $3
00026D86 FC0A 0000 F4               	dc.b $FC, $A, $0, $0, $F4
00026D8B F408 0009 FC               	dc.b $F4, $8, $0, $9, $FC
00026D90 FC01 000C 0C               	dc.b $FC, $1, $0, $C, $C
00026D95 03                         Shadow_Map_5E: dc.b $3
00026D96 FC0A 0000 F4               	dc.b $FC, $A, $0, $0, $F4
00026D9B FC01 0009 0C               	dc.b $FC, $1, $0, $9, $C
00026DA0 F408 000B FC               	dc.b $F4, $8, $0, $B, $FC
00026DA5 03                         Shadow_Map_5F: dc.b $3
00026DA6 FC0A 0000 F4               	dc.b $FC, $A, $0, $0, $F4
00026DAB FC01 0009 0C               	dc.b $FC, $1, $0, $9, $C
00026DB0 F408 000B FC               	dc.b $F4, $8, $0, $B, $FC
00026DB5 03                         Shadow_Map_60: dc.b $3
00026DB6 E80B 0000 EE               	dc.b $E8, $B, $0, $0, $EE
00026DBB 0805 000C F6               	dc.b $8, $5, $0, $C, $F6
00026DC0 F805 0010 06               	dc.b $F8, $5, $0, $10, $6
00026DC5 05                         Shadow_Map_61: dc.b $5
00026DC6 FC0C 0000 E8               	dc.b $FC, $C, $0, $0, $E8
00026DCB E40A 0004 F0               	dc.b $E4, $A, $0, $4, $F0
00026DD0 0C08 000D F0               	dc.b $C, $8, $0, $D, $F0
00026DD5 0404 0010 F8               	dc.b $4, $4, $0, $10, $F8
00026DDA F401 0012 08               	dc.b $F4, $1, $0, $12, $8
00026DDF 04                         Shadow_Map_62: dc.b $4
00026DE0 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
00026DE5 F801 000C E8               	dc.b $F8, $1, $0, $C, $E8
00026DEA 0006 000E F8               	dc.b $0, $6, $0, $E, $F8
00026DEF 1000 0014 08               	dc.b $10, $0, $0, $14, $8
00026DF4 06                         Shadow_Map_63: dc.b $6
00026DF5 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00026DFA E808 0008 F4               	dc.b $E8, $8, $0, $8, $F4
00026DFF 0005 000B F4               	dc.b $0, $5, $0, $B, $F4
00026E04 1004 000F FC               	dc.b $10, $4, $0, $F, $FC
00026E09 0800 0011 04               	dc.b $8, $0, $0, $11, $4
00026E0E F001 0012 0C               	dc.b $F0, $1, $0, $12, $C
00026E13 03                         Shadow_Map_64: dc.b $3
00026E14 ED0A 0000 F1               	dc.b $ED, $A, $0, $0, $F1
00026E19 0509 0009 F9               	dc.b $5, $9, $0, $9, $F9
00026E1E F501 000F 09               	dc.b $F5, $1, $0, $F, $9
00026E23 03                         Shadow_Map_65: dc.b $3
00026E24 F40C 0000 EC               	dc.b $F4, $C, $0, $0, $EC
00026E29 EC08 0004 F4               	dc.b $EC, $8, $0, $4, $F4
00026E2E FC0A 0007 F4               	dc.b $FC, $A, $0, $7, $F4
00026E33 03                         Shadow_Map_66: dc.b $3
00026E34 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00026E39 F400 000C EC               	dc.b $F4, $0, $0, $C, $EC
00026E3E 0C0C 000D F4               	dc.b $C, $C, $0, $D, $F4
00026E43 03                         Shadow_Map_67: dc.b $3
00026E44 F40C 0000 EC               	dc.b $F4, $C, $0, $0, $EC
00026E49 EC08 0004 F4               	dc.b $EC, $8, $0, $4, $F4
00026E4E FC0A 0007 F4               	dc.b $FC, $A, $0, $7, $F4
00026E53 03                         Shadow_Map_68: dc.b $3
00026E54 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00026E59 FC0A 0008 F5               	dc.b $FC, $A, $0, $8, $F5
00026E5E E400 0011 FD               	dc.b $E4, $0, $0, $11, $FD
00026E63 02                         Shadow_Map_69: dc.b $2
00026E64 EC0B 0000 F6               	dc.b $EC, $B, $0, $0, $F6
00026E69 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00026E6E 07                         Shadow_Map_6A: dc.b $7
00026E6F 0C08 0000 F9               	dc.b $C, $8, $0, $0, $F9
00026E74 0400 0003 04               	dc.b $4, $0, $0, $3, $4
00026E79 0400 0004 FC               	dc.b $4, $0, $0, $4, $FC
00026E7E 0400 0005 F4               	dc.b $4, $0, $0, $5, $F4
00026E83 EC02 0006 F6               	dc.b $EC, $2, $0, $6, $F6
00026E88 EC02 0009 FE               	dc.b $EC, $2, $0, $9, $FE
00026E8D EC02 000C 06               	dc.b $EC, $2, $0, $C, $6
00026E92 01                         Shadow_Map_6B: dc.b $1
00026E93 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00026E98 01                         Shadow_Map_6C: dc.b $1
00026E99 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00026E9E 01                         Shadow_Map_6D: dc.b $1
00026E9F F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00026EA4 01                         Shadow_Map_6E: dc.b $1
00026EA5 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00026EAA 01                         Shadow_Map_6F: dc.b $1
00026EAB F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00026EB0 01                         Shadow_Map_70: dc.b $1
00026EB1 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00026EB6 01                         Shadow_Map_71: dc.b $1
00026EB7 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00026EBC                            	even
00026EBC                            	even
00026EBC                            Map_Metal:
00026EBC                            	include "_maps\Metal.asm"
00026EBC                            ; ================================================================================
00026EBC                            ; Sprite Mappings - generated by Flex 2 Fri May 04 2018 20:29:34 GMT-0400 (Eastern Daylight Time)
00026EBC                            ; ================================================================================
00026EBC                            
00026EBC                            Metal_Map:
00026EBC 0000 0000                  	dc.w $0, Metal_Map_1-Metal_Map
00026EC0 0000 0000                  	dc.w Metal_Map_2-Metal_Map, Metal_Map_3-Metal_Map
00026EC4 0000 0000                  	dc.w Metal_Map_4-Metal_Map, Metal_Map_5-Metal_Map
00026EC8 0000 0000                  	dc.w Metal_Map_6-Metal_Map, Metal_Map_7-Metal_Map
00026ECC 0000 0000                  	dc.w Metal_Map_8-Metal_Map, Metal_Map_9-Metal_Map
00026ED0 0000 0000                  	dc.w Metal_Map_A-Metal_Map, Metal_Map_B-Metal_Map
00026ED4 0000 0000                  	dc.w Metal_Map_C-Metal_Map, Metal_Map_D-Metal_Map
00026ED8 0000 0000                  	dc.w Metal_Map_E-Metal_Map, Metal_Map_F-Metal_Map
00026EDC 0000 0000                  	dc.w Metal_Map_10-Metal_Map, Metal_Map_11-Metal_Map
00026EE0 0000 0000                  	dc.w Metal_Map_12-Metal_Map, Metal_Map_13-Metal_Map
00026EE4 0000 0000                  	dc.w Metal_Map_14-Metal_Map, Metal_Map_15-Metal_Map
00026EE8 0000 0000                  	dc.w Metal_Map_16-Metal_Map, Metal_Map_17-Metal_Map
00026EEC 0000 0000                  	dc.w Metal_Map_18-Metal_Map, Metal_Map_19-Metal_Map
00026EF0 0000 0000                  	dc.w Metal_Map_1A-Metal_Map, Metal_Map_1B-Metal_Map
00026EF4 0000 0000                  	dc.w Metal_Map_1C-Metal_Map, Metal_Map_1D-Metal_Map
00026EF8 0000 0000                  	dc.w Metal_Map_1E-Metal_Map, Metal_Map_1F-Metal_Map
00026EFC 0000 0000                  	dc.w Metal_Map_20-Metal_Map, Metal_Map_21-Metal_Map
00026F00 0000 0000                  	dc.w Metal_Map_22-Metal_Map, Metal_Map_23-Metal_Map
00026F04 0000 0000                  	dc.w Metal_Map_24-Metal_Map, Metal_Map_25-Metal_Map
00026F08 0000 0000                  	dc.w Metal_Map_26-Metal_Map, Metal_Map_27-Metal_Map
00026F0C 0000 0000                  	dc.w Metal_Map_28-Metal_Map, Metal_Map_29-Metal_Map
00026F10 0000 0000                  	dc.w Metal_Map_2A-Metal_Map, Metal_Map_2B-Metal_Map
00026F14 0000 0000                  	dc.w Metal_Map_2C-Metal_Map, Metal_Map_2D-Metal_Map
00026F18 0000 0000                  	dc.w Metal_Map_2E-Metal_Map, Metal_Map_2F-Metal_Map
00026F1C 0000 0000                  	dc.w Metal_Map_30-Metal_Map, Metal_Map_31-Metal_Map
00026F20 0000 0000                  	dc.w Metal_Map_32-Metal_Map, $0
00026F24 0000 0000                  	dc.w $0, $0
00026F28 0000 0000                  	dc.w $0, Metal_Map_37-Metal_Map
00026F2C 0000 0000                  	dc.w Metal_Map_38-Metal_Map, Metal_Map_39-Metal_Map
00026F30 0000 0000                  	dc.w Metal_Map_3A-Metal_Map, Metal_Map_3B-Metal_Map
00026F34 0000 0000                  	dc.w Metal_Map_3C-Metal_Map, Metal_Map_3D-Metal_Map
00026F38 0000 0000                  	dc.w Metal_Map_3E-Metal_Map, Metal_Map_3F-Metal_Map
00026F3C 0000 0000                  	dc.w Metal_Map_40-Metal_Map, Metal_Map_41-Metal_Map
00026F40 0000 0000                  	dc.w Metal_Map_42-Metal_Map, $0
00026F44 0000 0000                  	dc.w $0, Metal_Map_45-Metal_Map
00026F48 0000 0000                  	dc.w Metal_Map_46-Metal_Map, Metal_Map_47-Metal_Map
00026F4C 0000 0000                  	dc.w Metal_Map_48-Metal_Map, $0
00026F50 0000 0000                  	dc.w $0, $0
00026F54 0000 0000                  	dc.w Metal_Map_4C-Metal_Map, Metal_Map_4D-Metal_Map
00026F58 0000 0000                  	dc.w $0, $0
00026F5C 0000 0000                  	dc.w $0, $0
00026F60 0000 0000                  	dc.w $0, Metal_Map_53-Metal_Map
00026F64 0000 0000                  	dc.w Metal_Map_54-Metal_Map, Metal_Map_55-Metal_Map
00026F68 0000 0000                  	dc.w Metal_Map_56-Metal_Map, Metal_Map_57-Metal_Map
00026F6C 0000 0000                  	dc.w Metal_Map_58-Metal_Map, Metal_Map_59-Metal_Map
00026F70 0000 0000                  	dc.w Metal_Map_5A-Metal_Map, Metal_Map_5B-Metal_Map
00026F74 0000 0000                  	dc.w Metal_Map_5C-Metal_Map, Metal_Map_5D-Metal_Map
00026F78 0000 0000                  	dc.w Metal_Map_5E-Metal_Map, Metal_Map_5F-Metal_Map
00026F7C 0000 0000                  	dc.w Metal_Map_60-Metal_Map, Metal_Map_61-Metal_Map
00026F80 0000 0000                  	dc.w Metal_Map_62-Metal_Map, Metal_Map_63-Metal_Map
00026F84 0000 0000                  	dc.w Metal_Map_64-Metal_Map, Metal_Map_65-Metal_Map
00026F88 0000 0000                  	dc.w Metal_Map_66-Metal_Map, Metal_Map_67-Metal_Map
00026F8C 0000 0000                  	dc.w Metal_Map_68-Metal_Map, Metal_Map_69-Metal_Map
00026F90 0000 0000                  	dc.w Metal_Map_6A-Metal_Map, Metal_Map_6B-Metal_Map
00026F94 0000 0000                  	dc.w Metal_Map_6C-Metal_Map, Metal_Map_6D-Metal_Map
00026F98 0000 0000                  	dc.w Metal_Map_6E-Metal_Map, Metal_Map_6F-Metal_Map
00026F9C 0000 0000                  	dc.w Metal_Map_70-Metal_Map, Metal_Map_71-Metal_Map
00026FA0 0000 0000                  	dc.w Metal_Map_72-Metal_Map, Metal_Map_73-Metal_Map
00026FA4 0000 0000                  	dc.w Metal_Map_74-Metal_Map, Metal_Map_75-Metal_Map
00026FA8 0000 0000                  	dc.w Metal_Map_76-Metal_Map, Metal_Map_77-Metal_Map
00026FAC 0000 0000                  	dc.w Metal_Map_78-Metal_Map, Metal_Map_79-Metal_Map
00026FB0 0000 0000                  	dc.w Metal_Map_7A-Metal_Map, Metal_Map_7B-Metal_Map
00026FB4 0000 0000                  	dc.w Metal_Map_7C-Metal_Map, Metal_Map_7D-Metal_Map
00026FB8 04                         Metal_Map_1: dc.b $4
00026FB9 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00026FBE F40D 0003 F0               	dc.b $F4, $D, $0, $3, $F0
00026FC3 0408 000B F0               	dc.b $4, $8, $0, $B, $F0
00026FC8 0C08 000E F8               	dc.b $C, $8, $0, $E, $F8
00026FCD 03                         Metal_Map_2: dc.b $3
00026FCE EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00026FD3 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00026FD8 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00026FDD 03                         Metal_Map_3: dc.b $3
00026FDE EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00026FE3 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00026FE8 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00026FED 03                         Metal_Map_4: dc.b $3
00026FEE EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00026FF3 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00026FF8 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00026FFD 05                         Metal_Map_5: dc.b $5
00026FFE EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00027003 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00027008 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002700D F400 000F E8               	dc.b $F4, $0, $0, $F, $E8
00027012 F400 0010 08               	dc.b $F4, $0, $0, $10, $8
00027017 04                         Metal_Map_6: dc.b $4
00027018 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
0002701D FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00027022 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00027027 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
0002702C 02                         Metal_Map_7: dc.b $2
0002702D EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00027032 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00027037 03                         Metal_Map_8: dc.b $3
00027038 FD0A 0000 F3               	dc.b $FD, $A, $0, $0, $F3
0002703D FE00 0009 08               	dc.b $FE, $0, $0, $9, $8
00027042 ED09 000A F3               	dc.b $ED, $9, $0, $A, $F3
00027047 04                         Metal_Map_9: dc.b $4
00027048 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002704D FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00027052 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00027057 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
0002705C 03                         Metal_Map_A: dc.b $3
0002705D EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
00027062 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
00027067 FD00 0012 08               	dc.b $FD, $0, $0, $12, $8
0002706C 03                         Metal_Map_B: dc.b $3
0002706D ED0D 0000 EB               	dc.b $ED, $D, $0, $0, $EB
00027072 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00027077 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
0002707C 05                         Metal_Map_C: dc.b $5
0002707D EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00027082 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00027087 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
0002708C 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00027091 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00027096 06                         Metal_Map_D: dc.b $6
00027097 EE09 0000 EC               	dc.b $EE, $9, $0, $0, $EC
0002709C ED01 0006 04               	dc.b $ED, $1, $0, $6, $4
000270A1 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
000270A6 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
000270AB FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
000270B0 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
000270B5 04                         Metal_Map_E: dc.b $4
000270B6 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000270BB ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000270C0 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
000270C5 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
000270CA 07                         Metal_Map_F: dc.b $7
000270CB ED09 0000 E9               	dc.b $ED, $9, $0, $0, $E9
000270D0 FB0D 0006 F3               	dc.b $FB, $D, $0, $6, $F3
000270D5 0B08 000E F3               	dc.b $B, $8, $0, $E, $F3
000270DA 1304 0011 FB               	dc.b $13, $4, $0, $11, $FB
000270DF ED01 0013 01               	dc.b $ED, $1, $0, $13, $1
000270E4 F300 0015 03               	dc.b $F3, $0, $0, $15, $3
000270E9 F300 0016 0B               	dc.b $F3, $0, $0, $16, $B
000270EE 04                         Metal_Map_10: dc.b $4
000270EF EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000270F4 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000270F9 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000270FE 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00027103 05                         Metal_Map_11: dc.b $5
00027104 EE09 0000 ED               	dc.b $EE, $9, $0, $0, $ED
00027109 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002710E FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00027113 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00027118 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
0002711D 04                         Metal_Map_12: dc.b $4
0002711E F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00027123 ED09 0008 FB               	dc.b $ED, $9, $0, $8, $FB
00027128 FD04 000E FB               	dc.b $FD, $4, $0, $E, $FB
0002712D 0509 0010 FB               	dc.b $5, $9, $0, $10, $FB
00027132 02                         Metal_Map_13: dc.b $2
00027133 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00027138 ED0B 0008 FC               	dc.b $ED, $B, $0, $8, $FC
0002713D 02                         Metal_Map_14: dc.b $2
0002713E F306 0000 ED               	dc.b $F3, $6, $0, $0, $ED
00027143 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00027148 04                         Metal_Map_15: dc.b $4
00027149 F306 0000 EB               	dc.b $F3, $6, $0, $0, $EB
0002714E EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00027153 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00027158 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
0002715D 02                         Metal_Map_16: dc.b $2
0002715E F306 0000 EC               	dc.b $F3, $6, $0, $0, $EC
00027163 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00027168 03                         Metal_Map_17: dc.b $3
00027169 F607 0000 ED               	dc.b $F6, $7, $0, $0, $ED
0002716E EE00 0008 FD               	dc.b $EE, $0, $0, $8, $FD
00027173 F50A 0009 FD               	dc.b $F5, $A, $0, $9, $FD
00027178 05                         Metal_Map_18: dc.b $5
00027179 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002717E ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00027183 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00027188 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
0002718D FD00 0013 13               	dc.b $FD, $0, $0, $13, $13
00027192 05                         Metal_Map_19: dc.b $5
00027193 FC06 0000 ED               	dc.b $FC, $6, $0, $0, $ED
00027198 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002719D EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
000271A2 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
000271A7 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
000271AC 04                         Metal_Map_1A: dc.b $4
000271AD FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000271B2 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
000271B7 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000271BC 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000271C1 07                         Metal_Map_1B: dc.b $7
000271C2 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000271C7 F50D 0003 FB               	dc.b $F5, $D, $0, $3, $FB
000271CC 0508 000B FB               	dc.b $5, $8, $0, $B, $FB
000271D1 FF01 000E EB               	dc.b $FF, $1, $0, $E, $EB
000271D6 FF02 0010 F3               	dc.b $FF, $2, $0, $10, $F3
000271DB F704 0013 EB               	dc.b $F7, $4, $0, $13, $EB
000271E0 F400 0015 F3               	dc.b $F4, $0, $0, $15, $F3
000271E5 04                         Metal_Map_1C: dc.b $4
000271E6 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000271EB F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000271F0 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000271F5 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000271FA 04                         Metal_Map_1D: dc.b $4
000271FB FB06 0000 EE               	dc.b $FB, $6, $0, $0, $EE
00027200 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00027205 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
0002720A 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002720F 02                         Metal_Map_1E: dc.b $2
00027210 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00027215 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002721A 02                         Metal_Map_1F: dc.b $2
0002721B EE09 0000 F3               	dc.b $EE, $9, $0, $0, $F3
00027220 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00027225 02                         Metal_Map_20: dc.b $2
00027226 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002722B FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00027230 02                         Metal_Map_21: dc.b $2
00027231 EE09 0000 F3               	dc.b $EE, $9, $0, $0, $F3
00027236 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002723B 04                         Metal_Map_22: dc.b $4
0002723C EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00027241 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00027246 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002724B FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00027250 03                         Metal_Map_23: dc.b $3
00027251 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00027256 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002725B FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00027260 04                         Metal_Map_24: dc.b $4
00027261 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00027266 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002726B FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00027270 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00027275 03                         Metal_Map_25: dc.b $3
00027276 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002727B EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00027280 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00027285 02                         Metal_Map_26: dc.b $2
00027286 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002728B F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00027290 02                         Metal_Map_27: dc.b $2
00027291 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00027296 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002729B 02                         Metal_Map_28: dc.b $2
0002729C F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000272A1 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000272A6 02                         Metal_Map_29: dc.b $2
000272A7 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000272AC F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000272B1 04                         Metal_Map_2A: dc.b $4
000272B2 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000272B7 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000272BC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000272C1 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000272C6 02                         Metal_Map_2B: dc.b $2
000272C7 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000272CC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000272D1 04                         Metal_Map_2C: dc.b $4
000272D2 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000272D7 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000272DC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000272E1 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000272E6 02                         Metal_Map_2D: dc.b $2
000272E7 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000272EC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000272F1 01                         Metal_Map_2E: dc.b $1
000272F2 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000272F7 01                         Metal_Map_2F: dc.b $1
000272F8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000272FD 01                         Metal_Map_30: dc.b $1
000272FE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00027303 01                         Metal_Map_31: dc.b $1
00027304 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00027309 01                         Metal_Map_32: dc.b $1
0002730A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002730F 02                         Metal_Map_37: dc.b $2
00027310 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00027315 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
0002731A 04                         Metal_Map_38: dc.b $4
0002731B ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00027320 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00027325 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002732A 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
0002732F 04                         Metal_Map_39: dc.b $4
00027330 F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
00027335 FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
0002733A 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
0002733F 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
00027344 03                         Metal_Map_3A: dc.b $3
00027345 EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
0002734A F402 0803 00               	dc.b $F4, $2, $8, $3, $0
0002734F F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00027354 03                         Metal_Map_3B: dc.b $3
00027355 EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
0002735A 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
0002735F 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00027364 03                         Metal_Map_3C: dc.b $3
00027365 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002736A FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
0002736F 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00027374 02                         Metal_Map_3D: dc.b $2
00027375 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002737A F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
0002737F 03                         Metal_Map_3E: dc.b $3
00027380 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00027385 FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
0002738A 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
0002738F 03                         Metal_Map_3F: dc.b $3
00027390 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00027395 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
0002739A 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
0002739F 04                         Metal_Map_40: dc.b $4
000273A0 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
000273A5 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
000273AA 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
000273AF F000 000F E8               	dc.b $F0, $0, $0, $F, $E8
000273B4 04                         Metal_Map_41: dc.b $4
000273B5 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000273BA 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000273BF F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000273C4 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000273C9 04                         Metal_Map_42: dc.b $4
000273CA F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000273CF 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000273D4 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000273D9 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000273DE 02                         Metal_Map_45: dc.b $2
000273DF ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000273E4 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000273E9 03                         Metal_Map_46: dc.b $3
000273EA EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000273EF 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000273F4 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000273F9 02                         Metal_Map_47: dc.b $2
000273FA ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000273FF 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00027404 03                         Metal_Map_48: dc.b $3
00027405 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002740A 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002740F 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00027414 05                         Metal_Map_4C: dc.b $5
00027415 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002741A E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002741F F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00027424 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00027429 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002742E 05                         Metal_Map_4D: dc.b $5
0002742F E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00027434 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00027439 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002743E 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00027443 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00027448 03                         Metal_Map_53: dc.b $3
00027449 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002744E FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
00027453 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
00027458 03                         Metal_Map_54: dc.b $3
00027459 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
0002745E FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00027463 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00027468 03                         Metal_Map_55: dc.b $3
00027469 F20E 0000 EC               	dc.b $F2, $E, $0, $0, $EC
0002746E FA01 000C 0C               	dc.b $FA, $1, $0, $C, $C
00027473 0A0C 000E F4               	dc.b $A, $C, $0, $E, $F4
00027478 03                         Metal_Map_56: dc.b $3
00027479 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002747E FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00027483 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00027488 02                         Metal_Map_57: dc.b $2
00027489 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
0002748E F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00027493 02                         Metal_Map_58: dc.b $2
00027494 0002 0000 F3               	dc.b $0, $2, $0, $0, $F3
00027499 F80B 0003 FB               	dc.b $F8, $B, $0, $3, $FB
0002749E 01                         Metal_Map_59: dc.b $1
0002749F F80F 0000 F3               	dc.b $F8, $F, $0, $0, $F3
000274A4 01                         Metal_Map_5A: dc.b $1
000274A5 F80F 0000 F3               	dc.b $F8, $F, $0, $0, $F3
000274AA 01                         Metal_Map_5B: dc.b $1
000274AB F80F 0000 F3               	dc.b $F8, $F, $0, $0, $F3
000274B0 01                         Metal_Map_5C: dc.b $1
000274B1 F80F 0000 F3               	dc.b $F8, $F, $0, $0, $F3
000274B6 01                         Metal_Map_5D: dc.b $1
000274B7 F80F 0000 F3               	dc.b $F8, $F, $0, $0, $F3
000274BC 05                         Metal_Map_5E: dc.b $5
000274BD F00F 0000 E4               	dc.b $F0, $F, $0, $0, $E4
000274C2 F800 0010 04               	dc.b $F8, $0, $0, $10, $4
000274C7 0000 0011 04               	dc.b $0, $0, $0, $11, $4
000274CC 0800 0012 04               	dc.b $8, $0, $0, $12, $4
000274D1 F000 0013 04               	dc.b $F0, $0, $0, $13, $4
000274D6 05                         Metal_Map_5F: dc.b $5
000274D7 F00F 0000 E4               	dc.b $F0, $F, $0, $0, $E4
000274DC F800 0010 04               	dc.b $F8, $0, $0, $10, $4
000274E1 0000 0011 04               	dc.b $0, $0, $0, $11, $4
000274E6 0800 0012 04               	dc.b $8, $0, $0, $12, $4
000274EB F000 0013 04               	dc.b $F0, $0, $0, $13, $4
000274F0 05                         Metal_Map_60: dc.b $5
000274F1 F00F 0000 E4               	dc.b $F0, $F, $0, $0, $E4
000274F6 F800 0010 04               	dc.b $F8, $0, $0, $10, $4
000274FB 0000 0011 04               	dc.b $0, $0, $0, $11, $4
00027500 0800 0012 04               	dc.b $8, $0, $0, $12, $4
00027505 F000 0013 04               	dc.b $F0, $0, $0, $13, $4
0002750A 05                         Metal_Map_61: dc.b $5
0002750B F00F 0000 E4               	dc.b $F0, $F, $0, $0, $E4
00027510 F800 0010 04               	dc.b $F8, $0, $0, $10, $4
00027515 0000 0011 04               	dc.b $0, $0, $0, $11, $4
0002751A 0800 0012 04               	dc.b $8, $0, $0, $12, $4
0002751F F000 0013 04               	dc.b $F0, $0, $0, $13, $4
00027524 05                         Metal_Map_62: dc.b $5
00027525 F30F 1800 EB               	dc.b $F3, $F, $18, $0, $EB
0002752A EB00 1810 F3               	dc.b $EB, $0, $18, $10, $F3
0002752F EB00 1811 FB               	dc.b $EB, $0, $18, $11, $FB
00027534 EB00 1812 03               	dc.b $EB, $0, $18, $12, $3
00027539 EB00 1813 EB               	dc.b $EB, $0, $18, $13, $EB
0002753E 05                         Metal_Map_63: dc.b $5
0002753F F30F 1800 EB               	dc.b $F3, $F, $18, $0, $EB
00027544 EB00 1810 F3               	dc.b $EB, $0, $18, $10, $F3
00027549 EB00 1811 FB               	dc.b $EB, $0, $18, $11, $FB
0002754E EB00 1812 03               	dc.b $EB, $0, $18, $12, $3
00027553 EB00 1813 EB               	dc.b $EB, $0, $18, $13, $EB
00027558 05                         Metal_Map_64: dc.b $5
00027559 F30F 1800 EB               	dc.b $F3, $F, $18, $0, $EB
0002755E EB00 1810 F3               	dc.b $EB, $0, $18, $10, $F3
00027563 EB00 1811 FB               	dc.b $EB, $0, $18, $11, $FB
00027568 EB00 1812 03               	dc.b $EB, $0, $18, $12, $3
0002756D EB00 1813 EB               	dc.b $EB, $0, $18, $13, $EB
00027572 05                         Metal_Map_65: dc.b $5
00027573 F30F 1800 EB               	dc.b $F3, $F, $18, $0, $EB
00027578 EB00 1810 F3               	dc.b $EB, $0, $18, $10, $F3
0002757D EB00 1811 FB               	dc.b $EB, $0, $18, $11, $FB
00027582 EB00 1812 03               	dc.b $EB, $0, $18, $12, $3
00027587 EB00 1813 EB               	dc.b $EB, $0, $18, $13, $EB
0002758C 05                         Metal_Map_66: dc.b $5
0002758D F00F 1800 E8               	dc.b $F0, $F, $18, $0, $E8
00027592 E800 1810 F0               	dc.b $E8, $0, $18, $10, $F0
00027597 E800 1811 F8               	dc.b $E8, $0, $18, $11, $F8
0002759C E800 1812 00               	dc.b $E8, $0, $18, $12, $0
000275A1 E800 1813 E8               	dc.b $E8, $0, $18, $13, $E8
000275A6 05                         Metal_Map_67: dc.b $5
000275A7 F00F 0000 E8               	dc.b $F0, $F, $0, $0, $E8
000275AC E800 0010 F0               	dc.b $E8, $0, $0, $10, $F0
000275B1 E800 0011 F8               	dc.b $E8, $0, $0, $11, $F8
000275B6 E800 0012 00               	dc.b $E8, $0, $0, $12, $0
000275BB E800 0013 E8               	dc.b $E8, $0, $0, $13, $E8
000275C0 05                         Metal_Map_68: dc.b $5
000275C1 F00F 0000 E8               	dc.b $F0, $F, $0, $0, $E8
000275C6 E800 0010 F0               	dc.b $E8, $0, $0, $10, $F0
000275CB E800 0011 F8               	dc.b $E8, $0, $0, $11, $F8
000275D0 E800 0012 00               	dc.b $E8, $0, $0, $12, $0
000275D5 E800 0013 E8               	dc.b $E8, $0, $0, $13, $E8
000275DA 05                         Metal_Map_69: dc.b $5
000275DB F00F 0000 E8               	dc.b $F0, $F, $0, $0, $E8
000275E0 E800 0010 F0               	dc.b $E8, $0, $0, $10, $F0
000275E5 E800 0011 F8               	dc.b $E8, $0, $0, $11, $F8
000275EA E800 0012 00               	dc.b $E8, $0, $0, $12, $0
000275EF E800 0013 E8               	dc.b $E8, $0, $0, $13, $E8
000275F4 04                         Metal_Map_6A: dc.b $4
000275F5 E80F 1800 F4               	dc.b $E8, $F, $18, $0, $F4
000275FA F800 1810 EC               	dc.b $F8, $0, $18, $10, $EC
000275FF F000 1811 EC               	dc.b $F0, $0, $18, $11, $EC
00027604 E800 1812 EC               	dc.b $E8, $0, $18, $12, $EC
00027609 04                         Metal_Map_6B: dc.b $4
0002760A E80F 1800 F4               	dc.b $E8, $F, $18, $0, $F4
0002760F F800 1810 EC               	dc.b $F8, $0, $18, $10, $EC
00027614 F000 1811 EC               	dc.b $F0, $0, $18, $11, $EC
00027619 E800 1812 EC               	dc.b $E8, $0, $18, $12, $EC
0002761E 04                         Metal_Map_6C: dc.b $4
0002761F E80F 1800 F4               	dc.b $E8, $F, $18, $0, $F4
00027624 F800 1810 EC               	dc.b $F8, $0, $18, $10, $EC
00027629 F000 1811 EC               	dc.b $F0, $0, $18, $11, $EC
0002762E E800 1812 EC               	dc.b $E8, $0, $18, $12, $EC
00027633 04                         Metal_Map_6D: dc.b $4
00027634 E80F 1800 F4               	dc.b $E8, $F, $18, $0, $F4
00027639 F800 1810 EC               	dc.b $F8, $0, $18, $10, $EC
0002763E F000 1811 EC               	dc.b $F0, $0, $18, $11, $EC
00027643 E800 1812 EC               	dc.b $E8, $0, $18, $12, $EC
00027648 01                         Metal_Map_6E: dc.b $1
00027649 EE0B 0000 F4               	dc.b $EE, $B, $0, $0, $F4
0002764E 03                         Metal_Map_6F: dc.b $3
0002764F E90B 0000 F4               	dc.b $E9, $B, $0, $0, $F4
00027654 0909 000C F4               	dc.b $9, $9, $0, $C, $F4
00027659 F900 0012 0C               	dc.b $F9, $0, $0, $12, $C
0002765E 04                         Metal_Map_70: dc.b $4
0002765F F90D 0000 EC               	dc.b $F9, $D, $0, $0, $EC
00027664 E909 0008 F4               	dc.b $E9, $9, $0, $8, $F4
00027669 0908 000E F4               	dc.b $9, $8, $0, $E, $F4
0002766E 1100 0011 F4               	dc.b $11, $0, $0, $11, $F4
00027673 05                         Metal_Map_71: dc.b $5
00027674 E90B 0000 F3               	dc.b $E9, $B, $0, $0, $F3
00027679 0908 000C F3               	dc.b $9, $8, $0, $C, $F3
0002767E 1100 000F F3               	dc.b $11, $0, $0, $F, $F3
00027683 0100 0010 EC               	dc.b $1, $0, $0, $10, $EC
00027688 ED00 0011 0B               	dc.b $ED, $0, $0, $11, $B
0002768D 02                         Metal_Map_72: dc.b $2
0002768E EF0B 0000 F4               	dc.b $EF, $B, $0, $0, $F4
00027693 0F0C 000C F4               	dc.b $F, $C, $0, $C, $F4
00027698 02                         Metal_Map_73: dc.b $2
00027699 090D 0000 F0               	dc.b $9, $D, $0, $0, $F0
0002769E E90B 0008 F8               	dc.b $E9, $B, $0, $8, $F8
000276A3 02                         Metal_Map_74: dc.b $2
000276A4 EC0F 0000 F3               	dc.b $EC, $F, $0, $0, $F3
000276A9 0C0C 0010 F3               	dc.b $C, $C, $0, $10, $F3
000276AE 02                         Metal_Map_75: dc.b $2
000276AF F90F 0000 F0               	dc.b $F9, $F, $0, $0, $F0
000276B4 E909 0010 F8               	dc.b $E9, $9, $0, $10, $F8
000276B9 02                         Metal_Map_76: dc.b $2
000276BA F90F 0000 F0               	dc.b $F9, $F, $0, $0, $F0
000276BF E909 0010 F8               	dc.b $E9, $9, $0, $10, $F8
000276C4 01                         Metal_Map_77: dc.b $1
000276C5 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
000276CA 01                         Metal_Map_78: dc.b $1
000276CB F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
000276D0 01                         Metal_Map_79: dc.b $1
000276D1 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
000276D6 01                         Metal_Map_7A: dc.b $1
000276D7 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
000276DC 01                         Metal_Map_7B: dc.b $1
000276DD F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
000276E2 01                         Metal_Map_7C: dc.b $1
000276E3 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
000276E8 01                         Metal_Map_7D: dc.b $1
000276E9 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
000276EE                            	even
000276EE                            	even
000276EE                            Map_Mighty:
000276EE                            	include "_maps\Mighty.asm"
000276EE                            ; ================================================================================
000276EE                            ; Sprite Mappings - generated by Flex 2 Fri May 04 2018 20:29:10 GMT-0400 (Eastern Daylight Time)
000276EE                            ; ================================================================================
000276EE                            
000276EE                            MightyMap:
000276EE 0000 0000                  	dc.w $0, MightyMap_1-MightyMap
000276F2 0000 0000                  	dc.w MightyMap_2-MightyMap, MightyMap_3-MightyMap
000276F6 0000 0000                  	dc.w MightyMap_4-MightyMap, MightyMap_5-MightyMap
000276FA 0000 0000                  	dc.w MightyMap_6-MightyMap, MightyMap_7-MightyMap
000276FE 0000 0000                  	dc.w MightyMap_8-MightyMap, MightyMap_9-MightyMap
00027702 0000 0000                  	dc.w MightyMap_A-MightyMap, MightyMap_B-MightyMap
00027706 0000 0000                  	dc.w MightyMap_C-MightyMap, MightyMap_D-MightyMap
0002770A 0000 0000                  	dc.w MightyMap_E-MightyMap, MightyMap_F-MightyMap
0002770E 0000 0000                  	dc.w MightyMap_10-MightyMap, MightyMap_11-MightyMap
00027712 0000 0000                  	dc.w MightyMap_12-MightyMap, MightyMap_13-MightyMap
00027716 0000 0000                  	dc.w MightyMap_14-MightyMap, MightyMap_15-MightyMap
0002771A 0000 0000                  	dc.w MightyMap_16-MightyMap, MightyMap_17-MightyMap
0002771E 0000 0000                  	dc.w MightyMap_18-MightyMap, MightyMap_19-MightyMap
00027722 0000 0000                  	dc.w MightyMap_1A-MightyMap, MightyMap_1B-MightyMap
00027726 0000 0000                  	dc.w MightyMap_1C-MightyMap, MightyMap_1D-MightyMap
0002772A 0000 0000                  	dc.w MightyMap_1E-MightyMap, MightyMap_1F-MightyMap
0002772E 0000 0000                  	dc.w MightyMap_20-MightyMap, MightyMap_21-MightyMap
00027732 0000 0000                  	dc.w MightyMap_22-MightyMap, MightyMap_23-MightyMap
00027736 0000 0000                  	dc.w MightyMap_24-MightyMap, MightyMap_25-MightyMap
0002773A 0000 0000                  	dc.w MightyMap_26-MightyMap, MightyMap_27-MightyMap
0002773E 0000 0000                  	dc.w MightyMap_28-MightyMap, MightyMap_29-MightyMap
00027742 0000 0000                  	dc.w MightyMap_2A-MightyMap, MightyMap_2B-MightyMap
00027746 0000 0000                  	dc.w MightyMap_2C-MightyMap, MightyMap_2D-MightyMap
0002774A 0000 0000                  	dc.w MightyMap_2E-MightyMap, MightyMap_2F-MightyMap
0002774E 0000 0000                  	dc.w MightyMap_30-MightyMap, MightyMap_31-MightyMap
00027752 0000 0000                  	dc.w MightyMap_32-MightyMap, MightyMap_33-MightyMap
00027756 0000 0000                  	dc.w MightyMap_34-MightyMap, MightyMap_35-MightyMap
0002775A 0000 0000                  	dc.w MightyMap_36-MightyMap, MightyMap_37-MightyMap
0002775E 0000 0000                  	dc.w MightyMap_38-MightyMap, MightyMap_39-MightyMap
00027762 0000 0000                  	dc.w MightyMap_3A-MightyMap, MightyMap_3B-MightyMap
00027766 0000 0000                  	dc.w MightyMap_3C-MightyMap, MightyMap_3D-MightyMap
0002776A 0000 0000                  	dc.w MightyMap_3E-MightyMap, MightyMap_3F-MightyMap
0002776E 0000 0000                  	dc.w MightyMap_40-MightyMap, MightyMap_41-MightyMap
00027772 0000 0000                  	dc.w MightyMap_42-MightyMap, MightyMap_43-MightyMap
00027776 0000 0000                  	dc.w MightyMap_44-MightyMap, MightyMap_45-MightyMap
0002777A 0000 0000                  	dc.w MightyMap_46-MightyMap, MightyMap_47-MightyMap
0002777E 0000 0000                  	dc.w MightyMap_48-MightyMap, MightyMap_49-MightyMap
00027782 0000 0000                  	dc.w MightyMap_4A-MightyMap, MightyMap_4B-MightyMap
00027786 0000 0000                  	dc.w MightyMap_4C-MightyMap, MightyMap_4D-MightyMap
0002778A 0000 0000                  	dc.w MightyMap_4E-MightyMap, MightyMap_4F-MightyMap
0002778E 0000 0000                  	dc.w MightyMap_50-MightyMap, MightyMap_51-MightyMap
00027792 0000 0000                  	dc.w MightyMap_52-MightyMap, MightyMap_53-MightyMap
00027796 0000 0000                  	dc.w MightyMap_54-MightyMap, MightyMap_55-MightyMap
0002779A 0000 0000                  	dc.w MightyMap_56-MightyMap, MightyMap_57-MightyMap
0002779E 0000 0000                  	dc.w MightyMap_58-MightyMap, MightyMap_59-MightyMap
000277A2 0000 0000                  	dc.w MightyMap_5A-MightyMap, MightyMap_5B-MightyMap
000277A6 0000 0000                  	dc.w MightyMap_5C-MightyMap, MightyMap_5D-MightyMap
000277AA 0000 0000                  	dc.w MightyMap_5E-MightyMap, MightyMap_5F-MightyMap
000277AE 0000 0000                  	dc.w MightyMap_60-MightyMap, MightyMap_61-MightyMap
000277B2 0000 0000                  	dc.w MightyMap_62-MightyMap, MightyMap_63-MightyMap
000277B6 0000 0000                  	dc.w MightyMap_64-MightyMap, MightyMap_65-MightyMap
000277BA 0000 0000                  	dc.w MightyMap_66-MightyMap, MightyMap_67-MightyMap
000277BE 0000 0000                  	dc.w MightyMap_68-MightyMap, MightyMap_69-MightyMap
000277C2 0000 0000                  	dc.w MightyMap_6A-MightyMap, MightyMap_6B-MightyMap
000277C6 0000 0000                  	dc.w MightyMap_6C-MightyMap, MightyMap_6D-MightyMap
000277CA 0000 0000                  	dc.w MightyMap_6E-MightyMap, MightyMap_6F-MightyMap
000277CE 0000 0000                  	dc.w MightyMap_70-MightyMap, MightyMap_71-MightyMap
000277D2 0000 0000                  	dc.w MightyMap_72-MightyMap, MightyMap_73-MightyMap
000277D6 0000 0000                  	dc.w MightyMap_74-MightyMap, MightyMap_75-MightyMap
000277DA 02                         MightyMap_1: dc.b $2
000277DB EE0B 0000 F4               	dc.b $EE, $B, $0, $0, $F4
000277E0 0E0C 000C F4               	dc.b $E, $C, $0, $C, $F4
000277E5 02                         MightyMap_2: dc.b $2
000277E6 EF0B 0000 F2               	dc.b $EF, $B, $0, $0, $F2
000277EB 0F0C 000C F2               	dc.b $F, $C, $0, $C, $F2
000277F0 02                         MightyMap_3: dc.b $2
000277F1 EF0B 0000 F2               	dc.b $EF, $B, $0, $0, $F2
000277F6 0F0C 000C F2               	dc.b $F, $C, $0, $C, $F2
000277FB 03                         MightyMap_4: dc.b $3
000277FC EF0B 0000 F2               	dc.b $EF, $B, $0, $0, $F2
00027801 0701 000C 0A               	dc.b $7, $1, $0, $C, $A
00027806 0F08 000E F2               	dc.b $F, $8, $0, $E, $F2
0002780B 02                         MightyMap_5: dc.b $2
0002780C ED0B 0000 F3               	dc.b $ED, $B, $0, $0, $F3
00027811 0D0C 000C F3               	dc.b $D, $C, $0, $C, $F3
00027816 03                         MightyMap_6: dc.b $3
00027817 EE0B 0000 F7               	dc.b $EE, $B, $0, $0, $F7
0002781C F603 000C EF               	dc.b $F6, $3, $0, $C, $EF
00027821 FE01 0010 0F               	dc.b $FE, $1, $0, $10, $F
00027826 04                         MightyMap_7: dc.b $4
00027827 EF0B 0000 F5               	dc.b $EF, $B, $0, $0, $F5
0002782C F700 000C 0D               	dc.b $F7, $0, $0, $C, $D
00027831 0701 000D 0D               	dc.b $7, $1, $0, $D, $D
00027836 0F08 000F F5               	dc.b $F, $8, $0, $F, $F5
0002783B 02                         MightyMap_8: dc.b $2
0002783C F00B 0000 F5               	dc.b $F0, $B, $0, $0, $F5
00027841 1004 000C F5               	dc.b $10, $4, $0, $C, $F5
00027846 05                         MightyMap_9: dc.b $5
00027847 EE0B 0000 F6               	dc.b $EE, $B, $0, $0, $F6
0002784C FE02 000C EE               	dc.b $FE, $2, $0, $C, $EE
00027851 FE01 000F 0E               	dc.b $FE, $1, $0, $F, $E
00027856 0E00 0011 F6               	dc.b $E, $0, $0, $11, $F6
0002785B 0E00 0012 06               	dc.b $E, $0, $0, $12, $6
00027860 03                         MightyMap_A: dc.b $3
00027861 EF0B 0000 F6               	dc.b $EF, $B, $0, $0, $F6
00027866 FF01 000C EE               	dc.b $FF, $1, $0, $C, $EE
0002786B 0F08 000E F6               	dc.b $F, $8, $0, $E, $F6
00027870 03                         MightyMap_B: dc.b $3
00027871 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00027876 F800 000C 0C               	dc.b $F8, $0, $0, $C, $C
0002787B 1004 000D F4               	dc.b $10, $4, $0, $D, $F4
00027880 04                         MightyMap_C: dc.b $4
00027881 ED0E 0000 F1               	dc.b $ED, $E, $0, $0, $F1
00027886 ED02 000C 11               	dc.b $ED, $2, $0, $C, $11
0002788B 0508 000F F1               	dc.b $5, $8, $0, $F, $F1
00027890 0D05 0012 F9               	dc.b $D, $5, $0, $12, $F9
00027895 03                         MightyMap_D: dc.b $3
00027896 EE0B 0000 F2               	dc.b $EE, $B, $0, $0, $F2
0002789B F606 000C 0A               	dc.b $F6, $6, $0, $C, $A
000278A0 0E04 0012 FA               	dc.b $E, $4, $0, $12, $FA
000278A5 03                         MightyMap_E: dc.b $3
000278A6 ED0B 0000 F5               	dc.b $ED, $B, $0, $0, $F5
000278AB FD02 000C 0D               	dc.b $FD, $2, $0, $C, $D
000278B0 0D04 000F FD               	dc.b $D, $4, $0, $F, $FD
000278B5 04                         MightyMap_F: dc.b $4
000278B6 EC0B 0000 F3               	dc.b $EC, $B, $0, $0, $F3
000278BB F401 000C 0B               	dc.b $F4, $1, $0, $C, $B
000278C0 0C08 000E F3               	dc.b $C, $8, $0, $E, $F3
000278C5 1404 0011 FB               	dc.b $14, $4, $0, $11, $FB
000278CA 04                         MightyMap_10: dc.b $4
000278CB ED0A 0000 F4               	dc.b $ED, $A, $0, $0, $F4
000278D0 FD02 0009 0C               	dc.b $FD, $2, $0, $9, $C
000278D5 0504 000C FC               	dc.b $5, $4, $0, $C, $FC
000278DA 0D00 000E FC               	dc.b $D, $0, $0, $E, $FC
000278DF 03                         MightyMap_11: dc.b $3
000278E0 EF0A 0000 F3               	dc.b $EF, $A, $0, $0, $F3
000278E5 FF04 0009 0B               	dc.b $FF, $4, $0, $9, $B
000278EA 0709 000B FB               	dc.b $7, $9, $0, $B, $FB
000278EF 03                         MightyMap_12: dc.b $3
000278F0 ED0F 0000 EE               	dc.b $ED, $F, $0, $0, $EE
000278F5 0501 0010 0E               	dc.b $5, $1, $0, $10, $E
000278FA 0D04 0012 FE               	dc.b $D, $4, $0, $12, $FE
000278FF 03                         MightyMap_13: dc.b $3
00027900 ED07 0000 EF               	dc.b $ED, $7, $0, $0, $EF
00027905 ED07 0008 07               	dc.b $ED, $7, $0, $8, $7
0002790A F502 0010 FF               	dc.b $F5, $2, $0, $10, $FF
0002790F 02                         MightyMap_14: dc.b $2
00027910 F30E 0000 F0               	dc.b $F3, $E, $0, $0, $F0
00027915 FB01 000C 10               	dc.b $FB, $1, $0, $C, $10
0002791A 04                         MightyMap_15: dc.b $4
0002791B EE0F 0000 EE               	dc.b $EE, $F, $0, $0, $EE
00027920 EE01 0010 0E               	dc.b $EE, $1, $0, $10, $E
00027925 0600 0012 0E               	dc.b $6, $0, $0, $12, $E
0002792A 0E00 0013 FE               	dc.b $E, $0, $0, $13, $FE
0002792F 03                         MightyMap_16: dc.b $3
00027930 F30E 0000 EF               	dc.b $F3, $E, $0, $0, $EF
00027935 F301 000C 0F               	dc.b $F3, $1, $0, $C, $F
0002793A 0B04 000E FF               	dc.b $B, $4, $0, $E, $FF
0002793F 03                         MightyMap_17: dc.b $3
00027940 F10E 0000 F0               	dc.b $F1, $E, $0, $0, $F0
00027945 F902 000C 10               	dc.b $F9, $2, $0, $C, $10
0002794A 0908 000F F8               	dc.b $9, $8, $0, $F, $F8
0002794F 05                         MightyMap_18: dc.b $5
00027950 ED0B 0000 ED               	dc.b $ED, $B, $0, $0, $ED
00027955 F505 000C 05               	dc.b $F5, $5, $0, $C, $5
0002795A FD00 0010 15               	dc.b $FD, $0, $0, $10, $15
0002795F 0500 0011 05               	dc.b $5, $0, $0, $11, $5
00027964 0D08 0012 ED               	dc.b $D, $8, $0, $12, $ED
00027969 04                         MightyMap_19: dc.b $4
0002796A E90B 0000 F6               	dc.b $E9, $B, $0, $0, $F6
0002796F F103 000C EE               	dc.b $F1, $3, $0, $C, $EE
00027974 F101 0010 0E               	dc.b $F1, $1, $0, $10, $E
00027979 0904 0012 F6               	dc.b $9, $4, $0, $12, $F6
0002797E 03                         MightyMap_1A: dc.b $3
0002797F ED09 0000 FD               	dc.b $ED, $9, $0, $0, $FD
00027984 F506 0006 ED               	dc.b $F5, $6, $0, $6, $ED
00027989 FD05 000C FD               	dc.b $FD, $5, $0, $C, $FD
0002798E 04                         MightyMap_1B: dc.b $4
0002798F ED07 0000 F4               	dc.b $ED, $7, $0, $0, $F4
00027994 F502 0008 EC               	dc.b $F5, $2, $0, $8, $EC
00027999 F509 000B 04               	dc.b $F5, $9, $0, $B, $4
0002799E 0504 0011 04               	dc.b $5, $4, $0, $11, $4
000279A3 04                         MightyMap_1C: dc.b $4
000279A4 ED08 0000 FD               	dc.b $ED, $8, $0, $0, $FD
000279A9 F50D 0003 ED               	dc.b $F5, $D, $0, $3, $ED
000279AE FD00 000B 0D               	dc.b $FD, $0, $0, $B, $D
000279B3 0508 000C ED               	dc.b $5, $8, $0, $C, $ED
000279B8 04                         MightyMap_1D: dc.b $4
000279B9 EB0A 0000 FF               	dc.b $EB, $A, $0, $0, $FF
000279BE F307 0009 EF               	dc.b $F3, $7, $0, $9, $EF
000279C3 0304 0011 FF               	dc.b $3, $4, $0, $11, $FF
000279C8 0B00 0013 FF               	dc.b $B, $0, $0, $13, $FF
000279CD 03                         MightyMap_1E: dc.b $3
000279CE F20B 0000 F6               	dc.b $F2, $B, $0, $0, $F6
000279D3 FA03 000C EE               	dc.b $FA, $3, $0, $C, $EE
000279D8 1204 0010 F6               	dc.b $12, $4, $0, $10, $F6
000279DD 03                         MightyMap_1F: dc.b $3
000279DE F10B 0000 F6               	dc.b $F1, $B, $0, $0, $F6
000279E3 F903 000C EE               	dc.b $F9, $3, $0, $C, $EE
000279E8 1104 0010 F6               	dc.b $11, $4, $0, $10, $F6
000279ED 03                         MightyMap_20: dc.b $3
000279EE F20B 0000 F6               	dc.b $F2, $B, $0, $0, $F6
000279F3 FA03 000C EE               	dc.b $FA, $3, $0, $C, $EE
000279F8 1204 0010 F6               	dc.b $12, $4, $0, $10, $F6
000279FD 03                         MightyMap_21: dc.b $3
000279FE F10B 0000 F6               	dc.b $F1, $B, $0, $0, $F6
00027A03 F903 000C EE               	dc.b $F9, $3, $0, $C, $EE
00027A08 1104 0010 F6               	dc.b $11, $4, $0, $10, $F6
00027A0D 03                         MightyMap_22: dc.b $3
00027A0E F00B 0000 F5               	dc.b $F0, $B, $0, $0, $F5
00027A13 F803 000C 0D               	dc.b $F8, $3, $0, $C, $D
00027A18 1008 0010 F5               	dc.b $10, $8, $0, $10, $F5
00027A1D 03                         MightyMap_23: dc.b $3
00027A1E EF0B 0000 F5               	dc.b $EF, $B, $0, $0, $F5
00027A23 F703 000C 0D               	dc.b $F7, $3, $0, $C, $D
00027A28 0F08 0010 F5               	dc.b $F, $8, $0, $10, $F5
00027A2D 03                         MightyMap_24: dc.b $3
00027A2E F00B 0000 F5               	dc.b $F0, $B, $0, $0, $F5
00027A33 F803 000C 0D               	dc.b $F8, $3, $0, $C, $D
00027A38 1004 0010 FD               	dc.b $10, $4, $0, $10, $FD
00027A3D 03                         MightyMap_25: dc.b $3
00027A3E EF0B 0000 F5               	dc.b $EF, $B, $0, $0, $F5
00027A43 F703 000C 0D               	dc.b $F7, $3, $0, $C, $D
00027A48 0F08 0010 F5               	dc.b $F, $8, $0, $10, $F5
00027A4D 03                         MightyMap_26: dc.b $3
00027A4E F20E 0000 F2               	dc.b $F2, $E, $0, $0, $F2
00027A53 FA02 000C 12               	dc.b $FA, $2, $0, $C, $12
00027A58 0A08 000F FA               	dc.b $A, $8, $0, $F, $FA
00027A5D 03                         MightyMap_27: dc.b $3
00027A5E F20E 0000 F1               	dc.b $F2, $E, $0, $0, $F1
00027A63 FA02 000C 11               	dc.b $FA, $2, $0, $C, $11
00027A68 0A08 000F F9               	dc.b $A, $8, $0, $F, $F9
00027A6D 03                         MightyMap_28: dc.b $3
00027A6E F20E 0000 F2               	dc.b $F2, $E, $0, $0, $F2
00027A73 FA02 000C 12               	dc.b $FA, $2, $0, $C, $12
00027A78 0A08 000F FA               	dc.b $A, $8, $0, $F, $FA
00027A7D 03                         MightyMap_29: dc.b $3
00027A7E F20E 0000 F1               	dc.b $F2, $E, $0, $0, $F1
00027A83 FA02 000C 11               	dc.b $FA, $2, $0, $C, $11
00027A88 0A08 000F F9               	dc.b $A, $8, $0, $F, $F9
00027A8D 02                         MightyMap_2A: dc.b $2
00027A8E EB0F 0000 F8               	dc.b $EB, $F, $0, $0, $F8
00027A93 F302 0010 F0               	dc.b $F3, $2, $0, $10, $F0
00027A98 02                         MightyMap_2B: dc.b $2
00027A99 EB0F 0000 F7               	dc.b $EB, $F, $0, $0, $F7
00027A9E F302 0010 EF               	dc.b $F3, $2, $0, $10, $EF
00027AA3 03                         MightyMap_2C: dc.b $3
00027AA4 EC0E 0000 F8               	dc.b $EC, $E, $0, $0, $F8
00027AA9 F402 000C F0               	dc.b $F4, $2, $0, $C, $F0
00027AAE 0408 000F F8               	dc.b $4, $8, $0, $F, $F8
00027AB3 02                         MightyMap_2D: dc.b $2
00027AB4 EB0F 0000 F7               	dc.b $EB, $F, $0, $0, $F7
00027AB9 F302 0010 EF               	dc.b $F3, $2, $0, $10, $EF
00027ABE 02                         MightyMap_2E: dc.b $2
00027ABF F30B 0000 F3               	dc.b $F3, $B, $0, $0, $F3
00027AC4 FB01 000C 0B               	dc.b $FB, $1, $0, $C, $B
00027AC9 02                         MightyMap_2F: dc.b $2
00027ACA F30E 0000 F3               	dc.b $F3, $E, $0, $0, $F3
00027ACF 0B04 000C F3               	dc.b $B, $4, $0, $C, $F3
00027AD4 02                         MightyMap_30: dc.b $2
00027AD5 F30E 0000 F3               	dc.b $F3, $E, $0, $0, $F3
00027ADA 0B08 000C F3               	dc.b $B, $8, $0, $C, $F3
00027ADF 02                         MightyMap_31: dc.b $2
00027AE0 F30E 0000 F3               	dc.b $F3, $E, $0, $0, $F3
00027AE5 0B08 000C F3               	dc.b $B, $8, $0, $C, $F3
00027AEA 02                         MightyMap_32: dc.b $2
00027AEB F30E 0000 F3               	dc.b $F3, $E, $0, $0, $F3
00027AF0 0B08 000C F3               	dc.b $B, $8, $0, $C, $F3
00027AF5 02                         MightyMap_33: dc.b $2
00027AF6 F50E 0000 EC               	dc.b $F5, $E, $0, $0, $EC
00027AFB F502 000C 0C               	dc.b $F5, $2, $0, $C, $C
00027B00 03                         MightyMap_34: dc.b $3
00027B01 F00A 0000 F8               	dc.b $F0, $A, $0, $0, $F8
00027B06 F802 0009 F0               	dc.b $F8, $2, $0, $9, $F0
00027B0B 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00027B10 02                         MightyMap_35: dc.b $2
00027B11 EC0B 0000 F5               	dc.b $EC, $B, $0, $0, $F5
00027B16 0C08 000C F5               	dc.b $C, $8, $0, $C, $F5
00027B1B 03                         MightyMap_36: dc.b $3
00027B1C F00A 0000 F0               	dc.b $F0, $A, $0, $0, $F0
00027B21 F802 0009 08               	dc.b $F8, $2, $0, $9, $8
00027B26 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00027B2B 03                         MightyMap_37: dc.b $3
00027B2C F50A 0000 F3               	dc.b $F5, $A, $0, $0, $F3
00027B31 0501 0009 0B               	dc.b $5, $1, $0, $9, $B
00027B36 0D04 000B FB               	dc.b $D, $4, $0, $B, $FB
00027B3B 03                         MightyMap_38: dc.b $3
00027B3C F20A 0000 F0               	dc.b $F2, $A, $0, $0, $F0
00027B41 FA03 0009 08               	dc.b $FA, $3, $0, $9, $8
00027B46 0A00 000D 00               	dc.b $A, $0, $0, $D, $0
00027B4B 02                         MightyMap_39: dc.b $2
00027B4C FB0E 0000 F1               	dc.b $FB, $E, $0, $0, $F1
00027B51 1308 000C F1               	dc.b $13, $8, $0, $C, $F1
00027B56 04                         MightyMap_3A: dc.b $4
00027B57 EC0B 0000 E5               	dc.b $EC, $B, $0, $0, $E5
00027B5C F404 000C FD               	dc.b $F4, $4, $0, $C, $FD
00027B61 FC00 000E FD               	dc.b $FC, $0, $0, $E, $FD
00027B66 0C08 000F E5               	dc.b $C, $8, $0, $F, $E5
00027B6B 03                         MightyMap_3B: dc.b $3
00027B6C EC0D 0000 E5               	dc.b $EC, $D, $0, $0, $E5
00027B71 FC0A 0008 E5               	dc.b $FC, $A, $0, $8, $E5
00027B76 0400 0011 FD               	dc.b $4, $0, $0, $11, $FD
00027B7B 04                         MightyMap_3C: dc.b $4
00027B7C F40D 0000 F8               	dc.b $F4, $D, $0, $0, $F8
00027B81 F401 0008 18               	dc.b $F4, $1, $0, $8, $18
00027B86 FC01 000A F0               	dc.b $FC, $1, $0, $A, $F0
00027B8B 0408 000C F8               	dc.b $4, $8, $0, $C, $F8
00027B90 03                         MightyMap_3D: dc.b $3
00027B91 F40D 0000 EA               	dc.b $F4, $D, $0, $0, $EA
00027B96 F405 0008 0A               	dc.b $F4, $5, $0, $8, $A
00027B9B 040C 000C F2               	dc.b $4, $C, $0, $C, $F2
00027BA0 03                         MightyMap_3E: dc.b $3
00027BA1 F50D 0000 E5               	dc.b $F5, $D, $0, $0, $E5
00027BA6 FD01 0008 05               	dc.b $FD, $1, $0, $8, $5
00027BAB 0508 000A ED               	dc.b $5, $8, $0, $A, $ED
00027BB0 04                         MightyMap_3F: dc.b $4
00027BB1 F50D 0000 F8               	dc.b $F5, $D, $0, $0, $F8
00027BB6 F501 0008 18               	dc.b $F5, $1, $0, $8, $18
00027BBB FD01 000A F0               	dc.b $FD, $1, $0, $A, $F0
00027BC0 0508 000C F8               	dc.b $5, $8, $0, $C, $F8
00027BC5 02                         MightyMap_40: dc.b $2
00027BC6 E90B 0000 F3               	dc.b $E9, $B, $0, $0, $F3
00027BCB 0905 000C F3               	dc.b $9, $5, $0, $C, $F3
00027BD0 02                         MightyMap_41: dc.b $2
00027BD1 F80E 0000 EC               	dc.b $F8, $E, $0, $0, $EC
00027BD6 0001 000C 0C               	dc.b $0, $1, $0, $C, $C
00027BDB 02                         MightyMap_42: dc.b $2
00027BDC F80E 0000 EB               	dc.b $F8, $E, $0, $0, $EB
00027BE1 0001 000C 0B               	dc.b $0, $1, $0, $C, $B
00027BE6 04                         MightyMap_43: dc.b $4
00027BE7 E90F 0000 F0               	dc.b $E9, $F, $0, $0, $F0
00027BEC F101 0010 10               	dc.b $F1, $1, $0, $10, $10
00027BF1 0908 0012 F8               	dc.b $9, $8, $0, $12, $F8
00027BF6 1104 0015 F8               	dc.b $11, $4, $0, $15, $F8
00027BFB 04                         MightyMap_44: dc.b $4
00027BFC E80F 0000 F0               	dc.b $E8, $F, $0, $0, $F0
00027C01 E801 0010 10               	dc.b $E8, $1, $0, $10, $10
00027C06 0808 0012 F8               	dc.b $8, $8, $0, $12, $F8
00027C0B 1004 0015 F8               	dc.b $10, $4, $0, $15, $F8
00027C10 02                         MightyMap_45: dc.b $2
00027C11 F00F 0000 EE               	dc.b $F0, $F, $0, $0, $EE
00027C16 100C 0010 EE               	dc.b $10, $C, $0, $10, $EE
00027C1B 02                         MightyMap_46: dc.b $2
00027C1C EE0B 0000 F3               	dc.b $EE, $B, $0, $0, $F3
00027C21 0E04 000C F3               	dc.b $E, $4, $0, $C, $F3
00027C26 02                         MightyMap_47: dc.b $2
00027C27 F00F 0000 EF               	dc.b $F0, $F, $0, $0, $EF
00027C2C 1008 0010 EF               	dc.b $10, $8, $0, $10, $EF
00027C31 02                         MightyMap_48: dc.b $2
00027C32 EE0B 0000 F3               	dc.b $EE, $B, $0, $0, $F3
00027C37 0E04 000C F3               	dc.b $E, $4, $0, $C, $F3
00027C3C 03                         MightyMap_49: dc.b $3
00027C3D EE0B 0000 F3               	dc.b $EE, $B, $0, $0, $F3
00027C42 F603 000C 0B               	dc.b $F6, $3, $0, $C, $B
00027C47 0E08 0010 F3               	dc.b $E, $8, $0, $10, $F3
00027C4C 03                         MightyMap_4A: dc.b $3
00027C4D EB0B 0000 F2               	dc.b $EB, $B, $0, $0, $F2
00027C52 0B08 000C F2               	dc.b $B, $8, $0, $C, $F2
00027C57 1304 000F FA               	dc.b $13, $4, $0, $F, $FA
00027C5C 05                         MightyMap_4B: dc.b $5
00027C5D EA0D 0000 F2               	dc.b $EA, $D, $0, $0, $F2
00027C62 EA01 0008 12               	dc.b $EA, $1, $0, $8, $12
00027C67 FA0A 000A F2               	dc.b $FA, $A, $0, $A, $F2
00027C6C 0201 0013 0A               	dc.b $2, $1, $0, $13, $A
00027C71 1200 0015 F2               	dc.b $12, $0, $0, $15, $F2
00027C76 05                         MightyMap_4C: dc.b $5
00027C77 E90D 0000 F4               	dc.b $E9, $D, $0, $0, $F4
00027C7C E901 0008 14               	dc.b $E9, $1, $0, $8, $14
00027C81 F90A 000A F4               	dc.b $F9, $A, $0, $A, $F4
00027C86 0900 0013 0C               	dc.b $9, $0, $0, $13, $C
00027C8B 1100 0014 F4               	dc.b $11, $0, $0, $14, $F4
00027C90 05                         MightyMap_4D: dc.b $5
00027C91 EA0D 0000 F4               	dc.b $EA, $D, $0, $0, $F4
00027C96 EA01 0008 14               	dc.b $EA, $1, $0, $8, $14
00027C9B FA0A 000A F4               	dc.b $FA, $A, $0, $A, $F4
00027CA0 0201 0013 0C               	dc.b $2, $1, $0, $13, $C
00027CA5 1200 0015 F4               	dc.b $12, $0, $0, $15, $F4
00027CAA 03                         MightyMap_4E: dc.b $3
00027CAB EC0B 0000 F0               	dc.b $EC, $B, $0, $0, $F0
00027CB0 F403 000C 08               	dc.b $F4, $3, $0, $C, $8
00027CB5 0C08 0010 F0               	dc.b $C, $8, $0, $10, $F0
00027CBA 03                         MightyMap_4F: dc.b $3
00027CBB EE0B 0000 F2               	dc.b $EE, $B, $0, $0, $F2
00027CC0 F602 000C 0A               	dc.b $F6, $2, $0, $C, $A
00027CC5 0E08 000F F2               	dc.b $E, $8, $0, $F, $F2
00027CCA 02                         MightyMap_50: dc.b $2
00027CCB F207 0000 F5               	dc.b $F2, $7, $0, $0, $F5
00027CD0 FA02 0008 05               	dc.b $FA, $2, $0, $8, $5
00027CD5 01                         MightyMap_51: dc.b $1
00027CD6 F706 0000 F9               	dc.b $F7, $6, $0, $0, $F9
00027CDB 01                         MightyMap_52: dc.b $1
00027CDC FB01 0000 FC               	dc.b $FB, $1, $0, $0, $FC
00027CE1 04                         MightyMap_53: dc.b $4
00027CE2 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00027CE7 F402 0008 04               	dc.b $F4, $2, $0, $8, $4
00027CEC FC01 000B 0C               	dc.b $FC, $1, $0, $B, $C
00027CF1 0408 000D EC               	dc.b $4, $8, $0, $D, $EC
00027CF6 03                         MightyMap_54: dc.b $3
00027CF7 F50D 0000 FC               	dc.b $F5, $D, $0, $0, $FC
00027CFC FD01 0008 F4               	dc.b $FD, $1, $0, $8, $F4
00027D01 0508 000A FC               	dc.b $5, $8, $0, $A, $FC
00027D06 03                         MightyMap_55: dc.b $3
00027D07 F30E 0000 EC               	dc.b $F3, $E, $0, $0, $EC
00027D0C F303 000C 0C               	dc.b $F3, $3, $0, $C, $C
00027D11 0B08 0010 F4               	dc.b $B, $8, $0, $10, $F4
00027D16 04                         MightyMap_56: dc.b $4
00027D17 EE0F 0000 EE               	dc.b $EE, $F, $0, $0, $EE
00027D1C FE01 0010 0E               	dc.b $FE, $1, $0, $10, $E
00027D21 0E04 0012 EE               	dc.b $E, $4, $0, $12, $EE
00027D26 0E00 0014 06               	dc.b $E, $0, $0, $14, $6
00027D2B 03                         MightyMap_57: dc.b $3
00027D2C F30E 0000 EC               	dc.b $F3, $E, $0, $0, $EC
00027D31 F303 000C 0C               	dc.b $F3, $3, $0, $C, $C
00027D36 0B08 0010 F4               	dc.b $B, $8, $0, $10, $F4
00027D3B 02                         MightyMap_58: dc.b $2
00027D3C F90E 0000 F4               	dc.b $F9, $E, $0, $0, $F4
00027D41 1108 000C F4               	dc.b $11, $8, $0, $C, $F4
00027D46 02                         MightyMap_59: dc.b $2
00027D47 F90E 0000 F4               	dc.b $F9, $E, $0, $0, $F4
00027D4C 1108 000C F4               	dc.b $11, $8, $0, $C, $F4
00027D51 02                         MightyMap_5A: dc.b $2
00027D52 F90E 0000 F4               	dc.b $F9, $E, $0, $0, $F4
00027D57 1108 000C F4               	dc.b $11, $8, $0, $C, $F4
00027D5C 02                         MightyMap_5B: dc.b $2
00027D5D F90E 0000 F4               	dc.b $F9, $E, $0, $0, $F4
00027D62 1108 000C F4               	dc.b $11, $8, $0, $C, $F4
00027D67 02                         MightyMap_5C: dc.b $2
00027D68 F90E 0000 F4               	dc.b $F9, $E, $0, $0, $F4
00027D6D 1108 000C F4               	dc.b $11, $8, $0, $C, $F4
00027D72 02                         MightyMap_5D: dc.b $2
00027D73 F90E 0000 F4               	dc.b $F9, $E, $0, $0, $F4
00027D78 1108 000C F4               	dc.b $11, $8, $0, $C, $F4
00027D7D 02                         MightyMap_5E: dc.b $2
00027D7E F30F 0000 F7               	dc.b $F3, $F, $0, $0, $F7
00027D83 FB06 0010 E7               	dc.b $FB, $6, $0, $10, $E7
00027D88 03                         MightyMap_5F: dc.b $3
00027D89 F40F 0000 F4               	dc.b $F4, $F, $0, $0, $F4
00027D8E FC02 0010 EC               	dc.b $FC, $2, $0, $10, $EC
00027D93 FC00 0013 14               	dc.b $FC, $0, $0, $13, $14
00027D98 02                         MightyMap_60: dc.b $2
00027D99 F30F 0000 F7               	dc.b $F3, $F, $0, $0, $F7
00027D9E FB06 0010 E7               	dc.b $FB, $6, $0, $10, $E7
00027DA3 02                         MightyMap_61: dc.b $2
00027DA4 F40F 0000 F5               	dc.b $F4, $F, $0, $0, $F5
00027DA9 FC01 0010 ED               	dc.b $FC, $1, $0, $10, $ED
00027DAE 03                         MightyMap_62: dc.b $3
00027DAF F90B 0000 EF               	dc.b $F9, $B, $0, $0, $EF
00027DB4 E909 000C F7               	dc.b $E9, $9, $0, $C, $F7
00027DB9 F905 0012 07               	dc.b $F9, $5, $0, $12, $7
00027DBE 04                         MightyMap_63: dc.b $4
00027DBF F40F 0000 EF               	dc.b $F4, $F, $0, $0, $EF
00027DC4 EC08 0010 F7               	dc.b $EC, $8, $0, $10, $F7
00027DC9 E400 0013 FF               	dc.b $E4, $0, $0, $13, $FF
00027DCE FC01 0014 0F               	dc.b $FC, $1, $0, $14, $F
00027DD3 04                         MightyMap_64: dc.b $4
00027DD4 F40F 0000 EF               	dc.b $F4, $F, $0, $0, $EF
00027DD9 EC08 0010 F7               	dc.b $EC, $8, $0, $10, $F7
00027DDE 1400 0013 F7               	dc.b $14, $0, $0, $13, $F7
00027DE3 F402 0014 0F               	dc.b $F4, $2, $0, $14, $F
00027DE8 04                         MightyMap_65: dc.b $4
00027DE9 FA0E 0000 F0               	dc.b $FA, $E, $0, $0, $F0
00027DEE EA09 000C F8               	dc.b $EA, $9, $0, $C, $F8
00027DF3 E200 0012 00               	dc.b $E2, $0, $0, $12, $0
00027DF8 FA01 0013 10               	dc.b $FA, $1, $0, $13, $10
00027DFD 02                         MightyMap_66: dc.b $2
00027DFE E70F 0000 F0               	dc.b $E7, $F, $0, $0, $F0
00027E03 0708 0010 F8               	dc.b $7, $8, $0, $10, $F8
00027E08 02                         MightyMap_67: dc.b $2
00027E09 E70F 0000 F1               	dc.b $E7, $F, $0, $0, $F1
00027E0E 0708 0010 F9               	dc.b $7, $8, $0, $10, $F9
00027E13 02                         MightyMap_68: dc.b $2
00027E14 E70F 0000 F0               	dc.b $E7, $F, $0, $0, $F0
00027E19 0708 0010 F8               	dc.b $7, $8, $0, $10, $F8
00027E1E 02                         MightyMap_69: dc.b $2
00027E1F E70F 0000 F1               	dc.b $E7, $F, $0, $0, $F1
00027E24 0704 0010 F9               	dc.b $7, $4, $0, $10, $F9
00027E29 03                         MightyMap_6A: dc.b $3
00027E2A E60F 0000 E8               	dc.b $E6, $F, $0, $0, $E8
00027E2F 0608 0010 F8               	dc.b $6, $8, $0, $10, $F8
00027E34 F601 0013 08               	dc.b $F6, $1, $0, $13, $8
00027E39 04                         MightyMap_6B: dc.b $4
00027E3A E90F 0000 E9               	dc.b $E9, $F, $0, $0, $E9
00027E3F F100 0010 E1               	dc.b $F1, $0, $0, $10, $E1
00027E44 F102 0011 09               	dc.b $F1, $2, $0, $11, $9
00027E49 0900 0014 01               	dc.b $9, $0, $0, $14, $1
00027E4E 04                         MightyMap_6C: dc.b $4
00027E4F E60F 0000 E9               	dc.b $E6, $F, $0, $0, $E9
00027E54 0604 0010 F9               	dc.b $6, $4, $0, $10, $F9
00027E59 EE02 0012 09               	dc.b $EE, $2, $0, $12, $9
00027E5E F601 0015 11               	dc.b $F6, $1, $0, $15, $11
00027E63 03                         MightyMap_6D: dc.b $3
00027E64 E60F 0000 E7               	dc.b $E6, $F, $0, $0, $E7
00027E69 0608 0010 F7               	dc.b $6, $8, $0, $10, $F7
00027E6E EE02 0013 07               	dc.b $EE, $2, $0, $13, $7
00027E73 01                         MightyMap_6E: dc.b $1
00027E74 F50F 0000 EF               	dc.b $F5, $F, $0, $0, $EF
00027E79 01                         MightyMap_6F: dc.b $1
00027E7A F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00027E7F 01                         MightyMap_70: dc.b $1
00027E80 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00027E85 01                         MightyMap_71: dc.b $1
00027E86 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00027E8B 01                         MightyMap_72: dc.b $1
00027E8C F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00027E91 01                         MightyMap_73: dc.b $1
00027E92 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00027E97 01                         MightyMap_74: dc.b $1
00027E98 F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00027E9D 01                         MightyMap_75: dc.b $1
00027E9E F10F 0000 F1               	dc.b $F1, $F, $0, $0, $F1
00027EA4 00                         	even
00027EA4 00                         	even
00027EA4                            ; ---------------------------------------------------------------------------
00027EA4                            ; Uncompressed graphics	loading	array for Sonic
00027EA4                            ; ---------------------------------------------------------------------------
00027EA4                            SonicDynPLC:
00027EA4                            	include "_inc\Sonic dynamic pattern load cues.asm"
00027EA4                            ; ================================================================================
00027EA4                            ; Sprite DPLCs - generated by Flex 2 Sat May 05 2018 15:27:48 GMT-0400 (Eastern Daylight Time)
00027EA4                            ; ================================================================================
00027EA4                            
00027EA4                            Sonic_PLC:
00027EA4 0000 0000                  	dc.w Sonic_PLC_0-Sonic_PLC, Sonic_PLC_1-Sonic_PLC
00027EA8 0000 0000                  	dc.w Sonic_PLC_2-Sonic_PLC, Sonic_PLC_3-Sonic_PLC
00027EAC 0000 0000                  	dc.w Sonic_PLC_4-Sonic_PLC, Sonic_PLC_5-Sonic_PLC
00027EB0 0000 0000                  	dc.w Sonic_PLC_6-Sonic_PLC, Sonic_PLC_7-Sonic_PLC
00027EB4 0000 0000                  	dc.w Sonic_PLC_8-Sonic_PLC, Sonic_PLC_9-Sonic_PLC
00027EB8 0000 0000                  	dc.w Sonic_PLC_A-Sonic_PLC, Sonic_PLC_B-Sonic_PLC
00027EBC 0000 0000                  	dc.w Sonic_PLC_C-Sonic_PLC, Sonic_PLC_D-Sonic_PLC
00027EC0 0000 0000                  	dc.w Sonic_PLC_E-Sonic_PLC, Sonic_PLC_F-Sonic_PLC
00027EC4 0000 0000                  	dc.w Sonic_PLC_10-Sonic_PLC, Sonic_PLC_11-Sonic_PLC
00027EC8 0000 0000                  	dc.w Sonic_PLC_12-Sonic_PLC, Sonic_PLC_13-Sonic_PLC
00027ECC 0000 0000                  	dc.w Sonic_PLC_14-Sonic_PLC, Sonic_PLC_15-Sonic_PLC
00027ED0 0000 0000                  	dc.w Sonic_PLC_16-Sonic_PLC, Sonic_PLC_17-Sonic_PLC
00027ED4 0000 0000                  	dc.w Sonic_PLC_18-Sonic_PLC, Sonic_PLC_19-Sonic_PLC
00027ED8 0000 0000                  	dc.w Sonic_PLC_1A-Sonic_PLC, Sonic_PLC_1B-Sonic_PLC
00027EDC 0000 0000                  	dc.w Sonic_PLC_1C-Sonic_PLC, Sonic_PLC_1D-Sonic_PLC
00027EE0 0000 0000                  	dc.w Sonic_PLC_1E-Sonic_PLC, Sonic_PLC_1F-Sonic_PLC
00027EE4 0000 0000                  	dc.w Sonic_PLC_20-Sonic_PLC, Sonic_PLC_21-Sonic_PLC
00027EE8 0000 0000                  	dc.w Sonic_PLC_22-Sonic_PLC, Sonic_PLC_23-Sonic_PLC
00027EEC 0000 0000                  	dc.w Sonic_PLC_24-Sonic_PLC, Sonic_PLC_25-Sonic_PLC
00027EF0 0000 0000                  	dc.w Sonic_PLC_26-Sonic_PLC, Sonic_PLC_27-Sonic_PLC
00027EF4 0000 0000                  	dc.w Sonic_PLC_28-Sonic_PLC, Sonic_PLC_29-Sonic_PLC
00027EF8 0000 0000                  	dc.w Sonic_PLC_2A-Sonic_PLC, Sonic_PLC_2B-Sonic_PLC
00027EFC 0000 0000                  	dc.w Sonic_PLC_2C-Sonic_PLC, Sonic_PLC_2D-Sonic_PLC
00027F00 0000 0000                  	dc.w Sonic_PLC_2E-Sonic_PLC, Sonic_PLC_2F-Sonic_PLC
00027F04 0000 0000                  	dc.w Sonic_PLC_30-Sonic_PLC, Sonic_PLC_31-Sonic_PLC
00027F08 0000 0000                  	dc.w Sonic_PLC_32-Sonic_PLC, Sonic_PLC_33-Sonic_PLC
00027F0C 0000 0000                  	dc.w Sonic_PLC_34-Sonic_PLC, Sonic_PLC_35-Sonic_PLC
00027F10 0000 0000                  	dc.w Sonic_PLC_36-Sonic_PLC, Sonic_PLC_37-Sonic_PLC
00027F14 0000 0000                  	dc.w Sonic_PLC_38-Sonic_PLC, Sonic_PLC_39-Sonic_PLC
00027F18 0000 0000                  	dc.w Sonic_PLC_3A-Sonic_PLC, Sonic_PLC_3B-Sonic_PLC
00027F1C 0000 0000                  	dc.w Sonic_PLC_3C-Sonic_PLC, Sonic_PLC_3D-Sonic_PLC
00027F20 0000 0000                  	dc.w Sonic_PLC_3E-Sonic_PLC, Sonic_PLC_3F-Sonic_PLC
00027F24 0000 0000                  	dc.w Sonic_PLC_40-Sonic_PLC, Sonic_PLC_41-Sonic_PLC
00027F28 0000 0000                  	dc.w Sonic_PLC_42-Sonic_PLC, Sonic_PLC_43-Sonic_PLC
00027F2C 0000 0000                  	dc.w Sonic_PLC_44-Sonic_PLC, Sonic_PLC_45-Sonic_PLC
00027F30 0000 0000                  	dc.w Sonic_PLC_46-Sonic_PLC, Sonic_PLC_47-Sonic_PLC
00027F34 0000 0000                  	dc.w Sonic_PLC_48-Sonic_PLC, Sonic_PLC_49-Sonic_PLC
00027F38 0000 0000                  	dc.w Sonic_PLC_4A-Sonic_PLC, Sonic_PLC_4B-Sonic_PLC
00027F3C 0000 0000                  	dc.w Sonic_PLC_4C-Sonic_PLC, Sonic_PLC_4D-Sonic_PLC
00027F40 0000 0000                  	dc.w Sonic_PLC_4E-Sonic_PLC, Sonic_PLC_4F-Sonic_PLC
00027F44 0000 0000                  	dc.w Sonic_PLC_50-Sonic_PLC, Sonic_PLC_51-Sonic_PLC
00027F48 0000 0000                  	dc.w Sonic_PLC_52-Sonic_PLC, Sonic_PLC_53-Sonic_PLC
00027F4C 0000 0000                  	dc.w Sonic_PLC_54-Sonic_PLC, Sonic_PLC_55-Sonic_PLC
00027F50 0000 0000                  	dc.w Sonic_PLC_56-Sonic_PLC, Sonic_PLC_57-Sonic_PLC
00027F54 0000 0000                  	dc.w Sonic_PLC_58-Sonic_PLC, Sonic_PLC_59-Sonic_PLC
00027F58 0000 0000                  	dc.w Sonic_PLC_5A-Sonic_PLC, Sonic_PLC_5B-Sonic_PLC
00027F5C 0000 0000                  	dc.w Sonic_PLC_5C-Sonic_PLC, Sonic_PLC_5D-Sonic_PLC
00027F60 0000 0000                  	dc.w Sonic_PLC_5E-Sonic_PLC, Sonic_PLC_5F-Sonic_PLC
00027F64 0000 0000                  	dc.w Sonic_PLC_60-Sonic_PLC, Sonic_PLC_61-Sonic_PLC
00027F68 0000 0000                  	dc.w Sonic_PLC_62-Sonic_PLC, Sonic_PLC_63-Sonic_PLC
00027F6C 0000 0000                  	dc.w Sonic_PLC_64-Sonic_PLC, Sonic_PLC_65-Sonic_PLC
00027F70 0000 0000                  	dc.w Sonic_PLC_66-Sonic_PLC, Sonic_PLC_67-Sonic_PLC
00027F74 0000 0000                  	dc.w Sonic_PLC_68-Sonic_PLC, Sonic_PLC_69-Sonic_PLC
00027F78 0000 0000                  	dc.w Sonic_PLC_6A-Sonic_PLC, Sonic_PLC_6B-Sonic_PLC
00027F7C 0000 0000                  	dc.w Sonic_PLC_6C-Sonic_PLC, Sonic_PLC_6D-Sonic_PLC
00027F80 0000 0000                  	dc.w Sonic_PLC_6E-Sonic_PLC, Sonic_PLC_6F-Sonic_PLC
00027F84 0000 0000                  	dc.w Sonic_PLC_70-Sonic_PLC, Sonic_PLC_71-Sonic_PLC
00027F88 0000 0000                  	dc.w Sonic_PLC_72-Sonic_PLC, Sonic_PLC_73-Sonic_PLC
00027F8C 0000 0000                  	dc.w Sonic_PLC_74-Sonic_PLC, Sonic_PLC_75-Sonic_PLC
00027F90 0000 0000                  	dc.w Sonic_PLC_76-Sonic_PLC, Sonic_PLC_77-Sonic_PLC
00027F94 0000 0000                  	dc.w Sonic_PLC_78-Sonic_PLC, Sonic_PLC_79-Sonic_PLC
00027F98 0000 0000                  	dc.w Sonic_PLC_7A-Sonic_PLC, Sonic_PLC_7B-Sonic_PLC
00027F9C 0000 0000                  	dc.w Sonic_PLC_7C-Sonic_PLC, Sonic_PLC_7D-Sonic_PLC
00027FA0 0000 0000                  	dc.w Sonic_PLC_7E-Sonic_PLC, Sonic_PLC_7F-Sonic_PLC
00027FA4 0000 0000                  	dc.w Sonic_PLC_80-Sonic_PLC, Sonic_PLC_81-Sonic_PLC
00027FA8 0000 0000                  	dc.w Sonic_PLC_82-Sonic_PLC, Sonic_PLC_83-Sonic_PLC
00027FAC 0000 0000                  	dc.w Sonic_PLC_84-Sonic_PLC, Sonic_PLC_85-Sonic_PLC
00027FB0 0000 0000                  	dc.w Sonic_PLC_86-Sonic_PLC, Sonic_PLC_87-Sonic_PLC
00027FB4 0000                       	dc.w Sonic_PLC_88-Sonic_PLC
00027FB6 00                         Sonic_PLC_0: dc.b $0
00027FB7 04                         Sonic_PLC_1: dc.b $4
00027FB8 F000                       	dc.b $F0, $0
00027FBA 2010                       	dc.b $20, $10
00027FBC 1013                       	dc.b $10, $13
00027FBE 0015                       	dc.b $0, $15
00027FC0 04                         Sonic_PLC_2: dc.b $4
00027FC1 7016                       	dc.b $70, $16
00027FC3 801E                       	dc.b $80, $1E
00027FC5 1027                       	dc.b $10, $27
00027FC7 1029                       	dc.b $10, $29
00027FC9 02                         Sonic_PLC_3: dc.b $2
00027FCA 702B                       	dc.b $70, $2B
00027FCC 8033                       	dc.b $80, $33
00027FCE 03                         Sonic_PLC_4: dc.b $3
00027FCF B03C                       	dc.b $B0, $3C
00027FD1 3048                       	dc.b $30, $48
00027FD3 204C                       	dc.b $20, $4C
00027FD5 04                         Sonic_PLC_5: dc.b $4
00027FD6 F04F                       	dc.b $F0, $4F
00027FD8 105F                       	dc.b $10, $5F
00027FDA 1061                       	dc.b $10, $61
00027FDC 0063                       	dc.b $0, $63
00027FDE 05                         Sonic_PLC_6: dc.b $5
00027FDF 7064                       	dc.b $70, $64
00027FE1 506C                       	dc.b $50, $6C
00027FE3 1072                       	dc.b $10, $72
00027FE5 1074                       	dc.b $10, $74
00027FE7 0076                       	dc.b $0, $76
00027FE9 02                         Sonic_PLC_7: dc.b $2
00027FEA 7077                       	dc.b $70, $77
00027FEC 807F                       	dc.b $80, $7F
00027FEE 03                         Sonic_PLC_8: dc.b $3
00027FEF B088                       	dc.b $B0, $88
00027FF1 0094                       	dc.b $0, $94
00027FF3 3095                       	dc.b $30, $95
00027FF5 04                         Sonic_PLC_9: dc.b $4
00027FF6 B099                       	dc.b $B0, $99
00027FF8 20A5                       	dc.b $20, $A5
00027FFA 20A8                       	dc.b $20, $A8
00027FFC 30AB                       	dc.b $30, $AB
00027FFE 04                         Sonic_PLC_A: dc.b $4
00027FFF B0AF                       	dc.b $B0, $AF
00028001 30BB                       	dc.b $30, $BB
00028003 20BF                       	dc.b $20, $BF
00028005 00C2                       	dc.b $0, $C2
00028007 03                         Sonic_PLC_B: dc.b $3
00028008 B0C3                       	dc.b $B0, $C3
0002800A 30CF                       	dc.b $30, $CF
0002800C 10D3                       	dc.b $10, $D3
0002800E 04                         Sonic_PLC_C: dc.b $4
0002800F B0D5                       	dc.b $B0, $D5
00028011 30E1                       	dc.b $30, $E1
00028013 20E5                       	dc.b $20, $E5
00028015 20E8                       	dc.b $20, $E8
00028017 04                         Sonic_PLC_D: dc.b $4
00028018 F0EB                       	dc.b $F0, $EB
0002801A 20FB                       	dc.b $20, $FB
0002801C 20FE                       	dc.b $20, $FE
0002801E 1101                       	dc.b $11, $1
00028020 04                         Sonic_PLC_E: dc.b $4
00028021 8103                       	dc.b $81, $3
00028023 810C                       	dc.b $81, $C
00028025 3115                       	dc.b $31, $15
00028027 0119                       	dc.b $1, $19
00028029 03                         Sonic_PLC_F: dc.b $3
0002802A B11A                       	dc.b $B1, $1A
0002802C 3126                       	dc.b $31, $26
0002802E 112A                       	dc.b $11, $2A
00028030 03                         Sonic_PLC_10: dc.b $3
00028031 B12C                       	dc.b $B1, $2C
00028033 2138                       	dc.b $21, $38
00028035 313B                       	dc.b $31, $3B
00028037 05                         Sonic_PLC_11: dc.b $5
00028038 513F                       	dc.b $51, $3F
0002803A 7145                       	dc.b $71, $45
0002803C 314D                       	dc.b $31, $4D
0002803E 1151                       	dc.b $11, $51
00028040 0153                       	dc.b $1, $53
00028042 05                         Sonic_PLC_12: dc.b $5
00028043 3154                       	dc.b $31, $54
00028045 8158                       	dc.b $81, $58
00028047 2161                       	dc.b $21, $61
00028049 1164                       	dc.b $11, $64
0002804B 1166                       	dc.b $11, $66
0002804D 03                         Sonic_PLC_13: dc.b $3
0002804E B168                       	dc.b $B1, $68
00028050 2174                       	dc.b $21, $74
00028052 0177                       	dc.b $1, $77
00028054 02                         Sonic_PLC_14: dc.b $2
00028055 F178                       	dc.b $F1, $78
00028057 3188                       	dc.b $31, $88
00028059 05                         Sonic_PLC_15: dc.b $5
0002805A 718C                       	dc.b $71, $8C
0002805C 2194                       	dc.b $21, $94
0002805E 5197                       	dc.b $51, $97
00028060 119D                       	dc.b $11, $9D
00028062 119F                       	dc.b $11, $9F
00028064 06                         Sonic_PLC_16: dc.b $6
00028065 51A1                       	dc.b $51, $A1
00028067 51A7                       	dc.b $51, $A7
00028069 31AD                       	dc.b $31, $AD
0002806B 11B1                       	dc.b $11, $B1
0002806D 01B3                       	dc.b $1, $B3
0002806F 01B4                       	dc.b $1, $B4
00028071 03                         Sonic_PLC_17: dc.b $3
00028072 B1B5                       	dc.b $B1, $B5
00028074 21C1                       	dc.b $21, $C1
00028076 01C4                       	dc.b $1, $C4
00028078 03                         Sonic_PLC_18: dc.b $3
00028079 B1C5                       	dc.b $B1, $C5
0002807B 21D1                       	dc.b $21, $D1
0002807D 11D4                       	dc.b $11, $D4
0002807F 04                         Sonic_PLC_19: dc.b $4
00028080 B1D6                       	dc.b $B1, $D6
00028082 51E2                       	dc.b $51, $E2
00028084 01E8                       	dc.b $1, $E8
00028086 21E9                       	dc.b $21, $E9
00028088 05                         Sonic_PLC_1A: dc.b $5
00028089 21EC                       	dc.b $21, $EC
0002808B 71EF                       	dc.b $71, $EF
0002808D 31F7                       	dc.b $31, $F7
0002808F 31FB                       	dc.b $31, $FB
00028091 01FF                       	dc.b $1, $FF
00028093 03                         Sonic_PLC_1B: dc.b $3
00028094 3200                       	dc.b $32, $0
00028096 B204                       	dc.b $B2, $4
00028098 1210                       	dc.b $12, $10
0002809A 06                         Sonic_PLC_1C: dc.b $6
0002809B 7212                       	dc.b $72, $12
0002809D 321A                       	dc.b $32, $1A
0002809F 121E                       	dc.b $12, $1E
000280A1 2220                       	dc.b $22, $20
000280A3 0223                       	dc.b $2, $23
000280A5 0224                       	dc.b $2, $24
000280A7 04                         Sonic_PLC_1D: dc.b $4
000280A8 F225                       	dc.b $F2, $25
000280AA 1235                       	dc.b $12, $35
000280AC 1237                       	dc.b $12, $37
000280AE 3239                       	dc.b $32, $39
000280B0 05                         Sonic_PLC_1E: dc.b $5
000280B1 223D                       	dc.b $22, $3D
000280B3 7240                       	dc.b $72, $40
000280B5 2248                       	dc.b $22, $48
000280B7 524B                       	dc.b $52, $4B
000280B9 0251                       	dc.b $2, $51
000280BB 03                         Sonic_PLC_1F: dc.b $3
000280BC 3252                       	dc.b $32, $52
000280BE B256                       	dc.b $B2, $56
000280C0 1262                       	dc.b $12, $62
000280C2 03                         Sonic_PLC_20: dc.b $3
000280C3 8264                       	dc.b $82, $64
000280C5 726D                       	dc.b $72, $6D
000280C7 1275                       	dc.b $12, $75
000280C9 02                         Sonic_PLC_21: dc.b $2
000280CA F277                       	dc.b $F2, $77
000280CC 3287                       	dc.b $32, $87
000280CE 03                         Sonic_PLC_22: dc.b $3
000280CF B28B                       	dc.b $B2, $8B
000280D1 3297                       	dc.b $32, $97
000280D3 229B                       	dc.b $22, $9B
000280D5 02                         Sonic_PLC_23: dc.b $2
000280D6 F29E                       	dc.b $F2, $9E
000280D8 22AE                       	dc.b $22, $AE
000280DA 03                         Sonic_PLC_24: dc.b $3
000280DB B2B1                       	dc.b $B2, $B1
000280DD 32BD                       	dc.b $32, $BD
000280DF 22C1                       	dc.b $22, $C1
000280E1 03                         Sonic_PLC_25: dc.b $3
000280E2 B2C4                       	dc.b $B2, $C4
000280E4 12D0                       	dc.b $12, $D0
000280E6 52D2                       	dc.b $52, $D2
000280E8 03                         Sonic_PLC_26: dc.b $3
000280E9 B2D8                       	dc.b $B2, $D8
000280EB 32E4                       	dc.b $32, $E4
000280ED 22E8                       	dc.b $22, $E8
000280EF 03                         Sonic_PLC_27: dc.b $3
000280F0 B2EB                       	dc.b $B2, $EB
000280F2 12F7                       	dc.b $12, $F7
000280F4 52F9                       	dc.b $52, $F9
000280F6 03                         Sonic_PLC_28: dc.b $3
000280F7 B2FF                       	dc.b $B2, $FF
000280F9 330B                       	dc.b $33, $B
000280FB 230F                       	dc.b $23, $F
000280FD 02                         Sonic_PLC_29: dc.b $2
000280FE F312                       	dc.b $F3, $12
00028100 3322                       	dc.b $33, $22
00028102 03                         Sonic_PLC_2A: dc.b $3
00028103 B326                       	dc.b $B3, $26
00028105 3332                       	dc.b $33, $32
00028107 2336                       	dc.b $23, $36
00028109 02                         Sonic_PLC_2B: dc.b $2
0002810A F339                       	dc.b $F3, $39
0002810C 3349                       	dc.b $33, $49
0002810E 03                         Sonic_PLC_2C: dc.b $3
0002810F B34D                       	dc.b $B3, $4D
00028111 3359                       	dc.b $33, $59
00028113 235D                       	dc.b $23, $5D
00028115 03                         Sonic_PLC_2D: dc.b $3
00028116 F360                       	dc.b $F3, $60
00028118 2370                       	dc.b $23, $70
0002811A 0373                       	dc.b $3, $73
0002811C 02                         Sonic_PLC_2E: dc.b $2
0002811D F374                       	dc.b $F3, $74
0002811F 2384                       	dc.b $23, $84
00028121 04                         Sonic_PLC_2F: dc.b $4
00028122 B387                       	dc.b $B3, $87
00028124 2393                       	dc.b $23, $93
00028126 2396                       	dc.b $23, $96
00028128 0399                       	dc.b $3, $99
0002812A 02                         Sonic_PLC_30: dc.b $2
0002812B F39A                       	dc.b $F3, $9A
0002812D 23AA                       	dc.b $23, $AA
0002812F 02                         Sonic_PLC_31: dc.b $2
00028130 B3AD                       	dc.b $B3, $AD
00028132 23B9                       	dc.b $23, $B9
00028134 02                         Sonic_PLC_32: dc.b $2
00028135 B3BC                       	dc.b $B3, $BC
00028137 23C8                       	dc.b $23, $C8
00028139 02                         Sonic_PLC_33: dc.b $2
0002813A B3CB                       	dc.b $B3, $CB
0002813C 23D7                       	dc.b $23, $D7
0002813E 02                         Sonic_PLC_34: dc.b $2
0002813F B3DA                       	dc.b $B3, $DA
00028141 23E6                       	dc.b $23, $E6
00028143 02                         Sonic_PLC_35: dc.b $2
00028144 B3E9                       	dc.b $B3, $E9
00028146 23F5                       	dc.b $23, $F5
00028148 02                         Sonic_PLC_36: dc.b $2
00028149 B3F8                       	dc.b $B3, $F8
0002814B 2404                       	dc.b $24, $4
0002814D 03                         Sonic_PLC_37: dc.b $3
0002814E B407                       	dc.b $B4, $7
00028150 2413                       	dc.b $24, $13
00028152 2416                       	dc.b $24, $16
00028154 03                         Sonic_PLC_38: dc.b $3
00028155 B419                       	dc.b $B4, $19
00028157 2425                       	dc.b $24, $25
00028159 2428                       	dc.b $24, $28
0002815B 02                         Sonic_PLC_39: dc.b $2
0002815C 842B                       	dc.b $84, $2B
0002815E 5434                       	dc.b $54, $34
00028160 01                         Sonic_PLC_3A: dc.b $1
00028161 F43A                       	dc.b $F4, $3A
00028163 02                         Sonic_PLC_3B: dc.b $2
00028164 B44A                       	dc.b $B4, $4A
00028166 2456                       	dc.b $24, $56
00028168 01                         Sonic_PLC_3C: dc.b $1
00028169 F459                       	dc.b $F4, $59
0002816B 01                         Sonic_PLC_3D: dc.b $1
0002816C F469                       	dc.b $F4, $69
0002816E 01                         Sonic_PLC_3E: dc.b $1
0002816F F479                       	dc.b $F4, $79
00028171 02                         Sonic_PLC_3F: dc.b $2
00028172 B489                       	dc.b $B4, $89
00028174 2495                       	dc.b $24, $95
00028176 02                         Sonic_PLC_40: dc.b $2
00028177 B498                       	dc.b $B4, $98
00028179 14A4                       	dc.b $14, $A4
0002817B 04                         Sonic_PLC_41: dc.b $4
0002817C B4A6                       	dc.b $B4, $A6
0002817E 14B2                       	dc.b $14, $B2
00028180 24B4                       	dc.b $24, $B4
00028182 14B7                       	dc.b $14, $B7
00028184 04                         Sonic_PLC_42: dc.b $4
00028185 B4B9                       	dc.b $B4, $B9
00028187 14C5                       	dc.b $14, $C5
00028189 14C7                       	dc.b $14, $C7
0002818B 14C9                       	dc.b $14, $C9
0002818D 03                         Sonic_PLC_43: dc.b $3
0002818E B4CB                       	dc.b $B4, $CB
00028190 14D7                       	dc.b $14, $D7
00028192 14D9                       	dc.b $14, $D9
00028194 02                         Sonic_PLC_44: dc.b $2
00028195 F4DB                       	dc.b $F4, $DB
00028197 24EB                       	dc.b $24, $EB
00028199 03                         Sonic_PLC_45: dc.b $3
0002819A 74EE                       	dc.b $74, $EE
0002819C 04F6                       	dc.b $4, $F6
0002819E 84F7                       	dc.b $84, $F7
000281A0 05                         Sonic_PLC_46: dc.b $5
000281A1 B500                       	dc.b $B5, $0
000281A3 050C                       	dc.b $5, $C
000281A5 250D                       	dc.b $25, $D
000281A7 2510                       	dc.b $25, $10
000281A9 1513                       	dc.b $15, $13
000281AB 04                         Sonic_PLC_47: dc.b $4
000281AC 8515                       	dc.b $85, $15
000281AE 251E                       	dc.b $25, $1E
000281B0 5521                       	dc.b $55, $21
000281B2 0527                       	dc.b $5, $27
000281B4 04                         Sonic_PLC_48: dc.b $4
000281B5 B528                       	dc.b $B5, $28
000281B7 3534                       	dc.b $35, $34
000281B9 0538                       	dc.b $5, $38
000281BB 2539                       	dc.b $25, $39
000281BD 00                         Sonic_PLC_49: dc.b $0
000281BE 03                         Sonic_PLC_4A: dc.b $3
000281BF F53C                       	dc.b $F5, $3C
000281C1 054C                       	dc.b $5, $4C
000281C3 354D                       	dc.b $35, $4D
000281C5 03                         Sonic_PLC_4B: dc.b $3
000281C6 B551                       	dc.b $B5, $51
000281C8 255D                       	dc.b $25, $5D
000281CA 3560                       	dc.b $35, $60
000281CC 03                         Sonic_PLC_4C: dc.b $3
000281CD B564                       	dc.b $B5, $64
000281CF 2570                       	dc.b $25, $70
000281D1 3573                       	dc.b $35, $73
000281D3 03                         Sonic_PLC_4D: dc.b $3
000281D4 F577                       	dc.b $F5, $77
000281D6 0587                       	dc.b $5, $87
000281D8 3588                       	dc.b $35, $88
000281DA 05                         Sonic_PLC_4E: dc.b $5
000281DB 858C                       	dc.b $85, $8C
000281DD 0595                       	dc.b $5, $95
000281DF 0596                       	dc.b $5, $96
000281E1 0597                       	dc.b $5, $97
000281E3 2598                       	dc.b $25, $98
000281E5 05                         Sonic_PLC_4F: dc.b $5
000281E6 0596                       	dc.b $5, $96
000281E8 859B                       	dc.b $85, $9B
000281EA 05A4                       	dc.b $5, $A4
000281EC 05A5                       	dc.b $5, $A5
000281EE 2598                       	dc.b $25, $98
000281F0 02                         Sonic_PLC_50: dc.b $2
000281F1 E5A6                       	dc.b $E5, $A6
000281F3 2598                       	dc.b $25, $98
000281F5 04                         Sonic_PLC_51: dc.b $4
000281F6 B5B5                       	dc.b $B5, $B5
000281F8 05C1                       	dc.b $5, $C1
000281FA 15C2                       	dc.b $15, $C2
000281FC 25C4                       	dc.b $25, $C4
000281FE 02                         Sonic_PLC_52: dc.b $2
000281FF B5C7                       	dc.b $B5, $C7
00028201 15D3                       	dc.b $15, $D3
00028203 04                         Sonic_PLC_53: dc.b $4
00028204 B5D5                       	dc.b $B5, $D5
00028206 05E1                       	dc.b $5, $E1
00028208 15E2                       	dc.b $15, $E2
0002820A 15E4                       	dc.b $15, $E4
0002820C 02                         Sonic_PLC_54: dc.b $2
0002820D B5E6                       	dc.b $B5, $E6
0002820F 15F2                       	dc.b $15, $F2
00028211 03                         Sonic_PLC_55: dc.b $3
00028212 85F4                       	dc.b $85, $F4
00028214 35FD                       	dc.b $35, $FD
00028216 3601                       	dc.b $36, $1
00028218 05                         Sonic_PLC_56: dc.b $5
00028219 B605                       	dc.b $B6, $5
0002821B 0602                       	dc.b $6, $2
0002821D 0600                       	dc.b $6, $0
0002821F 0604                       	dc.b $6, $4
00028221 05FD                       	dc.b $5, $FD
00028223 09                         Sonic_PLC_57: dc.b $9
00028224 0611                       	dc.b $6, $11
00028226 0612                       	dc.b $6, $12
00028228 2598                       	dc.b $25, $98
0002822A 05FD                       	dc.b $5, $FD
0002822C 3613                       	dc.b $36, $13
0002822E 2617                       	dc.b $26, $17
00028230 061A                       	dc.b $6, $1A
00028232 061B                       	dc.b $6, $1B
00028234 061C                       	dc.b $6, $1C
00028236 03                         Sonic_PLC_58: dc.b $3
00028237 B61D                       	dc.b $B6, $1D
00028239 2598                       	dc.b $25, $98
0002823B 05FD                       	dc.b $5, $FD
0002823D 05                         Sonic_PLC_59: dc.b $5
0002823E 05FD                       	dc.b $5, $FD
00028240 0629                       	dc.b $6, $29
00028242 062A                       	dc.b $6, $2A
00028244 262B                       	dc.b $26, $2B
00028246 A62E                       	dc.b $A6, $2E
00028248 02                         Sonic_PLC_5A: dc.b $2
00028249 F639                       	dc.b $F6, $39
0002824B 0649                       	dc.b $6, $49
0002824D 03                         Sonic_PLC_5B: dc.b $3
0002824E B64A                       	dc.b $B6, $4A
00028250 5656                       	dc.b $56, $56
00028252 065C                       	dc.b $6, $5C
00028254 03                         Sonic_PLC_5C: dc.b $3
00028255 865D                       	dc.b $86, $5D
00028257 3666                       	dc.b $36, $66
00028259 066A                       	dc.b $6, $6A
0002825B 03                         Sonic_PLC_5D: dc.b $3
0002825C 866B                       	dc.b $86, $6B
0002825E 0674                       	dc.b $6, $74
00028260 0675                       	dc.b $6, $75
00028262 02                         Sonic_PLC_5E: dc.b $2
00028263 8676                       	dc.b $86, $76
00028265 067F                       	dc.b $6, $7F
00028267 03                         Sonic_PLC_5F: dc.b $3
00028268 866B                       	dc.b $86, $6B
0002826A 0674                       	dc.b $6, $74
0002826C 0675                       	dc.b $6, $75
0002826E 03                         Sonic_PLC_60: dc.b $3
0002826F 865D                       	dc.b $86, $5D
00028271 3666                       	dc.b $36, $66
00028273 066A                       	dc.b $6, $6A
00028275 02                         Sonic_PLC_61: dc.b $2
00028276 B680                       	dc.b $B6, $80
00028278 068C                       	dc.b $6, $8C
0002827A 02                         Sonic_PLC_62: dc.b $2
0002827B 868D                       	dc.b $86, $8D
0002827D 0696                       	dc.b $6, $96
0002827F 02                         Sonic_PLC_63: dc.b $2
00028280 B680                       	dc.b $B6, $80
00028282 068C                       	dc.b $6, $8C
00028284 02                         Sonic_PLC_64: dc.b $2
00028285 F697                       	dc.b $F6, $97
00028287 16A7                       	dc.b $16, $A7
00028289 03                         Sonic_PLC_65: dc.b $3
0002828A B6A9                       	dc.b $B6, $A9
0002828C 26B5                       	dc.b $26, $B5
0002828E 26B8                       	dc.b $26, $B8
00028290 05                         Sonic_PLC_66: dc.b $5
00028291 86BB                       	dc.b $86, $BB
00028293 36C4                       	dc.b $36, $C4
00028295 06C8                       	dc.b $6, $C8
00028297 36C9                       	dc.b $36, $C9
00028299 06CD                       	dc.b $6, $CD
0002829B 01                         Sonic_PLC_67: dc.b $1
0002829C F6CE                       	dc.b $F6, $CE
0002829E 03                         Sonic_PLC_68: dc.b $3
0002829F B6DE                       	dc.b $B6, $DE
000282A1 16EA                       	dc.b $16, $EA
000282A3 56EC                       	dc.b $56, $EC
000282A5 02                         Sonic_PLC_69: dc.b $2
000282A6 F6F2                       	dc.b $F6, $F2
000282A8 1702                       	dc.b $17, $2
000282AA 02                         Sonic_PLC_6A: dc.b $2
000282AB F704                       	dc.b $F7, $4
000282AD 3714                       	dc.b $37, $14
000282AF 02                         Sonic_PLC_6B: dc.b $2
000282B0 F718                       	dc.b $F7, $18
000282B2 1728                       	dc.b $17, $28
000282B4 02                         Sonic_PLC_6C: dc.b $2
000282B5 F72A                       	dc.b $F7, $2A
000282B7 173A                       	dc.b $17, $3A
000282B9 02                         Sonic_PLC_6D: dc.b $2
000282BA F73C                       	dc.b $F7, $3C
000282BC 074C                       	dc.b $7, $4C
000282BE 02                         Sonic_PLC_6E: dc.b $2
000282BF F74D                       	dc.b $F7, $4D
000282C1 175D                       	dc.b $17, $5D
000282C3 04                         Sonic_PLC_6F: dc.b $4
000282C4 575F                       	dc.b $57, $5F
000282C6 6765                       	dc.b $67, $65
000282C8 376C                       	dc.b $37, $6C
000282CA 0770                       	dc.b $7, $70
000282CC 05                         Sonic_PLC_70: dc.b $5
000282CD 575F                       	dc.b $57, $5F
000282CF 6765                       	dc.b $67, $65
000282D1 1771                       	dc.b $17, $71
000282D3 1773                       	dc.b $17, $73
000282D5 0775                       	dc.b $7, $75
000282D7 03                         Sonic_PLC_71: dc.b $3
000282D8 A776                       	dc.b $A7, $76
000282DA 0781                       	dc.b $7, $81
000282DC 5782                       	dc.b $57, $82
000282DE 02                         Sonic_PLC_72: dc.b $2
000282DF A788                       	dc.b $A7, $88
000282E1 5782                       	dc.b $57, $82
000282E3 01                         Sonic_PLC_73: dc.b $1
000282E4 F793                       	dc.b $F7, $93
000282E6 02                         Sonic_PLC_74: dc.b $2
000282E7 F7A3                       	dc.b $F7, $A3
000282E9 57B3                       	dc.b $57, $B3
000282EB 02                         Sonic_PLC_75: dc.b $2
000282EC F7B9                       	dc.b $F7, $B9
000282EE 47C9                       	dc.b $47, $C9
000282F0 02                         Sonic_PLC_76: dc.b $2
000282F1 F7CE                       	dc.b $F7, $CE
000282F3 57DE                       	dc.b $57, $DE
000282F5 02                         Sonic_PLC_77: dc.b $2
000282F6 F7E4                       	dc.b $F7, $E4
000282F8 47F4                       	dc.b $47, $F4
000282FA 02                         Sonic_PLC_78: dc.b $2
000282FB F7F9                       	dc.b $F7, $F9
000282FD 5809                       	dc.b $58, $9
000282FF 02                         Sonic_PLC_79: dc.b $2
00028300 F80F                       	dc.b $F8, $F
00028302 581F                       	dc.b $58, $1F
00028304 02                         Sonic_PLC_7A: dc.b $2
00028305 F825                       	dc.b $F8, $25
00028307 5835                       	dc.b $58, $35
00028309 02                         Sonic_PLC_7B: dc.b $2
0002830A F83B                       	dc.b $F8, $3B
0002830C 584B                       	dc.b $58, $4B
0002830E 03                         Sonic_PLC_7C: dc.b $3
0002830F F851                       	dc.b $F8, $51
00028311 5861                       	dc.b $58, $61
00028313 0867                       	dc.b $8, $67
00028315 02                         Sonic_PLC_7D: dc.b $2
00028316 F868                       	dc.b $F8, $68
00028318 4878                       	dc.b $48, $78
0002831A 03                         Sonic_PLC_7E: dc.b $3
0002831B F87D                       	dc.b $F8, $7D
0002831D 588D                       	dc.b $58, $8D
0002831F 0867                       	dc.b $8, $67
00028321 02                         Sonic_PLC_7F: dc.b $2
00028322 F893                       	dc.b $F8, $93
00028324 48A3                       	dc.b $48, $A3
00028326 02                         Sonic_PLC_80: dc.b $2
00028327 F8A8                       	dc.b $F8, $A8
00028329 68B8                       	dc.b $68, $B8
0002832B 02                         Sonic_PLC_81: dc.b $2
0002832C F8BF                       	dc.b $F8, $BF
0002832E 58CF                       	dc.b $58, $CF
00028330 02                         Sonic_PLC_82: dc.b $2
00028331 F8D5                       	dc.b $F8, $D5
00028333 58E5                       	dc.b $58, $E5
00028335 02                         Sonic_PLC_83: dc.b $2
00028336 F8EB                       	dc.b $F8, $EB
00028338 58FB                       	dc.b $58, $FB
0002833A 01                         Sonic_PLC_84: dc.b $1
0002833B B901                       	dc.b $B9, $1
0002833D 02                         Sonic_PLC_85: dc.b $2
0002833E F90D                       	dc.b $F9, $D
00028340 291D                       	dc.b $29, $1D
00028342 02                         Sonic_PLC_86: dc.b $2
00028343 F920                       	dc.b $F9, $20
00028345 4930                       	dc.b $49, $30
00028347 02                         Sonic_PLC_87: dc.b $2
00028348 8935                       	dc.b $89, $35
0002834A B93E                       	dc.b $B9, $3E
0002834C 04                         Sonic_PLC_88: dc.b $4
0002834D 8935                       	dc.b $89, $35
0002834F 793E                       	dc.b $79, $3E
00028351 2947                       	dc.b $29, $47
00028353 094A                       	dc.b $9, $4A
00028356 00                         	even
00028356 00                         	even
00028356                            ShadowDynPLC:
00028356                            	include "_inc\Shadow dynamic pattern load cues.asm"
00028356                            ; ================================================================================
00028356                            ; Sprite DPLCs - generated by Flex 2 Fri May 04 2018 20:28:17 GMT-0400 (Eastern Daylight Time)
00028356                            ; ================================================================================
00028356                            
00028356                            Shadow_DPLC:
00028356 0000 0000                  	dc.w Shadow_DPLC_0-Shadow_DPLC, Shadow_DPLC_1-Shadow_DPLC
0002835A 0000 0000                  	dc.w Shadow_DPLC_2-Shadow_DPLC, Shadow_DPLC_3-Shadow_DPLC
0002835E 0000 0000                  	dc.w Shadow_DPLC_4-Shadow_DPLC, Shadow_DPLC_5-Shadow_DPLC
00028362 0000 0000                  	dc.w Shadow_DPLC_6-Shadow_DPLC, Shadow_DPLC_7-Shadow_DPLC
00028366 0000 0000                  	dc.w Shadow_DPLC_8-Shadow_DPLC, Shadow_DPLC_9-Shadow_DPLC
0002836A 0000 0000                  	dc.w Shadow_DPLC_A-Shadow_DPLC, Shadow_DPLC_B-Shadow_DPLC
0002836E 0000 0000                  	dc.w Shadow_DPLC_C-Shadow_DPLC, Shadow_DPLC_D-Shadow_DPLC
00028372 0000 0000                  	dc.w Shadow_DPLC_E-Shadow_DPLC, Shadow_DPLC_F-Shadow_DPLC
00028376 0000 0000                  	dc.w Shadow_DPLC_10-Shadow_DPLC, Shadow_DPLC_11-Shadow_DPLC
0002837A 0000 0000                  	dc.w Shadow_DPLC_12-Shadow_DPLC, Shadow_DPLC_13-Shadow_DPLC
0002837E 0000 0000                  	dc.w Shadow_DPLC_14-Shadow_DPLC, Shadow_DPLC_15-Shadow_DPLC
00028382 0000 0000                  	dc.w Shadow_DPLC_16-Shadow_DPLC, Shadow_DPLC_17-Shadow_DPLC
00028386 0000 0000                  	dc.w Shadow_DPLC_18-Shadow_DPLC, Shadow_DPLC_19-Shadow_DPLC
0002838A 0000 0000                  	dc.w Shadow_DPLC_1A-Shadow_DPLC, Shadow_DPLC_1B-Shadow_DPLC
0002838E 0000 0000                  	dc.w Shadow_DPLC_1C-Shadow_DPLC, Shadow_DPLC_1D-Shadow_DPLC
00028392 0000 0000                  	dc.w Shadow_DPLC_1E-Shadow_DPLC, Shadow_DPLC_1F-Shadow_DPLC
00028396 0000 0000                  	dc.w Shadow_DPLC_20-Shadow_DPLC, Shadow_DPLC_21-Shadow_DPLC
0002839A 0000 0000                  	dc.w Shadow_DPLC_22-Shadow_DPLC, Shadow_DPLC_23-Shadow_DPLC
0002839E 0000 0000                  	dc.w Shadow_DPLC_24-Shadow_DPLC, Shadow_DPLC_25-Shadow_DPLC
000283A2 0000 0000                  	dc.w Shadow_DPLC_26-Shadow_DPLC, Shadow_DPLC_27-Shadow_DPLC
000283A6 0000 0000                  	dc.w Shadow_DPLC_28-Shadow_DPLC, Shadow_DPLC_29-Shadow_DPLC
000283AA 0000 0000                  	dc.w Shadow_DPLC_2A-Shadow_DPLC, Shadow_DPLC_2B-Shadow_DPLC
000283AE 0000 0000                  	dc.w Shadow_DPLC_2C-Shadow_DPLC, Shadow_DPLC_2D-Shadow_DPLC
000283B2 0000 0000                  	dc.w Shadow_DPLC_2E-Shadow_DPLC, Shadow_DPLC_2F-Shadow_DPLC
000283B6 0000 0000                  	dc.w Shadow_DPLC_30-Shadow_DPLC, Shadow_DPLC_31-Shadow_DPLC
000283BA 0000 0000                  	dc.w Shadow_DPLC_32-Shadow_DPLC, Shadow_DPLC_33-Shadow_DPLC
000283BE 0000 0000                  	dc.w Shadow_DPLC_34-Shadow_DPLC, Shadow_DPLC_35-Shadow_DPLC
000283C2 0000 0000                  	dc.w Shadow_DPLC_36-Shadow_DPLC, Shadow_DPLC_37-Shadow_DPLC
000283C6 0000 0000                  	dc.w Shadow_DPLC_38-Shadow_DPLC, Shadow_DPLC_39-Shadow_DPLC
000283CA 0000 0000                  	dc.w Shadow_DPLC_3A-Shadow_DPLC, Shadow_DPLC_3B-Shadow_DPLC
000283CE 0000 0000                  	dc.w Shadow_DPLC_3C-Shadow_DPLC, Shadow_DPLC_3D-Shadow_DPLC
000283D2 0000 0000                  	dc.w Shadow_DPLC_3E-Shadow_DPLC, Shadow_DPLC_3F-Shadow_DPLC
000283D6 0000 0000                  	dc.w Shadow_DPLC_40-Shadow_DPLC, Shadow_DPLC_41-Shadow_DPLC
000283DA 0000 0000                  	dc.w Shadow_DPLC_42-Shadow_DPLC, Shadow_DPLC_43-Shadow_DPLC
000283DE 0000 0000                  	dc.w Shadow_DPLC_44-Shadow_DPLC, Shadow_DPLC_45-Shadow_DPLC
000283E2 0000 0000                  	dc.w Shadow_DPLC_46-Shadow_DPLC, Shadow_DPLC_47-Shadow_DPLC
000283E6 0000 0000                  	dc.w Shadow_DPLC_48-Shadow_DPLC, Shadow_DPLC_49-Shadow_DPLC
000283EA 0000 0000                  	dc.w Shadow_DPLC_4A-Shadow_DPLC, Shadow_DPLC_4B-Shadow_DPLC
000283EE 0000 0000                  	dc.w Shadow_DPLC_4C-Shadow_DPLC, Shadow_DPLC_4D-Shadow_DPLC
000283F2 0000 0000                  	dc.w Shadow_DPLC_4E-Shadow_DPLC, Shadow_DPLC_4F-Shadow_DPLC
000283F6 0000 0000                  	dc.w Shadow_DPLC_50-Shadow_DPLC, Shadow_DPLC_51-Shadow_DPLC
000283FA 0000 0000                  	dc.w Shadow_DPLC_52-Shadow_DPLC, Shadow_DPLC_53-Shadow_DPLC
000283FE 0000 0000                  	dc.w Shadow_DPLC_54-Shadow_DPLC, Shadow_DPLC_55-Shadow_DPLC
00028402 0000 0000                  	dc.w Shadow_DPLC_56-Shadow_DPLC, Shadow_DPLC_57-Shadow_DPLC
00028406 0000 0000                  	dc.w Shadow_DPLC_58-Shadow_DPLC, Shadow_DPLC_59-Shadow_DPLC
0002840A 0000 0000                  	dc.w Shadow_DPLC_5A-Shadow_DPLC, Shadow_DPLC_5B-Shadow_DPLC
0002840E 0000 0000                  	dc.w Shadow_DPLC_5C-Shadow_DPLC, Shadow_DPLC_5D-Shadow_DPLC
00028412 0000 0000                  	dc.w Shadow_DPLC_5E-Shadow_DPLC, Shadow_DPLC_5F-Shadow_DPLC
00028416 0000 0000                  	dc.w Shadow_DPLC_60-Shadow_DPLC, Shadow_DPLC_61-Shadow_DPLC
0002841A 0000 0000                  	dc.w Shadow_DPLC_62-Shadow_DPLC, Shadow_DPLC_63-Shadow_DPLC
0002841E 0000 0000                  	dc.w Shadow_DPLC_64-Shadow_DPLC, Shadow_DPLC_65-Shadow_DPLC
00028422 0000 0000                  	dc.w Shadow_DPLC_66-Shadow_DPLC, Shadow_DPLC_67-Shadow_DPLC
00028426 0000 0000                  	dc.w Shadow_DPLC_68-Shadow_DPLC, Shadow_DPLC_69-Shadow_DPLC
0002842A 0000 0000                  	dc.w Shadow_DPLC_6A-Shadow_DPLC, Shadow_DPLC_6B-Shadow_DPLC
0002842E 0000 0000                  	dc.w Shadow_DPLC_6C-Shadow_DPLC, Shadow_DPLC_6D-Shadow_DPLC
00028432 0000 0000                  	dc.w Shadow_DPLC_6E-Shadow_DPLC, Shadow_DPLC_6F-Shadow_DPLC
00028436 0000 0000                  	dc.w Shadow_DPLC_70-Shadow_DPLC, Shadow_DPLC_71-Shadow_DPLC
0002843A 00                         Shadow_DPLC_0: dc.b $0
0002843B 02                         Shadow_DPLC_1: dc.b $2
0002843C F000                       	dc.b $F0, $0
0002843E 0010                       	dc.b $0, $10
00028440 01                         Shadow_DPLC_2: dc.b $1
00028441 F011                       	dc.b $F0, $11
00028443 02                         Shadow_DPLC_3: dc.b $2
00028444 9017                       	dc.b $90, $17
00028446 5021                       	dc.b $50, $21
00028448 06                         Shadow_DPLC_4: dc.b $6
00028449 001A                       	dc.b $0, $1A
0002844B 101F                       	dc.b $10, $1F
0002844D 2027                       	dc.b $20, $27
0002844F 101B                       	dc.b $10, $1B
00028451 202A                       	dc.b $20, $2A
00028453 5021                       	dc.b $50, $21
00028455 03                         Shadow_DPLC_5: dc.b $3
00028456 802D                       	dc.b $80, $2D
00028458 200B                       	dc.b $20, $B
0002845A 200E                       	dc.b $20, $E
0002845C 02                         Shadow_DPLC_6: dc.b $2
0002845D D036                       	dc.b $D0, $36
0002845F 6044                       	dc.b $60, $44
00028461 02                         Shadow_DPLC_7: dc.b $2
00028462 F04B                       	dc.b $F0, $4B
00028464 005B                       	dc.b $0, $5B
00028466 02                         Shadow_DPLC_8: dc.b $2
00028467 E05C                       	dc.b $E0, $5C
00028469 0020                       	dc.b $0, $20
0002846B 03                         Shadow_DPLC_9: dc.b $3
0002846C F06B                       	dc.b $F0, $6B
0002846E 307B                       	dc.b $30, $7B
00028470 0020                       	dc.b $0, $20
00028472 03                         Shadow_DPLC_A: dc.b $3
00028473 F07F                       	dc.b $F0, $7F
00028475 108F                       	dc.b $10, $8F
00028477 0020                       	dc.b $0, $20
00028479 03                         Shadow_DPLC_B: dc.b $3
0002847A 7091                       	dc.b $70, $91
0002847C 3099                       	dc.b $30, $99
0002847E 509D                       	dc.b $50, $9D
00028480 02                         Shadow_DPLC_C: dc.b $2
00028481 F0A3                       	dc.b $F0, $A3
00028483 10B3                       	dc.b $10, $B3
00028485 02                         Shadow_DPLC_D: dc.b $2
00028486 F0B5                       	dc.b $F0, $B5
00028488 20C5                       	dc.b $20, $C5
0002848A 02                         Shadow_DPLC_E: dc.b $2
0002848B F0C8                       	dc.b $F0, $C8
0002848D 00D8                       	dc.b $0, $D8
0002848F 02                         Shadow_DPLC_F: dc.b $2
00028490 F0D9                       	dc.b $F0, $D9
00028492 50E9                       	dc.b $50, $E9
00028494 02                         Shadow_DPLC_10: dc.b $2
00028495 F0EF                       	dc.b $F0, $EF
00028497 20FF                       	dc.b $20, $FF
00028499 02                         Shadow_DPLC_11: dc.b $2
0002849A F102                       	dc.b $F1, $2
0002849C 1112                       	dc.b $11, $12
0002849E 02                         Shadow_DPLC_12: dc.b $2
0002849F F114                       	dc.b $F1, $14
000284A1 3124                       	dc.b $31, $24
000284A3 02                         Shadow_DPLC_13: dc.b $2
000284A4 F128                       	dc.b $F1, $28
000284A6 0138                       	dc.b $1, $38
000284A8 01                         Shadow_DPLC_14: dc.b $1
000284A9 E139                       	dc.b $E1, $39
000284AB 02                         Shadow_DPLC_15: dc.b $2
000284AC F148                       	dc.b $F1, $48
000284AE 4158                       	dc.b $41, $58
000284B0 02                         Shadow_DPLC_16: dc.b $2
000284B1 F15D                       	dc.b $F1, $5D
000284B3 016D                       	dc.b $1, $6D
000284B5 02                         Shadow_DPLC_17: dc.b $2
000284B6 F16E                       	dc.b $F1, $6E
000284B8 017E                       	dc.b $1, $7E
000284BA 02                         Shadow_DPLC_18: dc.b $2
000284BB F17F                       	dc.b $F1, $7F
000284BD 118F                       	dc.b $11, $8F
000284BF 02                         Shadow_DPLC_19: dc.b $2
000284C0 F191                       	dc.b $F1, $91
000284C2 21A1                       	dc.b $21, $A1
000284C4 02                         Shadow_DPLC_1A: dc.b $2
000284C5 F1A4                       	dc.b $F1, $A4
000284C7 01B4                       	dc.b $1, $B4
000284C9 02                         Shadow_DPLC_1B: dc.b $2
000284CA F1B5                       	dc.b $F1, $B5
000284CC 51C5                       	dc.b $51, $C5
000284CE 02                         Shadow_DPLC_1C: dc.b $2
000284CF F1CB                       	dc.b $F1, $CB
000284D1 21DB                       	dc.b $21, $DB
000284D3 02                         Shadow_DPLC_1D: dc.b $2
000284D4 F1DE                       	dc.b $F1, $DE
000284D6 11EE                       	dc.b $11, $EE
000284D8 04                         Shadow_DPLC_1E: dc.b $4
000284D9 F1F0                       	dc.b $F1, $F0
000284DB 1200                       	dc.b $12, $0
000284DD 1202                       	dc.b $12, $2
000284DF 0204                       	dc.b $2, $4
000284E1 02                         Shadow_DPLC_1F: dc.b $2
000284E2 D205                       	dc.b $D2, $5
000284E4 3213                       	dc.b $32, $13
000284E6 03                         Shadow_DPLC_20: dc.b $3
000284E7 F217                       	dc.b $F2, $17
000284E9 1227                       	dc.b $12, $27
000284EB 4229                       	dc.b $42, $29
000284ED 03                         Shadow_DPLC_21: dc.b $3
000284EE F22E                       	dc.b $F2, $2E
000284F0 423E                       	dc.b $42, $3E
000284F2 0243                       	dc.b $2, $43
000284F4 02                         Shadow_DPLC_22: dc.b $2
000284F5 5244                       	dc.b $52, $44
000284F7 B24A                       	dc.b $B2, $4A
000284F9 04                         Shadow_DPLC_23: dc.b $4
000284FA F256                       	dc.b $F2, $56
000284FC 1266                       	dc.b $12, $66
000284FE 0009                       	dc.b $0, $9
00028500 0268                       	dc.b $2, $68
00028502 04                         Shadow_DPLC_24: dc.b $4
00028503 F269                       	dc.b $F2, $69
00028505 1279                       	dc.b $12, $79
00028507 1009                       	dc.b $10, $9
00028509 027B                       	dc.b $2, $7B
0002850B 04                         Shadow_DPLC_25: dc.b $4
0002850C F27C                       	dc.b $F2, $7C
0002850E 128C                       	dc.b $12, $8C
00028510 128E                       	dc.b $12, $8E
00028512 0290                       	dc.b $2, $90
00028514 02                         Shadow_DPLC_26: dc.b $2
00028515 F291                       	dc.b $F2, $91
00028517 22A1                       	dc.b $22, $A1
00028519 02                         Shadow_DPLC_27: dc.b $2
0002851A F2A4                       	dc.b $F2, $A4
0002851C 52B4                       	dc.b $52, $B4
0002851E 02                         Shadow_DPLC_28: dc.b $2
0002851F F2BA                       	dc.b $F2, $BA
00028521 62CA                       	dc.b $62, $CA
00028523 02                         Shadow_DPLC_29: dc.b $2
00028524 F2D1                       	dc.b $F2, $D1
00028526 72E1                       	dc.b $72, $E1
00028528 02                         Shadow_DPLC_2A: dc.b $2
00028529 F2E9                       	dc.b $F2, $E9
0002852B 22F9                       	dc.b $22, $F9
0002852D 02                         Shadow_DPLC_2B: dc.b $2
0002852E F2FC                       	dc.b $F2, $FC
00028530 430C                       	dc.b $43, $C
00028532 02                         Shadow_DPLC_2C: dc.b $2
00028533 F311                       	dc.b $F3, $11
00028535 5321                       	dc.b $53, $21
00028537 02                         Shadow_DPLC_2D: dc.b $2
00028538 F327                       	dc.b $F3, $27
0002853A 5337                       	dc.b $53, $37
0002853C 02                         Shadow_DPLC_2E: dc.b $2
0002853D F33D                       	dc.b $F3, $3D
0002853F 334D                       	dc.b $33, $4D
00028541 02                         Shadow_DPLC_2F: dc.b $2
00028542 F351                       	dc.b $F3, $51
00028544 2361                       	dc.b $23, $61
00028546 02                         Shadow_DPLC_30: dc.b $2
00028547 F364                       	dc.b $F3, $64
00028549 4374                       	dc.b $43, $74
0002854B 02                         Shadow_DPLC_31: dc.b $2
0002854C F379                       	dc.b $F3, $79
0002854E 5389                       	dc.b $53, $89
00028550 02                         Shadow_DPLC_32: dc.b $2
00028551 F38F                       	dc.b $F3, $8F
00028553 139F                       	dc.b $13, $9F
00028555 02                         Shadow_DPLC_33: dc.b $2
00028556 F3A1                       	dc.b $F3, $A1
00028558 33B1                       	dc.b $33, $B1
0002855A 02                         Shadow_DPLC_34: dc.b $2
0002855B F3B5                       	dc.b $F3, $B5
0002855D 43C5                       	dc.b $43, $C5
0002855F 02                         Shadow_DPLC_35: dc.b $2
00028560 F3CA                       	dc.b $F3, $CA
00028562 33DA                       	dc.b $33, $DA
00028564 02                         Shadow_DPLC_36: dc.b $2
00028565 F3DE                       	dc.b $F3, $DE
00028567 23EE                       	dc.b $23, $EE
00028569 02                         Shadow_DPLC_37: dc.b $2
0002856A F3F1                       	dc.b $F3, $F1
0002856C 5401                       	dc.b $54, $1
0002856E 02                         Shadow_DPLC_38: dc.b $2
0002856F F407                       	dc.b $F4, $7
00028571 6417                       	dc.b $64, $17
00028573 02                         Shadow_DPLC_39: dc.b $2
00028574 F41E                       	dc.b $F4, $1E
00028576 742E                       	dc.b $74, $2E
00028578 02                         Shadow_DPLC_3A: dc.b $2
00028579 F436                       	dc.b $F4, $36
0002857B 2446                       	dc.b $24, $46
0002857D 02                         Shadow_DPLC_3B: dc.b $2
0002857E F449                       	dc.b $F4, $49
00028580 4459                       	dc.b $44, $59
00028582 02                         Shadow_DPLC_3C: dc.b $2
00028583 F45E                       	dc.b $F4, $5E
00028585 546E                       	dc.b $54, $6E
00028587 02                         Shadow_DPLC_3D: dc.b $2
00028588 F474                       	dc.b $F4, $74
0002858A 5484                       	dc.b $54, $84
0002858C 01                         Shadow_DPLC_3E: dc.b $1
0002858D F48A                       	dc.b $F4, $8A
0002858F 01                         Shadow_DPLC_3F: dc.b $1
00028590 F49A                       	dc.b $F4, $9A
00028592 01                         Shadow_DPLC_40: dc.b $1
00028593 F4AA                       	dc.b $F4, $AA
00028595 01                         Shadow_DPLC_41: dc.b $1
00028596 F4BA                       	dc.b $F4, $BA
00028598 01                         Shadow_DPLC_42: dc.b $1
00028599 F4CA                       	dc.b $F4, $CA
0002859B 02                         Shadow_DPLC_43: dc.b $2
0002859C F4DA                       	dc.b $F4, $DA
0002859E 14EA                       	dc.b $14, $EA
000285A0 03                         Shadow_DPLC_44: dc.b $3
000285A1 F4EC                       	dc.b $F4, $EC
000285A3 04FC                       	dc.b $4, $FC
000285A5 14FD                       	dc.b $14, $FD
000285A7 02                         Shadow_DPLC_45: dc.b $2
000285A8 D4FF                       	dc.b $D4, $FF
000285AA 350D                       	dc.b $35, $D
000285AC 03                         Shadow_DPLC_46: dc.b $3
000285AD 2511                       	dc.b $25, $11
000285AF 2514                       	dc.b $25, $14
000285B1 F517                       	dc.b $F5, $17
000285B3 03                         Shadow_DPLC_47: dc.b $3
000285B4 B527                       	dc.b $B5, $27
000285B6 7533                       	dc.b $75, $33
000285B8 053B                       	dc.b $5, $3B
000285BA 03                         Shadow_DPLC_48: dc.b $3
000285BB 753C                       	dc.b $75, $3C
000285BD 3544                       	dc.b $35, $44
000285BF 2548                       	dc.b $25, $48
000285C1 02                         Shadow_DPLC_49: dc.b $2
000285C2 F54B                       	dc.b $F5, $4B
000285C4 155B                       	dc.b $15, $5B
000285C6 03                         Shadow_DPLC_4A: dc.b $3
000285C7 755D                       	dc.b $75, $5D
000285C9 0565                       	dc.b $5, $65
000285CB 3566                       	dc.b $35, $66
000285CD 03                         Shadow_DPLC_4B: dc.b $3
000285CE 753C                       	dc.b $75, $3C
000285D0 3544                       	dc.b $35, $44
000285D2 2548                       	dc.b $25, $48
000285D4 03                         Shadow_DPLC_4C: dc.b $3
000285D5 E56A                       	dc.b $E5, $6A
000285D7 0579                       	dc.b $5, $79
000285D9 022C                       	dc.b $2, $2C
000285DB 02                         Shadow_DPLC_4D: dc.b $2
000285DC F57A                       	dc.b $F5, $7A
000285DE 258A                       	dc.b $25, $8A
000285E0 02                         Shadow_DPLC_4E: dc.b $2
000285E1 F58D                       	dc.b $F5, $8D
000285E3 259D                       	dc.b $25, $9D
000285E5 02                         Shadow_DPLC_4F: dc.b $2
000285E6 85A0                       	dc.b $85, $A0
000285E8 75A9                       	dc.b $75, $A9
000285EA 03                         Shadow_DPLC_50: dc.b $3
000285EB 85B1                       	dc.b $85, $B1
000285ED 25BA                       	dc.b $25, $BA
000285EF 15BD                       	dc.b $15, $BD
000285F1 02                         Shadow_DPLC_51: dc.b $2
000285F2 85BF                       	dc.b $85, $BF
000285F4 75C8                       	dc.b $75, $C8
000285F6 03                         Shadow_DPLC_52: dc.b $3
000285F7 85D0                       	dc.b $85, $D0
000285F9 25D9                       	dc.b $25, $D9
000285FB 15DC                       	dc.b $15, $DC
000285FD 03                         Shadow_DPLC_53: dc.b $3
000285FE F5DE                       	dc.b $F5, $DE
00028600 55EE                       	dc.b $55, $EE
00028602 05F4                       	dc.b $5, $F4
00028604 05                         Shadow_DPLC_54: dc.b $5
00028605 F5F5                       	dc.b $F5, $F5
00028607 0605                       	dc.b $6, $5
00028609 45E4                       	dc.b $45, $E4
0002860B 05F3                       	dc.b $5, $F3
0002860D 05DF                       	dc.b $5, $DF
0002860F 03                         Shadow_DPLC_55: dc.b $3
00028610 753C                       	dc.b $75, $3C
00028612 3544                       	dc.b $35, $44
00028614 2548                       	dc.b $25, $48
00028616 03                         Shadow_DPLC_56: dc.b $3
00028617 755D                       	dc.b $75, $5D
00028619 0565                       	dc.b $5, $65
0002861B 3566                       	dc.b $35, $66
0002861D 02                         Shadow_DPLC_57: dc.b $2
0002861E F606                       	dc.b $F6, $6
00028620 1616                       	dc.b $16, $16
00028622 04                         Shadow_DPLC_58: dc.b $4
00028623 F618                       	dc.b $F6, $18
00028625 3628                       	dc.b $36, $28
00028627 062C                       	dc.b $6, $2C
00028629 062D                       	dc.b $6, $2D
0002862B 02                         Shadow_DPLC_59: dc.b $2
0002862C F62E                       	dc.b $F6, $2E
0002862E 1612                       	dc.b $16, $12
00028630 01                         Shadow_DPLC_5A: dc.b $1
00028631 D63E                       	dc.b $D6, $3E
00028633 01                         Shadow_DPLC_5B: dc.b $1
00028634 D64C                       	dc.b $D6, $4C
00028636 02                         Shadow_DPLC_5C: dc.b $2
00028637 B65A                       	dc.b $B6, $5A
00028639 1658                       	dc.b $16, $58
0002863B 01                         Shadow_DPLC_5D: dc.b $1
0002863C D666                       	dc.b $D6, $66
0002863E 03                         Shadow_DPLC_5E: dc.b $3
0002863F 8674                       	dc.b $86, $74
00028641 167D                       	dc.b $16, $7D
00028643 2655                       	dc.b $26, $55
00028645 03                         Shadow_DPLC_5F: dc.b $3
00028646 867F                       	dc.b $86, $7F
00028648 1688                       	dc.b $16, $88
0002864A 2655                       	dc.b $26, $55
0002864C 02                         Shadow_DPLC_60: dc.b $2
0002864D F68A                       	dc.b $F6, $8A
0002864F 369A                       	dc.b $36, $9A
00028651 02                         Shadow_DPLC_61: dc.b $2
00028652 F69E                       	dc.b $F6, $9E
00028654 36AE                       	dc.b $36, $AE
00028656 02                         Shadow_DPLC_62: dc.b $2
00028657 F6B2                       	dc.b $F6, $B2
00028659 46C2                       	dc.b $46, $C2
0002865B 02                         Shadow_DPLC_63: dc.b $2
0002865C F6C7                       	dc.b $F6, $C7
0002865E 36D7                       	dc.b $36, $D7
00028660 02                         Shadow_DPLC_64: dc.b $2
00028661 F6DB                       	dc.b $F6, $DB
00028663 06EB                       	dc.b $6, $EB
00028665 01                         Shadow_DPLC_65: dc.b $1
00028666 F6EC                       	dc.b $F6, $EC
00028668 02                         Shadow_DPLC_66: dc.b $2
00028669 F6FC                       	dc.b $F6, $FC
0002866B 070C                       	dc.b $7, $C
0002866D 01                         Shadow_DPLC_67: dc.b $1
0002866E F70D                       	dc.b $F7, $D
00028670 02                         Shadow_DPLC_68: dc.b $2
00028671 F71D                       	dc.b $F7, $1D
00028673 172D                       	dc.b $17, $2D
00028675 02                         Shadow_DPLC_69: dc.b $2
00028676 B72F                       	dc.b $B7, $2F
00028678 200E                       	dc.b $20, $E
0002867A 07                         Shadow_DPLC_6A: dc.b $7
0002867B 2027                       	dc.b $20, $27
0002867D 0707                       	dc.b $7, $7
0002867F 0703                       	dc.b $7, $3
00028681 06F4                       	dc.b $6, $F4
00028683 272F                       	dc.b $27, $2F
00028685 2733                       	dc.b $27, $33
00028687 2737                       	dc.b $27, $37
00028689 01                         Shadow_DPLC_6B: dc.b $1
0002868A F73B                       	dc.b $F7, $3B
0002868C 01                         Shadow_DPLC_6C: dc.b $1
0002868D F79B                       	dc.b $F7, $9B
0002868F 01                         Shadow_DPLC_6D: dc.b $1
00028690 F74B                       	dc.b $F7, $4B
00028692 01                         Shadow_DPLC_6E: dc.b $1
00028693 F75B                       	dc.b $F7, $5B
00028695 01                         Shadow_DPLC_6F: dc.b $1
00028696 F76B                       	dc.b $F7, $6B
00028698 01                         Shadow_DPLC_70: dc.b $1
00028699 F77B                       	dc.b $F7, $7B
0002869B 01                         Shadow_DPLC_71: dc.b $1
0002869C F78B                       	dc.b $F7, $8B
0002869E                            	even
0002869E                            	even
0002869E                            MetalDynPLC:
0002869E                            	include "_inc\Metal dynamic pattern load cues.asm"
0002869E                            ; ================================================================================
0002869E                            ; Sprite DPLCs - generated by Flex 2 Fri May 04 2018 20:29:34 GMT-0400 (Eastern Daylight Time)
0002869E                            ; ================================================================================
0002869E                            
0002869E                            Metal_PLC:
0002869E 0000 0000                  	dc.w Metal_PLC_0-Metal_PLC, Metal_PLC_1-Metal_PLC
000286A2 0000 0000                  	dc.w Metal_PLC_2-Metal_PLC, Metal_PLC_3-Metal_PLC
000286A6 0000 0000                  	dc.w Metal_PLC_4-Metal_PLC, Metal_PLC_5-Metal_PLC
000286AA 0000 0000                  	dc.w Metal_PLC_6-Metal_PLC, Metal_PLC_7-Metal_PLC
000286AE 0000 0000                  	dc.w Metal_PLC_8-Metal_PLC, Metal_PLC_9-Metal_PLC
000286B2 0000 0000                  	dc.w Metal_PLC_A-Metal_PLC, Metal_PLC_B-Metal_PLC
000286B6 0000 0000                  	dc.w Metal_PLC_C-Metal_PLC, Metal_PLC_D-Metal_PLC
000286BA 0000 0000                  	dc.w Metal_PLC_E-Metal_PLC, Metal_PLC_F-Metal_PLC
000286BE 0000 0000                  	dc.w Metal_PLC_10-Metal_PLC, Metal_PLC_11-Metal_PLC
000286C2 0000 0000                  	dc.w Metal_PLC_12-Metal_PLC, Metal_PLC_13-Metal_PLC
000286C6 0000 0000                  	dc.w Metal_PLC_14-Metal_PLC, Metal_PLC_15-Metal_PLC
000286CA 0000 0000                  	dc.w Metal_PLC_16-Metal_PLC, Metal_PLC_17-Metal_PLC
000286CE 0000 0000                  	dc.w Metal_PLC_18-Metal_PLC, Metal_PLC_19-Metal_PLC
000286D2 0000 0000                  	dc.w Metal_PLC_1A-Metal_PLC, Metal_PLC_1B-Metal_PLC
000286D6 0000 0000                  	dc.w Metal_PLC_1C-Metal_PLC, Metal_PLC_1D-Metal_PLC
000286DA 0000 0000                  	dc.w Metal_PLC_1E-Metal_PLC, Metal_PLC_1F-Metal_PLC
000286DE 0000 0000                  	dc.w Metal_PLC_20-Metal_PLC, Metal_PLC_21-Metal_PLC
000286E2 0000 0000                  	dc.w Metal_PLC_22-Metal_PLC, Metal_PLC_23-Metal_PLC
000286E6 0000 0000                  	dc.w Metal_PLC_24-Metal_PLC, Metal_PLC_25-Metal_PLC
000286EA 0000 0000                  	dc.w Metal_PLC_26-Metal_PLC, Metal_PLC_27-Metal_PLC
000286EE 0000 0000                  	dc.w Metal_PLC_28-Metal_PLC, Metal_PLC_29-Metal_PLC
000286F2 0000 0000                  	dc.w Metal_PLC_2A-Metal_PLC, Metal_PLC_2B-Metal_PLC
000286F6 0000 0000                  	dc.w Metal_PLC_2C-Metal_PLC, Metal_PLC_2D-Metal_PLC
000286FA 0000 0000                  	dc.w Metal_PLC_2E-Metal_PLC, Metal_PLC_2F-Metal_PLC
000286FE 0000 0000                  	dc.w Metal_PLC_30-Metal_PLC, Metal_PLC_31-Metal_PLC
00028702 0000 0000                  	dc.w Metal_PLC_32-Metal_PLC, Metal_PLC_33-Metal_PLC
00028706 0000 0000                  	dc.w Metal_PLC_34-Metal_PLC, Metal_PLC_35-Metal_PLC
0002870A 0000 0000                  	dc.w Metal_PLC_36-Metal_PLC, Metal_PLC_37-Metal_PLC
0002870E 0000 0000                  	dc.w Metal_PLC_38-Metal_PLC, Metal_PLC_39-Metal_PLC
00028712 0000 0000                  	dc.w Metal_PLC_3A-Metal_PLC, Metal_PLC_3B-Metal_PLC
00028716 0000 0000                  	dc.w Metal_PLC_3C-Metal_PLC, Metal_PLC_3D-Metal_PLC
0002871A 0000 0000                  	dc.w Metal_PLC_3E-Metal_PLC, Metal_PLC_3F-Metal_PLC
0002871E 0000 0000                  	dc.w Metal_PLC_40-Metal_PLC, Metal_PLC_41-Metal_PLC
00028722 0000 0000                  	dc.w Metal_PLC_42-Metal_PLC, Metal_PLC_43-Metal_PLC
00028726 0000 0000                  	dc.w Metal_PLC_44-Metal_PLC, Metal_PLC_45-Metal_PLC
0002872A 0000 0000                  	dc.w Metal_PLC_46-Metal_PLC, Metal_PLC_47-Metal_PLC
0002872E 0000 0000                  	dc.w Metal_PLC_48-Metal_PLC, Metal_PLC_49-Metal_PLC
00028732 0000 0000                  	dc.w Metal_PLC_4A-Metal_PLC, Metal_PLC_4B-Metal_PLC
00028736 0000 0000                  	dc.w Metal_PLC_4C-Metal_PLC, Metal_PLC_4D-Metal_PLC
0002873A 0000 0000                  	dc.w Metal_PLC_4E-Metal_PLC, Metal_PLC_4F-Metal_PLC
0002873E 0000 0000                  	dc.w Metal_PLC_50-Metal_PLC, Metal_PLC_51-Metal_PLC
00028742 0000 0000                  	dc.w Metal_PLC_52-Metal_PLC, Metal_PLC_53-Metal_PLC
00028746 0000 0000                  	dc.w Metal_PLC_54-Metal_PLC, Metal_PLC_55-Metal_PLC
0002874A 0000 0000                  	dc.w Metal_PLC_56-Metal_PLC, Metal_PLC_57-Metal_PLC
0002874E 0000 0000                  	dc.w Metal_PLC_58-Metal_PLC, Metal_PLC_59-Metal_PLC
00028752 0000 0000                  	dc.w Metal_PLC_5A-Metal_PLC, Metal_PLC_5B-Metal_PLC
00028756 0000 0000                  	dc.w Metal_PLC_5C-Metal_PLC, Metal_PLC_5D-Metal_PLC
0002875A 0000 0000                  	dc.w Metal_PLC_5E-Metal_PLC, Metal_PLC_5F-Metal_PLC
0002875E 0000 0000                  	dc.w Metal_PLC_60-Metal_PLC, Metal_PLC_61-Metal_PLC
00028762 0000 0000                  	dc.w Metal_PLC_62-Metal_PLC, Metal_PLC_63-Metal_PLC
00028766 0000 0000                  	dc.w Metal_PLC_64-Metal_PLC, Metal_PLC_65-Metal_PLC
0002876A 0000 0000                  	dc.w Metal_PLC_66-Metal_PLC, Metal_PLC_67-Metal_PLC
0002876E 0000 0000                  	dc.w Metal_PLC_68-Metal_PLC, Metal_PLC_69-Metal_PLC
00028772 0000 0000                  	dc.w Metal_PLC_6A-Metal_PLC, Metal_PLC_6B-Metal_PLC
00028776 0000 0000                  	dc.w Metal_PLC_6C-Metal_PLC, Metal_PLC_6D-Metal_PLC
0002877A 0000 0000                  	dc.w Metal_PLC_6E-Metal_PLC, Metal_PLC_6F-Metal_PLC
0002877E 0000 0000                  	dc.w Metal_PLC_70-Metal_PLC, Metal_PLC_71-Metal_PLC
00028782 0000 0000                  	dc.w Metal_PLC_72-Metal_PLC, Metal_PLC_73-Metal_PLC
00028786 0000 0000                  	dc.w Metal_PLC_74-Metal_PLC, Metal_PLC_75-Metal_PLC
0002878A 0000 0000                  	dc.w Metal_PLC_76-Metal_PLC, Metal_PLC_77-Metal_PLC
0002878E 0000 0000                  	dc.w Metal_PLC_78-Metal_PLC, Metal_PLC_79-Metal_PLC
00028792 0000 0000                  	dc.w Metal_PLC_7A-Metal_PLC, Metal_PLC_7B-Metal_PLC
00028796 0000 0000                  	dc.w Metal_PLC_7C-Metal_PLC, Metal_PLC_7D-Metal_PLC
0002879A 00                         Metal_PLC_0: dc.b $0
0002879B 04                         Metal_PLC_1: dc.b $4
0002879C 2000                       	dc.b $20, $0
0002879E 7003                       	dc.b $70, $3
000287A0 200B                       	dc.b $20, $B
000287A2 200E                       	dc.b $20, $E
000287A4 03                         Metal_PLC_2: dc.b $3
000287A5 5011                       	dc.b $50, $11
000287A7 5017                       	dc.b $50, $17
000287A9 201D                       	dc.b $20, $1D
000287AB 03                         Metal_PLC_3: dc.b $3
000287AC 5020                       	dc.b $50, $20
000287AE 5017                       	dc.b $50, $17
000287B0 201D                       	dc.b $20, $1D
000287B2 03                         Metal_PLC_4: dc.b $3
000287B3 5020                       	dc.b $50, $20
000287B5 5017                       	dc.b $50, $17
000287B7 2026                       	dc.b $20, $26
000287B9 05                         Metal_PLC_5: dc.b $5
000287BA 8029                       	dc.b $80, $29
000287BC 200B                       	dc.b $20, $B
000287BE 200E                       	dc.b $20, $E
000287C0 0032                       	dc.b $0, $32
000287C2 0033                       	dc.b $0, $33
000287C4 04                         Metal_PLC_6: dc.b $4
000287C5 7034                       	dc.b $70, $34
000287C7 503C                       	dc.b $50, $3C
000287C9 5042                       	dc.b $50, $42
000287CB 1048                       	dc.b $10, $48
000287CD 02                         Metal_PLC_7: dc.b $2
000287CE 7034                       	dc.b $70, $34
000287D0 B04A                       	dc.b $B0, $4A
000287D2 03                         Metal_PLC_8: dc.b $3
000287D3 8056                       	dc.b $80, $56
000287D5 005F                       	dc.b $0, $5F
000287D7 5060                       	dc.b $50, $60
000287D9 04                         Metal_PLC_9: dc.b $4
000287DA 5060                       	dc.b $50, $60
000287DC 5066                       	dc.b $50, $66
000287DE 506C                       	dc.b $50, $6C
000287E0 1072                       	dc.b $10, $72
000287E2 03                         Metal_PLC_A: dc.b $3
000287E3 5060                       	dc.b $50, $60
000287E5 B074                       	dc.b $B0, $74
000287E7 005F                       	dc.b $0, $5F
000287E9 03                         Metal_PLC_B: dc.b $3
000287EA 7034                       	dc.b $70, $34
000287EC 3080                       	dc.b $30, $80
000287EE 5084                       	dc.b $50, $84
000287F0 05                         Metal_PLC_C: dc.b $5
000287F1 508A                       	dc.b $50, $8A
000287F3 5090                       	dc.b $50, $90
000287F5 2096                       	dc.b $20, $96
000287F7 5099                       	dc.b $50, $99
000287F9 009F                       	dc.b $0, $9F
000287FB 06                         Metal_PLC_D: dc.b $6
000287FC 508A                       	dc.b $50, $8A
000287FE 10A0                       	dc.b $10, $A0
00028800 30A2                       	dc.b $30, $A2
00028802 50A6                       	dc.b $50, $A6
00028804 30AC                       	dc.b $30, $AC
00028806 00B0                       	dc.b $0, $B0
00028808 04                         Metal_PLC_E: dc.b $4
00028809 50B1                       	dc.b $50, $B1
0002880B 10B7                       	dc.b $10, $B7
0002880D 70B9                       	dc.b $70, $B9
0002880F 20C1                       	dc.b $20, $C1
00028811 07                         Metal_PLC_F: dc.b $7
00028812 50C4                       	dc.b $50, $C4
00028814 70CA                       	dc.b $70, $CA
00028816 20D2                       	dc.b $20, $D2
00028818 10D5                       	dc.b $10, $D5
0002881A 10D7                       	dc.b $10, $D7
0002881C 00D9                       	dc.b $0, $D9
0002881E 00DA                       	dc.b $0, $DA
00028820 04                         Metal_PLC_10: dc.b $4
00028821 50C4                       	dc.b $50, $C4
00028823 10D7                       	dc.b $10, $D7
00028825 70DB                       	dc.b $70, $DB
00028827 20E3                       	dc.b $20, $E3
00028829 05                         Metal_PLC_11: dc.b $5
0002882A 508A                       	dc.b $50, $8A
0002882C 10A0                       	dc.b $10, $A0
0002882E 0096                       	dc.b $0, $96
00028830 70E6                       	dc.b $70, $E6
00028832 20EE                       	dc.b $20, $EE
00028834 04                         Metal_PLC_12: dc.b $4
00028835 70F1                       	dc.b $70, $F1
00028837 50F9                       	dc.b $50, $F9
00028839 10FF                       	dc.b $10, $FF
0002883B 5101                       	dc.b $51, $1
0002883D 02                         Metal_PLC_13: dc.b $2
0002883E 70F1                       	dc.b $70, $F1
00028840 B107                       	dc.b $B1, $7
00028842 02                         Metal_PLC_14: dc.b $2
00028843 5113                       	dc.b $51, $13
00028845 8119                       	dc.b $81, $19
00028847 04                         Metal_PLC_15: dc.b $4
00028848 5113                       	dc.b $51, $13
0002884A 5122                       	dc.b $51, $22
0002884C 1128                       	dc.b $11, $28
0002884E 512A                       	dc.b $51, $2A
00028850 02                         Metal_PLC_16: dc.b $2
00028851 5113                       	dc.b $51, $13
00028853 B130                       	dc.b $B1, $30
00028855 03                         Metal_PLC_17: dc.b $3
00028856 70F1                       	dc.b $70, $F1
00028858 0107                       	dc.b $1, $7
0002885A 813C                       	dc.b $81, $3C
0002885C 05                         Metal_PLC_18: dc.b $5
0002885D 5145                       	dc.b $51, $45
0002885F 114B                       	dc.b $11, $4B
00028861 114D                       	dc.b $11, $4D
00028863 814F                       	dc.b $81, $4F
00028865 0158                       	dc.b $1, $58
00028867 05                         Metal_PLC_19: dc.b $5
00028868 5145                       	dc.b $51, $45
0002886A 2159                       	dc.b $21, $59
0002886C 115C                       	dc.b $11, $5C
0002886E 115E                       	dc.b $11, $5E
00028870 8160                       	dc.b $81, $60
00028872 04                         Metal_PLC_1A: dc.b $4
00028873 5169                       	dc.b $51, $69
00028875 116F                       	dc.b $11, $6F
00028877 8171                       	dc.b $81, $71
00028879 117A                       	dc.b $11, $7A
0002887B 07                         Metal_PLC_1B: dc.b $7
0002887C 217C                       	dc.b $21, $7C
0002887E 717F                       	dc.b $71, $7F
00028880 2187                       	dc.b $21, $87
00028882 1169                       	dc.b $11, $69
00028884 216C                       	dc.b $21, $6C
00028886 116F                       	dc.b $11, $6F
00028888 018A                       	dc.b $1, $8A
0002888A 04                         Metal_PLC_1C: dc.b $4
0002888B 518B                       	dc.b $51, $8B
0002888D 1191                       	dc.b $11, $91
0002888F 8193                       	dc.b $81, $93
00028891 119C                       	dc.b $11, $9C
00028893 04                         Metal_PLC_1D: dc.b $4
00028894 5145                       	dc.b $51, $45
00028896 819E                       	dc.b $81, $9E
00028898 115E                       	dc.b $11, $5E
0002889A 11A7                       	dc.b $11, $A7
0002889C 02                         Metal_PLC_1E: dc.b $2
0002889D 51A9                       	dc.b $51, $A9
0002889F B1AF                       	dc.b $B1, $AF
000288A1 02                         Metal_PLC_1F: dc.b $2
000288A2 5060                       	dc.b $50, $60
000288A4 B1BB                       	dc.b $B1, $BB
000288A6 02                         Metal_PLC_20: dc.b $2
000288A7 51A9                       	dc.b $51, $A9
000288A9 B1C7                       	dc.b $B1, $C7
000288AB 02                         Metal_PLC_21: dc.b $2
000288AC 5060                       	dc.b $50, $60
000288AE B1D3                       	dc.b $B1, $D3
000288B0 04                         Metal_PLC_22: dc.b $4
000288B1 51DF                       	dc.b $51, $DF
000288B3 11E5                       	dc.b $11, $E5
000288B5 B1E7                       	dc.b $B1, $E7
000288B7 01F3                       	dc.b $1, $F3
000288B9 03                         Metal_PLC_23: dc.b $3
000288BA 51F4                       	dc.b $51, $F4
000288BC 11FA                       	dc.b $11, $FA
000288BE B1FC                       	dc.b $B1, $FC
000288C0 04                         Metal_PLC_24: dc.b $4
000288C1 51DF                       	dc.b $51, $DF
000288C3 1208                       	dc.b $12, $8
000288C5 B20A                       	dc.b $B2, $A
000288C7 01F3                       	dc.b $1, $F3
000288C9 03                         Metal_PLC_25: dc.b $3
000288CA 51F4                       	dc.b $51, $F4
000288CC 11FA                       	dc.b $11, $FA
000288CE B216                       	dc.b $B2, $16
000288D0 02                         Metal_PLC_26: dc.b $2
000288D1 5222                       	dc.b $52, $22
000288D3 B228                       	dc.b $B2, $28
000288D5 02                         Metal_PLC_27: dc.b $2
000288D6 5113                       	dc.b $51, $13
000288D8 B234                       	dc.b $B2, $34
000288DA 02                         Metal_PLC_28: dc.b $2
000288DB 5222                       	dc.b $52, $22
000288DD B240                       	dc.b $B2, $40
000288DF 02                         Metal_PLC_29: dc.b $2
000288E0 5113                       	dc.b $51, $13
000288E2 B24C                       	dc.b $B2, $4C
000288E4 04                         Metal_PLC_2A: dc.b $4
000288E5 5258                       	dc.b $52, $58
000288E7 125E                       	dc.b $12, $5E
000288E9 B260                       	dc.b $B2, $60
000288EB 026C                       	dc.b $2, $6C
000288ED 02                         Metal_PLC_2B: dc.b $2
000288EE 726D                       	dc.b $72, $6D
000288F0 B275                       	dc.b $B2, $75
000288F2 04                         Metal_PLC_2C: dc.b $4
000288F3 5258                       	dc.b $52, $58
000288F5 1281                       	dc.b $12, $81
000288F7 B283                       	dc.b $B2, $83
000288F9 026C                       	dc.b $2, $6C
000288FB 02                         Metal_PLC_2D: dc.b $2
000288FC 726D                       	dc.b $72, $6D
000288FE B28F                       	dc.b $B2, $8F
00028900 01                         Metal_PLC_2E: dc.b $1
00028901 F29B                       	dc.b $F2, $9B
00028903 01                         Metal_PLC_2F: dc.b $1
00028904 F2AB                       	dc.b $F2, $AB
00028906 01                         Metal_PLC_30: dc.b $1
00028907 F2BB                       	dc.b $F2, $BB
00028909 01                         Metal_PLC_31: dc.b $1
0002890A F2CB                       	dc.b $F2, $CB
0002890C 01                         Metal_PLC_32: dc.b $1
0002890D F2DB                       	dc.b $F2, $DB
0002890F 00                         Metal_PLC_33: dc.b $0
00028910 00                         Metal_PLC_34: dc.b $0
00028911 00                         Metal_PLC_35: dc.b $0
00028912 00                         Metal_PLC_36: dc.b $0
00028913 02                         Metal_PLC_37: dc.b $2
00028914 52EB                       	dc.b $52, $EB
00028916 B2F1                       	dc.b $B2, $F1
00028918 04                         Metal_PLC_38: dc.b $4
00028919 52FD                       	dc.b $52, $FD
0002891B 7303                       	dc.b $73, $3
0002891D 130B                       	dc.b $13, $B
0002891F 030D                       	dc.b $3, $D
00028921 04                         Metal_PLC_39: dc.b $4
00028922 130E                       	dc.b $13, $E
00028924 7310                       	dc.b $73, $10
00028926 2318                       	dc.b $23, $18
00028928 031B                       	dc.b $3, $1B
0002892A 03                         Metal_PLC_3A: dc.b $3
0002892B 231C                       	dc.b $23, $1C
0002892D 231F                       	dc.b $23, $1F
0002892F F322                       	dc.b $F3, $22
00028931 03                         Metal_PLC_3B: dc.b $3
00028932 B332                       	dc.b $B3, $32
00028934 733E                       	dc.b $73, $3E
00028936 0074                       	dc.b $0, $74
00028938 03                         Metal_PLC_3C: dc.b $3
00028939 7346                       	dc.b $73, $46
0002893B 334E                       	dc.b $33, $4E
0002893D 2352                       	dc.b $23, $52
0002893F 01                         Metal_PLC_3D: dc.b $1
00028940 8355                       	dc.b $83, $55
00028942 03                         Metal_PLC_3E: dc.b $3
00028943 735E                       	dc.b $73, $5E
00028945 0366                       	dc.b $3, $66
00028947 3367                       	dc.b $33, $67
00028949 03                         Metal_PLC_3F: dc.b $3
0002894A 736B                       	dc.b $73, $6B
0002894C 3373                       	dc.b $33, $73
0002894E 2377                       	dc.b $23, $77
00028950 04                         Metal_PLC_40: dc.b $4
00028951 B37A                       	dc.b $B3, $7A
00028953 1386                       	dc.b $13, $86
00028955 0388                       	dc.b $3, $88
00028957 0389                       	dc.b $3, $89
00028959 04                         Metal_PLC_41: dc.b $4
0002895A B38A                       	dc.b $B3, $8A
0002895C 3396                       	dc.b $33, $96
0002895E 039A                       	dc.b $3, $9A
00028960 039B                       	dc.b $3, $9B
00028962 04                         Metal_PLC_42: dc.b $4
00028963 B39C                       	dc.b $B3, $9C
00028965 33A8                       	dc.b $33, $A8
00028967 03AC                       	dc.b $3, $AC
00028969 03AD                       	dc.b $3, $AD
0002896B 00                         Metal_PLC_43: dc.b $0
0002896C 00                         Metal_PLC_44: dc.b $0
0002896D 02                         Metal_PLC_45: dc.b $2
0002896E 83AE                       	dc.b $83, $AE
00028970 73B7                       	dc.b $73, $B7
00028972 03                         Metal_PLC_46: dc.b $3
00028973 83BF                       	dc.b $83, $BF
00028975 23C8                       	dc.b $23, $C8
00028977 13CB                       	dc.b $13, $CB
00028979 02                         Metal_PLC_47: dc.b $2
0002897A 83CD                       	dc.b $83, $CD
0002897C 73D6                       	dc.b $73, $D6
0002897E 03                         Metal_PLC_48: dc.b $3
0002897F 83BF                       	dc.b $83, $BF
00028981 23DE                       	dc.b $23, $DE
00028983 13E1                       	dc.b $13, $E1
00028985 00                         Metal_PLC_49: dc.b $0
00028986 00                         Metal_PLC_4A: dc.b $0
00028987 00                         Metal_PLC_4B: dc.b $0
00028988 05                         Metal_PLC_4C: dc.b $5
00028989 73E3                       	dc.b $73, $E3
0002898B 13EB                       	dc.b $13, $EB
0002898D 53ED                       	dc.b $53, $ED
0002898F 33F3                       	dc.b $33, $F3
00028991 03F7                       	dc.b $3, $F7
00028993 05                         Metal_PLC_4D: dc.b $5
00028994 73F8                       	dc.b $73, $F8
00028996 13EB                       	dc.b $13, $EB
00028998 5400                       	dc.b $54, $0
0002899A 33F3                       	dc.b $33, $F3
0002899C 03F7                       	dc.b $3, $F7
0002899E 00                         Metal_PLC_4E: dc.b $0
0002899F 00                         Metal_PLC_4F: dc.b $0
000289A0 00                         Metal_PLC_50: dc.b $0
000289A1 00                         Metal_PLC_51: dc.b $0
000289A2 00                         Metal_PLC_52: dc.b $0
000289A3 03                         Metal_PLC_53: dc.b $3
000289A4 7346                       	dc.b $73, $46
000289A6 334E                       	dc.b $33, $4E
000289A8 2352                       	dc.b $23, $52
000289AA 03                         Metal_PLC_54: dc.b $3
000289AB 735E                       	dc.b $73, $5E
000289AD 0366                       	dc.b $3, $66
000289AF 3367                       	dc.b $33, $67
000289B1 03                         Metal_PLC_55: dc.b $3
000289B2 B406                       	dc.b $B4, $6
000289B4 1412                       	dc.b $14, $12
000289B6 3414                       	dc.b $34, $14
000289B8 03                         Metal_PLC_56: dc.b $3
000289B9 5418                       	dc.b $54, $18
000289BB B41E                       	dc.b $B4, $1E
000289BD 1070                       	dc.b $10, $70
000289BF 02                         Metal_PLC_57: dc.b $2
000289C0 F42A                       	dc.b $F4, $2A
000289C2 243A                       	dc.b $24, $3A
000289C4 02                         Metal_PLC_58: dc.b $2
000289C5 243D                       	dc.b $24, $3D
000289C7 B440                       	dc.b $B4, $40
000289C9 01                         Metal_PLC_59: dc.b $1
000289CA F44C                       	dc.b $F4, $4C
000289CC 01                         Metal_PLC_5A: dc.b $1
000289CD F45C                       	dc.b $F4, $5C
000289CF 01                         Metal_PLC_5B: dc.b $1
000289D0 F46C                       	dc.b $F4, $6C
000289D2 01                         Metal_PLC_5C: dc.b $1
000289D3 F47C                       	dc.b $F4, $7C
000289D5 01                         Metal_PLC_5D: dc.b $1
000289D6 F48C                       	dc.b $F4, $8C
000289D8 05                         Metal_PLC_5E: dc.b $5
000289D9 F49C                       	dc.b $F4, $9C
000289DB 04AC                       	dc.b $4, $AC
000289DD 04AD                       	dc.b $4, $AD
000289DF 04AE                       	dc.b $4, $AE
000289E1 04AF                       	dc.b $4, $AF
000289E3 05                         Metal_PLC_5F: dc.b $5
000289E4 F4B0                       	dc.b $F4, $B0
000289E6 04C0                       	dc.b $4, $C0
000289E8 04C1                       	dc.b $4, $C1
000289EA 04C2                       	dc.b $4, $C2
000289EC 04C3                       	dc.b $4, $C3
000289EE 05                         Metal_PLC_60: dc.b $5
000289EF F4C4                       	dc.b $F4, $C4
000289F1 04D4                       	dc.b $4, $D4
000289F3 04D5                       	dc.b $4, $D5
000289F5 04D6                       	dc.b $4, $D6
000289F7 04D7                       	dc.b $4, $D7
000289F9 05                         Metal_PLC_61: dc.b $5
000289FA F4D8                       	dc.b $F4, $D8
000289FC 04E8                       	dc.b $4, $E8
000289FE 04E9                       	dc.b $4, $E9
00028A00 04EA                       	dc.b $4, $EA
00028A02 04EB                       	dc.b $4, $EB
00028A04 05                         Metal_PLC_62: dc.b $5
00028A05 F4EC                       	dc.b $F4, $EC
00028A07 04FC                       	dc.b $4, $FC
00028A09 04FD                       	dc.b $4, $FD
00028A0B 04FE                       	dc.b $4, $FE
00028A0D 04FF                       	dc.b $4, $FF
00028A0F 05                         Metal_PLC_63: dc.b $5
00028A10 F500                       	dc.b $F5, $0
00028A12 0510                       	dc.b $5, $10
00028A14 0511                       	dc.b $5, $11
00028A16 0512                       	dc.b $5, $12
00028A18 0513                       	dc.b $5, $13
00028A1A 05                         Metal_PLC_64: dc.b $5
00028A1B F514                       	dc.b $F5, $14
00028A1D 0524                       	dc.b $5, $24
00028A1F 0525                       	dc.b $5, $25
00028A21 0526                       	dc.b $5, $26
00028A23 0527                       	dc.b $5, $27
00028A25 05                         Metal_PLC_65: dc.b $5
00028A26 F528                       	dc.b $F5, $28
00028A28 0538                       	dc.b $5, $38
00028A2A 0539                       	dc.b $5, $39
00028A2C 053A                       	dc.b $5, $3A
00028A2E 053B                       	dc.b $5, $3B
00028A30 05                         Metal_PLC_66: dc.b $5
00028A31 F53C                       	dc.b $F5, $3C
00028A33 054C                       	dc.b $5, $4C
00028A35 054D                       	dc.b $5, $4D
00028A37 054E                       	dc.b $5, $4E
00028A39 054F                       	dc.b $5, $4F
00028A3B 05                         Metal_PLC_67: dc.b $5
00028A3C F550                       	dc.b $F5, $50
00028A3E 0560                       	dc.b $5, $60
00028A40 0561                       	dc.b $5, $61
00028A42 0562                       	dc.b $5, $62
00028A44 0563                       	dc.b $5, $63
00028A46 05                         Metal_PLC_68: dc.b $5
00028A47 F564                       	dc.b $F5, $64
00028A49 0574                       	dc.b $5, $74
00028A4B 0575                       	dc.b $5, $75
00028A4D 0576                       	dc.b $5, $76
00028A4F 0577                       	dc.b $5, $77
00028A51 05                         Metal_PLC_69: dc.b $5
00028A52 F578                       	dc.b $F5, $78
00028A54 0588                       	dc.b $5, $88
00028A56 0589                       	dc.b $5, $89
00028A58 058A                       	dc.b $5, $8A
00028A5A 058B                       	dc.b $5, $8B
00028A5C 04                         Metal_PLC_6A: dc.b $4
00028A5D F58C                       	dc.b $F5, $8C
00028A5F 059C                       	dc.b $5, $9C
00028A61 059D                       	dc.b $5, $9D
00028A63 059E                       	dc.b $5, $9E
00028A65 04                         Metal_PLC_6B: dc.b $4
00028A66 F59F                       	dc.b $F5, $9F
00028A68 05AF                       	dc.b $5, $AF
00028A6A 05B0                       	dc.b $5, $B0
00028A6C 05B1                       	dc.b $5, $B1
00028A6E 04                         Metal_PLC_6C: dc.b $4
00028A6F F5B2                       	dc.b $F5, $B2
00028A71 05C2                       	dc.b $5, $C2
00028A73 05C3                       	dc.b $5, $C3
00028A75 05C4                       	dc.b $5, $C4
00028A77 04                         Metal_PLC_6D: dc.b $4
00028A78 F5C5                       	dc.b $F5, $C5
00028A7A 05D5                       	dc.b $5, $D5
00028A7C 05D6                       	dc.b $5, $D6
00028A7E 05D7                       	dc.b $5, $D7
00028A80 01                         Metal_PLC_6E: dc.b $1
00028A81 B5D8                       	dc.b $B5, $D8
00028A83 02                         Metal_PLC_6F: dc.b $2
00028A84 F5E4                       	dc.b $F5, $E4
00028A86 25F4                       	dc.b $25, $F4
00028A88 02                         Metal_PLC_70: dc.b $2
00028A89 F5F7                       	dc.b $F5, $F7
00028A8B 1607                       	dc.b $16, $7
00028A8D 03                         Metal_PLC_71: dc.b $3
00028A8E F609                       	dc.b $F6, $9
00028A90 05F8                       	dc.b $5, $F8
00028A92 0619                       	dc.b $6, $19
00028A94 01                         Metal_PLC_72: dc.b $1
00028A95 F61A                       	dc.b $F6, $1A
00028A97 02                         Metal_PLC_73: dc.b $2
00028A98 F62A                       	dc.b $F6, $2A
00028A9A 363A                       	dc.b $36, $3A
00028A9C 02                         Metal_PLC_74: dc.b $2
00028A9D F63E                       	dc.b $F6, $3E
00028A9F 364E                       	dc.b $36, $4E
00028AA1 02                         Metal_PLC_75: dc.b $2
00028AA2 F652                       	dc.b $F6, $52
00028AA4 5662                       	dc.b $56, $62
00028AA6 02                         Metal_PLC_76: dc.b $2
00028AA7 F668                       	dc.b $F6, $68
00028AA9 5678                       	dc.b $56, $78
00028AAB 01                         Metal_PLC_77: dc.b $1
00028AAC F67E                       	dc.b $F6, $7E
00028AAE 01                         Metal_PLC_78: dc.b $1
00028AAF F6DE                       	dc.b $F6, $DE
00028AB1 01                         Metal_PLC_79: dc.b $1
00028AB2 F68E                       	dc.b $F6, $8E
00028AB4 01                         Metal_PLC_7A: dc.b $1
00028AB5 F69E                       	dc.b $F6, $9E
00028AB7 01                         Metal_PLC_7B: dc.b $1
00028AB8 F6AE                       	dc.b $F6, $AE
00028ABA 01                         Metal_PLC_7C: dc.b $1
00028ABB F6BE                       	dc.b $F6, $BE
00028ABD 01                         Metal_PLC_7D: dc.b $1
00028ABE F6CE                       	dc.b $F6, $CE
00028AC0                            	even
00028AC0                            	even
00028AC0                            MightyDynPLC:
00028AC0                            	include "_inc\Mighty dynamic pattern load cues.asm"
00028AC0                            ; ================================================================================
00028AC0                            ; Sprite DPLCs - generated by Flex 2 Fri May 04 2018 20:29:10 GMT-0400 (Eastern Daylight Time)
00028AC0                            ; ================================================================================
00028AC0                            
00028AC0                            MightyPLC:
00028AC0 0000 0000                  	dc.w MightyPLC_0-MightyPLC, MightyPLC_1-MightyPLC
00028AC4 0000 0000                  	dc.w MightyPLC_2-MightyPLC, MightyPLC_3-MightyPLC
00028AC8 0000 0000                  	dc.w MightyPLC_4-MightyPLC, MightyPLC_5-MightyPLC
00028ACC 0000 0000                  	dc.w MightyPLC_6-MightyPLC, MightyPLC_7-MightyPLC
00028AD0 0000 0000                  	dc.w MightyPLC_8-MightyPLC, MightyPLC_9-MightyPLC
00028AD4 0000 0000                  	dc.w MightyPLC_A-MightyPLC, MightyPLC_B-MightyPLC
00028AD8 0000 0000                  	dc.w MightyPLC_C-MightyPLC, MightyPLC_D-MightyPLC
00028ADC 0000 0000                  	dc.w MightyPLC_E-MightyPLC, MightyPLC_F-MightyPLC
00028AE0 0000 0000                  	dc.w MightyPLC_10-MightyPLC, MightyPLC_11-MightyPLC
00028AE4 0000 0000                  	dc.w MightyPLC_12-MightyPLC, MightyPLC_13-MightyPLC
00028AE8 0000 0000                  	dc.w MightyPLC_14-MightyPLC, MightyPLC_15-MightyPLC
00028AEC 0000 0000                  	dc.w MightyPLC_16-MightyPLC, MightyPLC_17-MightyPLC
00028AF0 0000 0000                  	dc.w MightyPLC_18-MightyPLC, MightyPLC_19-MightyPLC
00028AF4 0000 0000                  	dc.w MightyPLC_1A-MightyPLC, MightyPLC_1B-MightyPLC
00028AF8 0000 0000                  	dc.w MightyPLC_1C-MightyPLC, MightyPLC_1D-MightyPLC
00028AFC 0000 0000                  	dc.w MightyPLC_1E-MightyPLC, MightyPLC_1F-MightyPLC
00028B00 0000 0000                  	dc.w MightyPLC_20-MightyPLC, MightyPLC_21-MightyPLC
00028B04 0000 0000                  	dc.w MightyPLC_22-MightyPLC, MightyPLC_23-MightyPLC
00028B08 0000 0000                  	dc.w MightyPLC_24-MightyPLC, MightyPLC_25-MightyPLC
00028B0C 0000 0000                  	dc.w MightyPLC_26-MightyPLC, MightyPLC_27-MightyPLC
00028B10 0000 0000                  	dc.w MightyPLC_28-MightyPLC, MightyPLC_29-MightyPLC
00028B14 0000 0000                  	dc.w MightyPLC_2A-MightyPLC, MightyPLC_2B-MightyPLC
00028B18 0000 0000                  	dc.w MightyPLC_2C-MightyPLC, MightyPLC_2D-MightyPLC
00028B1C 0000 0000                  	dc.w MightyPLC_2E-MightyPLC, MightyPLC_2F-MightyPLC
00028B20 0000 0000                  	dc.w MightyPLC_30-MightyPLC, MightyPLC_31-MightyPLC
00028B24 0000 0000                  	dc.w MightyPLC_32-MightyPLC, MightyPLC_33-MightyPLC
00028B28 0000 0000                  	dc.w MightyPLC_34-MightyPLC, MightyPLC_35-MightyPLC
00028B2C 0000 0000                  	dc.w MightyPLC_36-MightyPLC, MightyPLC_37-MightyPLC
00028B30 0000 0000                  	dc.w MightyPLC_38-MightyPLC, MightyPLC_39-MightyPLC
00028B34 0000 0000                  	dc.w MightyPLC_3A-MightyPLC, MightyPLC_3B-MightyPLC
00028B38 0000 0000                  	dc.w MightyPLC_3C-MightyPLC, MightyPLC_3D-MightyPLC
00028B3C 0000 0000                  	dc.w MightyPLC_3E-MightyPLC, MightyPLC_3F-MightyPLC
00028B40 0000 0000                  	dc.w MightyPLC_40-MightyPLC, MightyPLC_41-MightyPLC
00028B44 0000 0000                  	dc.w MightyPLC_42-MightyPLC, MightyPLC_43-MightyPLC
00028B48 0000 0000                  	dc.w MightyPLC_44-MightyPLC, MightyPLC_45-MightyPLC
00028B4C 0000 0000                  	dc.w MightyPLC_46-MightyPLC, MightyPLC_47-MightyPLC
00028B50 0000 0000                  	dc.w MightyPLC_48-MightyPLC, MightyPLC_49-MightyPLC
00028B54 0000 0000                  	dc.w MightyPLC_4A-MightyPLC, MightyPLC_4B-MightyPLC
00028B58 0000 0000                  	dc.w MightyPLC_4C-MightyPLC, MightyPLC_4D-MightyPLC
00028B5C 0000 0000                  	dc.w MightyPLC_4E-MightyPLC, MightyPLC_4F-MightyPLC
00028B60 0000 0000                  	dc.w MightyPLC_50-MightyPLC, MightyPLC_51-MightyPLC
00028B64 0000 0000                  	dc.w MightyPLC_52-MightyPLC, MightyPLC_53-MightyPLC
00028B68 0000 0000                  	dc.w MightyPLC_54-MightyPLC, MightyPLC_55-MightyPLC
00028B6C 0000 0000                  	dc.w MightyPLC_56-MightyPLC, MightyPLC_57-MightyPLC
00028B70 0000 0000                  	dc.w MightyPLC_58-MightyPLC, MightyPLC_59-MightyPLC
00028B74 0000 0000                  	dc.w MightyPLC_5A-MightyPLC, MightyPLC_5B-MightyPLC
00028B78 0000 0000                  	dc.w MightyPLC_5C-MightyPLC, MightyPLC_5D-MightyPLC
00028B7C 0000 0000                  	dc.w MightyPLC_5E-MightyPLC, MightyPLC_5F-MightyPLC
00028B80 0000 0000                  	dc.w MightyPLC_60-MightyPLC, MightyPLC_61-MightyPLC
00028B84 0000 0000                  	dc.w MightyPLC_62-MightyPLC, MightyPLC_63-MightyPLC
00028B88 0000 0000                  	dc.w MightyPLC_64-MightyPLC, MightyPLC_65-MightyPLC
00028B8C 0000 0000                  	dc.w MightyPLC_66-MightyPLC, MightyPLC_67-MightyPLC
00028B90 0000 0000                  	dc.w MightyPLC_68-MightyPLC, MightyPLC_69-MightyPLC
00028B94 0000 0000                  	dc.w MightyPLC_6A-MightyPLC, MightyPLC_6B-MightyPLC
00028B98 0000 0000                  	dc.w MightyPLC_6C-MightyPLC, MightyPLC_6D-MightyPLC
00028B9C 0000 0000                  	dc.w MightyPLC_6E-MightyPLC, MightyPLC_6F-MightyPLC
00028BA0 0000 0000                  	dc.w MightyPLC_70-MightyPLC, MightyPLC_71-MightyPLC
00028BA4 0000 0000                  	dc.w MightyPLC_72-MightyPLC, MightyPLC_73-MightyPLC
00028BA8 0000 0000                  	dc.w MightyPLC_74-MightyPLC, MightyPLC_75-MightyPLC
00028BAC 00                         MightyPLC_0: dc.b $0
00028BAD 02                         MightyPLC_1: dc.b $2
00028BAE B000                       	dc.b $B0, $0
00028BB0 300C                       	dc.b $30, $C
00028BB2 02                         MightyPLC_2: dc.b $2
00028BB3 B010                       	dc.b $B0, $10
00028BB5 301C                       	dc.b $30, $1C
00028BB7 02                         MightyPLC_3: dc.b $2
00028BB8 B020                       	dc.b $B0, $20
00028BBA 302C                       	dc.b $30, $2C
00028BBC 03                         MightyPLC_4: dc.b $3
00028BBD B030                       	dc.b $B0, $30
00028BBF 103C                       	dc.b $10, $3C
00028BC1 203E                       	dc.b $20, $3E
00028BC3 02                         MightyPLC_5: dc.b $2
00028BC4 B041                       	dc.b $B0, $41
00028BC6 304D                       	dc.b $30, $4D
00028BC8 03                         MightyPLC_6: dc.b $3
00028BC9 B051                       	dc.b $B0, $51
00028BCB 305D                       	dc.b $30, $5D
00028BCD 1061                       	dc.b $10, $61
00028BCF 04                         MightyPLC_7: dc.b $4
00028BD0 B063                       	dc.b $B0, $63
00028BD2 006F                       	dc.b $0, $6F
00028BD4 1070                       	dc.b $10, $70
00028BD6 2072                       	dc.b $20, $72
00028BD8 02                         MightyPLC_8: dc.b $2
00028BD9 B075                       	dc.b $B0, $75
00028BDB 1081                       	dc.b $10, $81
00028BDD 05                         MightyPLC_9: dc.b $5
00028BDE B083                       	dc.b $B0, $83
00028BE0 208F                       	dc.b $20, $8F
00028BE2 1092                       	dc.b $10, $92
00028BE4 0094                       	dc.b $0, $94
00028BE6 0095                       	dc.b $0, $95
00028BE8 03                         MightyPLC_A: dc.b $3
00028BE9 B096                       	dc.b $B0, $96
00028BEB 10A2                       	dc.b $10, $A2
00028BED 20A4                       	dc.b $20, $A4
00028BEF 03                         MightyPLC_B: dc.b $3
00028BF0 B0A7                       	dc.b $B0, $A7
00028BF2 00B3                       	dc.b $0, $B3
00028BF4 10B4                       	dc.b $10, $B4
00028BF6 04                         MightyPLC_C: dc.b $4
00028BF7 B0B6                       	dc.b $B0, $B6
00028BF9 20C2                       	dc.b $20, $C2
00028BFB 20C5                       	dc.b $20, $C5
00028BFD 30C8                       	dc.b $30, $C8
00028BFF 03                         MightyPLC_D: dc.b $3
00028C00 B0CC                       	dc.b $B0, $CC
00028C02 50D8                       	dc.b $50, $D8
00028C04 10DE                       	dc.b $10, $DE
00028C06 03                         MightyPLC_E: dc.b $3
00028C07 B0E0                       	dc.b $B0, $E0
00028C09 20EC                       	dc.b $20, $EC
00028C0B 10EF                       	dc.b $10, $EF
00028C0D 04                         MightyPLC_F: dc.b $4
00028C0E B0F1                       	dc.b $B0, $F1
00028C10 10FD                       	dc.b $10, $FD
00028C12 20FF                       	dc.b $20, $FF
00028C14 1102                       	dc.b $11, $2
00028C16 04                         MightyPLC_10: dc.b $4
00028C17 8104                       	dc.b $81, $4
00028C19 210D                       	dc.b $21, $D
00028C1B 1110                       	dc.b $11, $10
00028C1D 0112                       	dc.b $1, $12
00028C1F 03                         MightyPLC_11: dc.b $3
00028C20 8113                       	dc.b $81, $13
00028C22 111C                       	dc.b $11, $1C
00028C24 511E                       	dc.b $51, $1E
00028C26 03                         MightyPLC_12: dc.b $3
00028C27 F124                       	dc.b $F1, $24
00028C29 1134                       	dc.b $11, $34
00028C2B 1136                       	dc.b $11, $36
00028C2D 03                         MightyPLC_13: dc.b $3
00028C2E 7138                       	dc.b $71, $38
00028C30 7140                       	dc.b $71, $40
00028C32 2148                       	dc.b $21, $48
00028C34 02                         MightyPLC_14: dc.b $2
00028C35 B14B                       	dc.b $B1, $4B
00028C37 1157                       	dc.b $11, $57
00028C39 04                         MightyPLC_15: dc.b $4
00028C3A F159                       	dc.b $F1, $59
00028C3C 1169                       	dc.b $11, $69
00028C3E 016B                       	dc.b $1, $6B
00028C40 016C                       	dc.b $1, $6C
00028C42 03                         MightyPLC_16: dc.b $3
00028C43 B16D                       	dc.b $B1, $6D
00028C45 1179                       	dc.b $11, $79
00028C47 117B                       	dc.b $11, $7B
00028C49 03                         MightyPLC_17: dc.b $3
00028C4A B17D                       	dc.b $B1, $7D
00028C4C 2189                       	dc.b $21, $89
00028C4E 218C                       	dc.b $21, $8C
00028C50 05                         MightyPLC_18: dc.b $5
00028C51 B18F                       	dc.b $B1, $8F
00028C53 319B                       	dc.b $31, $9B
00028C55 019F                       	dc.b $1, $9F
00028C57 01A0                       	dc.b $1, $A0
00028C59 21A1                       	dc.b $21, $A1
00028C5B 04                         MightyPLC_19: dc.b $4
00028C5C B1A4                       	dc.b $B1, $A4
00028C5E 31B0                       	dc.b $31, $B0
00028C60 11B4                       	dc.b $11, $B4
00028C62 11B6                       	dc.b $11, $B6
00028C64 03                         MightyPLC_1A: dc.b $3
00028C65 51B8                       	dc.b $51, $B8
00028C67 51BE                       	dc.b $51, $BE
00028C69 31C4                       	dc.b $31, $C4
00028C6B 04                         MightyPLC_1B: dc.b $4
00028C6C 71C8                       	dc.b $71, $C8
00028C6E 21D0                       	dc.b $21, $D0
00028C70 51D3                       	dc.b $51, $D3
00028C72 11D9                       	dc.b $11, $D9
00028C74 04                         MightyPLC_1C: dc.b $4
00028C75 21DB                       	dc.b $21, $DB
00028C77 71DE                       	dc.b $71, $DE
00028C79 01E6                       	dc.b $1, $E6
00028C7B 21E7                       	dc.b $21, $E7
00028C7D 04                         MightyPLC_1D: dc.b $4
00028C7E 81EA                       	dc.b $81, $EA
00028C80 71F3                       	dc.b $71, $F3
00028C82 11FB                       	dc.b $11, $FB
00028C84 01FD                       	dc.b $1, $FD
00028C86 03                         MightyPLC_1E: dc.b $3
00028C87 B1FE                       	dc.b $B1, $FE
00028C89 320A                       	dc.b $32, $A
00028C8B 120E                       	dc.b $12, $E
00028C8D 03                         MightyPLC_1F: dc.b $3
00028C8E B210                       	dc.b $B2, $10
00028C90 321C                       	dc.b $32, $1C
00028C92 1220                       	dc.b $12, $20
00028C94 03                         MightyPLC_20: dc.b $3
00028C95 B222                       	dc.b $B2, $22
00028C97 322E                       	dc.b $32, $2E
00028C99 1232                       	dc.b $12, $32
00028C9B 03                         MightyPLC_21: dc.b $3
00028C9C B234                       	dc.b $B2, $34
00028C9E 3240                       	dc.b $32, $40
00028CA0 1244                       	dc.b $12, $44
00028CA2 03                         MightyPLC_22: dc.b $3
00028CA3 B246                       	dc.b $B2, $46
00028CA5 3252                       	dc.b $32, $52
00028CA7 2256                       	dc.b $22, $56
00028CA9 03                         MightyPLC_23: dc.b $3
00028CAA B259                       	dc.b $B2, $59
00028CAC 3265                       	dc.b $32, $65
00028CAE 2269                       	dc.b $22, $69
00028CB0 03                         MightyPLC_24: dc.b $3
00028CB1 B26C                       	dc.b $B2, $6C
00028CB3 3278                       	dc.b $32, $78
00028CB5 127C                       	dc.b $12, $7C
00028CB7 03                         MightyPLC_25: dc.b $3
00028CB8 B27E                       	dc.b $B2, $7E
00028CBA 328A                       	dc.b $32, $8A
00028CBC 228E                       	dc.b $22, $8E
00028CBE 03                         MightyPLC_26: dc.b $3
00028CBF B291                       	dc.b $B2, $91
00028CC1 229D                       	dc.b $22, $9D
00028CC3 22A0                       	dc.b $22, $A0
00028CC5 03                         MightyPLC_27: dc.b $3
00028CC6 B2A3                       	dc.b $B2, $A3
00028CC8 22AF                       	dc.b $22, $AF
00028CCA 22B2                       	dc.b $22, $B2
00028CCC 03                         MightyPLC_28: dc.b $3
00028CCD B2B5                       	dc.b $B2, $B5
00028CCF 22C1                       	dc.b $22, $C1
00028CD1 22C4                       	dc.b $22, $C4
00028CD3 03                         MightyPLC_29: dc.b $3
00028CD4 B2C7                       	dc.b $B2, $C7
00028CD6 22D3                       	dc.b $22, $D3
00028CD8 22D6                       	dc.b $22, $D6
00028CDA 02                         MightyPLC_2A: dc.b $2
00028CDB F2D9                       	dc.b $F2, $D9
00028CDD 22E9                       	dc.b $22, $E9
00028CDF 02                         MightyPLC_2B: dc.b $2
00028CE0 F2EC                       	dc.b $F2, $EC
00028CE2 22FC                       	dc.b $22, $FC
00028CE4 03                         MightyPLC_2C: dc.b $3
00028CE5 B2FF                       	dc.b $B2, $FF
00028CE7 230B                       	dc.b $23, $B
00028CE9 230E                       	dc.b $23, $E
00028CEB 02                         MightyPLC_2D: dc.b $2
00028CEC F311                       	dc.b $F3, $11
00028CEE 2321                       	dc.b $23, $21
00028CF0 02                         MightyPLC_2E: dc.b $2
00028CF1 B324                       	dc.b $B3, $24
00028CF3 1330                       	dc.b $13, $30
00028CF5 02                         MightyPLC_2F: dc.b $2
00028CF6 B332                       	dc.b $B3, $32
00028CF8 133E                       	dc.b $13, $3E
00028CFA 02                         MightyPLC_30: dc.b $2
00028CFB B340                       	dc.b $B3, $40
00028CFD 234C                       	dc.b $23, $4C
00028CFF 02                         MightyPLC_31: dc.b $2
00028D00 B34F                       	dc.b $B3, $4F
00028D02 235B                       	dc.b $23, $5B
00028D04 02                         MightyPLC_32: dc.b $2
00028D05 B35E                       	dc.b $B3, $5E
00028D07 236A                       	dc.b $23, $6A
00028D09 02                         MightyPLC_33: dc.b $2
00028D0A B36D                       	dc.b $B3, $6D
00028D0C 2379                       	dc.b $23, $79
00028D0E 03                         MightyPLC_34: dc.b $3
00028D0F 837C                       	dc.b $83, $7C
00028D11 2385                       	dc.b $23, $85
00028D13 1388                       	dc.b $13, $88
00028D15 02                         MightyPLC_35: dc.b $2
00028D16 B38A                       	dc.b $B3, $8A
00028D18 2396                       	dc.b $23, $96
00028D1A 03                         MightyPLC_36: dc.b $3
00028D1B 8399                       	dc.b $83, $99
00028D1D 23A2                       	dc.b $23, $A2
00028D1F 13A5                       	dc.b $13, $A5
00028D21 03                         MightyPLC_37: dc.b $3
00028D22 83A7                       	dc.b $83, $A7
00028D24 13B0                       	dc.b $13, $B0
00028D26 13B2                       	dc.b $13, $B2
00028D28 03                         MightyPLC_38: dc.b $3
00028D29 83B4                       	dc.b $83, $B4
00028D2B 33BD                       	dc.b $33, $BD
00028D2D 03C1                       	dc.b $3, $C1
00028D2F 02                         MightyPLC_39: dc.b $2
00028D30 B3C2                       	dc.b $B3, $C2
00028D32 23CE                       	dc.b $23, $CE
00028D34 04                         MightyPLC_3A: dc.b $4
00028D35 B3D1                       	dc.b $B3, $D1
00028D37 13DD                       	dc.b $13, $DD
00028D39 03DF                       	dc.b $3, $DF
00028D3B 23E0                       	dc.b $23, $E0
00028D3D 03                         MightyPLC_3B: dc.b $3
00028D3E 73E3                       	dc.b $73, $E3
00028D40 83EB                       	dc.b $83, $EB
00028D42 03F4                       	dc.b $3, $F4
00028D44 04                         MightyPLC_3C: dc.b $4
00028D45 73F5                       	dc.b $73, $F5
00028D47 13FD                       	dc.b $13, $FD
00028D49 13FF                       	dc.b $13, $FF
00028D4B 2401                       	dc.b $24, $1
00028D4D 03                         MightyPLC_3D: dc.b $3
00028D4E 7404                       	dc.b $74, $4
00028D50 340C                       	dc.b $34, $C
00028D52 3410                       	dc.b $34, $10
00028D54 03                         MightyPLC_3E: dc.b $3
00028D55 7414                       	dc.b $74, $14
00028D57 141C                       	dc.b $14, $1C
00028D59 241E                       	dc.b $24, $1E
00028D5B 04                         MightyPLC_3F: dc.b $4
00028D5C 7421                       	dc.b $74, $21
00028D5E 1429                       	dc.b $14, $29
00028D60 142B                       	dc.b $14, $2B
00028D62 242D                       	dc.b $24, $2D
00028D64 02                         MightyPLC_40: dc.b $2
00028D65 B430                       	dc.b $B4, $30
00028D67 343C                       	dc.b $34, $3C
00028D69 02                         MightyPLC_41: dc.b $2
00028D6A B440                       	dc.b $B4, $40
00028D6C 144C                       	dc.b $14, $4C
00028D6E 02                         MightyPLC_42: dc.b $2
00028D6F B44E                       	dc.b $B4, $4E
00028D71 145A                       	dc.b $14, $5A
00028D73 04                         MightyPLC_43: dc.b $4
00028D74 F45C                       	dc.b $F4, $5C
00028D76 146C                       	dc.b $14, $6C
00028D78 246E                       	dc.b $24, $6E
00028D7A 1471                       	dc.b $14, $71
00028D7C 04                         MightyPLC_44: dc.b $4
00028D7D F473                       	dc.b $F4, $73
00028D7F 1483                       	dc.b $14, $83
00028D81 2485                       	dc.b $24, $85
00028D83 1488                       	dc.b $14, $88
00028D85 02                         MightyPLC_45: dc.b $2
00028D86 F48A                       	dc.b $F4, $8A
00028D88 349A                       	dc.b $34, $9A
00028D8A 02                         MightyPLC_46: dc.b $2
00028D8B B49E                       	dc.b $B4, $9E
00028D8D 14AA                       	dc.b $14, $AA
00028D8F 02                         MightyPLC_47: dc.b $2
00028D90 F4AC                       	dc.b $F4, $AC
00028D92 24BC                       	dc.b $24, $BC
00028D94 02                         MightyPLC_48: dc.b $2
00028D95 B4BF                       	dc.b $B4, $BF
00028D97 14CB                       	dc.b $14, $CB
00028D99 03                         MightyPLC_49: dc.b $3
00028D9A B4CD                       	dc.b $B4, $CD
00028D9C 34D9                       	dc.b $34, $D9
00028D9E 24DD                       	dc.b $24, $DD
00028DA0 03                         MightyPLC_4A: dc.b $3
00028DA1 B4E0                       	dc.b $B4, $E0
00028DA3 24EC                       	dc.b $24, $EC
00028DA5 14EF                       	dc.b $14, $EF
00028DA7 05                         MightyPLC_4B: dc.b $5
00028DA8 74F1                       	dc.b $74, $F1
00028DAA 14F9                       	dc.b $14, $F9
00028DAC 84FB                       	dc.b $84, $FB
00028DAE 1504                       	dc.b $15, $4
00028DB0 0506                       	dc.b $5, $6
00028DB2 05                         MightyPLC_4C: dc.b $5
00028DB3 7507                       	dc.b $75, $7
00028DB5 150F                       	dc.b $15, $F
00028DB7 8511                       	dc.b $85, $11
00028DB9 051A                       	dc.b $5, $1A
00028DBB 051B                       	dc.b $5, $1B
00028DBD 05                         MightyPLC_4D: dc.b $5
00028DBE 751C                       	dc.b $75, $1C
00028DC0 1524                       	dc.b $15, $24
00028DC2 8526                       	dc.b $85, $26
00028DC4 152F                       	dc.b $15, $2F
00028DC6 0531                       	dc.b $5, $31
00028DC8 03                         MightyPLC_4E: dc.b $3
00028DC9 B532                       	dc.b $B5, $32
00028DCB 353E                       	dc.b $35, $3E
00028DCD 2542                       	dc.b $25, $42
00028DCF 03                         MightyPLC_4F: dc.b $3
00028DD0 B545                       	dc.b $B5, $45
00028DD2 2551                       	dc.b $25, $51
00028DD4 2554                       	dc.b $25, $54
00028DD6 02                         MightyPLC_50: dc.b $2
00028DD7 7557                       	dc.b $75, $57
00028DD9 255F                       	dc.b $25, $5F
00028DDB 01                         MightyPLC_51: dc.b $1
00028DDC 5562                       	dc.b $55, $62
00028DDE 01                         MightyPLC_52: dc.b $1
00028DDF 1568                       	dc.b $15, $68
00028DE1 04                         MightyPLC_53: dc.b $4
00028DE2 756A                       	dc.b $75, $6A
00028DE4 2572                       	dc.b $25, $72
00028DE6 1575                       	dc.b $15, $75
00028DE8 2577                       	dc.b $25, $77
00028DEA 03                         MightyPLC_54: dc.b $3
00028DEB 757A                       	dc.b $75, $7A
00028DED 1582                       	dc.b $15, $82
00028DEF 2584                       	dc.b $25, $84
00028DF1 03                         MightyPLC_55: dc.b $3
00028DF2 B587                       	dc.b $B5, $87
00028DF4 3593                       	dc.b $35, $93
00028DF6 2597                       	dc.b $25, $97
00028DF8 04                         MightyPLC_56: dc.b $4
00028DF9 F59A                       	dc.b $F5, $9A
00028DFB 15AA                       	dc.b $15, $AA
00028DFD 15AC                       	dc.b $15, $AC
00028DFF 05AE                       	dc.b $5, $AE
00028E01 03                         MightyPLC_57: dc.b $3
00028E02 B587                       	dc.b $B5, $87
00028E04 3593                       	dc.b $35, $93
00028E06 2597                       	dc.b $25, $97
00028E08 01                         MightyPLC_58: dc.b $1
00028E09 E5AF                       	dc.b $E5, $AF
00028E0B 01                         MightyPLC_59: dc.b $1
00028E0C E5BE                       	dc.b $E5, $BE
00028E0E 01                         MightyPLC_5A: dc.b $1
00028E0F E5CD                       	dc.b $E5, $CD
00028E11 01                         MightyPLC_5B: dc.b $1
00028E12 E5DC                       	dc.b $E5, $DC
00028E14 01                         MightyPLC_5C: dc.b $1
00028E15 E5EB                       	dc.b $E5, $EB
00028E17 01                         MightyPLC_5D: dc.b $1
00028E18 E5FA                       	dc.b $E5, $FA
00028E1A 02                         MightyPLC_5E: dc.b $2
00028E1B F609                       	dc.b $F6, $9
00028E1D 5619                       	dc.b $56, $19
00028E1F 02                         MightyPLC_5F: dc.b $2
00028E20 F61F                       	dc.b $F6, $1F
00028E22 362F                       	dc.b $36, $2F
00028E24 02                         MightyPLC_60: dc.b $2
00028E25 F633                       	dc.b $F6, $33
00028E27 5643                       	dc.b $56, $43
00028E29 02                         MightyPLC_61: dc.b $2
00028E2A F649                       	dc.b $F6, $49
00028E2C 1659                       	dc.b $16, $59
00028E2E 02                         MightyPLC_62: dc.b $2
00028E2F F65B                       	dc.b $F6, $5B
00028E31 566B                       	dc.b $56, $6B
00028E33 02                         MightyPLC_63: dc.b $2
00028E34 F671                       	dc.b $F6, $71
00028E36 5681                       	dc.b $56, $81
00028E38 02                         MightyPLC_64: dc.b $2
00028E39 F687                       	dc.b $F6, $87
00028E3B 6697                       	dc.b $66, $97
00028E3D 02                         MightyPLC_65: dc.b $2
00028E3E F69E                       	dc.b $F6, $9E
00028E40 46AE                       	dc.b $46, $AE
00028E42 02                         MightyPLC_66: dc.b $2
00028E43 F6B3                       	dc.b $F6, $B3
00028E45 26C3                       	dc.b $26, $C3
00028E47 02                         MightyPLC_67: dc.b $2
00028E48 F6C6                       	dc.b $F6, $C6
00028E4A 26D6                       	dc.b $26, $D6
00028E4C 02                         MightyPLC_68: dc.b $2
00028E4D F6D9                       	dc.b $F6, $D9
00028E4F 26E9                       	dc.b $26, $E9
00028E51 02                         MightyPLC_69: dc.b $2
00028E52 F6EC                       	dc.b $F6, $EC
00028E54 16FC                       	dc.b $16, $FC
00028E56 02                         MightyPLC_6A: dc.b $2
00028E57 F6FE                       	dc.b $F6, $FE
00028E59 470E                       	dc.b $47, $E
00028E5B 02                         MightyPLC_6B: dc.b $2
00028E5C F713                       	dc.b $F7, $13
00028E5E 4723                       	dc.b $47, $23
00028E60 02                         MightyPLC_6C: dc.b $2
00028E61 F728                       	dc.b $F7, $28
00028E63 6738                       	dc.b $67, $38
00028E65 02                         MightyPLC_6D: dc.b $2
00028E66 F73F                       	dc.b $F7, $3F
00028E68 574F                       	dc.b $57, $4F
00028E6A 01                         MightyPLC_6E: dc.b $1
00028E6B F755                       	dc.b $F7, $55
00028E6D 01                         MightyPLC_6F: dc.b $1
00028E6E F765                       	dc.b $F7, $65
00028E70 01                         MightyPLC_70: dc.b $1
00028E71 F7C5                       	dc.b $F7, $C5
00028E73 01                         MightyPLC_71: dc.b $1
00028E74 F775                       	dc.b $F7, $75
00028E76 01                         MightyPLC_72: dc.b $1
00028E77 F785                       	dc.b $F7, $85
00028E79 01                         MightyPLC_73: dc.b $1
00028E7A F795                       	dc.b $F7, $95
00028E7C 01                         MightyPLC_74: dc.b $1
00028E7D F7A5                       	dc.b $F7, $A5
00028E7F 01                         MightyPLC_75: dc.b $1
00028E80 F7B5                       	dc.b $F7, $B5
00028E82                            	even
00028E82                            	even
00028E82                            ; ---------------------------------------------------------------------------
00028E82                            ; Uncompressed graphics	- Sonic
00028E82                            ; ---------------------------------------------------------------------------
00028E82                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003B7E2                            		even
0003B7E2                            Art_Shadow:	incbin	artunc\Shadow.bin	; Shadow
0004AD42                            		even
0004AD42                            Art_Metal:	incbin	artunc\Metal.bin
00058B02                            		even
00058B02                            Art_Mighty:	incbin	artunc\Mighty.bin
000685A2                            		even
000685A2                            ; ---------------------------------------------------------------------------
000685A2                            ; Compressed graphics - various
000685A2                            ; ---------------------------------------------------------------------------
000685A2                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000686A6                            		even
000686A6                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000686E0                            		even
000686E0                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00068840                            		even
00068840                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00068988                            		even
00068988                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00068A92                            		even
00068A92                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00068AE4                            		even
00068AE4                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00068D2C                            		even
00068D2C                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00068EB2                            		even
00068EB2                            ; ---------------------------------------------------------------------------
00068EB2                            ; Sprite mappings - walls of the special stage
00068EB2                            ; ---------------------------------------------------------------------------
00068EB2                            Map_SSWalls:
00068EB2                            	include "_maps\SSwalls.asm"
00068EB2                            ; ---------------------------------------------------------------------------
00068EB2                            ; Sprite mappings - walls of the special stage
00068EB2                            ; ---------------------------------------------------------------------------
00068EB2 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00068EB6 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00068EBA 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00068EBE 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00068EC2 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00068EC6 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00068ECA 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00068ECE 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00068ED2 01                         byte_2C584:	dc.b 1
00068ED3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00068ED8 01                         byte_2C58A:	dc.b 1
00068ED9 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00068EDE 01                         byte_2C590:	dc.b 1
00068EDF F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00068EE4 01                         byte_2C596:	dc.b 1
00068EE5 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00068EEA 01                         byte_2C59C:	dc.b 1
00068EEB F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00068EF0 01                         byte_2C5A2:	dc.b 1
00068EF1 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00068EF6 01                         byte_2C5A8:	dc.b 1
00068EF7 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00068EFC 01                         byte_2C5AE:	dc.b 1
00068EFD F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00068F02 01                         byte_2C5B4:	dc.b 1
00068F03 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00068F08 01                         byte_2C5BA:	dc.b 1
00068F09 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00068F0E 01                         byte_2C5C0:	dc.b 1
00068F0F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00068F14 01                         byte_2C5C6:	dc.b 1
00068F15 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00068F1A 01                         byte_2C5CC:	dc.b 1
00068F1B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00068F20 01                         byte_2C5D2:	dc.b 1
00068F21 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00068F26 01                         byte_2C5D8:	dc.b 1
00068F27 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00068F2C 01                         byte_2C5DE:	dc.b 1
00068F2D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00068F32                            		even
00068F32                            		even
00068F32                            ; ---------------------------------------------------------------------------
00068F32                            ; Compressed graphics - special stage
00068F32                            ; ---------------------------------------------------------------------------
00068F32                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0006986A                            		even
0006986A                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0006999E                            		even
0006999E                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0006A62E                            		even
0006A62E                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0006A92E                            		even
0006A92E                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0006AE22                            		even
0006AE22                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0006AF10                            		even
0006AF10                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0006AFE0                            		even
0006AFE0                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0006B0D6                            		even
0006B0D6                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0006B134                            		even
0006B134                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0006B1C6                            		even
0006B1C6                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0006B288                            		even
0006B288                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0006B356                            		even
0006B356                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0006B422                            		even
0006B422                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0006B4EA                            		even
0006B4EA                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0006B5B4                            		even
0006B5B4                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0006B684                            		even
0006B684                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0006B878                            		even
0006B878                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0006B9E0                            		even
0006B9E0                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0006BA90                            		even
0006BA90                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0006BB6A                            		even
0006BB6A                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0006BBEE                            		even
0006BBEE                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0006BD6C                            		even
0006BD6C                            ; ---------------------------------------------------------------------------
0006BD6C                            ; Compressed graphics - GHZ stuff
0006BD6C                            ; ---------------------------------------------------------------------------
0006BD6C                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0006BDB6                            		even
0006BDB6                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0006BED0                            		even
0006BED0                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0006BFBC                            		even
0006BFBC                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0006C004                            		even
0006C004                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0006C1A2                            		even
0006C1A2                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0006C21E                            		even
0006C21E                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0006C432                            		even
0006C432                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0006C55E                            		even
0006C55E                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0006C6DC                            		even
0006C6DC                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0006C77A                            		even
0006C77A                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0006C7DA                            		even
0006C7DA                            ; ---------------------------------------------------------------------------
0006C7DA                            ; Compressed graphics - LZ stuff
0006C7DA                            ; ---------------------------------------------------------------------------
0006C7DA                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0006C8FE                            		even
0006C8FE                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0006D0F2                            		even
0006D0F2                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0006D272                            		even
0006D272                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0006D3DC                            		even
0006D3DC                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0006DA32                            		even
0006DA32                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0006DAE8                            		even
0006DAE8                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0006DB8A                            		even
0006DB8A                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0006DCE6                            		even
0006DCE6                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0006DD4A                            		even
0006DD4A                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0006DE9C                            		even
0006DE9C                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0006E37E                            		even
0006E37E                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0006E4EE                            		even
0006E4EE                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0006E7A6                            		even
0006E7A6                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0006E8DE                            		even
0006E8DE                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0006EA08                            		even
0006EA08                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0006EB18                            		even
0006EB18                            ; ---------------------------------------------------------------------------
0006EB18                            ; Compressed graphics - MZ stuff
0006EB18                            ; ---------------------------------------------------------------------------
0006EB18                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0006EDA6                            		even
0006EDA6                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0006EE64                            		even
0006EE64                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0006EF1C                            		even
0006EF1C                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0006EF70                            		even
0006EF70                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0006F24E                            		even
0006F24E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0006FB64                            		even
0006FB64                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0006FCC8                            		even
0006FCC8                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0006FD50                            		even
0006FD50                            ; ---------------------------------------------------------------------------
0006FD50                            ; Compressed graphics - SLZ stuff
0006FD50                            ; ---------------------------------------------------------------------------
0006FD50                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0006FF8C                            		even
0006FF8C                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000700D2                            		even
000700D2                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00070316                            		even
00070316                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00070378                            		even
00070378                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0007045A                            		even
0007045A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0007063C                            		even
0007063C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00070748                            		even
00070748                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000707EC                            		even
000707EC                            ; ---------------------------------------------------------------------------
000707EC                            ; Compressed graphics - SYZ stuff
000707EC                            ; ---------------------------------------------------------------------------
000707EC                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00070956                            		even
00070956                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000709B8                            		even
000709B8                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00070A9A                            		even
00070A9A                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00070D28                            		even
00070D28                            ; ---------------------------------------------------------------------------
00070D28                            ; Compressed graphics - SBZ stuff
00070D28                            ; ---------------------------------------------------------------------------
00070D28                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00070D7C                            		even
00070D7C                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00071018                            		even
00071018                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0007121C                            		even
0007121C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000713BA                            		even
000713BA                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000716EA                            		even
000716EA                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000718C8                            		even
000718C8                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00071920                            		even
00071920                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00071AA0                            		even
00071AA0                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00071B9E                            		even
00071B9E                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00071D2A                            		even
00071D2A                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00071D7A                            		even
00071D7A                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00071DD2                            		even
00071DD2                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00071ECE                            		even
00071ECE                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00071FE4                            		even
00071FE4                            ; ---------------------------------------------------------------------------
00071FE4                            ; Compressed graphics - enemies
00071FE4                            ; ---------------------------------------------------------------------------
00071FE4                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
000723A4                            		even
000723A4                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00072892                            		even
00072892                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00072C38                            		even
00072C38                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00072E20                            		even
00072E20                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0007350A                            		even
0007350A                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00073772                            		even
00073772                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
000739FC                            		even
000739FC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00073F20                            		even
00073F20                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
000741AA                            		even
000741AA                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
000747C8                            		even
000747C8                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00074BB0                            		even
00074BB0                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00074EAC                            		even
00074EAC                            Nem_Splats:	incbin	artnem\splats.bin	; splats
000750F4                            		even
000750F4                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0007538C                            		even
0007538C                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0007556A                            		even
0007556A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
000756F8                            		even
000756F8                            ; ---------------------------------------------------------------------------
000756F8                            ; Compressed graphics - various
000756F8                            ; ---------------------------------------------------------------------------
000756F8                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00075D02                            		even
00075D02                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00075E1E                            		even
00075E1E                            Nem_Lives:	incbin	artnem\lifeson.bin	; life counter icon
00075F02                            		even
00075F02                            Nem_LivesShadow:	incbin	artnem\lifeshad.bin
00075FE0                            		even
00075FE0                            Nem_LivesMetal:		incbin	artnem\lifemetal.bin
000760DC                            		even
000760DC                            Nem_LivesMighty:	incbin	artnem\lifemight.bin
000761C8                            		even
000761C8                            Nem_Ring:	incbin	artnem\rings.bin	; rings
000762BC                            		even
000762BC                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00076776                            		even
00076776                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00076DDC                            		even
00076DDC                            ;Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
00076DDC                            ;		even
00076DDC                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00076F6E                            		even
00076F6E                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
00077070                            		even
00077070                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0007714C                            		even
0007714C                            Nem_SignPost:	incbin	artnem\signpost_eggman.bin	; end of level signpost
00077420                            		even
00077420                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
000774E0                            		even
000774E0                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00077654                            		even
00077654                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00077956                            		even
00077956                            Art_SonicPost:	incbin	artunc\SonicPost.bin
00077C56                            		even
00077C56                            Art_ShadowPost:	incbin	artunc\ShadowPost.bin
00077F56                            		even
00077F56                            Art_MetalPost:	incbin	artunc\MetalPost.bin
00078256                            		even
00078256                            Art_MightyPost:	incbin	artunc\MightyPost.bin
00078556                            		even
00078556                            ; ---------------------------------------------------------------------------
00078556                            ; Compressed graphics - continue screen
00078556                            ; ---------------------------------------------------------------------------
00078556                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00078806                            		even
00078806                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00078A40                            		even
00078A40                            ; ---------------------------------------------------------------------------
00078A40                            ; Compressed graphics - animals
00078A40                            ; ---------------------------------------------------------------------------
00078A40                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00078B98                            		even
00078B98                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00078CF4                            		even
00078CF4                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00078E70                            		even
00078E70                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00078F8C                            		even
00078F8C                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000790C2                            		even
000790C2                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000791FC                            		even
000791FC                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00079358                            		even
00079358                            ; ---------------------------------------------------------------------------
00079358                            ; Compressed graphics - primary patterns and block mappings
00079358                            ; ---------------------------------------------------------------------------
00079358                            Blk16_GHZ:	incbin	map16\ghz.bin
00079D10                            		even
00079D10                            Nem_Title:	incbin	"artnem\8x8title.bin"	; Title patterns
0007B370                            		even
0007B370                            Comp_GHZ:	incbin	"artcmp\8x8ghz.bin"	; GHZ primary patterns
0007E700                            		even
0007E700                            Blk256_GHZ:	incbin	map256_u\ghz.bin
00088B00                            		even
00088B00                            Blk16_LZ:	incbin	map16\lz.bin
00088DCA                            		even
00088DCA                            Comp_LZ:	incbin	"artcmp\8x8lz.bin"	; LZ primary patterns
0008B246                            		even
0008B246                            Blk256_LZ:	incbin	map256_u\lz.bin
00095646                            		even
00095646                            Blk16_MZ:	incbin	map16\mz.bin
00095DA2                            		even
00095DA2                            Comp_MZ:	incbin	"artcmp\8x8mz.bin"	; MZ primary patterns
00098C34                            		even
00098C34                            Blk256_MZ:	incbin	map256_u\mz.bin
000A3034                            		even
000A3034                            Blk16_SLZ:	incbin	map16\slz.bin
000A3818                            		even
000A3818                            Comp_SLZ:	incbin	"artcmp\8x8slz.bin"	; SLZ primary patterns
000A7718                            		even
000A7718                            Blk256_SLZ:	incbin	map256_u\slz.bin
000B1B18                            		even
000B1B18                            Blk16_SYZ:	incbin	map16\syz.bin
000B23AC                            		even
000B23AC                            Comp_SYZ:	incbin	"artcmp\8x8syz.bin"	; SYZ primary patterns
000B5FDA                            		even
000B5FDA                            Blk256_SYZ:	incbin	map256_u\syz.bin
000C03DA                            		even
000C03DA                            Blk16_SBZ:	incbin	map16\sbz.bin
000C1274                            		even
000C1274                            Comp_SBZ:	incbin	"artcmp\8x8sbz.bin"	; SBZ primary patterns
000C431E                            		even
000C431E                            Blk256_SBZ:	incbin	map256\sbz.bin
000C6D6E                            		even
000C6D6E                            Blk16_End:	incbin	map16\end.bin
000C770E                            		even
000C770E                            Comp_End:	incbin	"artcmp\8x8ending.bin"
000CA9C8                            		even
000CA9C8                            Blk256_End:	incbin	map256\end.bin
000CCAD8                            		even
000CCAD8                            ; ---------------------------------------------------------------------------
000CCAD8                            ; Compressed graphics - bosses and ending sequence
000CCAD8                            ; ---------------------------------------------------------------------------
000CCAD8                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000CD33C                            		even
000CD33C                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000CD626                            		even
000CD626                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000CDEAA                            		even
000CDEAA                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000CE6D6                            		even
000CE6D6                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000CEE3E                            		even
000CEE3E                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000CF3BE                            		even
000CF3BE                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000CF4DE                            		even
000CF4DE                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000CF6DC                            		even
000CF6DC                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000D08BA                            		even
000D08BA                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000D11FE                            		even
000D11FE                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000D15D4                            		even
000D15D4                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000D1B64                            		even
000D1B64                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000D1DEC                            		even
000D1DEC                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000D23EA                            		even
000D23EA                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000D2672                            		even
000D2672                            		incbin	misc\padding2.bin
000D2776                            		even
000D2776                            ; ---------------------------------------------------------------------------
000D2776                            ; Collision data
000D2776                            ; ---------------------------------------------------------------------------
000D2776                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000D2876                            		even
000D2876                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000D3876                            		even
000D3876                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000D4876                            		even
000D4876                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000D4A48 00                         		even
000D4A48                            Col_LZ:		incbin	collide\lz.bin		; LZ index
000D4B10                            		even
000D4B10                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000D4CA0                            		even
000D4CA0                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000D4E94                            		even
000D4E94                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000D5088                            		even
000D5088                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000D52E0                            		even
000D52E0                            ; ---------------------------------------------------------------------------
000D52E0                            ; Special layouts
000D52E0                            ; ---------------------------------------------------------------------------
000D52E0                            SS_1:		incbin	sslayout\1.bin
000D555A                            		even
000D555A                            SS_2:		incbin	sslayout\2.bin
000D596C                            		even
000D596C                            SS_3:		incbin	sslayout\3.bin
000D5CC8                            		even
000D5CC8                            SS_4:		incbin	sslayout\4.bin
000D61A2                            		even
000D61A2                            SS_5:		incbin	sslayout\5.bin
000D6674                            		even
000D6674                            SS_6:		incbin	sslayout\6.bin
000D6984                            		even
000D6984                            ; ---------------------------------------------------------------------------
000D6984                            ; Animated uncompressed graphics
000D6984                            ; ---------------------------------------------------------------------------
000D6984                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000D6B84                            		even
000D6B84                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
000D6F84                            		even
000D6F84                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
000D7404                            		even
000D7404                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000D7704                            		even
000D7704                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
000D7D04                            		even
000D7D04                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
000D8004                            		even
000D8004                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000D8A84                            		even
000D8A84                            
000D8A84                            ; ---------------------------------------------------------------------------
000D8A84                            ; Level	layout index
000D8A84                            ; ---------------------------------------------------------------------------
000D8A84 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index		; LEVEL INDEX
000D8A8A 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000D8A90 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000D8A96 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000D8A9C 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000D8AA2 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000D8AA8 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000D8AAE 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000D8AB4 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
000D8ABA 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
000D8AC0 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
000D8AC6 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
000D8ACC 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000D8AD2 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000D8AD8 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000D8ADE 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000D8AE4 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
000D8AEA 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
000D8AF0 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
000D8AF6 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000D8AFC 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000D8B02 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000D8B08 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000D8B0E 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
000D8B14 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000D8B1A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000D8B20 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000D8B26 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000D8B2C                            
000D8B2C                            Level_GHZ1:	incbin	levels\ghz1.bin
000D8C1E                            		even
000D8C1E 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000D8C22                            Level_GHZ2:	incbin	levels\ghz2.bin
000D8CEA                            		even
000D8CEA 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000D8CEE                            Level_GHZ3:	incbin	levels\ghz3.bin
000D8E10                            		even
000D8E10                            Level_GHZbg:	incbin	levels\ghzbg.bin
000D8E32                            		even
000D8E32 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000D8E36 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000D8E3A                            
000D8E3A                            Level_LZ1:	incbin	levels\lz1.bin
000D8F3C                            		even
000D8F3C                            Level_LZbg:	incbin	levels\lzbg.bin
000D903E                            		even
000D903E 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000D9042                            Level_LZ2:	incbin	levels\lz2.bin
000D90DC                            		even
000D90DC 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
000D90E0                            Level_LZ3:	incbin	levels\lz3.bin
000D91FA                            		even
000D91FA 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000D91FE                            Level_SBZ3:	incbin	levels\sbz3.bin
000D92B8                            		even
000D92B8 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000D92BC                            
000D92BC                            Level_MZ1:	incbin	levels\mz1.bin
000D935A                            		even
000D935A                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000D93D4                            		even
000D93D4                            Level_MZ2:	incbin	levels\mz2.bin
000D9478                            		even
000D9478                            Level_MZ2bg:	incbin	levels\mz2bg.bin
000D950A                            		even
000D950A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000D950E                            Level_MZ3:	incbin	levels\mz3.bin
000D95F0                            		even
000D95F0                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000D9694                            		even
000D9694 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000D9698 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000D969C                            
000D969C                            Level_SLZ1:	incbin	levels\slz1.bin
000D97AE                            		even
000D97AE                            Level_SLZbg:	incbin	levels\slzbg.bin
000D9828                            		even
000D9828                            Level_SLZ2:	incbin	levels\slz2.bin
000D9918                            		even
000D9918                            Level_SLZ3:	incbin	levels\slz3.bin
000D9A32                            		even
000D9A32 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000D9A36                            
000D9A36                            Level_SYZ1:	incbin	levels\syz1.bin
000D9AF2                            		even
000D9AF2                            Level_SYZbg:	incbin	levels\syzbg.bin
000D9B2C                            		even
000D9B2C 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000D9B30                            Level_SYZ2:	incbin	levels\syz2.bin
000D9C34                            		even
000D9C34 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000D9C38                            Level_SYZ3:	incbin	levels\syz3.bin
000D9D92                            		even
000D9D92 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000D9D96 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000D9D9A                            
000D9D9A                            Level_SBZ1:	incbin	levels\sbz1.bin
000D9EBC                            		even
000D9EBC                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000D9EFA                            		even
000D9EFA                            Level_SBZ2:	incbin	levels\sbz2.bin
000DA03C                            		even
000DA03C                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
000DA1A6                            		even
000DA1A6 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000DA1AA 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000DA1AE                            Level_End:	incbin	levels\ending.bin
000DA1DE 00                         		even
000DA1DE 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000DA1E2                            
000DA1E2                            ; ---------------------------------------------------------------------------
000DA1E2                            ; Animated uncompressed giant ring graphics
000DA1E2                            ; ---------------------------------------------------------------------------
000DA1E2                            Art_BigRing:	incbin	artunc\bigring.bin
000DAE22                            		even
000DAE22                            
000DAE22                            		incbin	misc\padding3.bin
000DAEBE                            		even
000DAEBE                            
000DAEBE                            ; ---------------------------------------------------------------------------
000DAEBE                            ; Sprite locations index
000DAEBE                            ; ---------------------------------------------------------------------------
000DAEBE 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEC2 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEC6 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAECA 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAECE 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAED2 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAED6 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEDA 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEDE 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEE2 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEE6 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEEA 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEEE 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEF2 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEF6 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEFA 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAEFE 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF02 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF06 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF0A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF0E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF12 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF16 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF1A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF1E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF22 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF26 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF2A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000DAF2E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000DAF32 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
000DAF36 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
000DAF3A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000DAF3E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000DAF42 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
000DAF46 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
000DAF4A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000DAF4E FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000DAF54                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000DB2DE                            		even
000DB2DE                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000DB698                            		even
000DB698                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
000DBD52                            		even
000DBD52                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000DC1C0                            		even
000DC1C0                            ObjPos_LZ2:	incbin	objpos\lz2.bin
000DC502                            		even
000DC502                            ObjPos_LZ3:	incbin	objpos\lz3.bin
000DCAE4                            		even
000DCAE4                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000DCF7C                            		even
000DCF7C                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000DCFAE                            		even
000DCFAE                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000DCFE0                            		even
000DCFE0                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000DD012                            		even
000DD012                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000DD044                            		even
000DD044                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000DD08E                            		even
000DD08E                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000DD0CC                            		even
000DD0CC                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000DD438                            		even
000DD438                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000DD8E2                            		even
000DD8E2                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000DDE58                            		even
000DDE58                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000DE398                            		even
000DE398                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000DE800                            		even
000DE800                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000DEDE2                            		even
000DEDE2                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000DF26E                            		even
000DF26E                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000DF7D8                            		even
000DF7D8                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000DFDDE                            		even
000DFDDE                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000E051C                            		even
000E051C                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000E0BFA                            		even
000E0BFA                            ObjPos_FZ:	incbin	objpos\fz.bin
000E0C0C                            		even
000E0C0C                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000E0C3E                            		even
000E0C3E                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000E0C70                            		even
000E0C70                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000E0CA2                            		even
000E0CA2                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000E0CD4                            		even
000E0CD4                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000E0D06                            		even
000E0D06                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000E0D3E                            		even
000E0D3E                            ObjPos_End:	incbin	objpos\ending.bin
000E0E9A                            		even
000E0E9A FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000E0EA0                            ; ---------------------------------------------------------------------------
000E0EA0                            		incbin	misc\padding4.bin
000E14CA                            		even
000E14CA                            
000E14CA 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000E14CE 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000E14D2 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000E14D6 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000E14DA 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000E14DE 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000E14E2                            ; ---------------------------------------------------------------------------
000E14E2                            ; PSG instruments used in music
000E14E2                            ; ---------------------------------------------------------------------------
000E14E2 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, S3_PSG2, S3_PSG3
000E14EE 0000 0000 0000 0000 0000+  		dc.l S3_PSG4, S3_PSG5, S3_PSG6
000E14FA 0000 0000 0000 0000 0000+  		dc.l S3_PSG7, S3_PSG8, S3_PSG9
000E1506 0000 0000 0000 0000 0000+  		dc.l S3_PSGa, S3_PSGb, S3_PSGc
000E1512 0000 0000 0000 0000 0000+  		dc.l S3_PSGd, S3_PSGe, S3_PSGf
000E151E 0000 0000 0000 0000 0000+  		dc.l S3_PSG10, S3_PSG11, S3_PSG12
000E152A 0000 0000 0000 0000 0000+  		dc.l S3_PSG13, S3_PSG14, S3_PSG15
000E1536 0000 0000 0000 0000 0000+  		dc.l S3_PSG16, S3_PSG17, S3_PSG18
000E1542 0000 0000 0000 0000 0000+  		dc.l S3_PSG19, S3_PSG1a, S3_PSG1b
000E154E 0000 0000 0000 0000 0000+  		dc.l S3_PSG1c, S3_PSG1d, S3_PSG1e
000E155A 0000 0000 0000 0000 0000+  		dc.l S3_PSG1f, S3_PSG20, S3_PSG21
000E1566 0000 0000 0000 0000 0000+  		dc.l S3_PSG22, S3_PSG23, S3_PSG24
000E1572 0000 0000 0000 0000 0000+  		dc.l S3_PSG25, S3_PSG26, S3_PSG27
000E157E 0000 0000 0000 0000 0000+                  dc.l S3_PSG28, S3_PSG29, S3_PSG2A
000E158A 0000 0000 0000 0000 0000+                  dc.l S3_PSG2B, S3_PSG2C, S3_PSG2D
000E1596 0000 0000 0000 0000 0000+                  dc.l S3_PSG2E, S3_PSG2F, S3_PSG30
000E15A2 0000 0000 0000 0000        		dc.l PSG9, PSG8
000E15AA                            		; The original PSG1 is too different from S3's, which is exactly the same as $0E anyway.
000E15AA                            		;dc.l PSG1, PSG2, PSG3
000E15AA                            		;dc.l PSG4, PSG5, PSG6
000E15AA                            		;dc.l PSG7, PSG8, PSG9
000E15AA                            
000E15AA                            PSG1:		incbin	sound\psg1.bin
000E15C2 00                         			even
000E15C2                            ;PSG2:		incbin	sound\psg2.bin
000E15C2                            ;PSG3:		incbin	sound\psg3.bin
000E15C2                            ;PSG4:		incbin	sound\psg4.bin
000E15C2                            ;PSG6:		incbin	sound\psg6.bin
000E15C2                            ;PSG5:		incbin	sound\psg5.bin
000E15C2                            ;PSG7:		incbin	sound\psg7.bin
000E15C2                            PSG8:		incbin	sound\psg8.bin
000E15EA                            PSG9:		incbin	sound\psg9.bin
000E15FB                            
000E15FB                            
000E15FB                            S3_PSG1: incbin sound\S3psg\psg1.bin
000E15FE                            	even
000E15FE                            S3_PSG2: incbin sound\S3psg\psg2.bin
000E1606 00                         	even
000E1606                            S3_PSG3: incbin sound\S3psg\psg3.bin
000E1620 00                         	even
000E1620                            S3_PSG4: incbin sound\S3psg\psg4.bin
000E162C                            	even
000E162C                            S3_PSG5: incbin sound\S3psg\psg5.bin
000E1638 00                         	even
000E1638                            S3_PSG6: incbin sound\S3psg\psg6.bin
000E1648 00                         	even
000E1648                            S3_PSG7: incbin sound\S3psg\psg7.bin
000E1652 00                         	even
000E1652                            S3_PSG8: incbin sound\S3psg\psg8.bin
000E1664 00                         	even
000E1664                            S3_PSG9: incbin sound\S3psg\psg9.bin
000E1670 00                         	even
000E1670                            S3_PSGa: incbin sound\S3psg\psga.bin
000E1686 00                         	even
000E1686                            S3_PSGb: incbin sound\S3psg\psgb.bin
000E1690                            	even
000E1690                            S3_PSGc: incbin sound\S3psg\psgc.bin
000E169A 00                         	even
000E169A                            S3_PSGd: incbin sound\S3psg\psgd.bin
000E169E 00                         	even
000E169E                            S3_PSGe: incbin sound\S3psg\psge.bin
000E16A2 00                         	even
000E16A2                            S3_PSGf: incbin sound\S3psg\psgf.bin
000E16AA 00                         	even
000E16AA                            S3_PSG10: incbin sound\S3psg\psg10.bin
000E16CA 00                         	even
000E16CA                            S3_PSG11: incbin sound\S3psg\psg11.bin
000E16D2 00                         	even
000E16D2                            S3_PSG12: incbin sound\S3psg\psg12.bin
000E16DE 00                         	even
000E16DE                            S3_PSG13: incbin sound\S3psg\psg13.bin
000E16EE 00                         	even
000E16EE                            S3_PSG14: incbin sound\S3psg\psg14.bin
000E16F4                            	even
000E16F4                            S3_PSG15: incbin sound\S3psg\psg15.bin
000E1706 00                         	even
000E1706                            S3_PSG16: incbin sound\S3psg\psg16.bin
000E1712 00                         	even
000E1712                            S3_PSG17: incbin sound\S3psg\psg17.bin
000E1728 00                         	even
000E1728                            S3_PSG18: incbin sound\S3psg\psg18.bin
000E1742 00                         	even
000E1742                            S3_PSG19: incbin sound\S3psg\psg19.bin
000E174C 00                         	even
000E174C                            S3_PSG1a: incbin sound\S3psg\psg1a.bin
000E1754 00                         	even
000E1754                            S3_PSG1b: incbin sound\S3psg\psg1b.bin
000E175E 00                         	even
000E175E                            S3_PSG1c: incbin sound\S3psg\psg1c.bin
000E1770 00                         	even
000E1770                            S3_PSG1d: incbin sound\S3psg\psg1d.bin
000E179E 00                         	even
000E179E                            S3_PSG1e: incbin sound\S3psg\psg1e.bin
000E17A2                            	even
000E17A2                            S3_PSG1f: incbin sound\S3psg\psg1f.bin
000E17A6                            	even
000E17A6                            S3_PSG20: incbin sound\S3psg\psg20.bin
000E17B4 00                         	even
000E17B4                            S3_PSG21: incbin sound\S3psg\psg21.bin
000E17C6                            	even
000E17C6                            S3_PSG22: incbin sound\S3psg\psg22.bin
000E17CE 00                         	even
000E17CE                            S3_PSG23: incbin sound\S3psg\psg23.bin
000E17D8 00                         	even
000E17D8                            S3_PSG24: incbin sound\S3psg\psg24.bin
000E17DE 00                         	even
000E17DE                            S3_PSG25: incbin sound\S3psg\psg25.bin
000E17F0                            	even
000E17F0                            S3_PSG26: incbin sound\S3psg\psg26.bin
000E1856 00                         	even
000E1856                            S3_PSG27: incbin sound\S3psg\psg27.bin
000E1864 00                           	even
000E1864                            S3_PSG28: incbin sound\S3psg\psg28.bin
000E187C 00                           	even
000E187C                            S3_PSG29: incbin sound\S3psg\psg29.bin
000E1884 00                           	even
000E1884                            S3_PSG2A: incbin sound\S3psg\psg2A.bin
000E1896 00                           	even
000E1896                            S3_PSG2B: incbin sound\S3psg\psg2B.bin
000E18A2 00                           	even
000E18A2                            S3_PSG2C: incbin sound\S3psg\psg2C.bin
000E18CC                              	even
000E18CC                            S3_PSG2D: incbin sound\S3psg\psg2D.bin
000E18DC 00                           	even
000E18DC                            S3_PSG2E: incbin sound\S3psg\psg2E.bin
000E18F8                              	even
000E18F8                            S3_PSG2F: incbin sound\S3psg\psg2F.bin
000E1920                              	even
000E1920                            S3_PSG30: incbin sound\S3psg\psg30.bin
000E1932 00                           	even
000E1932                            
000E1932 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000E193A                            ; ---------------------------------------------------------------------------
000E193A                            ; Music	Pointers
000E193A                            ; ---------------------------------------------------------------------------
000E193A 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000E1942 0000 0000 0000 0000        		dc.l Music83, Music84
000E194A 0000 0000 0000 0000        		dc.l Music85, Music86
000E1952 0000 0000 0000 0000        		dc.l Music87, Music88
000E195A 0000 0000 0000 0000        		dc.l Music89, Music8A
000E1962 0000 0000 0000 0000        		dc.l Music8B, Music8C
000E196A 0000 0000 0000 0000        		dc.l Music8D, Music8E
000E1972 0000 0000 0000 0000        		dc.l Music8F, Music90
000E197A 0000 0000 0000 0000        		dc.l Music91, Music92
000E1982 0000 0000 0000 0000        		dc.l Music93, Music94
000E198A 0000 0000 0000 0000        		dc.l Music95, Music96
000E1992 0000 0000 0000 0000        		dc.l Music97, Music98
000E199A 0000 0000 0000 0000        		dc.l Music99, Music9A
000E19A2 0000 0000 0000 0000        		dc.l Music9B, Music9C
000E19AA 0000 0000 0000 0000        		dc.l Music9D, Music9E
000E19B2 0000 0000                  		dc.l Music9F
000E19B6                            ; ---------------------------------------------------------------------------
000E19B6                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000E19B6                            ; ---------------------------------------------------------------------------
000E19B6 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000E19C6 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000E19D6 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000E19E6 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000E19F6 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000E1A06 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000E1A16 9090 9090                  		dc.b $90, $90, $90, $90
000E1A1A                            
000E1A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1A1A                            
000E1A1A                            
000E1A1A                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
000E1A1A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000E1A22 4E71                       		nop	
000E1A24 4E71                       		nop	
000E1A26 4E71                       		nop	
000E1A28                            
000E1A28                            loc_71B5A:
000E1A28 0839 0000 00A1 1100        		btst	#0,($A11100).l
000E1A30 66F6                       		bne.s	loc_71B5A
000E1A32 4DF9 00FF F000             		lea	($FFF000).l,a6
000E1A38 422E 000E                  		clr.b	$E(a6)
000E1A3C 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000E1A40 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000E1A44 532E 0001                  		subq.b	#1,1(a6)
000E1A48 6600                       		bne.s	loc_71B9E
000E1A4A 4EBA 0000                  		jsr	sub_7260C(pc)
000E1A4E                            
000E1A4E                            loc_71B9E:
000E1A4E 102E 0004                  		move.b	4(a6),d0
000E1A52 6700                       		beq.s	loc_71BA8
000E1A54 4EBA 0000                  		jsr	sub_72504(pc)
000E1A58                            
000E1A58                            loc_71BA8:
000E1A58 4A2E 0024                  		tst.b	$24(a6)
000E1A5C 6700                       		beq.s	loc_71BB2
000E1A5E 4EBA 0000                  		jsr	sub_7267C(pc)
000E1A62                            
000E1A62                            loc_71BB2:
000E1A62 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000E1A66 6700                       		beq.s	loc_71BBC	; if not, branch
000E1A68 4EBA 0000                  		jsr	Sound_Play(pc)
000E1A6C                            
000E1A6C                            loc_71BBC:
000E1A6C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000E1A72 6700                       		beq.s	loc_71BC8
000E1A74 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000E1A78                            
000E1A78                            loc_71BC8:
000E1A78 4A38 C901                  		tst.b	($FFFFC901).w
000E1A7C 6700                       		beq.s	@cont
000E1A7E 5338 C901                  		subq.b	#1,($FFFFC901).w
000E1A82                            		
000E1A82                            @cont:
000E1A82 4BEE 0040                  		lea	$40(a6),a5
000E1A86 4A15                       		tst.b	(a5)
000E1A88 6A00                       		bpl.s	loc_71BD4
000E1A8A 4EBA 0000                  		jsr	sub_71C4E(pc)
000E1A8E                            
000E1A8E                            loc_71BD4:
000E1A8E 422E 0008                  		clr.b	8(a6)
000E1A92 7E05                       		moveq	#5,d7
000E1A94                            
000E1A94                            loc_71BDA:
000E1A94 DAFC 0030                  		adda.w	#$30,a5
000E1A98 4A15                       		tst.b	(a5)
000E1A9A 6A00                       		bpl.s	loc_71BE6
000E1A9C 4EBA 0000                  		jsr	sub_71CCA(pc)
000E1AA0                            
000E1AA0                            loc_71BE6:
000E1AA0 51CF FFF2                  		dbf	d7,loc_71BDA
000E1AA4                            
000E1AA4 7E02                       		moveq	#2,d7
000E1AA6                            
000E1AA6                            loc_71BEC:
000E1AA6 DAFC 0030                  		adda.w	#$30,a5
000E1AAA 4A15                       		tst.b	(a5)
000E1AAC 6A00                       		bpl.s	loc_71BF8
000E1AAE 4EBA 0000                  		jsr	sub_72850(pc)
000E1AB2                            
000E1AB2                            loc_71BF8:
000E1AB2 51CF FFF2                  		dbf	d7,loc_71BEC
000E1AB6                            
000E1AB6 1D7C 0080 000E             		move.b	#$80,$E(a6)
000E1ABC 7E02                       		moveq	#2,d7
000E1ABE                            
000E1ABE                            loc_71C04:
000E1ABE DAFC 0030                  		adda.w	#$30,a5
000E1AC2 4A15                       		tst.b	(a5)
000E1AC4 6A00                       		bpl.s	loc_71C10
000E1AC6 4EBA 0000                  		jsr	sub_71CCA(pc)
000E1ACA                            
000E1ACA                            loc_71C10:
000E1ACA 51CF FFF2                  		dbf	d7,loc_71C04
000E1ACE                            
000E1ACE 7E02                       		moveq	#2,d7
000E1AD0                            
000E1AD0                            loc_71C16:
000E1AD0 DAFC 0030                  		adda.w	#$30,a5
000E1AD4 4A15                       		tst.b	(a5)
000E1AD6 6A00                       		bpl.s	loc_71C22
000E1AD8 4EBA 0000                  		jsr	sub_72850(pc)
000E1ADC                            
000E1ADC                            loc_71C22:
000E1ADC 51CF FFF2                  		dbf	d7,loc_71C16
000E1AE0 1D7C 0040 000E             		move.b	#$40,$E(a6)
000E1AE6 DAFC 0030                  		adda.w	#$30,a5
000E1AEA 4A15                       		tst.b	(a5)
000E1AEC 6A00                       		bpl.s	loc_71C38
000E1AEE 4EBA 0000                  		jsr	sub_71CCA(pc)
000E1AF2                            
000E1AF2                            loc_71C38:
000E1AF2 DAFC 0030                  		adda.w	#$30,a5
000E1AF6 4A15                       		tst.b	(a5)
000E1AF8 6A00                       		bpl.s	loc_71C44
000E1AFA 4EBA 0000                  		jsr	sub_72850(pc)
000E1AFE                            
000E1AFE                            loc_71C44:
000E1AFE 1439 00A0 4000             		move.b	($A04000).l,d2
000E1B04 0802 0007                  		btst	#7,d2
000E1B08 66F4                       		bne.s	loc_71C44
000E1B0A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l
000E1B12 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000E1B1A 4E75                       		rts	
000E1B1C                            ; End of function sub_71B4C
000E1B1C                            
000E1B1C                            
000E1B1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1B1C                            
000E1B1C                            
000E1B1C                            sub_71C4E:				; XREF: sub_71B4C
000E1B1C 532D 000E                  		subq.b	#1,$E(a5)
000E1B20 6600                       		bne.s	locret_71CAA
000E1B22 1D7C 0080 0008             		move.b	#$80,8(a6)
000E1B28 286D 0004                  		movea.l	4(a5),a4
000E1B2C                            
000E1B2C                            loc_71C5E:
000E1B2C 7A00                       		moveq	#0,d5
000E1B2E 1A1C                       		move.b	(a4)+,d5
000E1B30 0C05 00E0                  		cmpi.b	#-$20,d5
000E1B34 6500                       		bcs.s	loc_71C6E
000E1B36 4EBA 0000                  		jsr	sub_72A5A(pc)
000E1B3A 60F0                       		bra.s	loc_71C5E
000E1B3C                            ; ===========================================================================
000E1B3C                            
000E1B3C                            loc_71C6E:
000E1B3C 4A05                       		tst.b	d5
000E1B3E 6A00                       		bpl.s	loc_71C84
000E1B40 1B45 0010                  		move.b	d5,$10(a5)
000E1B44 1A1C                       		move.b	(a4)+,d5
000E1B46 6A00                       		bpl.s	loc_71C84
000E1B48 534C                       		subq.w	#1,a4
000E1B4A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000E1B50 6000                       		bra.s	loc_71C88
000E1B52                            ; ===========================================================================
000E1B52                            
000E1B52                            loc_71C84:
000E1B52 4EBA 0000                  		jsr	sub_71D40(pc)
000E1B56                            
000E1B56                            loc_71C88:
000E1B56 2B4C 0004                  		move.l	a4,4(a5)
000E1B5A 0815 0002                  		btst	#2,(a5)
000E1B5E 6600                       		bne.s	locret_71CAA
000E1B60 7000                       		moveq	#0,d0
000E1B62 102D 0010                  		move.b	$10(a5),d0
000E1B66 0C00 0080                  		cmpi.b	#$80,d0
000E1B6A 6700                       		beq.s	locret_71CAA
000E1B6C 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000E1B72                            
000E1B72                            locret_71CAA:
000E1B72 4E75                       		rts	
000E1B74                            ; ===========================================================================
000E1B74                            
000E1B74                            loc_71CAC:
000E1B74 0400 0088                  		subi.b	#$88,d0
000E1B78 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000E1B7C 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000E1B82 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000E1B8A 4E75                       		rts	
000E1B8C                            ; End of function sub_71C4E
000E1B8C                            
000E1B8C                            ; ===========================================================================
000E1B8C 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000E1B92                            
000E1B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1B92                            
000E1B92                            
000E1B92                            sub_71CCA:				; XREF: sub_71B4C
000E1B92 532D 000E                  		subq.b	#1,$E(a5)
000E1B96 6600                       		bne.s	loc_71CE0
000E1B98 0895 0004                  		bclr	#4,(a5)
000E1B9C 4EBA 0000                  		jsr	sub_71CEC(pc)
000E1BA0 4EBA 0000                  		jsr	sub_71E18(pc)
000E1BA4 6000 0000                  		bra.w	loc_726E2
000E1BA8                            ; ===========================================================================
000E1BA8                            
000E1BA8                            loc_71CE0:
000E1BA8 4EBA 0000                  		jsr	sub_71D9E(pc)
000E1BAC 4EBA 0000                  		jsr	sub_71DC6(pc)
000E1BB0 6000 0000                  		bra.w	loc_71E24
000E1BB4                            ; End of function sub_71CCA
000E1BB4                            
000E1BB4                            
000E1BB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1BB4                            
000E1BB4                            
000E1BB4                            sub_71CEC:				; XREF: sub_71CCA
000E1BB4 286D 0004                  		movea.l	4(a5),a4
000E1BB8 0895 0001                  		bclr	#1,(a5)
000E1BBC                            
000E1BBC                            loc_71CF4:
000E1BBC 7A00                       		moveq	#0,d5
000E1BBE 1A1C                       		move.b	(a4)+,d5
000E1BC0 0C05 00E0                  		cmpi.b	#-$20,d5
000E1BC4 6500                       		bcs.s	loc_71D04
000E1BC6 4EBA 0000                  		jsr	sub_72A5A(pc)
000E1BCA 60F0                       		bra.s	loc_71CF4
000E1BCC                            ; ===========================================================================
000E1BCC                            
000E1BCC                            loc_71D04:
000E1BCC 4EBA 0000                  		jsr	sub_726FE(pc)
000E1BD0 4A05                       		tst.b	d5
000E1BD2 6A00                       		bpl.s	loc_71D1A
000E1BD4 4EBA 0000                  		jsr	sub_71D22(pc)
000E1BD8 1A1C                       		move.b	(a4)+,d5
000E1BDA 6A00                       		bpl.s	loc_71D1A
000E1BDC 534C                       		subq.w	#1,a4
000E1BDE 6000 0000                  		bra.w	sub_71D60
000E1BE2                            ; ===========================================================================
000E1BE2                            
000E1BE2                            loc_71D1A:
000E1BE2 4EBA 0000                  		jsr	sub_71D40(pc)
000E1BE6 6000 0000                  		bra.w	sub_71D60
000E1BEA                            ; End of function sub_71CEC
000E1BEA                            
000E1BEA                            
000E1BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1BEA                            
000E1BEA                            
000E1BEA                            sub_71D22:				; XREF: sub_71CEC
000E1BEA 0405 0080                  		subi.b	#$80,d5
000E1BEE 6700                       		beq.s	loc_71D58
000E1BF0 DA2D 0008                  		add.b	8(a5),d5
000E1BF4 0245 007F                  		andi.w	#$7F,d5
000E1BF8 E34D                       		lsl.w	#1,d5
000E1BFA 41FA 0000                  		lea	word_72790(pc),a0
000E1BFE 3C30 5000                  		move.w	(a0,d5.w),d6
000E1C02 3B46 0010                  		move.w	d6,$10(a5)
000E1C06 4E75                       		rts	
000E1C08                            ; End of function sub_71D22
000E1C08                            
000E1C08                            
000E1C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1C08                            
000E1C08                            
000E1C08                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000E1C08 1005                       		move.b	d5,d0
000E1C0A 122D 0002                  		move.b	2(a5),d1
000E1C0E                            
000E1C0E                            loc_71D46:
000E1C0E 5301                       		subq.b	#1,d1
000E1C10 6700                       		beq.s	loc_71D4E
000E1C12 D005                       		add.b	d5,d0
000E1C14 60F8                       		bra.s	loc_71D46
000E1C16                            ; ===========================================================================
000E1C16                            
000E1C16                            loc_71D4E:
000E1C16 1B40 000F                  		move.b	d0,$F(a5)
000E1C1A 1B40 000E                  		move.b	d0,$E(a5)
000E1C1E 4E75                       		rts	
000E1C20                            ; End of function sub_71D40
000E1C20                            
000E1C20                            ; ===========================================================================
000E1C20                            
000E1C20                            loc_71D58:				; XREF: sub_71D22
000E1C20 08D5 0001                  		bset	#1,(a5)
000E1C24 426D 0010                  		clr.w	$10(a5)
000E1C28                            
000E1C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1C28                            
000E1C28                            
000E1C28                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000E1C28 2B4C 0004                  		move.l	a4,4(a5)
000E1C2C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000E1C32 0815 0004                  		btst	#4,(a5)
000E1C36 6600                       		bne.s	locret_71D9C
000E1C38 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000E1C3E 422D 000C                  		clr.b	$C(a5)
000E1C42 0815 0003                  		btst	#3,(a5)
000E1C46 6700                       		beq.s	locret_71D9C
000E1C48 206D 0014                  		movea.l	$14(a5),a0
000E1C4C 1B58 0018                  		move.b	(a0)+,$18(a5)
000E1C50 1B58 0019                  		move.b	(a0)+,$19(a5)
000E1C54 1B58 001A                  		move.b	(a0)+,$1A(a5)
000E1C58 1018                       		move.b	(a0)+,d0
000E1C5A E208                       		lsr.b	#1,d0
000E1C5C 1B40 001B                  		move.b	d0,$1B(a5)
000E1C60 426D 001C                  		clr.w	$1C(a5)
000E1C64                            
000E1C64                            locret_71D9C:
000E1C64 4E75                       		rts	
000E1C66                            ; End of function sub_71D60
000E1C66                            
000E1C66                            
000E1C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1C66                            
000E1C66                            
000E1C66                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000E1C66 4A2D 0012                  		tst.b	$12(a5)
000E1C6A 6700                       		beq.s	locret_71DC4
000E1C6C 532D 0012                  		subq.b	#1,$12(a5)
000E1C70 6600                       		bne.s	locret_71DC4
000E1C72 08D5 0001                  		bset	#1,(a5)
000E1C76 4A2D 0001                  		tst.b	1(a5)
000E1C7A 6B00 0000                  		bmi.w	loc_71DBE
000E1C7E 4EBA 0000                  		jsr	sub_726FE(pc)
000E1C82 584F                       		addq.w	#4,sp
000E1C84 4E75                       		rts	
000E1C86                            ; ===========================================================================
000E1C86                            
000E1C86                            loc_71DBE:
000E1C86 4EBA 0000                  		jsr	sub_729A0(pc)
000E1C8A 584F                       		addq.w	#4,sp
000E1C8C                            
000E1C8C                            locret_71DC4:
000E1C8C 4E75                       		rts	
000E1C8E                            ; End of function sub_71D9E
000E1C8E                            
000E1C8E                            
000E1C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1C8E                            
000E1C8E                            
000E1C8E                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000E1C8E 584F                       		addq.w	#4,sp
000E1C90 0815 0001                  		btst	#1,(a5)		; Is note playing?
000E1C94 6600                       		bne.s	 locret_71E16	; no - return
000E1C96 0815 0003                  		btst	#3,(a5)
000E1C9A 6700                       		beq.s	locret_71E16
000E1C9C 4A2D 0018                  		tst.b	$18(a5)
000E1CA0 6700                       		beq.s	loc_71DDA
000E1CA2 532D 0018                  		subq.b	#1,$18(a5)
000E1CA6 4E75                       		rts	
000E1CA8                            ; ===========================================================================
000E1CA8                            
000E1CA8                            loc_71DDA:
000E1CA8 532D 0019                  		subq.b	#1,$19(a5)
000E1CAC 6700                       		beq.s	loc_71DE2
000E1CAE 4E75                       		rts	
000E1CB0                            ; ===========================================================================
000E1CB0                            
000E1CB0                            loc_71DE2:
000E1CB0 206D 0014                  		movea.l	$14(a5),a0
000E1CB4 1B68 0001 0019             		move.b	1(a0),$19(a5)
000E1CBA 4A2D 001B                  		tst.b	$1B(a5)
000E1CBE 6600                       		bne.s	loc_71DFE
000E1CC0 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000E1CC6 442D 001A                  		neg.b	$1A(a5)
000E1CCA 4E75                       		rts	
000E1CCC                            ; ===========================================================================
000E1CCC                            
000E1CCC                            loc_71DFE:
000E1CCC 532D 001B                  		subq.b	#1,$1B(a5)
000E1CD0 1C2D 001A                  		move.b	$1A(a5),d6
000E1CD4 4886                       		ext.w	d6
000E1CD6 DC6D 001C                  		add.w	$1C(a5),d6
000E1CDA 3B46 001C                  		move.w	d6,$1C(a5)
000E1CDE DC6D 0010                  		add.w	$10(a5),d6
000E1CE2 594F                       		subq.w	#4,sp
000E1CE4                            
000E1CE4                            locret_71E16:
000E1CE4 4E75                       		rts	
000E1CE6                            ; End of function sub_71DC6
000E1CE6                            
000E1CE6                            
000E1CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1CE6                            
000E1CE6                            
000E1CE6                            sub_71E18:				; XREF: sub_71CCA
000E1CE6 0815 0001                  		btst	#1,(a5)
000E1CEA 6600                       		bne.s	locret_71E48
000E1CEC 3C2D 0010                  		move.w	$10(a5),d6
000E1CF0 6700                       		beq.s	loc_71E4A
000E1CF2                            
000E1CF2                            loc_71E24:				; XREF: sub_71CCA
000E1CF2 102D 001E                  		move.b	$1E(a5),d0
000E1CF6 4880                       		ext.w	d0
000E1CF8 DC40                       		add.w	d0,d6
000E1CFA 0815 0002                  		btst	#2,(a5)
000E1CFE 6600                       		bne.s	locret_71E48
000E1D00 3206                       		move.w	d6,d1
000E1D02 E049                       		lsr.w	#8,d1
000E1D04 103C 00A4                  		move.b	#-$5C,d0
000E1D08 4EBA 0000                  		jsr	sub_72722(pc)
000E1D0C 1206                       		move.b	d6,d1
000E1D0E 103C 00A0                  		move.b	#-$60,d0
000E1D12 4EBA 0000                  		jsr	sub_72722(pc)
000E1D16                            
000E1D16                            locret_71E48:
000E1D16 4E75                       		rts	
000E1D18                            ; ===========================================================================
000E1D18                            
000E1D18                            loc_71E4A:
000E1D18 08D5 0001                  		bset	#1,(a5)
000E1D1C 4E75                       		rts	
000E1D1E                            ; End of function sub_71E18
000E1D1E                            
000E1D1E                            ; ===========================================================================
000E1D1E                            
000E1D1E                            loc_71E50:				; XREF: sub_71B4C
000E1D1E 6B00                       		bmi.s	loc_71E94
000E1D20 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000E1D26 6700 0000                  		beq.w	loc_71EFE
000E1D2A 1D7C 0002 0003             		move.b	#2,3(a6)
000E1D30 7602                       		moveq	#2,d3
000E1D32 103C 00B4                  		move.b	#-$4C,d0
000E1D36 7200                       		moveq	#0,d1
000E1D38                            
000E1D38                            loc_71E6A:
000E1D38 4EBA 0000                  		jsr	sub_7272E(pc)
000E1D3C 4EBA 0000                  		jsr	sub_72764(pc)
000E1D40 5200                       		addq.b	#1,d0
000E1D42 51CB FFF4                  		dbf	d3,loc_71E6A
000E1D46                            
000E1D46 7602                       		moveq	#2,d3
000E1D48 7028                       		moveq	#$28,d0
000E1D4A                            
000E1D4A                            loc_71E7C:
000E1D4A 1203                       		move.b	d3,d1
000E1D4C 4EBA 0000                  		jsr	sub_7272E(pc)
000E1D50 5801                       		addq.b	#4,d1
000E1D52 4EBA 0000                  		jsr	sub_7272E(pc)
000E1D56 51CB FFF2                  		dbf	d3,loc_71E7C
000E1D5A                            
000E1D5A 4EBA 0000                  		jsr	sub_729B6(pc)
000E1D5E 13FC 007F 00A0 1FFF        		move.b	#$7F,($A01FFF).l; pause DAC
000E1D66 6000 FD96                  		bra.w	loc_71C44
000E1D6A                            ; ===========================================================================
000E1D6A                            
000E1D6A                            loc_71E94:				; XREF: loc_71E50
000E1D6A 422E 0003                  		clr.b	3(a6)
000E1D6E 7630                       		moveq	#$30,d3
000E1D70 4BEE 0040                  		lea	$40(a6),a5
000E1D74 7806                       		moveq	#6,d4
000E1D76                            
000E1D76                            loc_71EA0:
000E1D76 0815 0007                  		btst	#7,(a5)
000E1D7A 6700                       		beq.s	loc_71EB8
000E1D7C 0815 0002                  		btst	#2,(a5)
000E1D80 6600                       		bne.s	loc_71EB8
000E1D82 103C 00B4                  		move.b	#-$4C,d0
000E1D86 122D 000A                  		move.b	$A(a5),d1
000E1D8A 4EBA 0000                  		jsr	sub_72722(pc)
000E1D8E                            
000E1D8E                            loc_71EB8:
000E1D8E DAC3                       		adda.w	d3,a5
000E1D90 51CC FFE4                  		dbf	d4,loc_71EA0
000E1D94                            
000E1D94 4BEE 0220                  		lea	$220(a6),a5
000E1D98 7802                       		moveq	#2,d4
000E1D9A                            
000E1D9A                            loc_71EC4:
000E1D9A 0815 0007                  		btst	#7,(a5)
000E1D9E 6700                       		beq.s	loc_71EDC
000E1DA0 0815 0002                  		btst	#2,(a5)
000E1DA4 6600                       		bne.s	loc_71EDC
000E1DA6 103C 00B4                  		move.b	#-$4C,d0
000E1DAA 122D 000A                  		move.b	$A(a5),d1
000E1DAE 4EBA 0000                  		jsr	sub_72722(pc)
000E1DB2                            
000E1DB2                            loc_71EDC:
000E1DB2 DAC3                       		adda.w	d3,a5
000E1DB4 51CC FFE4                  		dbf	d4,loc_71EC4
000E1DB8                            
000E1DB8 4BEE 0340                  		lea	$340(a6),a5
000E1DBC 0815 0007                  		btst	#7,(a5)
000E1DC0 6700                       		beq.s	@UnpauseDAC
000E1DC2 0815 0002                  		btst	#2,(a5)
000E1DC6 6600                       		bne.s	@UnpauseDAC
000E1DC8 103C 00B4                  		move.b	#-$4C,d0
000E1DCC 122D 000A                  		move.b	$A(a5),d1
000E1DD0 4EBA 0000                  		jsr	sub_72722(pc)
000E1DD4                            
000E1DD4                            @UnpauseDAC:
000E1DD4 13FC 0000 00A0 1FFF        		move.b	#0,($A01FFF).l	; unpause DAC
000E1DDC                            
000E1DDC                            loc_71EFE:
000E1DDC 6000 FD20                  		bra.w	loc_71C44
000E1DE0                            
000E1DE0                            ; ---------------------------------------------------------------------------
000E1DE0                            ; Subroutine to	play a sound or	music track
000E1DE0                            ; ---------------------------------------------------------------------------
000E1DE0                            
000E1DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1DE0                            
000E1DE0                            
000E1DE0                            Sound_Play:				; XREF: sub_71B4C
000E1DE0 2079 000E 14CA             		movea.l	(Go_SoundTypes).l,a0
000E1DE6 43EE 000A                  		lea	$A(a6),a1	; load music track number
000E1DEA 1616                       		move.b	0(a6),d3
000E1DEC 7802                       		moveq	#2,d4
000E1DEE                            
000E1DEE                            loc_71F12:
000E1DEE 1011                       		move.b	(a1),d0		; move track number to d0
000E1DF0 1200                       		move.b	d0,d1
000E1DF2 4219                       		clr.b	(a1)+
000E1DF4 0400 0081                  		subi.b	#$81,d0
000E1DF8 6500                       		bcs.s	loc_71F3E
000E1DFA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000E1E00 6700                       		beq.s	loc_71F2C
000E1E02 1D41 000A                  		move.b	d1,$A(a6)
000E1E06 6000                       		bra.s	loc_71F3E
000E1E08                            ; ===========================================================================
000E1E08                            
000E1E08                            loc_71F2C:
000E1E08 0240 007F                  		andi.w	#$7F,d0
000E1E0C 1430 0000                  		move.b	(a0,d0.w),d2
000E1E10 B403                       		cmp.b	d3,d2
000E1E12 6500                       		bcs.s	loc_71F3E
000E1E14 1602                       		move.b	d2,d3
000E1E16 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000E1E1A                            
000E1E1A                            loc_71F3E:
000E1E1A 51CC FFD2                  		dbf	d4,loc_71F12
000E1E1E                            
000E1E1E 4A03                       		tst.b	d3
000E1E20 6B00                       		bmi.s	locret_71F4A
000E1E22 1C83                       		move.b	d3,0(a6)
000E1E24                            
000E1E24                            locret_71F4A:
000E1E24 4E75                       		rts	
000E1E26                            ; End of function Sound_Play
000E1E26                            
000E1E26                            
000E1E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E1E26                            
000E1E26                            
000E1E26                            Sound_ChkValue:				; XREF: sub_71B4C
000E1E26 7E00                       		moveq	#0,d7
000E1E28 1E2E 0009                  		move.b	9(a6),d7
000E1E2C 6700 0000                  		beq.w	Sound_E4
000E1E30 6A00                       		bpl.s	locret_71F8C
000E1E32 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000E1E38 0C07 009F                  		cmpi.b	#$9F,d7
000E1E3C 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000E1E40 0C07 00A0                  		cmpi.b	#$A0,d7
000E1E44 6500 0000                  		bcs.w	locret_71F8C
000E1E48 0C07 00CF                  		cmpi.b	#$CF,d7
000E1E4C 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000E1E50 0C07 00D0                  		cmpi.b	#$D0,d7
000E1E54 6500 0000                  		bcs.w	locret_71F8C
000E1E58 0C07 00D1                  		cmpi.b	#$D1,d7
000E1E5C 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0
000E1E60 0C07 00DF                  		cmp.b	#$DF,d7
000E1E64                            
000E1E64 6F00 0000                  		ble	Sound_D1toDF
000E1E68 0C07 00E4                  		cmpi.b	#$E4,d7
000E1E6C 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
000E1E6E                            
000E1E6E                            locret_71F8C:
000E1E6E 4E75                       		rts	
000E1E70                            ; ===========================================================================
000E1E70                            
000E1E70                            Sound_E0toE4:				; XREF: Sound_ChkValue
000E1E70 0407 00E0                  		subi.b	#$E0,d7
000E1E74 E54F                       		lsl.w	#2,d7
000E1E76 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000E1E7A                            ; ===========================================================================
000E1E7A                            
000E1E7A                            Sound_ExIndex:
000E1E7A 6000 0000                  		bra.w	Sound_E0
000E1E7E                            ; ===========================================================================
000E1E7E 6000 0000                  		bra.w	Sound_E1
000E1E82                            ; ===========================================================================
000E1E82 6000 0000                  		bra.w	Sound_E2
000E1E86                            ; ===========================================================================
000E1E86 6000 0000                  		bra.w	Sound_E3
000E1E8A                            ; ===========================================================================
000E1E8A 6000 0000                  		bra.w	Sound_E4
000E1E8E                            ; ===========================================================================
000E1E8E                            ; ---------------------------------------------------------------------------
000E1E8E                            ; Play "Say-gaa" PCM sound
000E1E8E                            ; ---------------------------------------------------------------------------
000E1E8E                            
000E1E8E                            Sound_E1:
000E1E8E 103C 00B6                  		move.b	#$B6, d0	; Register: FM3/6 Panning
000E1E92 123C 00C0                  		move.b	#$C0, d1	; Value: Enable both channels
000E1E96 4EBA 0000                  		jsr	sub_72764(pc)	; Write to YM2612 Port 1 (for FM6) [sub_72764]
000E1E9A 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000E1EA0 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000E1EA6 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000E1EAE                            PlayPCM_Loop:	  
000E1EAE 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000E1EB4 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000E1EB8 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000E1EBC 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000E1EBE 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000E1EC0 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000E1EC4 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000E1ECA 4EB8 0F42                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000E1ECE 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000E1ED4 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000E1ED6 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000E1ED8                            return_PlayPCM: 
000E1ED8 584F                       		addq.w	#4,sp 
000E1EDA 4E75                       		rts
000E1EDC                            ; ===========================================================================
000E1EDC                            ; ---------------------------------------------------------------------------
000E1EDC                            ; Play music track $81-$9F
000E1EDC                            ; ---------------------------------------------------------------------------
000E1EDC                            
000E1EDC                            Sound_81to9F:				; XREF: Sound_ChkValue
000E1EDC 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000E1EE0 6600                       		bne.s	loc_72024	; if not, branch
000E1EE2 4A2E 0027                  		tst.b	$27(a6)
000E1EE6 6600 0000                  		bne.w	loc_721B6
000E1EEA 4BEE 0040                  		lea	$40(a6),a5
000E1EEE 7009                       		moveq	#9,d0
000E1EF0                            
000E1EF0                            loc_71FE6:
000E1EF0 0895 0002                  		bclr	#2,(a5)
000E1EF4 DAFC 0030                  		adda.w	#$30,a5
000E1EF8 51C8 FFF6                  		dbf	d0,loc_71FE6
000E1EFC                            
000E1EFC 4BEE 0220                  		lea	$220(a6),a5
000E1F00 7005                       		moveq	#5,d0
000E1F02                            
000E1F02                            loc_71FF8:
000E1F02 0895 0007                  		bclr	#7,(a5)
000E1F06 DAFC 0030                  		adda.w	#$30,a5
000E1F0A 51C8 FFF6                  		dbf	d0,loc_71FF8
000E1F0E 4216                       		clr.b	0(a6)
000E1F10 204E                       		movea.l	a6,a0
000E1F12 43EE 03A0                  		lea	$3A0(a6),a1
000E1F16 303C 0087                  		move.w	#$87,d0
000E1F1A                            
000E1F1A                            loc_72012:
000E1F1A 22D8                       		move.l	(a0)+,(a1)+
000E1F1C 51C8 FFFC                  		dbf	d0,loc_72012
000E1F20                            
000E1F20 1D7C 0080 0027             		move.b	#$80,$27(a6)
000E1F26 4216                       		clr.b	0(a6)
000E1F28 6000                       		bra.s	loc_7202C
000E1F2A                            ; ===========================================================================
000E1F2A                            
000E1F2A                            loc_72024:
000E1F2A 422E 0027                  		clr.b	$27(a6)
000E1F2E 422E 0026                  		clr.b	$26(a6)
000E1F32                            
000E1F32                            loc_7202C:
000E1F32 4EBA 0000                  		jsr	sub_725CA(pc)
000E1F36 2879 000E 14DA             		movea.l	(off_719A0).l,a4
000E1F3C 0407 0081                  		subi.b	#$81,d7
000E1F40 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000E1F46 2879 000E 14D2             		movea.l	(Go_MusicIndex).l,a4
000E1F4C E54F                       		lsl.w	#2,d7
000E1F4E 2874 7000                  		movea.l	(a4,d7.w),a4
000E1F52 7000                       		moveq	#0,d0
000E1F54 3014                       		move.w	(a4),d0
000E1F56 D08C                       		add.l	a4,d0
000E1F58 2D40 0018                  		move.l	d0,$18(a6)
000E1F5C 102C 0005                  		move.b	5(a4),d0
000E1F60 1D40 0028                  		move.b	d0,$28(a6)
000E1F64 4A2E 002A                  		tst.b	$2A(a6)
000E1F68 6700                       		beq.s	loc_72068
000E1F6A 102E 0029                  		move.b	$29(a6),d0
000E1F6E                            
000E1F6E                            loc_72068:
000E1F6E 1D40 0002                  		move.b	d0,2(a6)
000E1F72 1D40 0001                  		move.b	d0,1(a6)
000E1F76 7200                       		moveq	#0,d1
000E1F78 264C                       		movea.l	a4,a3
000E1F7A 5C4C                       		addq.w	#6,a4
000E1F7C 182B 0004                  		move.b	4(a3),d4
000E1F80 7C30                       		moveq	#$30,d6
000E1F82 1A3C 0001                  		move.b	#1,d5
000E1F86 7E00                       		moveq	#0,d7
000E1F88 1E2B 0002                  		move.b	2(a3),d7
000E1F8C 6700 0000                  		beq.w	loc_72114
000E1F90 5307                       		subq.b	#1,d7
000E1F92 123C 00C0                  		move.b	#-$40,d1
000E1F96 43EE 0040                  		lea	$40(a6),a1
000E1F9A 45FA 0000                  		lea	byte_721BA(pc),a2
000E1F9E                            
000E1F9E                            loc_72098:
000E1F9E 08D1 0007                  		bset	#7,(a1)
000E1FA2 135A 0001                  		move.b	(a2)+,1(a1)
000E1FA6 1344 0002                  		move.b	d4,2(a1)
000E1FAA 1346 000D                  		move.b	d6,$D(a1)
000E1FAE 1341 000A                  		move.b	d1,$A(a1)
000E1FB2 1345 000E                  		move.b	d5,$E(a1)
000E1FB6 7000                       		moveq	#0,d0
000E1FB8 301C                       		move.w	(a4)+,d0
000E1FBA D08B                       		add.l	a3,d0
000E1FBC 2340 0004                  		move.l	d0,4(a1)
000E1FC0 335C 0008                  		move.w	(a4)+,8(a1)
000E1FC4 D2C6                       		adda.w	d6,a1
000E1FC6 51CF FFD6                  		dbf	d7,loc_72098
000E1FCA 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000E1FD0 6600                       		bne.s	loc_720D8
000E1FD2 702B                       		moveq	#$2B,d0
000E1FD4 7200                       		moveq	#0,d1
000E1FD6 4EBA 0000                  		jsr	sub_7272E(pc)
000E1FDA 6000 0000                  		bra.w	loc_72114
000E1FDE                            ; ===========================================================================
000E1FDE                            
000E1FDE                            loc_720D8:
000E1FDE 7028                       		moveq	#$28,d0
000E1FE0 7206                       		moveq	#6,d1
000E1FE2 4EBA 0000                  		jsr	sub_7272E(pc)
000E1FE6 103C 0042                  		move.b	#$42,d0
000E1FEA 727F                       		moveq	#$7F,d1
000E1FEC 4EBA 0000                  		jsr	sub_72764(pc)
000E1FF0 103C 004A                  		move.b	#$4A,d0
000E1FF4 727F                       		moveq	#$7F,d1
000E1FF6 4EBA 0000                  		jsr	sub_72764(pc)
000E1FFA 103C 0046                  		move.b	#$46,d0
000E1FFE 727F                       		moveq	#$7F,d1
000E2000 4EBA 0000                  		jsr	sub_72764(pc)
000E2004 103C 004E                  		move.b	#$4E,d0
000E2008 727F                       		moveq	#$7F,d1
000E200A 4EBA 0000                  		jsr	sub_72764(pc)
000E200E 103C 00B6                  		move.b	#-$4A,d0
000E2012 123C 00C0                  		move.b	#-$40,d1
000E2016 4EBA 0000                  		jsr	sub_72764(pc)
000E201A                            
000E201A                            loc_72114:
000E201A 7E00                       		moveq	#0,d7
000E201C 1E2B 0003                  		move.b	3(a3),d7
000E2020 6700                       		beq.s	loc_72154
000E2022 5307                       		subq.b	#1,d7
000E2024 43EE 0190                  		lea	$190(a6),a1
000E2028 45FA 0000                  		lea	byte_721C2(pc),a2
000E202C                            
000E202C                            loc_72126:
000E202C 08D1 0007                  		bset	#7,(a1)
000E2030 135A 0001                  		move.b	(a2)+,1(a1)
000E2034 1344 0002                  		move.b	d4,2(a1)
000E2038 1346 000D                  		move.b	d6,$D(a1)
000E203C 1345 000E                  		move.b	d5,$E(a1)
000E2040 7000                       		moveq	#0,d0
000E2042 301C                       		move.w	(a4)+,d0
000E2044 D08B                       		add.l	a3,d0
000E2046 2340 0004                  		move.l	d0,4(a1)
000E204A 335C 0008                  		move.w	(a4)+,8(a1)
000E204E 101C                       		move.b	(a4)+,d0
000E2050 135C 000B                  		move.b	(a4)+,$B(a1)
000E2054 D2C6                       		adda.w	d6,a1
000E2056 51CF FFD4                  		dbf	d7,loc_72126
000E205A                            
000E205A                            loc_72154:
000E205A 43EE 0220                  		lea	$220(a6),a1
000E205E 7E05                       		moveq	#5,d7
000E2060                            
000E2060                            loc_7215A:
000E2060 4A11                       		tst.b	(a1)
000E2062 6A00 0000                  		bpl.w	loc_7217C
000E2066 7000                       		moveq	#0,d0
000E2068 1029 0001                  		move.b	1(a1),d0
000E206C 6B00                       		bmi.s	loc_7216E
000E206E 5500                       		subq.b	#2,d0
000E2070 E508                       		lsl.b	#2,d0
000E2072 6000                       		bra.s	loc_72170
000E2074                            ; ===========================================================================
000E2074                            
000E2074                            loc_7216E:
000E2074 E608                       		lsr.b	#3,d0
000E2076                            
000E2076                            loc_72170:
000E2076 41FA 0000                  		lea	dword_722CC(pc),a0
000E207A 2070 0000                  		movea.l	(a0,d0.w),a0
000E207E 08D0 0002                  		bset	#2,(a0)
000E2082                            
000E2082                            loc_7217C:
000E2082 D2C6                       		adda.w	d6,a1
000E2084 51CF FFDA                  		dbf	d7,loc_7215A
000E2088                            
000E2088 4A6E 0340                  		tst.w	$340(a6)
000E208C 6A00                       		bpl.s	loc_7218E
000E208E 08EE 0002 0100             		bset	#2,$100(a6)
000E2094                            
000E2094                            loc_7218E:
000E2094 4A6E 0370                  		tst.w	$370(a6)
000E2098 6A00                       		bpl.s	loc_7219A
000E209A 08EE 0002 01F0             		bset	#2,$1F0(a6)
000E20A0                            
000E20A0                            loc_7219A:
000E20A0 4BEE 0070                  		lea	$70(a6),a5
000E20A4 7805                       		moveq	#5,d4
000E20A6                            
000E20A6                            loc_721A0:
000E20A6 4EBA 0000                  		jsr	sub_726FE(pc)
000E20AA DAC6                       		adda.w	d6,a5
000E20AC 51CC FFF8                  		dbf	d4,loc_721A0
000E20B0 7802                       		moveq	#2,d4
000E20B2                            
000E20B2                            loc_721AC:
000E20B2 4EBA 0000                  		jsr	sub_729A0(pc)
000E20B6 DAC6                       		adda.w	d6,a5
000E20B8 51CC FFF8                  		dbf	d4,loc_721AC
000E20BC                            
000E20BC                            loc_721B6:
000E20BC 584F                       		addq.w	#4,sp
000E20BE 4E75                       		rts	
000E20C0                            ; ===========================================================================
000E20C0 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000E20C8                            		even
000E20C8 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000E20CC                            		even
000E20CC                            ; ===========================================================================
000E20CC                            ; ---------------------------------------------------------------------------
000E20CC                            ; Play normal sound effect
000E20CC                            ; ---------------------------------------------------------------------------
000E20CC                            
000E20CC                            Sound_D1toDF:
000E20CC 4A2E 0027                  		tst.b	$27(a6)
000E20D0 6600 0000                  		bne.w	loc_722C6
000E20D4 4A2E 0004                  		tst.b	4(a6)
000E20D8 6600 0000                  		bne.w	loc_722C6
000E20DC 4A2E 0024                  		tst.b	$24(a6)
000E20E0 6600 0000                  		bne.w	loc_722C6
000E20E4 4238 C900                  		clr.b	($FFFFC900).w
000E20E8 0C07 00D1                  		cmp.b	#$D1,d7		; is this the Spin Dash sound?
000E20EC 6600                       		bne.s	@cont3	; if not, branch
000E20EE 3F00                       		move.w	d0,-(sp)
000E20F0 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
000E20F4 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
000E20F8 6600                       		bne.s	@cont1		; if it is, branch
000E20FA 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
000E20FE                            		
000E20FE                            @cont1:
000E20FE 5200                       		addq.b	#1,d0
000E2100 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
000E2104 6400                       		bcc.s	@cont2		; if it has, branch
000E2106 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
000E210A                            		
000E210A                            @cont2:
000E210A 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
000E2110 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
000E2116 301F                       		move.w	(sp)+,d0
000E2118                            		
000E2118                            @cont3:
000E2118 2079 000E 14D6             		movea.l	(Go_SoundIndex).l,a0
000E211E 0407 00A1                  		sub.b	#$A1,d7
000E2122 6000 0000                  		bra	SoundEffects_Common
000E2126                            
000E2126                            Sound_A0toCF:				; XREF: Sound_ChkValue
000E2126 4A2E 0027                  		tst.b	$27(a6)
000E212A 6600 0000                  		bne.w	loc_722C6
000E212E 4A2E 0004                  		tst.b	4(a6)
000E2132 6600 0000                  		bne.w	loc_722C6
000E2136 4A2E 0024                  		tst.b	$24(a6)
000E213A 6600 0000                  		bne.w	loc_722C6
000E213E 4238 C900                  		clr.b	($FFFFC900).w
000E2142 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000E2146 6600                       		bne.s	Sound_notB5	; if not, branch
000E2148 4A2E 002B                  		tst.b	$2B(a6)
000E214C 6600                       		bne.s	loc_721EE
000E214E 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000E2152                            
000E2152                            loc_721EE:
000E2152 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000E2158                            
000E2158                            Sound_notB5:
000E2158 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000E215C 6600                       		bne.s	Sound_notA7	; if not, branch
000E215E 4A2E 002C                  		tst.b	$2C(a6)
000E2162 6600 0000                  		bne.w	locret_722C4
000E2166 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000E216C                            
000E216C                            Sound_notA7:
000E216C 2079 000E 14D6             		movea.l	(Go_SoundIndex).l,a0
000E2172 0407 00A0                  		subi.b	#$A0,d7
000E2176                            
000E2176                            SoundEffects_Common:		
000E2176 E54F                       		lsl.w	#2,d7
000E2178 2670 7000                  		movea.l	(a0,d7.w),a3
000E217C 224B                       		movea.l	a3,a1
000E217E 7200                       		moveq	#0,d1
000E2180 3219                       		move.w	(a1)+,d1
000E2182 D28B                       		add.l	a3,d1
000E2184 1A19                       		move.b	(a1)+,d5
000E2186 1E19                       		move.b	(a1)+,d7
000E2188 5307                       		subq.b	#1,d7
000E218A 7C30                       		moveq	#$30,d6
000E218C                            
000E218C                            loc_72228:
000E218C 7600                       		moveq	#0,d3
000E218E 1629 0001                  		move.b	1(a1),d3
000E2192 1803                       		move.b	d3,d4
000E2194 6B00                       		bmi.s	loc_72244
000E2196 5543                       		subq.w	#2,d3
000E2198 E54B                       		lsl.w	#2,d3
000E219A 4BFA 0000                  		lea	dword_722CC(pc),a5
000E219E 2A75 3000                  		movea.l	(a5,d3.w),a5
000E21A2 08D5 0002                  		bset	#2,(a5)
000E21A6 6000                       		bra.s	loc_7226E
000E21A8                            ; ===========================================================================
000E21A8                            
000E21A8                            loc_72244:
000E21A8 E64B                       		lsr.w	#3,d3
000E21AA 4BFA 0000                  		lea	dword_722CC(pc),a5
000E21AE 2A75 3000                  		movea.l	(a5,d3.w),a5
000E21B2 08D5 0002                  		bset	#2,(a5)
000E21B6 0C04 00C0                  		cmpi.b	#$C0,d4
000E21BA 6600                       		bne.s	loc_7226E
000E21BC 1004                       		move.b	d4,d0
000E21BE 0000 001F                  		ori.b	#$1F,d0
000E21C2 13C0 00C0 0011             		move.b	d0,($C00011).l
000E21C8 0840 0005                  		bchg	#5,d0
000E21CC 13C0 00C0 0011             		move.b	d0,($C00011).l
000E21D2                            
000E21D2                            loc_7226E:
000E21D2 4BFA 0000                  		lea	dword_722EC(pc),a5
000E21D6 2A75 3000                  		movea.l	(a5,d3.w),a5
000E21DA 244D                       		movea.l	a5,a2
000E21DC 700B                       		moveq	#$B,d0
000E21DE                            
000E21DE                            loc_72276:
000E21DE 429A                       		clr.l	(a2)+
000E21E0 51C8 FFFC                  		dbf	d0,loc_72276
000E21E4                            
000E21E4 3A99                       		move.w	(a1)+,(a5)
000E21E6 1B45 0002                  		move.b	d5,2(a5)
000E21EA 7000                       		moveq	#0,d0
000E21EC 3019                       		move.w	(a1)+,d0
000E21EE D08B                       		add.l	a3,d0
000E21F0 2B40 0004                  		move.l	d0,4(a5)
000E21F4 3B59 0008                  		move.w	(a1)+,8(a5)
000E21F8 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
000E21FC 6700                       		beq.s	@cont		; if not, branch
000E21FE 3F00                       		move.w	d0,-(sp)
000E2200 1038 C902                  		move.b	($FFFFC902).w,d0
000E2204 D12D 0008                  		add.b	d0,8(a5)
000E2208 301F                       		move.w	(sp)+,d0
000E220A                            		
000E220A                            @cont:
000E220A 1B7C 0001 000E             		move.b	#1,$E(a5)
000E2210 1B46 000D                  		move.b	d6,$D(a5)
000E2214 4A04                       		tst.b	d4
000E2216 6B00                       		bmi.s	loc_722A8
000E2218 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000E221E 2B41 0020                  		move.l	d1,$20(a5)
000E2222                            
000E2222                            loc_722A8:
000E2222 51CF FF68                  		dbf	d7,loc_72228
000E2226                            
000E2226 4A2E 0250                  		tst.b	$250(a6)
000E222A 6A00                       		bpl.s	loc_722B8
000E222C 08EE 0002 0340             		bset	#2,$340(a6)
000E2232                            
000E2232                            loc_722B8:
000E2232 4A2E 0310                  		tst.b	$310(a6)
000E2236 6A00                       		bpl.s	locret_722C4
000E2238 08EE 0002 0370             		bset	#2,$370(a6)
000E223E                            
000E223E                            locret_722C4:
000E223E 4E75                       		rts	
000E2240                            ; ===========================================================================
000E2240                            
000E2240                            loc_722C6:
000E2240 4216                       		clr.b	0(a6)
000E2242 4E75                       		rts	
000E2244                            ; ===========================================================================
000E2244 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000E2248 0000 0000                  		dc.l 0
000E224C 00FF F100                  		dc.l $FFF100
000E2250 00FF F130                  		dc.l $FFF130
000E2254 00FF F190                  		dc.l $FFF190
000E2258 00FF F1C0                  		dc.l $FFF1C0
000E225C 00FF F1F0                  		dc.l $FFF1F0
000E2260 00FF F1F0                  		dc.l $FFF1F0
000E2264 00FF F220                  dword_722EC:	dc.l $FFF220
000E2268 0000 0000                  		dc.l 0
000E226C 00FF F250                  		dc.l $FFF250
000E2270 00FF F280                  		dc.l $FFF280
000E2274 00FF F2B0                  		dc.l $FFF2B0
000E2278 00FF F2E0                  		dc.l $FFF2E0
000E227C 00FF F310                  		dc.l $FFF310
000E2280 00FF F310                  		dc.l $FFF310
000E2284                            ; ===========================================================================
000E2284                            ; ---------------------------------------------------------------------------
000E2284                            ; Play GHZ waterfall sound
000E2284                            ; ---------------------------------------------------------------------------
000E2284                            
000E2284                            Sound_D0toDF:				; XREF: Sound_ChkValue
000E2284 4A2E 0027                  		tst.b	$27(a6)
000E2288 6600 0000                  		bne.w	locret_723C6
000E228C 4A2E 0004                  		tst.b	4(a6)
000E2290 6600 0000                  		bne.w	locret_723C6
000E2294 4A2E 0024                  		tst.b	$24(a6)
000E2298 6600 0000                  		bne.w	locret_723C6
000E229C 2079 000E 14CE             		movea.l	(Go_SoundD0).l,a0
000E22A2 0407 00D0                  		subi.b	#$D0,d7
000E22A6 E54F                       		lsl.w	#2,d7
000E22A8 2670 7000                  		movea.l	(a0,d7.w),a3
000E22AC 224B                       		movea.l	a3,a1
000E22AE 7000                       		moveq	#0,d0
000E22B0 3019                       		move.w	(a1)+,d0
000E22B2 D08B                       		add.l	a3,d0
000E22B4 2D40 0020                  		move.l	d0,$20(a6)
000E22B8 1A19                       		move.b	(a1)+,d5
000E22BA 1E19                       		move.b	(a1)+,d7
000E22BC 5307                       		subq.b	#1,d7
000E22BE 7C30                       		moveq	#$30,d6
000E22C0                            
000E22C0                            loc_72348:
000E22C0 1829 0001                  		move.b	1(a1),d4
000E22C4 6B00                       		bmi.s	loc_7235A
000E22C6 08EE 0002 0100             		bset	#2,$100(a6)
000E22CC 4BEE 0340                  		lea	$340(a6),a5
000E22D0 6000                       		bra.s	loc_72364
000E22D2                            ; ===========================================================================
000E22D2                            
000E22D2                            loc_7235A:
000E22D2 08EE 0002 01F0             		bset	#2,$1F0(a6)
000E22D8 4BEE 0370                  		lea	$370(a6),a5
000E22DC                            
000E22DC                            loc_72364:
000E22DC 244D                       		movea.l	a5,a2
000E22DE 700B                       		moveq	#$B,d0
000E22E0                            
000E22E0                            loc_72368:
000E22E0 429A                       		clr.l	(a2)+
000E22E2 51C8 FFFC                  		dbf	d0,loc_72368
000E22E6                            
000E22E6 3A99                       		move.w	(a1)+,(a5)
000E22E8 1B45 0002                  		move.b	d5,2(a5)
000E22EC 7000                       		moveq	#0,d0
000E22EE 3019                       		move.w	(a1)+,d0
000E22F0 D08B                       		add.l	a3,d0
000E22F2 2B40 0004                  		move.l	d0,4(a5)
000E22F6 3B59 0008                  		move.w	(a1)+,8(a5)
000E22FA 1B7C 0001 000E             		move.b	#1,$E(a5)
000E2300 1B46 000D                  		move.b	d6,$D(a5)
000E2304 4A04                       		tst.b	d4
000E2306 6B00                       		bmi.s	loc_72396
000E2308 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000E230E                            
000E230E                            loc_72396:
000E230E 51CF FFB0                  		dbf	d7,loc_72348
000E2312                            
000E2312 4A2E 0250                  		tst.b	$250(a6)
000E2316 6A00                       		bpl.s	loc_723A6
000E2318 08EE 0002 0340             		bset	#2,$340(a6)
000E231E                            
000E231E                            loc_723A6:
000E231E 4A2E 0310                  		tst.b	$310(a6)
000E2322 6A00                       		bpl.s	locret_723C6
000E2324 08EE 0002 0370             		bset	#2,$370(a6)
000E232A 0004 001F                  		ori.b	#$1F,d4
000E232E 13C4 00C0 0011             		move.b	d4,($C00011).l
000E2334 0844 0005                  		bchg	#5,d4
000E2338 13C4 00C0 0011             		move.b	d4,($C00011).l
000E233E                            
000E233E                            locret_723C6:
000E233E 4E75                       		rts	
000E2340                            ; End of function Sound_ChkValue
000E2340                            
000E2340                            ; ===========================================================================
000E2340 00FF F100                  		dc.l $FFF100
000E2344 00FF F1F0                  		dc.l $FFF1F0
000E2348 00FF F250                  		dc.l $FFF250
000E234C 00FF F310                  		dc.l $FFF310
000E2350 00FF F340                  		dc.l $FFF340
000E2354 00FF F370                  		dc.l $FFF370
000E2358                            
000E2358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2358                            
000E2358                            
000E2358                            Snd_FadeOut1:				; XREF: Sound_E0
000E2358 4216                       		clr.b	0(a6)
000E235A 4BEE 0220                  		lea	$220(a6),a5
000E235E 7E05                       		moveq	#5,d7
000E2360                            
000E2360                            loc_723EA:
000E2360 4A15                       		tst.b	(a5)
000E2362 6A00 0000                  		bpl.w	loc_72472
000E2366 0895 0007                  		bclr	#7,(a5)
000E236A 7600                       		moveq	#0,d3
000E236C 162D 0001                  		move.b	1(a5),d3
000E2370 6B00                       		bmi.s	loc_7243C
000E2372 4EBA 0000                  		jsr	sub_726FE(pc)
000E2376 0C03 0004                  		cmpi.b	#4,d3
000E237A 6600                       		bne.s	loc_72416
000E237C 4A2E 0340                  		tst.b	$340(a6)
000E2380 6A00                       		bpl.s	loc_72416
000E2382 4BEE 0340                  		lea	$340(a6),a5
000E2386 226E 0020                  		movea.l	$20(a6),a1
000E238A 6000                       		bra.s	loc_72428
000E238C                            ; ===========================================================================
000E238C                            
000E238C                            loc_72416:
000E238C 5503                       		subq.b	#2,d3
000E238E E50B                       		lsl.b	#2,d3
000E2390 41FA FEB2                  		lea	dword_722CC(pc),a0
000E2394 264D                       		movea.l	a5,a3
000E2396 2A70 3000                  		movea.l	(a0,d3.w),a5
000E239A 226E 0018                  		movea.l	$18(a6),a1
000E239E                            
000E239E                            loc_72428:
000E239E 0895 0002                  		bclr	#2,(a5)
000E23A2 08D5 0001                  		bset	#1,(a5)
000E23A6 102D 000B                  		move.b	$B(a5),d0
000E23AA 4EBA 0000                  		jsr	sub_72C4E(pc)
000E23AE 2A4B                       		movea.l	a3,a5
000E23B0 6000                       		bra.s	loc_72472
000E23B2                            ; ===========================================================================
000E23B2                            
000E23B2                            loc_7243C:
000E23B2 4EBA 0000                  		jsr	sub_729A0(pc)
000E23B6 41EE 0370                  		lea	$370(a6),a0
000E23BA 0C03 00E0                  		cmpi.b	#$E0,d3
000E23BE 6700                       		beq.s	loc_7245A
000E23C0 0C03 00C0                  		cmpi.b	#$C0,d3
000E23C4 6700                       		beq.s	loc_7245A
000E23C6 E60B                       		lsr.b	#3,d3
000E23C8 41FA FE7A                  		lea	dword_722CC(pc),a0
000E23CC 2070 3000                  		movea.l	(a0,d3.w),a0
000E23D0                            
000E23D0                            loc_7245A:
000E23D0 0890 0002                  		bclr	#2,(a0)
000E23D4 08D0 0001                  		bset	#1,(a0)
000E23D8 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000E23DE 6600                       		bne.s	loc_72472
000E23E0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000E23E8                            
000E23E8                            loc_72472:
000E23E8 DAFC 0030                  		adda.w	#$30,a5
000E23EC 51CF FF72                  		dbf	d7,loc_723EA
000E23F0                            
000E23F0 4E75                       		rts	
000E23F2                            ; End of function Snd_FadeOut1
000E23F2                            
000E23F2                            
000E23F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E23F2                            
000E23F2                            
000E23F2                            Snd_FadeOut2:				; XREF: Sound_E0
000E23F2 4BEE 0340                  		lea	$340(a6),a5
000E23F6 4A15                       		tst.b	(a5)
000E23F8 6A00                       		bpl.s	loc_724AE
000E23FA 0895 0007                  		bclr	#7,(a5)
000E23FE 0815 0002                  		btst	#2,(a5)
000E2402 6600                       		bne.s	loc_724AE
000E2404 4EBA 0000                  		jsr	loc_7270A(pc)
000E2408 4BEE 0100                  		lea	$100(a6),a5
000E240C 0895 0002                  		bclr	#2,(a5)
000E2410 08D5 0001                  		bset	#1,(a5)
000E2414 4A15                       		tst.b	(a5)
000E2416 6A00                       		bpl.s	loc_724AE
000E2418 226E 0018                  		movea.l	$18(a6),a1
000E241C 102D 000B                  		move.b	$B(a5),d0
000E2420 4EBA 0000                  		jsr	sub_72C4E(pc)
000E2424                            
000E2424                            loc_724AE:
000E2424 4BEE 0370                  		lea	$370(a6),a5
000E2428 4A15                       		tst.b	(a5)
000E242A 6A00                       		bpl.s	locret_724E4
000E242C 0895 0007                  		bclr	#7,(a5)
000E2430 0815 0002                  		btst	#2,(a5)
000E2434 6600                       		bne.s	locret_724E4
000E2436 4EBA 0000                  		jsr	loc_729A6(pc)
000E243A 4BEE 01F0                  		lea	$1F0(a6),a5
000E243E 0895 0002                  		bclr	#2,(a5)
000E2442 08D5 0001                  		bset	#1,(a5)
000E2446 4A15                       		tst.b	(a5)
000E2448 6A00                       		bpl.s	locret_724E4
000E244A 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000E2450 6600                       		bne.s	locret_724E4
000E2452 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000E245A                            
000E245A                            locret_724E4:
000E245A 4E75                       		rts	
000E245C                            ; End of function Snd_FadeOut2
000E245C                            
000E245C                            ; ===========================================================================
000E245C                            ; ---------------------------------------------------------------------------
000E245C                            ; Fade out music
000E245C                            ; ---------------------------------------------------------------------------
000E245C                            
000E245C                            Sound_E0:				; XREF: Sound_ExIndex
000E245C 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000E2460 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000E2464 1D7C 0003 0006             		move.b	#3,6(a6)
000E246A 1D7C 0028 0004             		move.b	#$28,4(a6)
000E2470 422E 0040                  		clr.b	$40(a6)
000E2474 422E 002A                  		clr.b	$2A(a6)
000E2478 4E75                       		rts	
000E247A                            
000E247A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E247A                            
000E247A                            
000E247A                            sub_72504:				; XREF: sub_71B4C
000E247A 102E 0006                  		move.b	6(a6),d0
000E247E 6700                       		beq.s	loc_72510
000E2480 532E 0006                  		subq.b	#1,6(a6)
000E2484 4E75                       		rts	
000E2486                            ; ===========================================================================
000E2486                            
000E2486                            loc_72510:
000E2486 532E 0004                  		subq.b	#1,4(a6)
000E248A 6700 0000                  		beq.w	Sound_E4
000E248E 1D7C 0003 0006             		move.b	#3,6(a6)
000E2494 4BEE 0070                  		lea	$70(a6),a5
000E2498 7E05                       		moveq	#5,d7
000E249A                            
000E249A                            loc_72524:
000E249A 4A15                       		tst.b	(a5)
000E249C 6A00                       		bpl.s	loc_72538
000E249E 522D 0009                  		addq.b	#1,9(a5)
000E24A2 6A00                       		bpl.s	loc_72534
000E24A4 0895 0007                  		bclr	#7,(a5)
000E24A8 6000                       		bra.s	loc_72538
000E24AA                            ; ===========================================================================
000E24AA                            
000E24AA                            loc_72534:
000E24AA 4EBA 0000                  		jsr	sub_72CB4(pc)
000E24AE                            
000E24AE                            loc_72538:
000E24AE DAFC 0030                  		adda.w	#$30,a5
000E24B2 51CF FFE6                  		dbf	d7,loc_72524
000E24B6                            
000E24B6 7E02                       		moveq	#2,d7
000E24B8                            
000E24B8                            loc_72542:
000E24B8 4A15                       		tst.b	(a5)
000E24BA 6A00                       		bpl.s	loc_72560
000E24BC 522D 0009                  		addq.b	#1,9(a5)
000E24C0 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000E24C6 6500                       		bcs.s	loc_72558
000E24C8 0895 0007                  		bclr	#7,(a5)
000E24CC 6000                       		bra.s	loc_72560
000E24CE                            ; ===========================================================================
000E24CE                            
000E24CE                            loc_72558:
000E24CE 1C2D 0009                  		move.b	9(a5),d6
000E24D2 4EBA 0000                  		jsr	sub_7296A(pc)
000E24D6                            
000E24D6                            loc_72560:
000E24D6 DAFC 0030                  		adda.w	#$30,a5
000E24DA 51CF FFDC                  		dbf	d7,loc_72542
000E24DE                            
000E24DE 4E75                       		rts	
000E24E0                            ; End of function sub_72504
000E24E0                            
000E24E0                            
000E24E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E24E0                            
000E24E0                            
000E24E0                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000E24E0 7602                       		moveq	#2,d3
000E24E2 7028                       		moveq	#$28,d0
000E24E4                            
000E24E4                            loc_7256E:
000E24E4 1203                       		move.b	d3,d1
000E24E6 4EBA 0000                  		jsr	sub_7272E(pc)
000E24EA 5801                       		addq.b	#4,d1
000E24EC 4EBA 0000                  		jsr	sub_7272E(pc)
000E24F0 51CB FFF2                  		dbf	d3,loc_7256E
000E24F4                            
000E24F4 7040                       		moveq	#$40,d0
000E24F6 727F                       		moveq	#$7F,d1
000E24F8 7802                       		moveq	#2,d4
000E24FA                            
000E24FA                            loc_72584:
000E24FA 7603                       		moveq	#3,d3
000E24FC                            
000E24FC                            loc_72586:
000E24FC 4EBA 0000                  		jsr	sub_7272E(pc)
000E2500 4EBA 0000                  		jsr	sub_72764(pc)
000E2504 5840                       		addq.w	#4,d0
000E2506 51CB FFF4                  		dbf	d3,loc_72586
000E250A                            
000E250A 0400 000F                  		subi.b	#$F,d0
000E250E 51CC FFEA                  		dbf	d4,loc_72584
000E2512                            
000E2512 4E75                       		rts	
000E2514                            ; End of function sub_7256A
000E2514                            
000E2514                            ; ===========================================================================
000E2514                            ; ---------------------------------------------------------------------------
000E2514                            ; Stop music
000E2514                            ; ---------------------------------------------------------------------------
000E2514                            
000E2514                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
000E2514 702B                       		moveq	#$2B,d0
000E2516 123C 0080                  		move.b	#$80,d1
000E251A 4EBA 0000                  		jsr	sub_7272E(pc)
000E251E 7027                       		moveq	#$27,d0
000E2520 7200                       		moveq	#0,d1
000E2522 4EBA 0000                  		jsr	sub_7272E(pc)
000E2526 204E                       		movea.l	a6,a0
000E2528 303C 00E3                  		move.w	#$E3,d0
000E252C                            
000E252C                            loc_725B6:
000E252C 4298                       		clr.l	(a0)+
000E252E 51C8 FFFC                  		dbf	d0,loc_725B6
000E2532                            
000E2532 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000E2538 4EBA FFA6                  		jsr	sub_7256A(pc)
000E253C 13FC 0080 00A0 1FFF        		move.b	#$80,($A01FFF).l ; stop DAC playback
000E2544 6000 0000                  		bra.w	sub_729B6
000E2548                            
000E2548                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2548                            
000E2548                            
000E2548                            sub_725CA:				; XREF: Sound_ChkValue
000E2548 204E                       		movea.l	a6,a0
000E254A 1216                       		move.b	0(a6),d1
000E254C 142E 0027                  		move.b	$27(a6),d2
000E2550 162E 002A                  		move.b	$2A(a6),d3
000E2554 182E 0026                  		move.b	$26(a6),d4
000E2558 3A2E 000A                  		move.w	$A(a6),d5
000E255C 303C 0087                  		move.w	#$87,d0
000E2560                            
000E2560                            loc_725E4:
000E2560 4298                       		clr.l	(a0)+
000E2562 51C8 FFFC                  		dbf	d0,loc_725E4
000E2566                            
000E2566 1C81                       		move.b	d1,0(a6)
000E2568 1D42 0027                  		move.b	d2,$27(a6)
000E256C 1D43 002A                  		move.b	d3,$2A(a6)
000E2570 1D44 0026                  		move.b	d4,$26(a6)
000E2574 3D45 000A                  		move.w	d5,$A(a6)
000E2578 1D7C 0080 0009             		move.b	#$80,9(a6)
000E257E 4EBA FF60                  		jsr	sub_7256A(pc)
000E2582 6000 0000                  		bra.w	sub_729B6
000E2586                            ; End of function sub_725CA
000E2586                            
000E2586                            
000E2586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2586                            
000E2586                            
000E2586                            sub_7260C:				; XREF: sub_71B4C
000E2586 1D6E 0002 0001             		move.b	2(a6),1(a6)
000E258C 41EE 004E                  		lea	$4E(a6),a0
000E2590 7030                       		moveq	#$30,d0
000E2592 7209                       		moveq	#9,d1
000E2594                            
000E2594                            loc_7261A:
000E2594 5210                       		addq.b	#1,(a0)
000E2596 D0C0                       		adda.w	d0,a0
000E2598 51C9 FFFA                  		dbf	d1,loc_7261A
000E259C                            
000E259C 4E75                       		rts	
000E259E                            ; End of function sub_7260C
000E259E                            
000E259E                            ; ===========================================================================
000E259E                            ; ---------------------------------------------------------------------------
000E259E                            ; Speed	up music
000E259E                            ; ---------------------------------------------------------------------------
000E259E                            
000E259E                            Sound_E2:				; XREF: Sound_ExIndex
000E259E 4A2E 0027                  		tst.b	$27(a6)
000E25A2 6600                       		bne.s	loc_7263E
000E25A4 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000E25AA 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000E25B0 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000E25B6 4E75                       		rts	
000E25B8                            ; ===========================================================================
000E25B8                            
000E25B8                            loc_7263E:
000E25B8 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000E25BE 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000E25C4 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000E25CA 4E75                       		rts	
000E25CC                            ; ===========================================================================
000E25CC                            ; ---------------------------------------------------------------------------
000E25CC                            ; Change music back to normal speed
000E25CC                            ; ---------------------------------------------------------------------------
000E25CC                            
000E25CC                            Sound_E3:				; XREF: Sound_ExIndex
000E25CC 4A2E 0027                  		tst.b	$27(a6)
000E25D0 6600                       		bne.s	loc_7266A
000E25D2 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000E25D8 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000E25DE 422E 002A                  		clr.b	$2A(a6)
000E25E2 4E75                       		rts	
000E25E4                            ; ===========================================================================
000E25E4                            
000E25E4                            loc_7266A:
000E25E4 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000E25EA 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000E25F0 422E 03CA                  		clr.b	$3CA(a6)
000E25F4 4E75                       		rts	
000E25F6                            
000E25F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E25F6                            
000E25F6                            
000E25F6                            sub_7267C:				; XREF: sub_71B4C
000E25F6 4A2E 0025                  		tst.b	$25(a6)
000E25FA 6700                       		beq.s	loc_72688
000E25FC 532E 0025                  		subq.b	#1,$25(a6)
000E2600 4E75                       		rts	
000E2602                            ; ===========================================================================
000E2602                            
000E2602                            loc_72688:
000E2602 4A2E 0026                  		tst.b	$26(a6)
000E2606 6700                       		beq.s	loc_726D6
000E2608 532E 0026                  		subq.b	#1,$26(a6)
000E260C 1D7C 0002 0025             		move.b	#2,$25(a6)
000E2612 4BEE 0070                  		lea	$70(a6),a5
000E2616 7E05                       		moveq	#5,d7
000E2618                            
000E2618                            loc_7269E:
000E2618 4A15                       		tst.b	(a5)
000E261A 6A00                       		bpl.s	loc_726AA
000E261C 532D 0009                  		subq.b	#1,9(a5)
000E2620 4EBA 0000                  		jsr	sub_72CB4(pc)
000E2624                            
000E2624                            loc_726AA:
000E2624 DAFC 0030                  		adda.w	#$30,a5
000E2628 51CF FFEE                  		dbf	d7,loc_7269E
000E262C 7E02                       		moveq	#2,d7
000E262E                            
000E262E                            loc_726B4:
000E262E 4A15                       		tst.b	(a5)
000E2630 6A00                       		bpl.s	loc_726CC
000E2632 532D 0009                  		subq.b	#1,9(a5)
000E2636 1C2D 0009                  		move.b	9(a5),d6
000E263A 0C06 0010                  		cmpi.b	#$10,d6
000E263E 6500                       		bcs.s	loc_726C8
000E2640 7C0F                       		moveq	#$F,d6
000E2642                            
000E2642                            loc_726C8:
000E2642 4EBA 0000                  		jsr	sub_7296A(pc)
000E2646                            
000E2646                            loc_726CC:
000E2646 DAFC 0030                  		adda.w	#$30,a5
000E264A 51CF FFE2                  		dbf	d7,loc_726B4
000E264E 4E75                       		rts	
000E2650                            ; ===========================================================================
000E2650                            
000E2650                            loc_726D6:
000E2650 08AE 0002 0040             		bclr	#2,$40(a6)
000E2656 422E 0024                  		clr.b	$24(a6)
000E265A                            
000E265A 4A2E 0040                  		tst.b	$40(a6)					; is the DAC channel running?
000E265E 6A00                       		bpl.s	Resume_NoDAC				; if not, branch
000E2660                            
000E2660 70B6                       		moveq	#$FFFFFFB6,d0				; prepare FM channel 3/6 L/R/AMS/FMS address
000E2662 122E 004A                  		move.b	$4A(a6),d1				; load DAC channel's L/R/AMS/FMS value
000E2666 4EFA 0000                  		jmp	sub_72764(pc)				; write to FM 6
000E266A                            
000E266A                            Resume_NoDAC:
000E266A 4E75                       		rts
000E266C                            ; End of function sub_7267C
000E266C                            
000E266C                            ; ===========================================================================
000E266C                            
000E266C                            loc_726E2:				; XREF: sub_71CCA
000E266C 0815 0001                  		btst	#1,(a5)
000E2670 6600                       		bne.s	locret_726FC
000E2672 0815 0002                  		btst	#2,(a5)
000E2676 6600                       		bne.s	locret_726FC
000E2678 7028                       		moveq	#$28,d0
000E267A 122D 0001                  		move.b	1(a5),d1
000E267E 0001 00F0                  		ori.b	#-$10,d1
000E2682 6000 0000                  		bra.w	sub_7272E
000E2686                            ; ===========================================================================
000E2686                            
000E2686                            locret_726FC:
000E2686 4E75                       		rts	
000E2688                            
000E2688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2688                            
000E2688                            
000E2688                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000E2688 0815 0004                  		btst	#4,(a5)
000E268C 6600                       		bne.s	locret_72714
000E268E 0815 0002                  		btst	#2,(a5)
000E2692 6600                       		bne.s	locret_72714
000E2694                            
000E2694                            loc_7270A:				; XREF: Snd_FadeOut2
000E2694 7028                       		moveq	#$28,d0
000E2696 122D 0001                  		move.b	1(a5),d1
000E269A 6000 0000                  		bra.w	sub_7272E
000E269E                            ; ===========================================================================
000E269E                            
000E269E                            locret_72714:
000E269E 4E75                       		rts	
000E26A0                            ; End of function sub_726FE
000E26A0                            
000E26A0                            ; ===========================================================================
000E26A0                            
000E26A0                            loc_72716:				; XREF: sub_72A5A
000E26A0 0815 0002                  		btst	#2,(a5)
000E26A4 6600                       		bne.s	locret_72720
000E26A6 6000 0000                  		bra.w	sub_72722
000E26AA                            ; ===========================================================================
000E26AA                            
000E26AA                            locret_72720:
000E26AA 4E75                       		rts	
000E26AC                            
000E26AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E26AC                            
000E26AC                            
000E26AC                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000E26AC 082D 0002 0001             		btst	#2,1(a5)
000E26B2 6600                       		bne.s	loc_7275A
000E26B4 D02D 0001                  		add.b	1(a5),d0
000E26B8                            ; End of function sub_72722
000E26B8                            
000E26B8                            
000E26B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E26B8                            
000E26B8                            
000E26B8                            sub_7272E:				; XREF: loc_71E6A
000E26B8 1439 00A0 4000             		move.b	($A04000).l,d2
000E26BE 0802 0007                  		btst	#7,d2
000E26C2 66F4                       		bne.s	sub_7272E
000E26C4 13C0 00A0 4000             		move.b	d0,($A04000).l
000E26CA 4E71                       		nop	
000E26CC 4E71                       		nop	
000E26CE 4E71                       		nop	
000E26D0                            
000E26D0                            loc_72746:
000E26D0 1439 00A0 4000             		move.b	($A04000).l,d2
000E26D6 0802 0007                  		btst	#7,d2
000E26DA 66F4                       		bne.s	loc_72746
000E26DC                            
000E26DC 13C1 00A0 4001             		move.b	d1,($A04001).l
000E26E2 4E75                       		rts	
000E26E4                            ; End of function sub_7272E
000E26E4                            
000E26E4                            ; ===========================================================================
000E26E4                            
000E26E4                            loc_7275A:				; XREF: sub_72722
000E26E4 142D 0001                  		move.b	1(a5),d2
000E26E8 0882 0002                  		bclr	#2,d2
000E26EC D002                       		add.b	d2,d0
000E26EE                            
000E26EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E26EE                            
000E26EE                            
000E26EE                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000E26EE 1439 00A0 4000             		move.b	($A04000).l,d2
000E26F4 0802 0007                  		btst	#7,d2
000E26F8 66F4                       		bne.s	sub_72764
000E26FA 13C0 00A0 4002             		move.b	d0,($A04002).l
000E2700 4E71                       		nop	
000E2702 4E71                       		nop	
000E2704 4E71                       		nop	
000E2706                            
000E2706                            loc_7277C:
000E2706 1439 00A0 4000             		move.b	($A04000).l,d2
000E270C 0802 0007                  		btst	#7,d2
000E2710 66F4                       		bne.s	loc_7277C
000E2712                            
000E2712 13C1 00A0 4003             		move.b	d1,($A04003).l
000E2718 4E75                       		rts	
000E271A                            ; End of function sub_72764
000E271A                            
000E271A                            ; ===========================================================================
000E271A 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000E272C 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000E273E 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000E274E 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000E275E 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000E276E 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000E277E 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000E278E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000E279E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000E27AE 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000E27BE 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000E27CE 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000E27DA                            
000E27DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E27DA                            
000E27DA                            
000E27DA                            sub_72850:				; XREF: sub_71B4C
000E27DA 532D 000E                  		subq.b	#1,$E(a5)
000E27DE 6600                       		bne.s	loc_72866
000E27E0 0895 0004                  		bclr	#4,(a5)
000E27E4 4EBA 0000                  		jsr	sub_72878(pc)
000E27E8 4EBA 0000                  		jsr	sub_728DC(pc)
000E27EC 6000 0000                  		bra.w	loc_7292E
000E27F0                            ; ===========================================================================
000E27F0                            
000E27F0                            loc_72866:
000E27F0 4EBA F474                  		jsr	sub_71D9E(pc)
000E27F4 4EBA 0000                  		jsr	sub_72926(pc)
000E27F8 4EBA F494                  		jsr	sub_71DC6(pc)
000E27FC 4EBA 0000                  		jsr	sub_728E2(pc)
000E2800 4E75                       		rts	
000E2802                            ; End of function sub_72850
000E2802                            
000E2802                            
000E2802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2802                            
000E2802                            
000E2802                            sub_72878:				; XREF: sub_72850
000E2802 0895 0001                  		bclr	#1,(a5)
000E2806 286D 0004                  		movea.l	4(a5),a4
000E280A                            
000E280A                            loc_72880:
000E280A 7A00                       		moveq	#0,d5
000E280C 1A1C                       		move.b	(a4)+,d5
000E280E 0C05 00E0                  		cmpi.b	#$E0,d5
000E2812 6500                       		bcs.s	loc_72890
000E2814 4EBA 0000                  		jsr	sub_72A5A(pc)
000E2818 60F0                       		bra.s	loc_72880
000E281A                            ; ===========================================================================
000E281A                            
000E281A                            loc_72890:
000E281A 4A05                       		tst.b	d5
000E281C 6A00                       		bpl.s	loc_728A4
000E281E 4EBA 0000                  		jsr	sub_728AC(pc)
000E2822 1A1C                       		move.b	(a4)+,d5
000E2824 4A05                       		tst.b	d5
000E2826 6A00                       		bpl.s	loc_728A4
000E2828 534C                       		subq.w	#1,a4
000E282A 6000 F3FC                  		bra.w	sub_71D60
000E282E                            ; ===========================================================================
000E282E                            
000E282E                            loc_728A4:
000E282E 4EBA F3D8                  		jsr	sub_71D40(pc)
000E2832 6000 F3F4                  		bra.w	sub_71D60
000E2836                            ; End of function sub_72878
000E2836                            
000E2836                            
000E2836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2836                            
000E2836                            
000E2836                            sub_728AC:				; XREF: sub_72878
000E2836 0405 0081                  		subi.b	#$81,d5
000E283A 6500                       		bcs.s	loc_728CA
000E283C DA2D 0008                  		add.b	8(a5),d5
000E2840 0245 007F                  		andi.w	#$7F,d5
000E2844 E34D                       		lsl.w	#1,d5
000E2846 41FA 0000                  		lea	word_729CE(pc),a0
000E284A 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000E2850 6000 F3D6                  		bra.w	sub_71D60
000E2854                            ; ===========================================================================
000E2854                            
000E2854                            loc_728CA:
000E2854 08D5 0001                  		bset	#1,(a5)
000E2858 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000E285E 4EBA F3C8                  		jsr	sub_71D60(pc)
000E2862 6000 0000                  		bra.w	sub_729A0
000E2866                            ; End of function sub_728AC
000E2866                            
000E2866                            
000E2866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2866                            
000E2866                            
000E2866                            sub_728DC:				; XREF: sub_72850
000E2866 3C2D 0010                  		move.w	$10(a5),d6
000E286A 6B00                       		bmi.s	loc_72920
000E286C                            ; End of function sub_728DC
000E286C                            
000E286C                            
000E286C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E286C                            
000E286C                            
000E286C                            sub_728E2:				; XREF: sub_72850
000E286C 102D 001E                  		move.b	$1E(a5),d0
000E2870 4880                       		ext.w	d0
000E2872 DC40                       		add.w	d0,d6
000E2874 0815 0002                  		btst	#2,(a5)
000E2878 6600                       		bne.s	locret_7291E
000E287A 0815 0001                  		btst	#1,(a5)
000E287E 6600                       		bne.s	locret_7291E
000E2880 102D 0001                  		move.b	1(a5),d0
000E2884 0C00 00E0                  		cmpi.b	#$E0,d0
000E2888 6600                       		bne.s	loc_72904
000E288A 103C 00C0                  		move.b	#$C0,d0
000E288E                            
000E288E                            loc_72904:
000E288E 3206                       		move.w	d6,d1
000E2890 0201 000F                  		andi.b	#$F,d1
000E2894 8001                       		or.b	d1,d0
000E2896 E84E                       		lsr.w	#4,d6
000E2898 0206 003F                  		andi.b	#$3F,d6
000E289C 13C0 00C0 0011             		move.b	d0,($C00011).l
000E28A2 13C6 00C0 0011             		move.b	d6,($C00011).l
000E28A8                            
000E28A8                            locret_7291E:
000E28A8 4E75                       		rts	
000E28AA                            ; End of function sub_728E2
000E28AA                            
000E28AA                            ; ===========================================================================
000E28AA                            
000E28AA                            loc_72920:				; XREF: sub_728DC
000E28AA 08D5 0001                  		bset	#1,(a5)
000E28AE 4E75                       		rts	
000E28B0                            
000E28B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E28B0                            
000E28B0                            
000E28B0                            sub_72926:				; XREF: sub_72850
000E28B0 4A2D 000B                  		tst.b	$B(a5)
000E28B4 6700 0000                  		beq.w	locret_7298A
000E28B8                            
000E28B8                            loc_7292E:				; XREF: sub_72850
000E28B8 1C2D 0009                  		move.b	9(a5),d6
000E28BC 7000                       		moveq	#0,d0
000E28BE 102D 000B                  		move.b	$B(a5),d0
000E28C2 6700                       		beq.s	sub_7296A
000E28C4 2079 000E 14DE             		movea.l	(Go_PSGIndex).l,a0
000E28CA 5340                       		subq.w	#1,d0
000E28CC E548                       		lsl.w	#2,d0
000E28CE 2070 0000                  		movea.l	(a0,d0.w),a0
000E28D2 102D 000C                  		move.b	$C(a5),d0
000E28D6 1030 0000                  		move.b	(a0,d0.w),d0
000E28DA 522D 000C                  		addq.b	#1,$C(a5)
000E28DE 0800 0007                  		btst	#7,d0
000E28E2 6700                       		beq.s	loc_72960
000E28E4 0C00 0080                  		cmpi.b	#$80,d0
000E28E8 6700                       		beq.s	loc_7299A
000E28EA                            
000E28EA                            loc_72960:
000E28EA DC40                       		add.w	d0,d6
000E28EC 0C06 0010                  		cmpi.b	#$10,d6
000E28F0 6500                       		bcs.s	sub_7296A
000E28F2 7C0F                       		moveq	#$F,d6
000E28F4                            ; End of function sub_72926
000E28F4                            
000E28F4                            
000E28F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E28F4                            
000E28F4                            
000E28F4                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000E28F4 0C06 0010                  		cmpi.b	#$10, d6	; Is volume $10 or higher?
000E28F8 6500                       		blo.s	L_psgsendvol	; Branch if not
000E28FA 7C0F                       		moveq	#$F, d6		; Limit to silence and fall through
000E28FC                            L_psgsendvol:
000E28FC 0815 0001                  		btst	#1,(a5)
000E2900 6600                       		bne.s	locret_7298A
000E2902 0815 0002                  		btst	#2,(a5)
000E2906 6600                       		bne.s	locret_7298A
000E2908 0815 0004                  		btst	#4,(a5)
000E290C 6600                       		bne.s	loc_7298C
000E290E                            
000E290E                            loc_7297C:
000E290E 8C2D 0001                  		or.b	1(a5),d6
000E2912 0606 0010                  		addi.b	#$10,d6
000E2916 13C6 00C0 0011             		move.b	d6,($C00011).l
000E291C                            
000E291C                            locret_7298A:
000E291C 4E75                       		rts	
000E291E                            ; ===========================================================================
000E291E                            
000E291E                            loc_7298C:
000E291E 4A2D 0013                  		tst.b	$13(a5)
000E2922 67EA                       		beq.s	loc_7297C
000E2924 4A2D 0012                  		tst.b	$12(a5)
000E2928 66E4                       		bne.s	loc_7297C
000E292A 4E75                       		rts	
000E292C                            ; End of function sub_7296A
000E292C                            
000E292C                            ; ===========================================================================
000E292C                            
000E292C                            loc_7299A:				; XREF: sub_72926
000E292C 532D 000C                  		subq.b	#1,$C(a5)
000E2930 4E75                       		rts	
000E2932                            
000E2932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2932                            
000E2932                            
000E2932                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000E2932 0815 0002                  		btst	#2,(a5)
000E2936 6600                       		bne.s	locret_729B4
000E2938                            
000E2938                            loc_729A6:				; XREF: Snd_FadeOut2
000E2938 102D 0001                  		move.b	1(a5),d0
000E293C 0000 001F                  		ori.b	#$1F,d0
000E2940 13C0 00C0 0011             		move.b	d0,($C00011).l
000E2946                            
000E2946                            locret_729B4:
000E2946 4E75                       		rts	
000E2948                            ; End of function sub_729A0
000E2948                            
000E2948                            
000E2948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2948                            
000E2948                            
000E2948                            sub_729B6:				; XREF: loc_71E7C
000E2948 41F9 00C0 0011             		lea	($C00011).l,a0
000E294E 10BC 009F                  		move.b	#$9F,(a0)
000E2952 10BC 00BF                  		move.b	#$BF,(a0)
000E2956 10BC 00DF                  		move.b	#$DF,(a0)
000E295A 10BC 00FF                  		move.b	#$FF,(a0)
000E295E 4E75                       		rts	
000E2960                            ; End of function sub_729B6
000E2960                            
000E2960                            ; ===========================================================================
000E2960 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000E2972 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000E2984 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000E2998 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000E29AC 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000E29C0 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000E29D4 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000E29E8 0011 0000                  		dc.w $11, 0
000E29EC                            
000E29EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E29EC                            
000E29EC                            
000E29EC                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000E29EC 0445 00E0                  		subi.w	#$E0,d5
000E29F0 E54D                       		lsl.w	#2,d5
000E29F2 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000E29F6                            ; End of function sub_72A5A
000E29F6                            
000E29F6                            ; ===========================================================================
000E29F6                            
000E29F6                            loc_72A64:
000E29F6 6000 0000                  		bra.w	loc_72ACC
000E29FA                            ; ===========================================================================
000E29FA 6000 0000                  		bra.w	loc_72AEC
000E29FE                            ; ===========================================================================
000E29FE 6000 0000                  		bra.w	loc_72AF2
000E2A02                            ; ===========================================================================
000E2A02 6000 0000                  		bra.w	loc_72AF8
000E2A06                            ; ===========================================================================
000E2A06 6000 0000                  		bra.w	loc_72B14
000E2A0A                            ; ===========================================================================
000E2A0A 6000 0000                  		bra.w	loc_72B9E
000E2A0E                            ; ===========================================================================
000E2A0E 6000 0000                  		bra.w	loc_72BA4
000E2A12                            ; ===========================================================================
000E2A12 6000 0000                  		bra.w	loc_72BAE
000E2A16                            ; ===========================================================================
000E2A16 6000 0000                  		bra.w	loc_72BB4
000E2A1A                            ; ===========================================================================
000E2A1A 6000 0000                  		bra.w	loc_72BBE
000E2A1E                            ; ===========================================================================
000E2A1E 6000 0000                  		bra.w	loc_72BC6
000E2A22                            ; ===========================================================================
000E2A22 6000 0000                  		bra.w	loc_72BD0
000E2A26                            ; ===========================================================================
000E2A26 6000 0000                  		bra.w	loc_72BE6
000E2A2A                            ; ===========================================================================
000E2A2A 6000 0000                  		bra.w	loc_72BEE
000E2A2E                            ; ===========================================================================
000E2A2E 6000 0000                  		bra.w	loc_72BF4
000E2A32                            ; ===========================================================================
000E2A32 6000 0000                  		bra.w	loc_72C26
000E2A36                            ; ===========================================================================
000E2A36 6000 0000                  		bra.w	loc_72D30
000E2A3A                            ; ===========================================================================
000E2A3A 6000 0000                  		bra.w	loc_72D52
000E2A3E                            ; ===========================================================================
000E2A3E 6000 0000                  		bra.w	loc_72D58
000E2A42                            ; ===========================================================================
000E2A42 6000 0000                  		bra.w	loc_72E06
000E2A46                            ; ===========================================================================
000E2A46 6000 0000                  		bra.w	loc_72E20
000E2A4A                            ; ===========================================================================
000E2A4A 6000 0000                  		bra.w	loc_72E26
000E2A4E                            ; ===========================================================================
000E2A4E 6000 0000                  		bra.w	loc_72E2C
000E2A52                            ; ===========================================================================
000E2A52 6000 0000                  		bra.w	loc_72E38
000E2A56                            ; ===========================================================================
000E2A56 6000 0000                  		bra.w	loc_72E52
000E2A5A                            ; ===========================================================================
000E2A5A 6000 0000                  		bra.w	loc_72E64
000E2A5E                            ; ===========================================================================
000E2A5E                            
000E2A5E                            loc_72ACC:				; XREF: loc_72A64
000E2A5E 121C                       		move.b	(a4)+,d1
000E2A60 4A2D 0001                  		tst.b	1(a5)
000E2A64 6B00                       		bmi.s	locret_72AEA
000E2A66 102D 000A                  		move.b	$A(a5),d0
000E2A6A 0200 0037                  		andi.b	#$37,d0
000E2A6E 8200                       		or.b	d0,d1
000E2A70 1B41 000A                  		move.b	d1,$A(a5)
000E2A74 103C 00B4                  		move.b	#$B4,d0
000E2A78 6000 FC26                  		bra.w	loc_72716
000E2A7C                            ; ===========================================================================
000E2A7C                            
000E2A7C                            locret_72AEA:
000E2A7C 4E75                       		rts	
000E2A7E                            ; ===========================================================================
000E2A7E                            
000E2A7E                            loc_72AEC:				; XREF: loc_72A64
000E2A7E 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000E2A82 4E75                       		rts	
000E2A84                            ; ===========================================================================
000E2A84                            
000E2A84                            loc_72AF2:				; XREF: loc_72A64
000E2A84 1D5C 0007                  		move.b	(a4)+,7(a6)
000E2A88 4E75                       		rts	
000E2A8A                            ; ===========================================================================
000E2A8A                            
000E2A8A                            loc_72AF8:				; XREF: loc_72A64
000E2A8A 7000                       		moveq	#0,d0
000E2A8C 102D 000D                  		move.b	$D(a5),d0
000E2A90 2875 0000                  		movea.l	(a5,d0.w),a4
000E2A94 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000E2A9C 544C                       		addq.w	#2,a4
000E2A9E 5800                       		addq.b	#4,d0
000E2AA0 1B40 000D                  		move.b	d0,$D(a5)
000E2AA4 4E75                       		rts	
000E2AA6                            ; ===========================================================================
000E2AA6                            
000E2AA6                            loc_72B14:				; XREF: loc_72A64
000E2AA6 204E                       		movea.l	a6,a0
000E2AA8 43EE 03A0                  		lea	$3A0(a6),a1
000E2AAC 303C 0087                  		move.w	#$87,d0
000E2AB0                            
000E2AB0                            loc_72B1E:
000E2AB0 20D9                       		move.l	(a1)+,(a0)+
000E2AB2 51C8 FFFC                  		dbf	d0,loc_72B1E
000E2AB6 103C 002B                  		move.b	#$2B, d0	; Register: DAC mode (bit 7 = enable)
000E2ABA 7200                       		moveq	#$00, d1	; Value: DAC mode disable
000E2ABC 4EBA FBFA                  		jsr	sub_7272E(pc)	; Write to YM2612 Port 0 [sub_7272E]
000E2AC0 08EE 0002 0040             		bset	#2,$40(a6)
000E2AC6 264D                       		movea.l	a5,a3
000E2AC8 1C3C 0028                  		move.b	#$28,d6
000E2ACC 9C2E 0026                  		sub.b	$26(a6),d6
000E2AD0 7E05                       		moveq	#5,d7
000E2AD2 4BEE 0070                  		lea	$70(a6),a5
000E2AD6                            
000E2AD6                            loc_72B3A:
000E2AD6 0815 0007                  		btst	#7,(a5)
000E2ADA 6700                       		beq.s	loc_72B5C
000E2ADC 08D5 0001                  		bset	#1,(a5)
000E2AE0 DD2D 0009                  		add.b	d6,9(a5)
000E2AE4 0815 0002                  		btst	#2,(a5)
000E2AE8 6600                       		bne.s	loc_72B5C
000E2AEA 7000                       		moveq	#0,d0
000E2AEC 102D 000B                  		move.b	$B(a5),d0
000E2AF0 226E 0018                  		movea.l	$18(a6),a1
000E2AF4 4EBA 0000                  		jsr	sub_72C4E(pc)
000E2AF8                            
000E2AF8                            loc_72B5C:
000E2AF8 DAFC 0030                  		adda.w	#$30,a5
000E2AFC 51CF FFD8                  		dbf	d7,loc_72B3A
000E2B00                            
000E2B00 7E02                       		moveq	#2,d7
000E2B02                            
000E2B02                            loc_72B66:
000E2B02 0815 0007                  		btst	#7,(a5)
000E2B06 6700                       		beq.s	loc_72B78
000E2B08 08D5 0001                  		bset	#1,(a5)
000E2B0C 4EBA FE24                  		jsr	sub_729A0(pc)
000E2B10 DD2D 0009                  		add.b	d6,9(a5)
000E2B14 0C2D 00E0 0001             		cmpi.b	#$E0, 1(a5)	; is this the Noise Channel?
000E2B1A 6600                       		bne.s	loc_72B78	; no - skip
000E2B1C 13ED 001F 00C0 0011        		move.b	$1F(a5), ($C00011).l	; restore Noise setting
000E2B24                            
000E2B24                            loc_72B78:
000E2B24 DAFC 0030                  		adda.w	#$30,a5
000E2B28 51CF FFD8                  		dbf	d7,loc_72B66
000E2B2C 2A4B                       		movea.l	a3,a5
000E2B2E 4A2E 0040                  		tst.b	$40(a6)			; is the DAC channel running?
000E2B32 6B00                       		bmi.s	Restore_NoFM6		; if it is, branch
000E2B34                            
000E2B34 702B                       		moveq	#$2B,d0			; DAC enable/disable register
000E2B36 7200                       		moveq	#0,d1			; Disable DAC
000E2B38 4EBA FB7E                  		jsr	sub_7272E(pc)
000E2B3C                            
000E2B3C                            Restore_NoFM6:
000E2B3C 1D7C 0080 0024             		move.b	#$80,$24(a6)
000E2B42 1D7C 0028 0026             		move.b	#$28,$26(a6)
000E2B48 422E 0027                  		clr.b	$27(a6)
000E2B4C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000E2B54 504F                       		addq.w	#8,sp
000E2B56 4E75                       		rts	
000E2B58                            ; ===========================================================================
000E2B58                            
000E2B58                            loc_72B9E:				; XREF: loc_72A64
000E2B58 1B5C 0002                  		move.b	(a4)+,2(a5)
000E2B5C 4E75                       		rts	
000E2B5E                            ; ===========================================================================
000E2B5E                            
000E2B5E                            loc_72BA4:				; XREF: loc_72A64
000E2B5E 101C                       		move.b	(a4)+,d0
000E2B60 D12D 0009                  		add.b	d0,9(a5)
000E2B64 6000 0000                  		bra.w	sub_72CB4
000E2B68                            ; ===========================================================================
000E2B68                            
000E2B68                            loc_72BAE:				; XREF: loc_72A64
000E2B68 08D5 0004                  		bset	#4,(a5)
000E2B6C 4E75                       		rts	
000E2B6E                            ; ===========================================================================
000E2B6E                            
000E2B6E                            loc_72BB4:				; XREF: loc_72A64
000E2B6E 1B54 0012                  		move.b	(a4),$12(a5)
000E2B72 1B5C 0013                  		move.b	(a4)+,$13(a5)
000E2B76 4E75                       		rts	
000E2B78                            ; ===========================================================================
000E2B78                            
000E2B78                            loc_72BBE:				; XREF: loc_72A64
000E2B78 101C                       		move.b	(a4)+,d0
000E2B7A D12D 0008                  		add.b	d0,8(a5)
000E2B7E 4E75                       		rts	
000E2B80                            ; ===========================================================================
000E2B80                            
000E2B80                            loc_72BC6:				; XREF: loc_72A64
000E2B80 1D54 0002                  		move.b	(a4),2(a6)
000E2B84 1D5C 0001                  		move.b	(a4)+,1(a6)
000E2B88 4E75                       		rts	
000E2B8A                            ; ===========================================================================
000E2B8A                            
000E2B8A                            loc_72BD0:				; XREF: loc_72A64
000E2B8A 41EE 0040                  		lea	$40(a6),a0
000E2B8E 101C                       		move.b	(a4)+,d0
000E2B90 7230                       		moveq	#$30,d1
000E2B92 7409                       		moveq	#9,d2
000E2B94                            
000E2B94                            loc_72BDA:
000E2B94 1140 0002                  		move.b	d0,2(a0)
000E2B98 D0C1                       		adda.w	d1,a0
000E2B9A 51CA FFF8                  		dbf	d2,loc_72BDA
000E2B9E                            
000E2B9E 4E75                       		rts	
000E2BA0                            ; ===========================================================================
000E2BA0                            
000E2BA0                            loc_72BE6:				; XREF: loc_72A64
000E2BA0 101C                       		move.b	(a4)+,d0
000E2BA2 D12D 0009                  		add.b	d0,9(a5)
000E2BA6 4E75                       		rts	
000E2BA8                            ; ===========================================================================
000E2BA8                            
000E2BA8                            loc_72BEE:				; XREF: loc_72A64
000E2BA8 422E 002C                  		clr.b	$2C(a6)
000E2BAC 4E75                       		rts	
000E2BAE                            ; ===========================================================================
000E2BAE                            
000E2BAE                            loc_72BF4:				; XREF: loc_72A64
000E2BAE 0895 0007                  		bclr	#7,(a5)
000E2BB2 0895 0004                  		bclr	#4,(a5)
000E2BB6 4EBA FAD0                  		jsr	sub_726FE(pc)
000E2BBA 4A2E 0250                  		tst.b	$250(a6)
000E2BBE 6B00                       		bmi.s	loc_72C22
000E2BC0 264D                       		movea.l	a5,a3
000E2BC2 4BEE 0100                  		lea	$100(a6),a5
000E2BC6 226E 0018                  		movea.l	$18(a6),a1
000E2BCA 0895 0002                  		bclr	#2,(a5)
000E2BCE 08D5 0001                  		bset	#1,(a5)
000E2BD2 102D 000B                  		move.b	$B(a5),d0
000E2BD6 4EBA 0000                  		jsr	sub_72C4E(pc)
000E2BDA 2A4B                       		movea.l	a3,a5
000E2BDC                            
000E2BDC                            loc_72C22:
000E2BDC 504F                       		addq.w	#8,sp
000E2BDE 4E75                       		rts	
000E2BE0                            ; ===========================================================================
000E2BE0                            
000E2BE0                            loc_72C26:				; XREF: loc_72A64
000E2BE0 7000                       		moveq	#0,d0
000E2BE2 101C                       		move.b	(a4)+,d0
000E2BE4 1B40 000B                  		move.b	d0,$B(a5)
000E2BE8 0815 0002                  		btst	#2,(a5)
000E2BEC 6600 0000                  		bne.w	locret_72CAA
000E2BF0 226E 0018                  		movea.l	$18(a6),a1
000E2BF4 4A2E 000E                  		tst.b	$E(a6)
000E2BF8 6700                       		beq.s	sub_72C4E
000E2BFA 226D 0020                  		movea.l	$20(a5),a1
000E2BFE 4A2E 000E                  		tst.b	$E(a6)
000E2C02 6B00                       		bmi.s	sub_72C4E
000E2C04 226E 0020                  		movea.l	$20(a6),a1
000E2C08                            
000E2C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2C08                            
000E2C08                            
000E2C08                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000E2C08 5340                       		subq.w	#1,d0
000E2C0A 6B00                       		bmi.s	loc_72C5C
000E2C0C 323C 0019                  		move.w	#$19,d1
000E2C10                            
000E2C10                            loc_72C56:
000E2C10 D2C1                       		adda.w	d1,a1
000E2C12 51C8 FFFC                  		dbf	d0,loc_72C56
000E2C16                            
000E2C16                            loc_72C5C:
000E2C16 1219                       		move.b	(a1)+,d1
000E2C18 1B41 001F                  		move.b	d1,$1F(a5)
000E2C1C 1801                       		move.b	d1,d4
000E2C1E 103C 00B0                  		move.b	#$B0,d0
000E2C22 4EBA FA88                  		jsr	sub_72722(pc)
000E2C26 45FA 0000                  		lea	byte_72D18(pc),a2
000E2C2A 7613                       		moveq	#$13,d3
000E2C2C                            
000E2C2C                            loc_72C72:
000E2C2C 101A                       		move.b	(a2)+,d0
000E2C2E 1219                       		move.b	(a1)+,d1
000E2C30 4EBA FA7A                  		jsr	sub_72722(pc)
000E2C34 51CB FFF6                  		dbf	d3,loc_72C72
000E2C38 7A03                       		moveq	#3,d5
000E2C3A 0244 0007                  		andi.w	#7,d4
000E2C3E 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000E2C42 162D 0009                  		move.b	9(a5),d3
000E2C46                            
000E2C46                            loc_72C8C:
000E2C46 101A                       		move.b	(a2)+,d0
000E2C48 1219                       		move.b	(a1)+,d1
000E2C4A E20C                       		lsr.b	#1,d4
000E2C4C 6400                       		bcc.s	loc_72C96
000E2C4E D203                       		add.b	d3,d1
000E2C50                            
000E2C50                            loc_72C96:
000E2C50 4EBA FA5A                  		jsr	sub_72722(pc)
000E2C54 51CD FFF0                  		dbf	d5,loc_72C8C
000E2C58 103C 00B4                  		move.b	#$B4,d0
000E2C5C 122D 000A                  		move.b	$A(a5),d1
000E2C60 4EBA FA4A                  		jsr	sub_72722(pc)
000E2C64                            
000E2C64                            locret_72CAA:
000E2C64 4E75                       		rts	
000E2C66                            ; End of function sub_72C4E
000E2C66                            
000E2C66                            ; ===========================================================================
000E2C66 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000E2C6E                            
000E2C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000E2C6E                            
000E2C6E                            
000E2C6E                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000E2C6E 0815 0002                  		btst	#2,(a5)
000E2C72 6600                       		bne.s	locret_72D16
000E2C74 7000                       		moveq	#0,d0
000E2C76 102D 000B                  		move.b	$B(a5),d0
000E2C7A 226E 0018                  		movea.l	$18(a6),a1
000E2C7E 4A2E 000E                  		tst.b	$E(a6)
000E2C82 6700                       		beq.s	loc_72CD8
000E2C84 226E 0020                  		movea.l	$20(a6),a1
000E2C88 4A2E 000E                  		tst.b	$E(a6)
000E2C8C 6B00                       		bmi.s	loc_72CD8
000E2C8E 226E 0020                  		movea.l	$20(a6),a1
000E2C92                            
000E2C92                            loc_72CD8:
000E2C92 5340                       		subq.w	#1,d0
000E2C94 6B00                       		bmi.s	loc_72CE6
000E2C96 323C 0019                  		move.w	#$19,d1
000E2C9A                            
000E2C9A                            loc_72CE0:
000E2C9A D2C1                       		adda.w	d1,a1
000E2C9C 51C8 FFFC                  		dbf	d0,loc_72CE0
000E2CA0                            
000E2CA0                            loc_72CE6:
000E2CA0 D2FC 0015                  		adda.w	#$15,a1
000E2CA4 45FA 0000                  		lea	byte_72D2C(pc),a2
000E2CA8 102D 001F                  		move.b	$1F(a5),d0
000E2CAC 0240 0007                  		andi.w	#7,d0
000E2CB0 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000E2CB4 162D 0009                  		move.b	9(a5),d3
000E2CB8 6B00                       		bmi.s	locret_72D16
000E2CBA 7A03                       		moveq	#3,d5
000E2CBC                            
000E2CBC                            loc_72D02:
000E2CBC 101A                       		move.b	(a2)+,d0
000E2CBE 1219                       		move.b	(a1)+,d1
000E2CC0 E20C                       		lsr.b	#1,d4
000E2CC2 6400                       		bcc.s	loc_72D12
000E2CC4 D203                       		add.b	d3,d1
000E2CC6 6500                       		bcs.s	loc_72D12
000E2CC8 4EBA F9E2                  		jsr	sub_72722(pc)
000E2CCC                            
000E2CCC                            loc_72D12:
000E2CCC 51CD FFEE                  		dbf	d5,loc_72D02
000E2CD0                            
000E2CD0                            locret_72D16:
000E2CD0 4E75                       		rts	
000E2CD2                            ; End of function sub_72CB4
000E2CD2                            
000E2CD2                            ; ===========================================================================
000E2CD2 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000E2CDC 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000E2CE6 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000E2CEA                            ; ===========================================================================
000E2CEA                            
000E2CEA                            loc_72D30:				; XREF: loc_72A64
000E2CEA 08D5 0003                  		bset	#3,(a5)
000E2CEE 2B4C 0014                  		move.l	a4,$14(a5)
000E2CF2 1B5C 0018                  		move.b	(a4)+,$18(a5)
000E2CF6 1B5C 0019                  		move.b	(a4)+,$19(a5)
000E2CFA 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000E2CFE 101C                       		move.b	(a4)+,d0
000E2D00 E208                       		lsr.b	#1,d0
000E2D02 1B40 001B                  		move.b	d0,$1B(a5)
000E2D06 426D 001C                  		clr.w	$1C(a5)
000E2D0A 4E75                       		rts	
000E2D0C                            ; ===========================================================================
000E2D0C                            
000E2D0C                            loc_72D52:				; XREF: loc_72A64
000E2D0C 08D5 0003                  		bset	#3,(a5)
000E2D10 4E75                       		rts	
000E2D12                            ; ===========================================================================
000E2D12                            
000E2D12                            loc_72D58:				; XREF: loc_72A64
000E2D12 0895 0007                  		bclr	#7,(a5)
000E2D16 0895 0004                  		bclr	#4,(a5)
000E2D1A 4A2D 0001                  		tst.b	1(a5)
000E2D1E 6B00                       		bmi.s	loc_72D74
000E2D20 4A2E 0008                  		tst.b	8(a6)
000E2D24 6B00 0000                  		bmi.w	loc_72E02
000E2D28 4EBA F95E                  		jsr	sub_726FE(pc)
000E2D2C 6000                       		bra.s	loc_72D78
000E2D2E                            ; ===========================================================================
000E2D2E                            
000E2D2E                            loc_72D74:
000E2D2E 4EBA FC02                  		jsr	sub_729A0(pc)
000E2D32                            
000E2D32                            loc_72D78:
000E2D32 4A2E 000E                  		tst.b	$E(a6)
000E2D36 6A00 0000                  		bpl.w	loc_72E02
000E2D3A 4216                       		clr.b	0(a6)
000E2D3C 7000                       		moveq	#0,d0
000E2D3E 102D 0001                  		move.b	1(a5),d0
000E2D42 6B00                       		bmi.s	loc_72DCC
000E2D44 41FA F4FE                  		lea	dword_722CC(pc),a0
000E2D48 264D                       		movea.l	a5,a3
000E2D4A 0C00 0004                  		cmpi.b	#4,d0
000E2D4E 6600                       		bne.s	loc_72DA8
000E2D50 4A2E 0340                  		tst.b	$340(a6)
000E2D54 6A00                       		bpl.s	loc_72DA8
000E2D56 4BEE 0340                  		lea	$340(a6),a5
000E2D5A 226E 0020                  		movea.l	$20(a6),a1
000E2D5E 6000                       		bra.s	loc_72DB8
000E2D60                            ; ===========================================================================
000E2D60                            
000E2D60                            loc_72DA8:
000E2D60 5500                       		subq.b	#2,d0
000E2D62 E508                       		lsl.b	#2,d0
000E2D64 2A70 0000                  		movea.l	(a0,d0.w),a5
000E2D68 4A15                       		tst.b	(a5)
000E2D6A 6A00                       		bpl.s	loc_72DC8
000E2D6C 226E 0018                  		movea.l	$18(a6),a1
000E2D70                            
000E2D70                            loc_72DB8:
000E2D70 0895 0002                  		bclr	#2,(a5)
000E2D74 08D5 0001                  		bset	#1,(a5)
000E2D78 102D 000B                  		move.b	$B(a5),d0
000E2D7C 4EBA FE8A                  		jsr	sub_72C4E(pc)
000E2D80                            
000E2D80                            loc_72DC8:
000E2D80 2A4B                       		movea.l	a3,a5
000E2D82 6000                       		bra.s	loc_72E02
000E2D84                            ; ===========================================================================
000E2D84                            
000E2D84                            loc_72DCC:
000E2D84 41EE 0370                  		lea	$370(a6),a0
000E2D88 4A10                       		tst.b	(a0)
000E2D8A 6A00                       		bpl.s	loc_72DE0
000E2D8C 0C00 00E0                  		cmpi.b	#$E0,d0
000E2D90 6700                       		beq.s	loc_72DEA
000E2D92 0C00 00C0                  		cmpi.b	#$C0,d0
000E2D96 6700                       		beq.s	loc_72DEA
000E2D98                            
000E2D98                            loc_72DE0:
000E2D98 41FA F4AA                  		lea	dword_722CC(pc),a0
000E2D9C E608                       		lsr.b	#3,d0
000E2D9E 2070 0000                  		movea.l	(a0,d0.w),a0
000E2DA2                            
000E2DA2                            loc_72DEA:
000E2DA2 0890 0002                  		bclr	#2,(a0)
000E2DA6 08D0 0001                  		bset	#1,(a0)
000E2DAA 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000E2DB0 6600                       		bne.s	loc_72E02
000E2DB2 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000E2DBA                            
000E2DBA                            loc_72E02:
000E2DBA 504F                       		addq.w	#8,sp
000E2DBC 4E75                       		rts	
000E2DBE                            ; ===========================================================================
000E2DBE                            
000E2DBE                            loc_72E06:				; XREF: loc_72A64
000E2DBE 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000E2DC4 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000E2DC8 0815 0002                  		btst	#2,(a5)
000E2DCC 6600                       		bne.s	locret_72E1E
000E2DCE 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000E2DD6                            
000E2DD6                            locret_72E1E:
000E2DD6 4E75                       		rts	
000E2DD8                            ; ===========================================================================
000E2DD8                            
000E2DD8                            loc_72E20:				; XREF: loc_72A64
000E2DD8 0895 0003                  		bclr	#3,(a5)
000E2DDC 4E75                       		rts	
000E2DDE                            ; ===========================================================================
000E2DDE                            
000E2DDE                            loc_72E26:				; XREF: loc_72A64
000E2DDE 1B5C 000B                  		move.b	(a4)+,$B(a5)
000E2DE2 4E75                       		rts	
000E2DE4                            ; ===========================================================================
000E2DE4                            
000E2DE4                            loc_72E2C:				; XREF: loc_72A64
000E2DE4 101C                       		move.b	(a4)+,d0
000E2DE6 E148                       		lsl.w	#8,d0
000E2DE8 101C                       		move.b	(a4)+,d0
000E2DEA D8C0                       		adda.w	d0,a4
000E2DEC 534C                       		subq.w	#1,a4
000E2DEE 4E75                       		rts	
000E2DF0                            ; ===========================================================================
000E2DF0                            
000E2DF0                            loc_72E38:				; XREF: loc_72A64
000E2DF0 7000                       		moveq	#0,d0
000E2DF2 101C                       		move.b	(a4)+,d0
000E2DF4 121C                       		move.b	(a4)+,d1
000E2DF6 4A35 0024                  		tst.b	$24(a5,d0.w)
000E2DFA 6600                       		bne.s	loc_72E48
000E2DFC 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000E2E00                            
000E2E00                            loc_72E48:
000E2E00 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000E2E04 66DE                       		bne.s	loc_72E2C
000E2E06 544C                       		addq.w	#2,a4
000E2E08 4E75                       		rts	
000E2E0A                            ; ===========================================================================
000E2E0A                            
000E2E0A                            loc_72E52:				; XREF: loc_72A64
000E2E0A 7000                       		moveq	#0,d0
000E2E0C 102D 000D                  		move.b	$D(a5),d0
000E2E10 5900                       		subq.b	#4,d0
000E2E12 2B8C 0000                  		move.l	a4,(a5,d0.w)
000E2E16 1B40 000D                  		move.b	d0,$D(a5)
000E2E1A 60C8                       		bra.s	loc_72E2C
000E2E1C                            ; ===========================================================================
000E2E1C                            
000E2E1C                            loc_72E64:				; XREF: loc_72A64
000E2E1C 103C 0088                  		move.b	#$88,d0
000E2E20 123C 000F                  		move.b	#$F,d1
000E2E24 4EBA F892                  		jsr	sub_7272E(pc)
000E2E28 103C 008C                  		move.b	#$8C,d0
000E2E2C 123C 000F                  		move.b	#$F,d1
000E2E30 6000 F886                  		bra.w	sub_7272E
000E2E34                            ; ===========================================================================
000E2E34                            	include	'MegaPCM.asm'
000E2E34                            
000E2E34                            ; ===============================================================
000E2E34                            ; Mega PCM Driver Include File
000E2E34                            ; (c) 2012, Vladikcomper
000E2E34                            ; ===============================================================
000E2E34                            
000E2E34                            ; ---------------------------------------------------------------
000E2E34                            ; Variables used in DAC table
000E2E34                            ; ---------------------------------------------------------------
000E2E34                            
000E2E34                            ; flags
000E2E34 =000000C0                  panLR	= $C0
000E2E34 =00000080                  panL	= $80
000E2E34 =00000040                  panR	= $40
000E2E34 =00000000                  pcm	= 0
000E2E34 =00000004                  dpcm	= 4
000E2E34 =00000002                  loop	= 2
000E2E34 =00000001                  pri	= 1
000E2E34                            
000E2E34                            ; ---------------------------------------------------------------
000E2E34                            ; Macros
000E2E34                            ; ---------------------------------------------------------------
000E2E34                            
000E2E34                            z80word macro Value
000E2E34                            	dc.w	((\Value)&$FF)<<8|((\Value)&$FF00)>>8
000E2E34                            	endm
000E2E34                            
000E2E34                            DAC_Entry macro Pitch,Offset,Flags
000E2E34                            	dc.b	\Flags			; 00h	- Flags
000E2E34                            	dc.b	\Pitch			; 01h	- Pitch
000E2E34                            	dc.b	(\Offset>>15)&$FF	; 02h	- Start Bank
000E2E34                            	dc.b	(\Offset\_End>>15)&$FF	; 03h	- End Bank
000E2E34                            	z80word	(\Offset)|$8000		; 04h	- Start Offset (in Start bank)
000E2E34                            	z80word	(\Offset\_End-1)|$8000	; 06h	- End Offset (in End bank)
000E2E34                            	endm
000E2E34                            
000E2E34                            IncludeDAC macro Name,Extension
000E2E34                            \Name:
000E2E34                            	if strcmp('\extension','wav')
000E2E34                            		incbin	'dac/\Name\.\Extension\',$3A
000E2E34                            	else
000E2E34                            		incbin	'dac/\Name\.\Extension\'
000E2E34                            	endc
000E2E34                            \Name\_End:
000E2E34                            	endm
000E2E34                            
000E2E34                            ; ---------------------------------------------------------------
000E2E34                            ; Driver's code
000E2E34                            ; ---------------------------------------------------------------
000E2E34                            
000E2E34                            MegaPCM:
000E2E34                            	incbin	'MegaPCM.z80'
000E3044                            
000E3044                            
000E3044                            ; ---------------------------------------------------------------
000E3044                            ; DAC Samples Table
000E3044                            ; ---------------------------------------------------------------
000E3044                            
000E3044 0430 0000 0000 0000                DAC_Entry	$30, beat, dpcm          ; $81	- Kick
000E304C 0416 0000 0000 0000                DAC_Entry       $16, DAC_82, dpcm 	        ; $82	- Snare
000E3054 040A 0000 0000 0000        	DAC_Entry	$0A, Timpani, dpcm		; $83	- Timpani
000E305C 0406 0000 0000 0000        	DAC_Entry       $06, RRZ1Tom, dpcm              ; $8E   - Rusty Ruin High Tom
000E3064 040A 0000 0000 0000        	DAC_Entry       $0A, RRZ1Tom, dpcm              ; $8F   - Rusty Ruin Mid-High Tom
000E306C 040D 0000 0000 0000        	DAC_Entry       $0D, RRZ1Tom, dpcm              ; $90   - Rusty Ruin Mid-Low Tom
000E3074 0412 0000 0000 0000        	DAC_Entry       $12, RRZ1Tom, dpcm              ; $91   - Rusty Ruin Low Tom
000E307C 0412 0000 0000 0000        	DAC_Entry	$12, Timpani, dpcm		; $88	- Hi-Timpani
000E3084 0415 0000 0000 0000        	DAC_Entry	$15, Timpani, dpcm		; $89	- Mid-Timpani
000E308C 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $8A	- Mid-Low-Timpani
000E3094 041D 0000 0000 0000        	DAC_Entry	$1D, Timpani, dpcm		; $8B	- Low-Timpani
000E309C 0405 0000 0000 0000        	DAC_Entry   $03+2, D9093,   dpcm ; 8c - Electric High-Tom
000E30A4 0409 0000 0000 0000                DAC_Entry   $07+2, D9093,   dpcm ; 8d - Electric Mid-Tom
000E30AC 040C 0000 0000 0000                DAC_Entry   $0A+2, D9093,   dpcm ; 8e - Electric Low-Tom
000E30B4 0410 0000 0000 0000                DAC_Entry   $0E+2, D9093,   dpcm ; 8f - Electric Floor Tom
000E30BC                            
000E30BC                            MegaPCM_End:
000E30BC                            
000E30BC                            ; ---------------------------------------------------------------
000E30BC                            ; DAC Samples Files
000E30BC                            ; ---------------------------------------------------------------
000E30BC                            
000FE834                            
000FECA1                            
000FEF70                            
000FF68C                            
001008B3                            
001012B0                            
00101410                            
00101470                            
001018F7                            
00101DE6                            
00102408                            
00102D63                            
001039CB                            
00103FEB                            
0010431D                            
00104566                            
001047E6                            
00105A8B                            
00106845                            
001073ED                            
00108145                            
001083E3                            
0010866D                            
001092CD                            
001099A3                            
0010A095                            
0010A40F                            
0010AE5E                            
0010B762                            
0010BCE3                            
0010BE9F                            
0010C20B                            
0010CD90                            
0010D5D8                            
0010DBD5                            
0010E215                            
0010E76A                            
0011405E                                    even
0011405E                            
0011405E                            
0011405E                            Music81:	incbin	"sound\01 Green Grove 1.bin"
001151A8                            		even
001151A8                            Music82:	incbin	"sound\S2_Hidden_Palace.bin"
00115408                            		even
00115408                            Music83:	incbin	"sound\Marble.bin"
00115866                            		even
00115866                            Music84:	incbin	"sound\S3K_2P_Endless_Mine.bin"
00115FAE                            		even
00115FAE                            Music85:	incbin	"sound\Casino Night.bin"
001166CC                            		even
001166CC                            Music86:	incbin	"sound\It Has To Be This Way.bin"
00119350                            		even
00119350                            Music87:	incbin	"sound\2C Invincibility.bin"
00119582                            		even
00119582                            Music88:	incbin	"sound\1 Up.bin"
00119670                            		even
00119670                            Music89:	incbin	"sound\Special Stage.bin"
0011999C                            		even
0011999C                            Music8A:	incbin	"sound\SMPS_Play_Test.bin"
0011A636 00                         		even
0011A636                            Music8B:	incbin	"sound\All Clear.bin"
0011A8D0                            		even
0011A8D0                            Music8C:	incbin	"sound\Miniboss SK.bin"
0011AC00                            		even
0011AC00                            Music8D:	incbin	"sound\What Im Made Of.bin" ; Overclocked Metal theme
0011CD30                            		even
0011CD30                            Music8E:	incbin	"sound\Act Clear.bin"
0011CE52                            		even
0011CE52                            Music8F:	incbin	"sound\SRB2 game over.bin"
0011CFCC                            		even
0011CFCC                            Music90:	incbin	"sound\Continue.bin"
0011D12A                            		even
0011D12A                            Music91:	incbin	"sound\SkyChase.bin"	; Metal Speed Up theme
0011EBDA                            		even
0011EBDA                            Music92:	incbin	"sound\Drowning.bin"
0011ED04                            		even
0011ED04                            Music93:	incbin	"sound\Emerald Get.bin"
0011EDD2                            		even
0011EDD2                            Music94:	incbin	"sound\Misty Rain.bin" ; Damp Relic Act 2
0011F8EE                            		even
0011F8EE                            Music95:	incbin	"sound\Sky Fortress Act 2.bin"
00120D74                            		even
00120D74                            Music96:	incbin	"sound\SRB2 Red Volcano Act 1 (bad).bin" ; Magma Tomb Act 2
00121DB2 00                         		even
00121DB2                            Music97:	incbin	"sound\SnakeMan.bin" ; Metal Invincibility theme
00122AD2 00                         		even
00122AD2                            Music98:    incbin  "sound\Emerald Hill.bin" ;Chaotic Mound Act 1
00123244                                    even
00123244                            Music99:    incbin    "sound\Super Sonic.bin" ;Dark Sonic Theme
00123538                                    even
00123538                            Music9A:    incbin    "sound\I Am All of Me.bin" ;Shadow Speed Up Theme
00125C58 00                                 even
00125C58                            Music9B:    incbin    "sound\Emerald Hill 2p.bin" ;Chaotic Mound Act 3
00126172 00                                 even
00126172                            Music9C:    incbin    "sound\Metallic Madness.bin" ;Egg Facotry Act 1
001273FC 00                                 even
001273FC                            Music9D:    incbin    "sound\VRRaceNameEntry.bin" ;Shadow Invincibility Theme
00127710                                    even
00127710                            Music9E:    incbin    "sound\Rusty Ruin Zone 1.bin" ;Gemini & Kilo Screen
00128868                                    even
00128868                            Music9F:    incbin    "sound\SCD JP super sneakers.bin" ;Sonic Speed Up Theme
001291E6 00                                 even
001291E6                            ; ---------------------------------------------------------------------------
001291E6                            ; Sound	effect pointers
001291E6                            ; ---------------------------------------------------------------------------
001291E6                            SoundIndex:
001291E6 0000 0000 0000 0000 0000+  		dc.l SoundA0, SoundA1, SoundA2
001291F2 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
001291FE 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0012920A 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00129216 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00129222 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0012922E 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0012923A 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00129246 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00129252 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0012925E 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0012926A 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00129276 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00129282 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0012928E 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0012929A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
001292A6 0000 0000 0000 0000 0000+  		dc.l SoundD1, SoundD2, SoundD3
001292B2 0000 0000                  		dc.l SoundD4
001292B6 0000 0000                  SoundD0Index:	dc.l SoundD0
001292BA                            SoundA0:	incbin	sound\soundA0.bin
001292D0                            		even
001292D0                            SoundA1:	incbin	sound\soundA1.bin
001292FA                            		even
001292FA                            SoundA2:	incbin	sound\soundA2.bin
0012931A                            		even
0012931A                            SoundA3:	incbin	sound\soundA3.bin
0012934C                            		even
0012934C                            SoundA4:	incbin	sound\soundA4.bin
00129382                            		even
00129382                            SoundA5:	incbin	sound\soundA5.bin
001293AE                            		even
001293AE                            SoundA6:	incbin	sound\soundA6.bin
001293DE                            		even
001293DE                            SoundA7:	incbin	sound\soundA7.bin
0012940E                            		even
0012940E                            SoundA8:	incbin	sound\soundA8.bin
00129442                            		even
00129442                            SoundA9:	incbin	sound\soundA9.bin
00129454                            		even
00129454                            SoundAA:	incbin	sound\soundAA.bin
00129496                            		even
00129496                            SoundAB:	incbin	sound\soundAB.bin
001294B6                            		even
001294B6                            SoundAC:	incbin	sound\soundAC.bin
001294EA                            		even
001294EA                            SoundAD:	incbin	sound\soundAD.bin
00129520                            		even
00129520                            SoundAE:	incbin	sound\soundAE.bin
0012956A                            		even
0012956A                            SoundAF:	incbin	sound\soundAF.bin
00129598                            		even
00129598                            SoundB0:	incbin	sound\soundB0.bin
001295CA                            		even
001295CA                            SoundB1:	incbin	sound\soundB1.bin
001295F6                            		even
001295F6                            SoundB2:	incbin	sound\soundB2.bin
00129646                            		even
00129646                            SoundB3:	incbin	sound\soundB3.bin
00129690                            		even
00129690                            SoundB4:	incbin	sound\soundB4.bin
001296EC                            		even
001296EC                            SoundB5:	incbin	sound\soundB5.bin
0012971A                            		even
0012971A                            SoundB6:	incbin	sound\soundB6.bin
00129738                            		even
00129738                            SoundB7:	incbin	sound\soundB7.bin
00129774                            		even
00129774                            SoundB8:	incbin	sound\soundB8.bin
00129792                            		even
00129792                            SoundB9:	incbin	sound\soundB9.bin
001297F6                            		even
001297F6                            SoundBA:	incbin	sound\soundBA.bin
0012981E                            		even
0012981E                            SoundBB:	incbin	sound\soundBB.bin
0012984A                            		even
0012984A                            SoundBC:	incbin	sound\soundBC.bin
0012988C                            		even
0012988C                            SoundBD:	incbin	sound\soundBD.bin
001298E0                            		even
001298E0                            SoundBE:	incbin	sound\soundBE.bin
0012991A                            		even
0012991A                            SoundBF:	incbin	sound\soundBF.bin
0012998C                            		even
0012998C                            SoundC0:	incbin	sound\soundC0.bin
001299BA                            		even
001299BA                            SoundC1:	incbin	sound\soundC1.bin
001299F4                            		even
001299F4                            SoundC2:	incbin	sound\soundC2.bin
00129A1E                            		even
00129A1E                            SoundC3:	incbin	sound\soundC3.bin
00129A98                            		even
00129A98                            SoundC4:	incbin	sound\soundC4.bin
00129AC0                            		even
00129AC0                            SoundC5:	incbin	sound\soundC5.bin
00129B28                            		even
00129B28                            SoundC6:	incbin	sound\soundC6.bin
00129B6A                            		even
00129B6A                            SoundC7:	incbin	sound\soundC7.bin
00129B98                            		even
00129B98                            SoundC8:	incbin	sound\soundC8.bin
00129BAA                            		even
00129BAA                            SoundC9:	incbin	sound\soundC9.bin
00129BD8                            		even
00129BD8                            SoundCA:	incbin	sound\soundCA.bin
00129C06                            		even
00129C06                            SoundCB:	incbin	sound\soundCB.bin
00129C52                            		even
00129C52                            SoundCC:	incbin	sound\soundCC.bin
00129C8C                            		even
00129C8C                            SoundCD:	incbin	sound\soundCD.bin
00129C9A                            		even
00129C9A                            SoundCE:	incbin	sound\soundCE.bin
00129CC8                            		even
00129CC8                            SoundCF:	incbin	sound\soundCF.bin
00129D00                            		even
00129D00                            SoundD0:	incbin	sound\soundD0.bin
00129D3A                            		even
00129D3A                            SoundD1:	incbin	sound\soundD1.bin
00129D76                            		even
00129D76                            SoundD2:	incbin	sound\PeeloutCharge.bin
00129DB0 00                         		even
00129DB0                            SoundD3:	incbin	sound\PeeloutStop.bin
00129DBC                            		even
00129DBC                            SoundD4:	incbin	sound\Peelout_Release.bin
00129E54                            		even
00129E54                            SegaPCM:	incbin	sound\segapcm.bin
001307CC                            SegaPCM_end:	even
001307CC                            
001307CC                            Art_Dust	incbin	artunc\spindust.bin
0013210C                            	even
0013210C                            s2_menuasm: include s2_menu.asm
0013210C                            ;===============================================================================
0013210C                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
0013210C                            ; [ Início ]
0013210C                            ;
0013210C                            ; O código deste menu foi desenvolvido para funcionar com
0013210C                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
0013210C                            ; 
0013210C                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
0013210C                            ; código para que aponte para as rotinas equivalentes.
0013210C                            ; 
0013210C                            ; Para pode utilizar este menu basta fazer a seguinte modificação no código 
0013210C                            ; original:
0013210C                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
0013210C                            ; O código deve ficar como abaixo
0013210C                            ;               ......................
0013210C                            ; loc_3242:
0013210C                            ;		tst.b	($FFFFFFE0).w
0013210C                            ;		beq.w	PlayLevel	
0013210C                            ;		btst	#6,($FFFFF604).w 
0013210C                            ;		beq.w	PlayLevel	  		
0013210C                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
0013210C                            ;		moveq	#2,d0		
0013210C                            ;		bsr.w	PalLoad		 
0013210C                            ;               ...............
0013210C                            ;
0013210C                            ; Não esqueça de incluir este asm em seu código com a diretiva include:
0013210C                            ;               include 's2_menu.asm'
0013210C                            ;===============================================================================  
0013210C =FFFFFFE1                  Slow_Motion_Flag      equ $FFFFFFE1
0013210C =FFFFFFE2                  Debug_Mode_Flag       equ $FFFFFFE2
0013210C                            
0013210C =0000009D                  Level_Select_Menu_snd   = $009D
0013210C =00000093                  Emerald_Snd             = $0093
0013210C =000000B5                  Ring_Snd                = $00B5
0013210C =000000E0                  Volume_Down             = $00E0
0013210C =000000E4                  Stop_Sound              = $00E4
0013210C                            ;-------------------------------------------------------------------------------
0013210C                            Level_Select_Menu:
0013210C 103C 00E4                                  move.b  #Stop_Sound, D0
00132110 6100 0000                                  bsr     Menu_Play_Music
00132114 6100 0000                                  bsr     Menu_Pal_FadeFrom
00132118 46FC 2700                                  move    #$2700, SR
0013211C 3038 F60C                                  move.w  ($FFFFF60C).w, D0
00132120 0200 00BF                                  andi.b  #$BF, D0
00132124 33C0 00C0 0004                             move.w  D0, ($00C00004)
0013212A 6100 0000                                  bsr     Menu_ClearScreen
0013212E 4DF9 00C0 0004                             lea     ($00C00004), A6
00132134 3CBC 8004                                  move.w  #$8004, (A6)
00132138 3CBC 8230                                  move.w  #$8230, (A6)
0013213C 3CBC 8407                                  move.w  #$8407, (A6)
00132140 3CBC 8230                                  move.w  #$8230, (A6)
00132144 3CBC 8700                                  move.w  #$8700, (A6)
00132148 3CBC 8C81                                  move.w  #$8C81, (A6)
0013214C 3CBC 9001                                  move.w  #$9001, (A6)
00132150 43F8 AC00                                  lea     ($FFFFAC00).w, A1
00132154 7000                                       moveq   #$00, D0
00132156 323C 00FF                                  move.w  #$00FF, D1
0013215A                            Offset_0x026ACA:
0013215A 22C0                                       move.l  D0, (A1)+
0013215C 51C9 FFFC                                  dbra    D1, Offset_0x026ACA
00132160 43F8 B000                                  lea     ($FFFFB000).w, A1
00132164 7000                                       moveq   #$00, D0
00132166 323C 07FF                                  move.w  #$07FF, D1
0013216A                            Offset_0x026ADA:
0013216A 22C0                                       move.l  D0, (A1)+
0013216C 51C9 FFFC                                  dbra    D1, Offset_0x026ADA
00132170 4278 DC00                                  clr.w   ($FFFFDC00).w
00132174 21FC FFFF DC00 DCFC                        move.l  #$FFFFDC00, ($FFFFDCFC).w
0013217C 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)
00132186 41F9 0000 0000                             lea     (Menu_Font), A0
0013218C 6100 0000                                  bsr     Menu_NemesisDec
00132190 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)
0013219A 41F9 0000 0000                             lea     (Level_Icons), A0
001321A0 4EB9 0000 0000                             jsr     Menu_NemesisDec
001321A6                            ;-------------------------------------------------------------------------------                
001321A6                            ; Carrega o Mapeamento do Fundo Sonic/Miles               
001321A6                            ;-------------------------------------------------------------------------------
001321A6 43F9 FFFF 0000                             lea     ($FFFF0000), A1
001321AC 41F9 0000 0000                             lea     (Menu_Mappings), A0
001321B2 303C 6000                                  move.w  #$6000, D0
001321B6 6100 0000                                  bsr     Menu_EnigmaDec
001321BA 43F9 FFFF 0000                             lea     ($FFFF0000), A1
001321C0 203C 6000 0003                             move.l  #$60000003, D0
001321C6 7227                                       moveq   #$27, D1
001321C8 741B                                       moveq   #$1B, D2
001321CA 6100 0000                                  bsr     Menu_ShowVDPGraphics
001321CE                            ;-------------------------------------------------------------------------------                
001321CE                            ; Carrega o Texto do Menu de Seleção de Fases               
001321CE                            ;-------------------------------------------------------------------------------
001321CE 47F9 FFFF 0000                             lea     ($FFFF0000), A3
001321D4 323C 045F                                  move.w  #$045F, D1
001321D8                            Offset_0x026B4E:
001321D8 36FC 0000                                  move.w  #$0000, (A3)+
001321DC 51C9 FFFA                                  dbra    D1, Offset_0x026B4E
001321E0 47F9 FFFF 0000                             lea     ($FFFF0000), A3
001321E6 43F9 0000 0000                             lea     (Menu_Level_Select_Text), A1
001321EC 4BF9 0000 0000                             lea     (Menu_Text_Positions), A5
001321F2 7000                                       moveq   #$00, D0
001321F4 323C 0009                                  move.w  #$0009, D1  ; Quantidade de textos a ser carregada e posição do Sound Test
001321F8                            Menu_Loop_Load_Text:
001321F8 361D                                       move.w  (A5)+, D3
001321FA 45F3 3000                                  lea     $00(A3, D3), A2
001321FE 7400                                       moveq   #$00, D2
00132200 1419                                       move.b  (A1)+, D2
00132202 3602                                       move.w  D2, D3
00132204                            Offset_0x026B7A:
00132204 1019                                       move.b  (A1)+, D0
00132206 34C0                                       move.w  D0, (A2)+
00132208 51CA FFFA                                  dbra    D2, Offset_0x026B7A
0013220C 343C 000D                                  move.w  #$000D, D2
00132210 9443                                       sub.w   D3, D2
00132212 6500                                       bcs.s   Offset_0x026B92
00132214                            Offset_0x026B8A:
00132214 34FC 0000                                  move.w  #$0000, (A2)+
00132218 51CA FFFA                                  dbra    D2, Offset_0x026B8A
0013221C                            Offset_0x026B92:
0013221C 34BC 0011                                  move.w  #$0011, (A2)       ; Load "1"
00132220 45EA 0050                                  lea     $0050(A2), A2
00132224 34BC 0012                                  move.w  #$0012, (A2)       ; Load "2"
00132228 45EA 0050                                  lea     $0050(A2), A2
0013222C 34BC 0013                                  move.w  #$0013, (A2)       ; Load "3"
00132230 51C9 FFC6                                  dbra    D1, Menu_Loop_Load_Text
00132234                            ;-------------------------------------------------------------------------------                
00132234 720E                                       moveq   #$0E, D1
00132236 45EA FBA0                  				lea     $FFFFFBA0(A2), A2
0013223A                            Menu_Clear_Act_x:                                               ; Limpa os números dos acts não usados e carrega o "*" do Sound Test
0013223A 34BC 0000                                  move.w  #$0000, (A2)                            ; Load " "
0013223E 45EA 0050                                  lea     $0050(A2), A2
00132242 51C9 FFF6                                  dbra    D1, Menu_Clear_Act_x
00132246 45EA FF10                  		lea $FFFFFF10(A2), A2
0013224A 34BC 001A                  		move.w #$001A, (A2)          ; Load "*"
0013224E                            ;-------------------------------------------------------------------------------
0013224E                            ; Carrega o Mapeamento das Asas onde são mostrados os ícones
0013224E                            ;------------------------------------------------------------------------------- 
0013224E 41F9 0000 0000                             lea     (Wings_Mappings), A0
00132254 43F9 FFFF 0670                             lea     ($FFFF0670), A1
0013225A 323C 0006                                  move     #$06, D1
0013225E                            Menu_Loop_Next_Line:
0013225E 303C 0009                                  move     #$09, D0
00132262                            Menu_Loop_Load_Wings:
00132262 32D8                                       move.w   (A0)+, (A1)+
00132264 51C8 FFFC                                  dbra     D0, Menu_Loop_Load_Wings
00132268 D2FC 003C                                  add.w    #$3C, A1
0013226C 51C9 FFF0                                  dbra     D1, Menu_Loop_Next_Line
00132270                            ;-------------------------------------------------------------------------------                
00132270                            ; Carrega o Mapeamento dos ícones               
00132270                            ;-------------------------------------------------------------------------------                                    
00132270 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00132276 41F9 0000 0000                             lea     (Icons_Mappings), A0
0013227C 303C 0090                                  move.w  #$0090, D0
00132280 6100 0000                                  bsr     Menu_EnigmaDec
00132284 43F9 FFFF 0000                             lea     ($FFFF0000), A1
0013228A 203C 4000 0003                             move.l  #$40000003, D0
00132290 7227                                       moveq   #$27, D1
00132292 741B                                       moveq   #$1B, D2
00132294 6100 0000                                  bsr     Menu_ShowVDPGraphics
00132298                            ;-------------------------------------------------------------------------------                
00132298 7600                                       moveq   #$00, D3
0013229A 6100 0000                                  bsr     Offset_0x027040
0013229E 4278 FF70                                  clr.w   ($FFFFFF70).w
001322A2 4278 FE40                                  clr.w   ($FFFFFE40).w
001322A6 4238 F711                                  clr.b   ($FFFFF711).w
001322AA 4278 F7F0                                  clr.w   ($FFFFF7F0).w
001322AE                            ;------------------------------------------------------------------------------- 
001322AE 42B8 F7B8                  				clr.l	($FFFFF7B8).w	; clear RAM adresses $F7B8 to $F7BA
001322B2                            ;	move.w	#$0000,($FFFFF7B8).w	; Inicializa os quadros das animações do menu
001322B2                            ;	move.w	#$0000,($FFFFF7B9).w	; Inicializa o contador das animações do menu
001322B2 4EB9 0000 0000             				jsr	Dynamic_Menu	; Chama a rotina de animação
001322B8                            ;-------------------------------------------------------------------------------
001322B8                            
001322B8 7014                                       moveq   #$14, D0
001322BA 6100 0000                                  bsr     Menu_PalLoad1
001322BE 43F8 FB40                                  lea     ($FFFFFB40).w, A1
001322C2 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
001322C6 7207                                       moveq   #$07, D1
001322C8                            Offset_0x026C26:
001322C8 24D1                                       move.l  (A1), (A2)+
001322CA 4299                                       clr.l   (A1)+
001322CC 51C9 FFFA                                  dbra    D1, Offset_0x026C26
001322D0 103C 009D                                  move.b  #Level_Select_Menu_snd, D0
001322D4 6100 0000                                  bsr     Menu_Play_Music
001322D8 7000                                       moveq   #$00, D0
001322DA 4EB9 0000 0000                             jsr     Menu_LoadPLC2
001322E0 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
001322E6 4278 FFDC                                  clr.w   ($FFFFFFDC).w
001322EA 42B8 EE00                                  clr.l   ($FFFFEE00).w
001322EE 42B8 EE04                                  clr.l   ($FFFFEE04).w
001322F2 4278 FF0C                                  clr.w   ($FFFFFF0C).w
001322F6 4278 FF0E                                  clr.w   ($FFFFFF0E).w
001322FA 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
00132300 6100 0000                                  bsr     Menu_DelayProgram
00132304 3038 F60C                                  move.w  ($FFFFF60C).w, D0
00132308 0000 0040                                  ori.b   #$40, D0
0013230C 33C0 00C0 0004                             move.w  D0, ($00C00004)
00132312 6100 0000                                  bsr     Menu_Pal_FadeTo
00132316                            Menu_Main_Loop:
00132316 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
0013231C 6100 0000                                  bsr     Menu_DelayProgram
00132320 46FC 2700                                  move    #$2700, SR
00132324 7600                                       moveq   #$00, D3
00132326 6100 0000                                  bsr     Offset_0x026ED8
0013232A 6100 0000                                  bsr     Offset_0x026DEC
0013232E 363C 6000                                  move.w  #$6000, D3
00132332 6100 0000                                  bsr     Offset_0x027048
00132336 46FC 2300                                  move    #$2300, SR
0013233A 4EB9 0000 0000                             jsr     Dynamic_Menu
00132340 6100 0000                                  bsr     Menu_RunPLC
00132344 0838 0004 F604                             btst    #$04, ($FFFFF604).w
0013234A 6700                                       beq.s   Offset_0x026CC6
0013234C 31FC 0001 FFD8                             move.w  #$0001, ($FFFFFFD8).w
00132352                            Offset_0x026CC6:
00132352 1038 F605                                  move.b  ($FFFFF605).w, D0
00132356 8038 F607                                  or.b    ($FFFFF607).w, D0
0013235A 0200 0080                                  andi.b  #$80, D0
0013235E 6600                                       bne.s   Offset_0x026CD8
00132360 60B4                                       bra     Menu_Main_Loop
00132362                            Offset_0x026CD8:
00132362 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00132366 D040                                       add.w   D0, D0
00132368 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0
0013236C 6B00 0000                                  bmi     Menu_Game_Reset
00132370 0C40 0600                                  cmpi.w  #$0600, D0
00132374 6700 0000                                  beq     Menu_Ending_Sequence
00132378 0C40 5555                                  cmpi.w  #$5555, D0
0013237C 6798                                       beq     Menu_Main_Loop
0013237E 0C40 4000                                  cmpi.w  #$4000, D0
00132382 6600 0000                                  bne     Menu_Load_Level
00132386 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w
0013238C 4278 FE10                                  clr.w   ($FFFFFE10).w
00132390 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
00132396 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
0013239C 7000                                       moveq   #$00, D0
0013239E 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
001323A2 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
001323A6 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
001323AA 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
001323AE 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
001323B2 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
001323B6 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
001323BE 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
001323C6 31F8 FF72 FF70                             move.w  ($FFFFFF72).w, ($FFFFFF70).w
001323CC 4E75                                       rts
001323CE                            Menu_Game_Reset:
001323CE 11FC 0000 F600                             move.b  #$0000, ($FFFFF600).w
001323D4 4E75                                       rts
001323D6                            Menu_Ending_Sequence:
001323D6 11FC 0018 F600                             move.b	#$0018,($FFFFF600).w
001323DC 31FC 0600 FE10             		move.w	#$0600,($FFFFFE10).w
001323E2 4E75                       		rts
001323E4                            Menu_Level_Select_Array:
001323E4 0000 0001 0002                             dc.w    $0000, $0001, $0002
001323EA 0100 0101 0102                             dc.w    $0100, $0101, $0102
001323F0 0200 0201 0202                             dc.w    $0200, $0201, $0202
001323F6 0300 0301 0302                             dc.w    $0300, $0301, $0302
001323FC 0400 0401 0402                             dc.w    $0400, $0401, $0402
00132402 0500 0501 0103                             dc.w    $0500, $0501, $0103
00132408 0502 4000 0600                             dc.w    $0502, $4000, $0600
0013240E FFFF                                       dc.w    $FFFF
00132410                            Menu_Load_Level:
00132410 0240 3FFF                                  andi.w  #$3FFF, D0
00132414 31C0 FE10                                  move.w  D0, ($FFFFFE10).w
00132418 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w
0013241E 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
00132424 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
0013242A 7000                                       moveq   #$00, D0
0013242C 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
00132430 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
00132434 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
00132438 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
0013243C 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
00132440 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
00132444 4E71                                       nop
00132446 4E71                                       nop
00132448 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
00132450 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
00132458 103C 00E0                                  move.b  #Volume_Down, D0
0013245C 6100 0000                                  bsr     Menu_Play_Music     
00132460 7000                                       moveq   #$00, D0
00132462 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
00132466 31C0 FFDC                                  move.w  D0, ($FFFFFFDC).w
0013246A 4E75                                       rts
0013246C                            Offset_0x026DEC:
0013246C 1238 F605                                  move.b  ($FFFFF605).w, D1
00132470 0201 0003                                  andi.b  #$03, D1
00132474 6600                                       bne.s   Offset_0x026DFC
00132476 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
0013247A 6A00                                       bpl.s   Offset_0x026E32
0013247C                            Offset_0x026DFC:
0013247C 31FC 000B FF80                             move.w  #$000B, ($FFFFFF80).w
00132482 1238 F604                                  move.b  ($FFFFF604).w, D1
00132486 0201 0003                                  andi.b  #$03, D1
0013248A 6700                                       beq.s   Offset_0x026E32
0013248C 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00132490 0801 0000                                  btst    #$00, D1
00132494 6700                                       beq.s   Offset_0x026E1C
00132496 5340                                       subq.w  #$01, D0
00132498 6400                                       bcc.s   Offset_0x026E1C
0013249A 7015                                       moveq   #$15, D0     ; Último item após apertar para cima
0013249C                            Offset_0x026E1C:
0013249C 0801 0001                                  btst    #$01, D1
001324A0 6700                                       beq.s   Offset_0x026E2C
001324A2 5240                                       addq.w  #$01, D0
001324A4 0C40 0016                                  cmpi.w  #$0016, D0   ; Verifica qual o último item da lista
001324A8 6500                                       bcs.s   Offset_0x026E2C
001324AA 7000                                       moveq   #$00, D0
001324AC                            Offset_0x026E2C:
001324AC 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
001324B0 4E75                                       rts
001324B2                            Offset_0x026E32:
001324B2 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w ; se o item for igual muda as funções de esquerda e direita 
001324B8 6600                                       bne.s   Offset_0x026E9C
001324BA 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001324BE 1238 F605                                  move.b  ($FFFFF605).w, D1
001324C2 0801 0002                                  btst    #$02, D1
001324C6 6700                                       beq.s   Offset_0x026E4E
001324C8 5300                                       subq.b  #$01, D0
001324CA 6400                                       bcc.s   Offset_0x026E4E
001324CC 707F                                       moveq   #$7F, D0
001324CE                            Offset_0x026E4E:
001324CE 0801 0003                                  btst    #$03, D1
001324D2 6700                                       beq.s   Offset_0x026E5E
001324D4 5200                                       addq.b  #$01, D0
001324D6 0C40 0080                                  cmpi.w  #$0080, D0
001324DA 6500                                       bcs.s   Offset_0x026E5E
001324DC 7000                                       moveq   #$00, D0
001324DE                            Offset_0x026E5E:
001324DE 0801 0006                                  btst    #$06, D1
001324E2 6700                                       beq.s   Offset_0x026E6C
001324E4 0600 0010                                  addi.b  #$10, D0
001324E8 0200 007F                                  andi.b  #$7F, D0
001324EC                            Offset_0x026E6C:
001324EC 31C0 FF84                                  move.w  D0, ($FFFFFF84).w
001324F0 0241 0030                                  andi.w  #$0030, D1
001324F4 6700                                       beq.s   Offset_0x026E9A
001324F6 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001324FA 0640 0080                                  addi.w  #$0080, D0
001324FE 6100 0000                                  bsr     Menu_Play_Music 
00132502 41F9 0000 0000                             lea     (Code_Debug_Mode), A0   
00132508 45F9 0000 0000                             lea     (Code_All_Emeralds), A2 
0013250E 43F8 FF0A                                  lea     ($FFFFFF0A).w, A1
00132512 7401                                       moveq   #$01, D2
00132514 6100 0000                                  bsr     Menu_Code_Test 
00132518                            Offset_0x026E9A:
00132518 4E75                                       rts
0013251A                            Offset_0x026E9C:
0013251A 1238 F605                                  move.b  ($FFFFF605).w, D1
0013251E 0201 000C                                  andi.b  #$0C, D1
00132522 6700                                       beq.s   Offset_0x026EB2
00132524 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00132528 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0
0013252C 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
00132530                            Offset_0x026EB2:
00132530 4E75                                       rts
00132532                            Menu_Left_Right_Select:                   
00132532 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
00132541 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C
00132548                            Offset_0x026ED8:
00132548 49F9 FFFF 0000                             lea     ($FFFF0000), A4
0013254E 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5
00132554 4DF9 00C0 0000                             lea     ($00C00000), A6
0013255A 7000                                       moveq   #$00, D0
0013255C 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00132560 E548                                       lsl.w   #$02, D0
00132562 47F5 0000                                  lea     $00(A5, D0), A3
00132566 7000                                       moveq   #$00, D0
00132568 1013                                       move.b  (A3), D0
0013256A C0FC 0050                                  mulu.w  #$0050, D0
0013256E 7200                                       moveq   #$00, D1
00132570 122B 0001                                  move.b  $0001(A3), D1
00132574 D041                                       add.w   D1, D0
00132576 43F4 0000                                  lea     $00(A4, D0), A1
0013257A 7200                                       moveq   #$00, D1
0013257C 1213                                       move.b  (A3), D1
0013257E EF49                                       lsl.w   #$07, D1
00132580 D22B 0001                                  add.b   $0001(A3), D1
00132584 0641 C000                                  addi.w  #$C000, D1
00132588 E589                                       lsl.l   #$02, D1
0013258A E449                                       lsr.w   #$02, D1
0013258C 0041 4000                                  ori.w   #$4000, D1
00132590 4841                                       swap.w  D1
00132592 2D41 0004                                  move.l  D1, $0004(A6)
00132596 740E                                       moveq   #$0E, D2    ; Quantidade de letras a selecionar (Highlight)
00132598                            Offset_0x026F28:                
00132598 3019                                       move.w  (A1)+, D0
0013259A D043                                       add.w   D3, D0
0013259C 3C80                                       move.w  D0, (A6)
0013259E 51CA FFF8                                  dbra    D2, Offset_0x026F28
001325A2 544B                                       addq.w  #$02, A3
001325A4 7000                                       moveq   #$00, D0
001325A6 1013                                       move.b  (A3), D0
001325A8 6700                                       beq.s   Offset_0x026F6C
001325AA C0FC 0050                                  mulu.w  #$0050, D0
001325AE 7200                                       moveq   #$00, D1
001325B0 122B 0001                                  move.b  $0001(A3), D1
001325B4 D041                                       add.w   D1, D0
001325B6 43F4 0000                                  lea     $00(A4, D0), A1
001325BA 7200                                       moveq   #$00, D1
001325BC 1213                                       move.b  (A3), D1
001325BE EF49                                       lsl.w   #$07, D1
001325C0 D22B 0001                                  add.b   $0001(A3), D1
001325C4 0641 C000                                  addi.w  #$C000, D1
001325C8 E589                                       lsl.l   #$02, D1
001325CA E449                                       lsr.w   #$02, D1
001325CC 0041 4000                                  ori.w   #$4000, D1
001325D0 4841                                       swap.w  D1
001325D2 2D41 0004                                  move.l  D1, $0004(A6)
001325D6 3019                                       move.w  (A1)+, D0
001325D8 D043                                       add.w   D3, D0
001325DA 3C80                                       move.w  D0, (A6)
001325DC                            Offset_0x026F6C:
001325DC 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w  ; Se for igual seleciona o número do Sound Test
001325E2 6600                                       bne.s   Offset_0x026F78
001325E4 6100 0000                                  bsr     Offset_0x026F7A
001325E8                            Offset_0x026F78:
001325E8 4E75                                       rts
001325EA                            Offset_0x026F7A:
001325EA 23FC 49C6 0003 00C0 0004                   move.l  #$49C60003, ($00C00004) ; Posição dos números do Sound Test
001325F4 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001325F8 1400                                       move.b  D0, D2
001325FA E808                                       lsr.b   #$04, D0
001325FC 6100                                       bsr.s   Offset_0x026F90
001325FE 1002                                       move.b  D2, D0
00132600                            Offset_0x026F90:
00132600 0240 000F                                  andi.w  #$000F, D0
00132604 0C00 000A                                  cmpi.b  #$0A, D0
00132608 6500                                       bcs.s   Offset_0x026F9E
0013260A 5800                                       addi.b  #$04, D0
0013260C                            Offset_0x026F9E:
0013260C 0600 0010                                  addi.b  #$10, D0
00132610 D043                                       add.w   D3, D0
00132612 3C80                                       move.w  D0, (A6)
00132614 4E75                                       rts
00132616                            ;-------------------------------------------------------------------------------                
00132616                            Menu_Code_Test: 
00132616 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
0013261A D0C0                                       adda.w  D0, A0
0013261C 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00132620 B010                                       cmp.b   (A0), D0
00132622 6600                                       bne.s   Menu_Reset_Debug_Mode_Code_Counter
00132624 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
00132628 4A28 0001                                  tst.b   $0001(A0)
0013262C 6A00                                       bpl.s   Menu_All_Emeralds_Code_Test 
0013262E 32BC 0101                                  move.w  #$0101, (A1)
00132632 6000 0000                                  bra     Menu_Set_Debug_Flag 
00132636                            Menu_Reset_Debug_Mode_Code_Counter: 
00132636 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
0013263C                            Menu_All_Emeralds_Code_Test: 
0013263C 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
00132640 D4C0                                       adda.w  D0, A2
00132642 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00132646 B012                                       cmp.b   (A2), D0
00132648 6600                                       bne.s   Menu_Reset_All_Emerald_Code_Counter 
0013264A 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
0013264E 4A2A 0001                                  tst.b   $0001(A2)
00132652 6A00                                       bpl.s   Menu_Code_Not_0xFF 
00132654 4A42                                       tst.w   D2
00132656 6600                                       bne.s   Menu_Set_All_Emeralds 
00132658                            Menu_Set_Debug_Flag: 
00132658 11FC 0001 FFE1                             move.b  #$01, (Slow_Motion_Flag).w
0013265E 11FC 0001 FFE2                             move.b  #$01, (Debug_Mode_Flag).w
00132664 103C 00B5                                  move.b  #Ring_Snd, D0
00132668 6100 0000                                  bsr     Menu_Play_Music 
0013266C 6000                                       bra.s   Menu_Reset_All_Emerald_Code_Counter 
0013266E                            Menu_Set_All_Emeralds: 
0013266E 31FC 0006 FE56                             move.w  #$0006, ($FFFFFE56).w
00132674 103C 0093                                  move.b  #Emerald_Snd, D0
00132678 6100 0000                                  bsr     Menu_Play_Music 
0013267C                            Menu_Reset_All_Emerald_Code_Counter: 
0013267C 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
00132682                            Menu_Code_Not_0xFF: 
00132682 4E75                                       rts               
00132684                            Code_Debug_Mode: 
00132684 0109 0902 0101 0204 FF                     dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $FF
0013268D                            Code_All_Emeralds: 
0013268D 0401 0206 FF                               dc.b    $04, $01, $02, $06, $FF
00132692                            ;-------------------------------------------------------------------------------                 
00132692                            Offset_0x027040:
00132692 6100 FF56                                  bsr     Offset_0x026F7A
00132696 6000 0000                                  bra     Offset_0x027050
0013269A                            Offset_0x027048:
0013269A 6100 FEAC                                  bsr     Offset_0x026ED8
0013269E 6000 0000                                  bra     Offset_0x027050
001326A2                            Offset_0x027050:
001326A2 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001326A6 47F9 0000 0000                             lea     (Menu_Icon_List), A3
001326AC 47F3 0000                                  lea     $00(A3, D0), A3
001326B0 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
001326B6 7000                                       moveq   #$00, D0
001326B8 1013                                       move.b  (A3), D0
001326BA E748                                       lsl.w   #$03, D0
001326BC 3200                                       move.w  D0, D1
001326BE D040                                       add.w   D0, D0
001326C0 D041                                       add.w   D1, D0
001326C2 43F1 0000                                  lea     $00(A1, D0), A1
001326C6 203C 4B36 0003                             move.l  #$4B360003, D0        ; Posição Horizontal dos Ícones
001326CC 7203                                       moveq   #$03, D1
001326CE 7402                                       moveq   #$02, D2
001326D0 6100 0000                                  bsr     Menu_ShowVDPGraphics 
001326D4 43F9 0000 0000                             lea     (Icon_Palettes), A1  
001326DA 7000                                       moveq   #$00, D0
001326DC 1013                                       move.b  (A3), D0
001326DE EB48                                       lsl.w   #$05, D0
001326E0 43F1 0000                                  lea     $00(A1, D0), A1
001326E4 45F8 FB40                                  lea     ($FFFFFB40).w, A2
001326E8 7207                                       moveq   #$07, D1
001326EA                            Offset_0x027098:                
001326EA 24D9                                       move.l  (A1)+, (A2)+
001326EC 51C9 FFFC                                  dbra    D1, Offset_0x027098
001326F0 4E75                                       rts
001326F2                            ;-------------------------------------------------------------------------------                            
001326F2                            Dynamic_Menu:                           
001326F2 5338 F7B9                                  subq.b  #$01, ($FFFFF7B9).w          ; Decrementa em 1 o Tempo
001326F6 6A00                                       bpl.s   Exit_Dinamic_Menu            ; Se for maior ou igual a 0 sai da função
001326F8 11FC 0007 F7B9                             move.b  #$07, ($FFFFF7B9).w          ; Inicializa o tempo de duração de cada frame
001326FE 1038 F7B8                                  move.b  ($FFFFF7B8).w, D0            ; Carrega o Id do Frame Atual em D0
00132702 5238 F7B8                                  addq.b  #$01, ($FFFFF7B8).w          ; Carrega o próximo frame em $FFFFFFB8
00132706 0240 001F                                  andi.w  #$001F, D0
0013270A 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Carrega o Id do frame em D0
0013270E                                          ; muls.w  #$0140, D0                   ; Multiplica o Id pelo tamanho em bytes de cada frame
0013270E ED48                                       lsl.w   #$06, D0
00132710 4DF9 00C0 0000                             lea     ($00C00000), A6
00132716 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
0013271E 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
00132724 43F1 0000                                  lea     $00(A1, D0), A1
00132728 303C 0009                                  move.w  #$0009, D0                   ; Tiles-1 a serem carregados por vez 
0013272C                            Menu_Loop_Load_Tiles:
0013272C 2C99                                       move.l  (A1)+, (A6)
0013272E 2C99                                       move.l  (A1)+, (A6)     
00132730 2C99                                       move.l  (A1)+, (A6)     
00132732 2C99                                       move.l  (A1)+, (A6)     
00132734 2C99                                       move.l  (A1)+, (A6)     
00132736 2C99                                       move.l  (A1)+, (A6)
00132738 2C99                                       move.l  (A1)+, (A6)
0013273A 2C99                                       move.l  (A1)+, (A6)
0013273C 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
00132740                            Exit_Dinamic_Menu:                
00132740 4E75                                       rts              
00132742                            Sonic_Miles_Frame_Select:     
00132742 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
00132750 050A                                       dc.b    $05, $0A
00132752 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
00132760 0A05                                       dc.b    $0A, $05   
00132762                                            ; 0 = 0000000000  ; 1 = 0101000000  ; 2 = 1010000000 ; 3 = 1111000000
00132762                            ;------------------------------------------------------------------------------                  
00132762 =00000000                  __ = $00
00132762 =0000001E                  _A = $1E
00132762 =0000001F                  _B = $1F
00132762 =00000020                  _C = $20
00132762 =00000021                  _D = $21
00132762 =00000022                  _E = $22    
00132762 =00000023                  _F = $23
00132762 =00000024                  _G = $24
00132762 =00000025                  _H = $25
00132762 =00000026                  _I = $26
00132762 =00000027                  _J = $27
00132762 =00000028                  _K = $28
00132762 =00000029                  _L = $29
00132762 =0000002A                  _M = $2A
00132762 =0000002B                  _N = $2B
00132762 =0000002C                  _O = $2C
00132762 =0000002D                  _P = $2D
00132762 =0000002E                  _Q = $2E
00132762 =0000002F                  _R = $2F
00132762 =00000030                  _S = $30
00132762 =00000031                  _T = $31
00132762 =00000032                  _U = $32
00132762 =00000033                  _V = $33
00132762 =00000034                  _W = $34
00132762 =00000035                  _X = $35
00132762 =00000036                  _Y = $36
00132762 =00000037                  _Z = $37
00132762 =0000001A                  _st = $1A
00132762                            ;-------------------------------------------------------------------------------  
00132762                            Icon_Palettes: 
00132762 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00132772 00A4 0082 0062 0000 0E86+                  dc.w    $00A4, $0082, $0062, $0000, $0E86, $0026, $0E42, $0C00
00132782 0000 0000 0420 0820 0C00+                  dc.w    $0000, $0000, $0420, $0820, $0C00, $0E60, $0A00, $0000
00132792 0E00 0000 0000 0000 0444+                  dc.w    $0E00, $0000, $0000, $0000, $0444, $0666, $0AAA, $0EEE
001327A2 0000 0204 0026 0248 046A+                  dc.w    $0000, $0204, $0026, $0248, $046A, $048C, $06CE, $0002
001327B2 0000 0220 0040 0060 0080+                  dc.w    $0000, $0220, $0040, $0060, $0080, $02A0, $06E0, $0A0C
001327C2 0000 0000 0A00 0660 0C80+                  dc.w    $0000, $0000, $0A00, $0660, $0C80, $0EC0, $006A, $0008
001327D2 028A 00AE 004C 006E 0060+                  dc.w    $028A, $00AE, $004C, $006E, $0060, $0066, $00C0, $00CA
001327E2 0000 0000 0CE2 0000 0480+                  dc.w    $0000, $0000, $0CE2, $0000, $0480, $0240, $0EEE, $04AC
001327F2 006A 0026 0842 0620 0400+                  dc.w    $006A, $0026, $0842, $0620, $0400, $0000, $0000, $0000
00132802 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00132812 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
00132822 0000 0000 0A26 0C48 0E8C+                  dc.w    $0000, $0000, $0A26, $0C48, $0E8C, $00CE, $00C4, $0080
00132832 0C00 0000 0EEE 0EEA 0EC8+                  dc.w    $0C00, $0000, $0EEE, $0EEA, $0EC8, $006E, $004A, $0028
00132842 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00132852 00A4 0082 0062 0808 0A4A+                  dc.w    $00A4, $0082, $0062, $0808, $0A4A, $0026, $0626, $0404
00132862 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00132872 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
00132882 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00132892 00A4 0082 0062 0400 0E86+                  dc.w    $00A4, $0082, $0062, $0400, $0E86, $006E, $0E42, $0C00
001328A2 0000 0000 0CE2 08C0 0480+                  dc.w    $0000, $0000, $0CE2, $08C0, $0480, $0240, $0EEE, $02AC
001328B2 006A 0026 0AA6 0000 060A+                  dc.w    $006A, $0026, $0AA6, $0000, $060A, $0408, $0204, $0000
001328C2 0000 0000 0C06 0C0A 0C6E+                  dc.w    $0000, $0000, $0C06, $0C0A, $0C6E, $0068, $008A, $0000
001328D2 02CE 00EC 00AE 006E 0EEE+                  dc.w    $02CE, $00EC, $00AE, $006E, $0EEE, $0000, $000E, $00C4
001328E2 0000 0000 0EEE 0AAA 0000+                  dc.w    $0000, $0000, $0EEE, $0AAA, $0000, $0666, $0444, $0E40
001328F2 0C00 0800 00CE 028E 000E+                  dc.w    $0C00, $0800, $00CE, $028E, $000E, $0084, $0062, $0020
00132902 0000 0000 0004 0044 0084+                  dc.w    $0000, $0000, $0004, $0044, $0084, $0088, $00A8, $00AC
00132912 006C 002C 0028 0006 0666+                  dc.w    $006C, $002C, $0028, $0006, $0666, $0888, $0CCC, $0EEE
00132922 0000 0000 06CE 04AC 028A+                  dc.w    $0000, $0000, $06CE, $04AC, $028A, $0068, $0046, $00E8
00132932 00C4 0080 0040 0EEE 0C00+                  dc.w    $00C4, $0080, $0040, $0EEE, $0C00, $0EC0, $0860, $0000
00132942 0000 0000 0E64 0E86 0EA8+                  dc.w    $0000, $0000, $0E64, $0E86, $0EA8, $0ECA, $0EEE, $0000
00132952 00AE 006E 0E22 00E0 0000+                  dc.w    $00AE, $006E, $0E22, $00E0, $0000, $0000, $0000, $0000
00132962 0000 0E20 004E 006E 0048+                  dc.w    $0000, $0E20, $004E, $006E, $0048, $008C, $00CE, $08EE
00132972 0800 0400 0000 0EE8 0E80+                  dc.w    $0800, $0400, $0000, $0EE8, $0E80, $0E60, $0000, $0000
00132982 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00132992 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
001329A2 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
001329B2 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
001329C2                            ;-------------------------------------------------------------------------------  
001329C2                            Menu_Icon_List: 
001329C2 0000 000E 0E0E 0606 060B+                  dc.b    $00, $00, $00, $0E, $0E, $0E, $06, $06, $06, $0B, $0B, $0B, $0D, $0D, $0D, $09
001329D2 0909 0410 0F11                             dc.b    $09, $09, $04, $10, $0F, $11
001329D8                            ;-------------------------------------------------------------------------------                 
001329D8                            Menu_Text_Highlight:                  
001329D8 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
001329E8 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
001329F8 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
00132A08 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
00132A18 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
00132A28 0F2C 0000 132C 134A                        dc.w    $0F2C, $0000, $132C, $134A
00132A30                            ;-------------------------------------------------------------------------------                
00132A30                            Menu_Text_Positions:                   
00132A30 00F6 0236 0376 05F6 04B6+                  dc.w    $00F6, $0236, $0376, $05F6, $04B6, $011C, $025C, $039C
00132A40 04DC 061C                                  dc.w    $04DC, $061C
00132A44                            ;-------------------------------------------------------------------------------                          
00132A44                            Menu_Level_Select_Text: 
00132A44 0E20 251E 2C31 2620 002A+                  dc.b    $0E, _C, _H, _A, _O, _T, _I, _C, __, _M, _O, _U, _N, _D, __, __
00132A54 0E21 1E2A 2D00 2F22 2926+                  dc.b    $0E, _D, _A, _M, _P, __, _R, _E, _L, _I, _C, __, __, __, __, __
00132A64 0E2A 1E24 2A1E 0031 2C2A+                  dc.b    $0E, _M, _A, _G, _M, _A, __, _T, _O, _M, _B, __, __, __, __, __
00132A74 0E30 2D2F 262B 2400 2026+                  dc.b    $0E, _S, _P, _R, _I, _N, _G, __, _C, _I, _T, _Y, __, __, __, __
00132A84 0E30 311E 2F2F 3600 2A22+                  dc.b    $0E, _S, _T, _A, _R, _R, _Y, __, _M, _E, _T, _R, _O, __, __, __
00132A94 0E1F 1E21 2B26 2800 231E+                  dc.b    $0E, _B, _A, _D, _N, _I, _K, __, _F, _A, _C, _T, _O, _R, _Y, __
00132AA4 0E29 1E30 3100 2326 2425+                  dc.b    $0E, _L, _A, _S, _T, __, _F, _I, _G, _H, _T, __, __, __, __, __   
00132AB4 0E30 2D22 2026 1E29 0030+                  dc.b    $0E, _S, _P, _E, _C, _I, _A, _L, __, _S, _T, _A, _G, _E, __, __
00132AC4 0E22 2B21 262B 2400 3022+                  dc.b    $0E, _E, _N, _D, _I, _N, _G, __, _S, _E, _Q, _U, _E, _N, _C, _E
00132AD4 0E27 3228 221F 2C35 0000+                  dc.b    $0E, _J, _U, _K, _E, _B, _O, _X, __, __, __, __, __, _st,__, __                 
00132AE4                            ;-------------------------------------------------------------------------------
00132AE4                            Wings_Mappings: 
00132AE4 6000 6000 6000 604D 604E+                  dc.w    $6000, $6000, $6000, $604D, $604E, $684E, $684D, $6000, $6000, $6000   
00132AF8                            ;Wings_Line_1:                 
00132AF8 604F 6050 6051 6052 6053+                  dc.w    $604F, $6050, $6051, $6052, $6053, $6853, $6852, $6851, $6850, $684F
00132B0C                            ;Wings_Line_2:
00132B0C 6054 6055 6056 6057 6057+                  dc.w    $6054, $6055, $6056, $6057, $6057, $6057, $6057, $6856, $6855, $6854
00132B20                            ;Wings_Line_3:
00132B20 6058 6059 605A 6057 6057+                  dc.w    $6058, $6059, $605A, $6057, $6057, $6057, $6057, $685A, $6859, $6858
00132B34                            ;Wings_Line_4:
00132B34 605B 605C 605D 6057 6057+                  dc.w    $605B, $605C, $605D, $6057, $6057, $6057, $6057, $685D, $685C, $685B
00132B48                            ;Wings_Line_5:
00132B48 6000 605E 605F 6060 6061+                  dc.w    $6000, $605E, $605F, $6060, $6061, $6062, $6063, $6064, $685E, $6000
00132B5C                            ;Wings_Line_6:
00132B5C 6000 6000 6065 6066 6067+                  dc.w    $6000, $6000, $6065, $6066, $6067, $6867, $6866, $6865, $6000, $6000 
00132B70                            ;-------------------------------------------------------------------------------    
00132B70                            Menu_Palette:
00132B70                                            incbin  'data\menu\menu.pal'            
00132BF0                            Menu_ClearScreen:
00132BF0 4EF8 1012                                  jmp     ClearScreen
00132BF4                            Menu_ShowVDPGraphics:                
00132BF4 4EF8 1192                                  jmp     ShowVDPGraphics                
00132BF8                            Menu_NemesisDec: 
00132BF8 4EF8 124C                                  jmp     NemDec  
00132BFC                            Menu_LoadPLC2:      
00132BFC 4EF8 13D4                                  jmp     LoadPLC2
00132C00                            Menu_RunPLC:                    
00132C00 4EF8 140E                                  jmp     RunPLC_RAM                           
00132C04                            Menu_EnigmaDec
00132C04 4EF8 1540                                  jmp     EniDec
00132C08                            Menu_Pal_FadeTo:
00132C08 4EF8 230C                                  jmp     Pal_FadeTo
00132C0C                            Menu_Pal_FadeFrom:
00132C0C 4EF8 23C2                                  jmp     Pal_FadeFrom     
00132C10                            Menu_Play_Music:
00132C10 4EF8 1108                                  jmp     PlaySound  
00132C14                            Menu_PalLoad1:
00132C14 4EF8 2670                                  jmp     PalLoad1
00132C18                            Menu_DelayProgram:
00132C18 4EF8 3704                                  jmp     DelayProgram
00132C1C                            ;-------------------------------------------------------------------------------
00132C1C                            Menu_Font:
00132C1C                                            incbin  'data\menu\menufont.nem' 
00133190                            Level_Icons:
00133190                                            incbin  'data\menu\levelico.nem'   
0013448C                            Menu_Mappings:
0013448C                                            incbin  'data\menu\menubg.eni'
00134638                            Icons_Mappings:
00134638                                            incbin  'data\menu\iconsmap.eni'
0013464E                            Sonic_Miles_Spr:                                         
0013464E                                            incbin  'data\menu\soncmils.dat'   
00134B4E                            ;===============================================================================
00134B4E                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
00134B4E                            ; [ Fim ]
00134B4E                            ;===============================================================================
00134B4E                            ;===============================================================================
00134B4E                            		
00134B4E                            SegaLogo:
00134B4E 7C0A                       	move.l  #10,d6
00134B50 6100 0000                  	bsr	delay
00134B54 33FC 8144 00C0 0004        	SetVdpRegister  1,$44
00134B5C 33FC 9001 00C0 0004        	SetVdpRegister  16,1 
00134B64 41F9 0000 0000             	lea.l   LogoChars,A0 
00134B6A 23FC 4020 0000 00C0 0004   	VramWrtAddr  $20,VCTRL
00134B74 203C 0000 0930             	move.l  #16*147,d0
00134B7A                            ldchar:
00134B7A 33D8 00C0 0000             	move.w  (a0)+,VDATA
00134B80 51C8 FFF8                  	dbra	d0,ldchar
00134B84 41F9 0000 0000             	lea.l   LogoPalette,a0
00134B8A 23FC C000 0000 00C0 0004   	CramWrtAddr  $0,VCTRL
00134B94 700F                       	moveq.l #15,d0
00134B96                            ldpal:
00134B96 33D8 00C0 0000             	move.w  (a0)+,VDATA
00134B9C 51C8 FFF8                  	dbra	d0,ldpal
00134BA0 243C 451C 0003             	VramWrtAddr $C51C,D2
00134BA6 7201                       	moveq.l	#1,d1
00134BA8 7603                       	moveq.l #3,d3
00134BAA                            newrow:
00134BAA 23C2 00C0 0004             	move.l	d2,VCTRL
00134BB0 0682 0080 0000             	add.l   #$00800000,D2
00134BB6 700B                       	moveq.l #11,D0
00134BB8                            wrtrow1:
00134BB8 33C1 00C0 0000             	move.w	d1,VDATA
00134BBE 5241                       	addq.w	#1,d1
00134BC0 51C8 FFF6                  	dbra	d0,wrtrow1
00134BC4 51CB FFE4                  	dbra	d3,newrow
00134BC8 41F9 0000 0000             	lea.l   LogoCycle,a0
00134BCE D1FC 0000 0020             	add.l	#32,a0
00134BD4 7210                       	moveq   #16,d1
00134BD6 7C3F                       	move.l  #$3f,d6
00134BD8 4EB9 0000 0000             	jsr	delay
00134BDE                            stcycl:
00134BDE 2248                       	move.l	a0,a1
00134BE0 23FC C00E 0000 00C0 0004   	move.l  #$c00e0000,$C00004.L
00134BEA 7008                       	moveq   #8,d0
00134BEC                            cyc:
00134BEC 33D9 00C0 0000             	move.w  (a1)+,VDATA
00134BF2 51C8 FFF8                  	dbra	d0,cyc
00134BF6 7C08                       	move.l  #$08,d6
00134BF8 6100 0000                  	bsr	 delay
00134BFC 5548                       	subq	#2,a0
00134BFE 51C9 FFDE                  	dbra	d1,stcycl
00134C02 7C40                       	move.l  #$40,d6
00134C04 6100 0000                  	bsr	 delay
00134C08 23FC C000 0000 00C0 0004   	CramWrtAddr  $0,VCTRL
00134C12 700F                       	moveq.l #15,d0
00134C14                            .clpal:
00134C14 33FC 0000 00C0 0000        	move.w  #0,VDATA
00134C1C 51C8 FFF6                  	dbra	d0,.clpal
00134C20 23FC 4000 0003 00C0 0004   	VramWrtAddr $C000,VCTRL
00134C2A 203C 0000 0700             	move.l #64*28,d0
00134C30                            .clmap:
00134C30 33FC 0000 00C0 0000        	move.w  #0,VDATA
00134C38 51C8 FFF6                  	dbra	d0,.clmap
00134C3C 4E75                       	rts
00134C3E                            delay:
00134C3E 2E3C 0000 0FFF             	move.l  #$fff,d7
00134C44 4E71                       dt:	nop
00134C46 51CF FFFC                  	dbra	d7,dt
00134C4A 51CE FFF2                  	dbra	d6,delay
00134C4E 4E75                       	rts
00134C50                            LogoChars:
00134C50 0000 0000 0000 0111 0001+  				dc.l	$00000000,$00000111,$00011BBC,$001ABBBB
00134C60 01AA BBBB 01AA ABBB 1AAA+  				dc.l	$01AABBBB,$01AAABBB,$1AAAABB1,$19AAAA1B
00134C70 0000 0000 1111 1111 CCCD+  				dc.l	$00000000,$11111111,$CCCDDDDE,$CCCCDDDD
00134C80 CCCC DDDD BCCC CDDD 1111+  				dc.l	$CCCCDDDD,$BCCCCDDD,$11111111,$BBCCCCDD
00134C90 0000 0000 1111 1100 EEEF+  				dc.l	$00000000,$11111100,$EEEFF100,$EEEEF101
00134CA0 EEEE F11A DEEE E11A 1111+  				dc.l	$EEEEF11A,$DEEEE11A,$111111AA,$DDEEE1AA
00134CB0 0000 0000 0011 1111 11BB+  				dc.l	$00000000,$00111111,$11BBCCCC,$BBBBCCCC
00134CC0 ABBB BCCC ABBB BCCC AABB+  				dc.l	$ABBBBCCC,$ABBBBCCC,$AABBB111,$AABB1BCC
00134CD0 0000 0000 1111 1111 DDDD+  				dc.l	$00000000,$11111111,$DDDDEEEE,$DDDDEEEE
00134CE0 CDDD DEEE CDDD DEEE 1111+  				dc.l	$CDDDDEEE,$CDDDDEEE,$11111111,$CCDDDDEE
00134CF0 0000 0000 1111 0000 FFF1+  				dc.l	$00000000,$11110000,$FFF10011,$FFF101BB
00134D00 EFF1 1ABB EFF1 1ABB 1111+  				dc.l	$EFF11ABB,$EFF11ABB,$1111AAAB,$EEF1AAAB
00134D10 0000 0000 1111 1111 BCCC+  				dc.l	$00000000,$11111111,$BCCCCDDD,$BCCCCDDD
00134D20 BBCC CCDD BBCC CCDD BBB1+  				dc.l	$BBCCCCDD,$BBCCCCDD,$BBB11111,$B11CCCCD
00134D30 0000 0000 1111 1111 DEEE+  				dc.l	$00000000,$11111111,$DEEEEFFF,$DEEEEFFF
00134D40 DDEE EEFF DDEE EEFF 1111+  				dc.l	$DDEEEEFF,$DDEEEEFF,$11111111,$DDDEEEEF
00134D50 0000 0000 1100 0000 F100+  				dc.l	$00000000,$11000000,$F1000000,$F1000000
00134D60 F100 0000 F100 0000 1100+  				dc.l	$F1000000,$F1000000,$11000000,$F1000001
00134D70 0000 0000 0000 0111 0001+  				dc.l	$00000000,$00000111,$00011DDD,$001CCDDD
00134D80 01CC CDDD 1BCC CCDD 1BCC+  				dc.l	$01CCCDDD,$1BCCCCDD,$1BCCCCDD,$BBBCCC11
00134D90 0000 1111 1000 0010 E110+  				dc.l	$00001111,$10000010,$E1100010,$DEE10010
00134DA0 DEEE 1010 DDEE E100 DDEE+  				dc.l	$DEEE1010,$DDEEE100,$DDEEE100,$DDDEEE10
00134DB0 1010 0001 0011 0011 0010+  				dc.l	$10100001,$00110011,$00101101,$00100001
00134DC0 0010 0001 0000 0000 0000+  				dc.l	$00100001,$00000000,$00000000,$00000000
00134DD0 19AA A1BB 199A A1AB 199A+  				dc.l	$19AAA1BB,$199AA1AB,$199AA1AB,$1999A1AA
00134DE0 1999 A1AA 1999 91AA 1999+  				dc.l	$1999A1AA,$199991AA,$199991AA,$1899991A
00134DF0 BBCC CCDD BBBC CCCD BBBC+  				dc.l	$BBCCCCDD,$BBBCCCCD,$BBBCCCCD,$BB111111
00134E00 BBBB CCCC ABBB BCCC ABBB+  				dc.l	$BBBBCCCC,$ABBBBCCC,$ABBBBCCC,$AABBBBCC
00134E10 DDEE E19A DDDE E19A DDDE+  				dc.l	$DDEEE19A,$DDDEE19A,$DDDEE199,$11111199
00134E20 1111 1199 CD11 1199 CDD1+  				dc.l	$11111199,$CD111199,$CDD11199,$CCDD1199
00134E30 AAA1 BBBC AAA1 BBBC AAA1+  				dc.l	$AAA1BBBC,$AAA1BBBC,$AAA1BBBB,$AAA1BBB1
00134E40 9AA1 ABBB 9AA1 ABBB 99A1+  				dc.l	$9AA1ABBB,$9AA1ABBB,$99A1AABB,$99A1AABB
00134E50 CCCD DDDE CCCD DDDE CCCC+  				dc.l	$CCCDDDDE,$CCCDDDDE,$CCCCDDDD,$11111111
00134E60 BCCC CDDD BCCC CDDD BBCC+  				dc.l	$BCCCCDDD,$BCCCCDDD,$BBCCCCDD,$BBCCCCDD
00134E70 EEE1 AAAA EEE1 9AAA EEE1+  				dc.l	$EEE1AAAA,$EEE19AAA,$EEE19AAA,$111199AA
00134E80 D111 99AA D111 999A D111+  				dc.l	$D11199AA,$D111999A,$D111999A,$D1119999
00134E90 1BBB CCCC 1BBB BCCC 1BBB+  				dc.l	$1BBBCCCC,$1BBBBCCC,$1BBBBCCC,$1ABBB111
00134EA0 1ABB B1CC 1AAB B1BC 1AAB+  				dc.l	$1ABBB1CC,$1AABB1BC,$1AABB1BC,$1AAAB1BB
00134EB0 DDDD EEEE CDDD EEEE CDDD+  				dc.l	$DDDDEEEE,$CDDDEEEE,$CDDDDEEE,$11111111
00134EC0 CCDD DDEE CCCD DDEE CCCD+  				dc.l	$CCDDDDEE,$CCCDDDEE,$CCCDDDDE,$CCCCDDDE
00134ED0 F100 0001 F100 0001 E100+  				dc.l	$F1000001,$F1000001,$E100001A,$1100001A
00134EE0 E100 001A E100 01AA E100+  				dc.l	$E100001A,$E10001AA,$E10001AA,$E100019A
00134EF0 BBBC CC11 BBBB C1CC BBBB+  				dc.l	$BBBCCC11,$BBBBC1CC,$BBBBC1CC,$ABBBB1CC
00134F00 ABBB 1CCC AABB 1BCC AABB+  				dc.l	$ABBB1CCC,$AABB1BCC,$AABB1BCC,$AAA1BBBC
00134F10 DDDE EE10 1DDD EE10 1DDD+  				dc.l	$DDDEEE10,$1DDDEE10,$1DDDEEE1,$1DDDDEE1
00134F20 C1DD DEE1 C1DD DDEE C1DD+  				dc.l	$C1DDDEE1,$C1DDDDEE,$C1DDDDEE,$CC1DDDDE
00134F30 0000 0000 0000 0000 0000+  				dc.l	$00000000,$00000000,$00000000,$00000000
00134F40 0000 0000 1000 0000 1000+  				dc.l	$00000000,$10000000,$10000000,$10000000
00134F50 0199 99A1 0189 999A 0019+  				dc.l	$019999A1,$0189999A,$0019999A,$00189999
00134F60 0001 1199 1111 1111 1888+  				dc.l	$00011199,$11111111,$18888999,$18888899
00134F70 1111 111C AAAB BBB1 AAAB+  				dc.l	$1111111C,$AAABBBB1,$AAABBBBC,$AAAABBBB
00134F80 AAAA BBBB 1111 ABBB 9AAA+  				dc.l	$AAAABBBB,$1111ABBB,$9AAAABBB,$99AAAABB
00134F90 CCDD 1189 CCCD D189 1CCD+  				dc.l	$CCDD1189,$CCCDD189,$1CCDD188,$1CCCD188
00134FA0 1CCC D188 1CCC C188 1CCC+  				dc.l	$1CCCD188,$1CCCC188,$1CCCC188,$1BCCC188
00134FB0 9991 1111 9991 AAAB 9991+  				dc.l	$99911111,$9991AAAB,$9991AAAA,$9991AAAA
00134FC0 8991 9AAA 8991 9AA1 8891+  				dc.l	$89919AAA,$89919AA1,$889199AA,$889199AA
00134FD0 1111 1111 BBBC CCCD BBBB+  				dc.l	$11111111,$BBBCCCCD,$BBBBCCCC,$BBBBCCCC
00134FE0 ABBB BCCC 1111 1111 AABB+  				dc.l	$ABBBBCCC,$11111111,$AABBBBCC,$AABBBBCC
00134FF0 1111 9999 D111 8999 D111+  				dc.l	$11119999,$D1118999,$D1118999,$D1118899
00135000 C111 8899 1111 8889 CCD1+  				dc.l	$C1118899,$11118889,$CCD18889,$CCD18888
00135010 1AAA B111 1AAA A1BB 1AAA+  				dc.l	$1AAAB111,$1AAAA1BB,$1AAAA1BB,$19AAA1BB
00135020 19AA A1BB 199A A111 199A+  				dc.l	$19AAA1BB,$199AA111,$199AAAAB,$1999AAAA
00135030 1111 1DDD BCCC 1DDD BCCC+  				dc.l	$11111DDD,$BCCC1DDD,$BCCC1DDD,$BBCC1CDD
00135040 BBCC 1CDD BBBC 1CCD BBBC+  				dc.l	$BBCC1CDD,$BBBC1CCD,$BBBC1CCD,$BBBB1CCC
00135050 E100 199A E100 1999 D100+  				dc.l	$E100199A,$E1001999,$D1001999,$D1018999
00135060 D101 8999 D101 8899 D118+  				dc.l	$D1018999,$D1018899,$D1188899,$D1188889
00135070 AAA1 BBBC AAA1 BBBB AA1A+  				dc.l	$AAA1BBBC,$AAA1BBBB,$AA1ABBBB,$9A1AABBB
00135080 9A1A AB11 91AA AA11 91AA+  				dc.l	$9A1AAB11,$91AAAA11,$91AAAABB,$919AAAAB
00135090 CC1D DDDE CC1C DDDD CCC1+  				dc.l	$CC1DDDDE,$CC1CDDDD,$CCC1DDDD,$BCC1CDDD
001350A0 BCC1 CDDD BBCC 1CDD BBCC+  				dc.l	$BCC1CDDD,$BBCC1CDD,$BBCC1CDD,$BBBC1CCD
001350B0 E100 0000 E100 0000 E100+  				dc.l	$E1000000,$E1000000,$E1000000,$DE100000
001350C0 DE10 0000 DD10 0000 DDE1+  				dc.l	$DE100000,$DD100000,$DDE10000,$DDD10000
001350D0 1788 8899 1778 8889 1111+  				dc.l	$17888899,$17788889,$11111111,$17778888
001350E0 1777 8888 1777 7888 1777+  				dc.l	$17778888,$17777888,$17777888,$11111111
001350F0 99AA AABB 999A AAA1 1111+  				dc.l	$99AAAABB,$999AAAA1,$1111111B,$9999AAAA
00135100 9999 AAAA 8999 9AAA 8999+  				dc.l	$9999AAAA,$89999AAA,$89999AAA,$11111111
00135110 1BCC C178 BBBC C178 BBBC+  				dc.l	$1BCCC178,$BBBCC178,$BBBCC177,$BBBB1017
00135120 BBBB 1017 ABB1 0001 A110+  				dc.l	$BBBB1017,$ABB10001,$A1100000,$10000000
00135130 8881 999A 8889 199A 8888+  				dc.l	$8881999A,$8889199A,$88889111,$88889999
00135140 7888 8999 7888 8999 1188+  				dc.l	$78888999,$78888999,$11888899,$00111111
00135150 AAAB BBBC AAAB BBBC 1111+  				dc.l	$AAABBBBC,$AAABBBBC,$11111111,$AAAABBBB
00135160 9AAA ABBB 9AAA ABBB 99AA+  				dc.l	$9AAAABBB,$9AAAABBB,$99AAAABB,$11111111
00135170 CCC1 7888 CCC1 7888 1111+  				dc.l	$CCC17888,$CCC17888,$11111788,$CCC11788
00135180 BCC1 1778 BCC1 0178 BBC1+  				dc.l	$BCC11778,$BCC10178,$BBC10011,$11110000
00135190 1999 AAAA 8119 9AAA 8891+  				dc.l	$1999AAAA,$81199AAA,$88911111,$889999AA
001351A0 8889 999A 8889 999A 8888+  				dc.l	$8889999A,$8889999A,$88889999,$11111111
001351B0 BBBB 1CCC ABBB 1CCC 1111+  				dc.l	$BBBB1CCC,$ABBB1CCC,$11111BCC,$AABBBBCC
001351C0 AAAB BBBC AAAB BBBC AAAA+  				dc.l	$AAABBBBC,$AAABBBBC,$AAAABBBB,$11111111
001351D0 D178 8889 C177 8888 CC77+  				dc.l	$D1788889,$C1778888,$CC778888,$CC777881
001351E0 CC77 7881 CC77 7781 CC77+  				dc.l	$CC777881,$CC777781,$CC777781,$11111111
001351F0 199A AAAB 1999 AAAA 1999+  				dc.l	$199AAAAB,$1999AAAA,$19991111,$89991AAA
00135200 8991 1AAA 8891 19AA 8811+  				dc.l	$89911AAA,$889119AA,$881119AA,$11111111
00135210 BBBC C1CD BBBB C1CC 1111+  				dc.l	$BBBCC1CD,$BBBBC1CC,$111111CC,$ABBBBCCC
00135220 ABBB BCCC AABB BBCC AABB+  				dc.l	$ABBBBCCC,$AABBBBCC,$AABBBBCC,$11111111
00135230 DDD1 0000 DDDD 1000 DDDD+  				dc.l	$DDD10000,$DDDD1000,$DDDD1000,$CDDD1000
00135240 CDDD D100 CCDD D100 CCDD+  				dc.l	$CDDDD100,$CCDDD100,$CCDDD100,$11111100
00135250 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
00135260 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
00135270 0011 0000 0011 0000 0011+  	DC.L	$00110000,$00110000,$00110000,$00110000
00135280 0011 0000 0000 0000 0011+  	DC.L	$00110000,$00000000,$00110000,$00000000
00135290 0110 1100 0110 1100 0110+  	DC.L	$01101100,$01101100,$01101100,$00000000
001352A0 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
001352B0 0110 1100 0110 1100 1111+  	DC.L	$01101100,$01101100,$11111110,$01101100
001352C0 1111 1110 0110 1100 0110+  	DC.L	$11111110,$01101100,$01101100,$00000000
001352D0 0011 0000 0111 1100 1100+  	DC.L	$00110000,$01111100,$11000000,$01111000
001352E0 0000 1100 1111 1000 0011+  	DC.L	$00001100,$11111000,$00110000,$00000000
001352F0 0000 0000 1100 0110 1100+  	DC.L	$00000000,$11000110,$11001100,$00011000
00135300 0011 0000 0110 0110 1100+  	DC.L	$00110000,$01100110,$11000110,$00000000
00135310 0011 1000 0110 1100 0011+  	DC.L	$00111000,$01101100,$00111000,$01110110
00135320 1101 1100 1100 1100 0111+  	DC.L	$11011100,$11001100,$01110110,$00000000
00135330 0110 0000 0110 0000 1100+  	DC.L	$01100000,$01100000,$11000000,$00000000
00135340 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
00135350 0001 1000 0011 0000 0110+  	DC.L	$00011000,$00110000,$01100000,$01100000
00135360 0110 0000 0011 0000 0001+  	DC.L	$01100000,$00110000,$00011000,$00000000
00135370 0110 0000 0011 0000 0001+  	DC.L	$01100000,$00110000,$00011000,$00011000
00135380 0001 1000 0011 0000 0110+  	DC.L	$00011000,$00110000,$01100000,$00000000
00135390 0000 0000 0110 0110 0011+  	DC.L	$00000000,$01100110,$00111100,$11111111
001353A0 0011 1100 0110 0110 0000+  	DC.L	$00111100,$01100110,$00000000,$00000000
001353B0 0000 0000 0011 0000 0011+  	DC.L	$00000000,$00110000,$00110000,$11111100
001353C0 0011 0000 0011 0000 0000+  	DC.L	$00110000,$00110000,$00000000,$00000000
001353D0 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
001353E0 0000 0000 0011 0000 0011+  	DC.L	$00000000,$00110000,$00110000,$01100000
001353F0 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$11111100
00135400 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
00135410 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
00135420 0000 0000 0011 0000 0011+  	DC.L	$00000000,$00110000,$00110000,$00000000
00135430 0000 0110 0000 1100 0001+  	DC.L	$00000110,$00001100,$00011000,$00110000
00135440 0110 0000 1100 0000 1000+  	DC.L	$01100000,$11000000,$10000000,$00000000
00135450 0111 1100 1100 0110 1100+  	DC.L	$01111100,$11000110,$11001110,$11011110
00135460 1111 0110 1110 0110 0111+  	DC.L	$11110110,$11100110,$01111100,$00000000
00135470 0011 0000 0111 0000 0011+  	DC.L	$00110000,$01110000,$00110000,$00110000
00135480 0011 0000 0011 0000 0111+  	DC.L	$00110000,$00110000,$01111000,$00000000
00135490 1111 1000 0000 1100 0000+  	DC.L	$11111000,$00001100,$00001100,$00111000
001354A0 0110 0000 1100 0000 1111+  	DC.L	$01100000,$11000000,$11111100,$00000000
001354B0 1111 1000 0000 1100 0000+  	DC.L	$11111000,$00001100,$00001100,$00111000
001354C0 0000 1100 0000 1100 1111+  	DC.L	$00001100,$00001100,$11111000,$00000000
001354D0 0001 1100 0011 1100 0110+  	DC.L	$00011100,$00111100,$01101100,$11001100
001354E0 1111 1110 0000 1100 0000+  	DC.L	$11111110,$00001100,$00001100,$00000000
001354F0 1111 1100 1100 0000 1111+  	DC.L	$11111100,$11000000,$11111000,$00001100
00135500 0000 1100 0000 1100 1111+  	DC.L	$00001100,$00001100,$11111000,$00000000
00135510 0011 1100 0110 0000 1100+  	DC.L	$00111100,$01100000,$11000000,$11111000
00135520 1100 1100 1100 1100 0111+  	DC.L	$11001100,$11001100,$01111000,$00000000
00135530 1111 1100 0000 1100 0001+  	DC.L	$11111100,$00001100,$00011000,$00110000
00135540 0110 0000 1100 0000 1100+  	DC.L	$01100000,$11000000,$11000000,$00000000
00135550 0111 1000 1100 1100 1100+  	DC.L	$01111000,$11001100,$11001100,$01111000
00135560 1100 1100 1100 1100 0111+  	DC.L	$11001100,$11001100,$01111000,$00000000
00135570 0111 1000 1100 1100 1100+  	DC.L	$01111000,$11001100,$11001100,$01111100
00135580 0000 1100 0000 1100 0111+  	DC.L	$00001100,$00001100,$01111000,$00000000
00135590 0000 0000 0011 0000 0011+  	DC.L	$00000000,$00110000,$00110000,$00000000
001355A0 0000 0000 0011 0000 0011+  	DC.L	$00000000,$00110000,$00110000,$00000000
001355B0 0000 0000 0011 0000 0011+  	DC.L	$00000000,$00110000,$00110000,$00000000
001355C0 0000 0000 0011 0000 0011+  	DC.L	$00000000,$00110000,$00110000,$01100000
001355D0 0001 1000 0011 0000 0110+  	DC.L	$00011000,$00110000,$01100000,$11000000
001355E0 0110 0000 0011 0000 0001+  	DC.L	$01100000,$00110000,$00011000,$00000000
001355F0 0000 0000 0000 0000 1111+  	DC.L	$00000000,$00000000,$11111100,$00000000
00135600 0000 0000 1111 1100 0000+  	DC.L	$00000000,$11111100,$00000000,$00000000
00135610 0110 0000 0011 0000 0001+  	DC.L	$01100000,$00110000,$00011000,$00001100
00135620 0001 1000 0011 0000 0110+  	DC.L	$00011000,$00110000,$01100000,$00000000
00135630 1111 1000 0000 1100 0000+  	DC.L	$11111000,$00001100,$00001100,$00111000
00135640 0011 0000 0000 0000 0011+  	DC.L	$00110000,$00000000,$00110000,$00000000
00135650 0111 1100 1100 0110 1101+  	DC.L	$01111100,$11000110,$11011110,$11011110
00135660 1101 1110 1100 0000 0111+  	DC.L	$11011110,$11000000,$01111000,$00000000
00135670 0011 0000 0111 1000 1100+  	DC.L	$00110000,$01111000,$11001100,$11001100
00135680 1111 1100 1100 1100 1100+  	DC.L	$11111100,$11001100,$11001100,$00000000
00135690 1111 1000 1100 1100 1100+  	DC.L	$11111000,$11001100,$11001100,$11111000
001356A0 1100 1100 1100 1100 1111+  	DC.L	$11001100,$11001100,$11111000,$00000000
001356B0 0111 1100 1100 0000 1100+  	DC.L	$01111100,$11000000,$11000000,$11000000
001356C0 1100 0000 1100 0000 0111+  	DC.L	$11000000,$11000000,$01111100,$00000000
001356D0 1111 1000 1100 1100 1100+  	DC.L	$11111000,$11001100,$11001100,$11001100
001356E0 1100 1100 1100 1100 1111+  	DC.L	$11001100,$11001100,$11111000,$00000000
001356F0 1111 1100 1100 0000 1100+  	DC.L	$11111100,$11000000,$11000000,$11111000
00135700 1100 0000 1100 0000 1111+  	DC.L	$11000000,$11000000,$11111100,$00000000
00135710 1111 1100 1100 0000 1100+  	DC.L	$11111100,$11000000,$11000000,$11111000
00135720 1100 0000 1100 0000 1100+  	DC.L	$11000000,$11000000,$11000000,$00000000
00135730 0111 1100 1100 0000 1100+  	DC.L	$01111100,$11000000,$11000000,$11000000
00135740 1101 1100 1100 1100 0111+  	DC.L	$11011100,$11001100,$01111100,$00000000
00135750 1100 1100 1100 1100 1100+  	DC.L	$11001100,$11001100,$11001100,$11111100
00135760 1100 1100 1100 1100 1100+  	DC.L	$11001100,$11001100,$11001100,$00000000
00135770 0111 1000 0011 0000 0011+  	DC.L	$01111000,$00110000,$00110000,$00110000
00135780 0011 0000 0011 0000 0111+  	DC.L	$00110000,$00110000,$01111000,$00000000
00135790 0001 1110 0000 1100 0000+  	DC.L	$00011110,$00001100,$00001100,$00001100
001357A0 0000 1100 0000 1100 1111+  	DC.L	$00001100,$00001100,$11111000,$00000000
001357B0 1100 0110 1100 1100 1101+  	DC.L	$11000110,$11001100,$11011000,$11110000
001357C0 1101 1000 1100 1100 1100+  	DC.L	$11011000,$11001100,$11000110,$00000000
001357D0 1100 0000 1100 0000 1100+  	DC.L	$11000000,$11000000,$11000000,$11000000
001357E0 1100 0000 1100 0000 1111+  	DC.L	$11000000,$11000000,$11111100,$00000000
001357F0 1100 0110 1110 1110 1111+  	DC.L	$11000110,$11101110,$11111110,$11010110
00135800 1100 0110 1100 0110 1100+  	DC.L	$11000110,$11000110,$11000110,$00000000
00135810 1100 0110 1110 0110 1111+  	DC.L	$11000110,$11100110,$11110110,$11011110
00135820 1100 1110 1100 0110 1100+  	DC.L	$11001110,$11000110,$11000110,$00000000
00135830 0111 1000 1100 1100 1100+  	DC.L	$01111000,$11001100,$11001100,$11001100
00135840 1100 1100 1100 1100 0111+  	DC.L	$11001100,$11001100,$01111000,$00000000
00135850 1111 1000 1100 1100 1100+  	DC.L	$11111000,$11001100,$11001100,$11111000
00135860 1100 0000 1100 0000 1100+  	DC.L	$11000000,$11000000,$11000000,$00000000
00135870 0111 1000 1100 1100 1100+  	DC.L	$01111000,$11001100,$11001100,$11001100
00135880 1100 1100 1101 1000 0110+  	DC.L	$11001100,$11011000,$01101100,$00000000
00135890 1111 1000 1100 1100 1100+  	DC.L	$11111000,$11001100,$11001100,$11111000
001358A0 1111 0000 1101 1000 1100+  	DC.L	$11110000,$11011000,$11001100,$00000000
001358B0 0111 1100 1100 0000 1100+  	DC.L	$01111100,$11000000,$11000000,$01111000
001358C0 0000 1100 0000 1100 1111+  	DC.L	$00001100,$00001100,$11111000,$00000000
001358D0 1111 1100 0011 0000 0011+  	DC.L	$11111100,$00110000,$00110000,$00110000
001358E0 0011 0000 0011 0000 0011+  	DC.L	$00110000,$00110000,$00110000,$00000000
001358F0 1100 1100 1100 1100 1100+  	DC.L	$11001100,$11001100,$11001100,$11001100
00135900 1100 1100 1100 1100 0111+  	DC.L	$11001100,$11001100,$01111100,$00000000
00135910 1100 1100 1100 1100 1100+  	DC.L	$11001100,$11001100,$11001100,$11001100
00135920 1100 1100 0111 1000 0011+  	DC.L	$11001100,$01111000,$00110000,$00000000
00135930 1100 0110 1100 0110 1100+  	DC.L	$11000110,$11000110,$11000110,$11010110
00135940 1111 1110 1110 1110 1100+  	DC.L	$11111110,$11101110,$11000110,$00000000
00135950 1100 0110 1100 0110 0110+  	DC.L	$11000110,$11000110,$01101100,$00111000
00135960 0110 1100 1100 0110 1100+  	DC.L	$01101100,$11000110,$11000110,$00000000
00135970 1100 1100 1100 1100 1100+  	DC.L	$11001100,$11001100,$11001100,$01111000
00135980 0011 0000 0011 0000 0011+  	DC.L	$00110000,$00110000,$00110000,$00000000
00135990 1111 1110 0000 1100 0001+  	DC.L	$11111110,$00001100,$00011000,$00110000
001359A0 0110 0000 1100 0000 1111+  	DC.L	$01100000,$11000000,$11111110,$00000000
001359B0 0111 1000 0110 0000 0110+  	DC.L	$01111000,$01100000,$01100000,$01100000
001359C0 0110 0000 0110 0000 0111+  	DC.L	$01100000,$01100000,$01111000,$00000000
001359D0 1100 0000 0110 0000 0011+  	DC.L	$11000000,$01100000,$00110000,$00011000
001359E0 0000 1100 0000 0110 0000+  	DC.L	$00001100,$00000110,$00000010,$00000000
001359F0 0111 1000 0001 1000 0001+  	DC.L	$01111000,$00011000,$00011000,$00011000
00135A00 0001 1000 0001 1000 0111+  	DC.L	$00011000,$00011000,$01111000,$00000000
00135A10 0001 0000 0011 1000 0110+  	DC.L	$00010000,$00111000,$01101100,$11000110
00135A20 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
00135A30 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
00135A40 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$11111111
00135A50 0011 0000 0011 0000 0001+  	DC.L	$00110000,$00110000,$00011000,$00000000
00135A60 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
00135A70 0000 0000 0000 0000 1111+  	DC.L	$00000000,$00000000,$11111000,$00001100
00135A80 0111 1100 1100 1100 0111+  	DC.L	$01111100,$11001100,$01111100,$00000000
00135A90 1100 0000 1100 0000 1111+  	DC.L	$11000000,$11000000,$11111000,$11001100
00135AA0 1100 1100 1100 1100 1111+  	DC.L	$11001100,$11001100,$11111000,$00000000
00135AB0 0000 0000 0000 0000 0111+  	DC.L	$00000000,$00000000,$01111100,$11000000
00135AC0 1100 0000 1100 0000 0111+  	DC.L	$11000000,$11000000,$01111100,$00000000
00135AD0 0000 1100 0000 1100 0111+  	DC.L	$00001100,$00001100,$01111100,$11001100
00135AE0 1100 1100 1100 1100 0111+  	DC.L	$11001100,$11001100,$01111100,$00000000
00135AF0 0000 0000 0000 0000 0111+  	DC.L	$00000000,$00000000,$01111000,$11001100
00135B00 1111 1100 1100 0000 0111+  	DC.L	$11111100,$11000000,$01111100,$00000000
00135B10 0011 1100 0110 0000 0110+  	DC.L	$00111100,$01100000,$01100000,$11111000
00135B20 0110 0000 0110 0000 0110+  	DC.L	$01100000,$01100000,$01100000,$00000000
00135B30 0000 0000 0000 0000 0111+  	DC.L	$00000000,$00000000,$01111100,$11001100
00135B40 1100 1100 0111 1100 0000+  	DC.L	$11001100,$01111100,$00001100,$11111000
00135B50 1100 0000 1100 0000 1111+  	DC.L	$11000000,$11000000,$11111000,$11001100
00135B60 1100 1100 1100 1100 1100+  	DC.L	$11001100,$11001100,$11001100,$00000000
00135B70 0011 0000 0000 0000 0011+  	DC.L	$00110000,$00000000,$00110000,$00110000
00135B80 0011 0000 0011 0000 0011+  	DC.L	$00110000,$00110000,$00110000,$00000000
00135B90 0001 1000 0000 0000 0001+  	DC.L	$00011000,$00000000,$00011000,$00011000
00135BA0 0001 1000 0001 1000 0001+  	DC.L	$00011000,$00011000,$00011000,$11110000
00135BB0 1100 0000 1100 0000 1100+  	DC.L	$11000000,$11000000,$11001100,$11011000
00135BC0 1111 0000 1101 1000 1100+  	DC.L	$11110000,$11011000,$11001100,$00000000
00135BD0 0111 0000 0011 0000 0011+  	DC.L	$01110000,$00110000,$00110000,$00110000
00135BE0 0011 0000 0011 0000 0011+  	DC.L	$00110000,$00110000,$00110000,$00000000
00135BF0 0000 0000 0000 0000 1100+  	DC.L	$00000000,$00000000,$11000110,$11111110
00135C00 1101 0110 1100 0110 1100+  	DC.L	$11010110,$11000110,$11000110,$00000000
00135C10 0000 0000 0000 0000 1111+  	DC.L	$00000000,$00000000,$11111000,$11001100
00135C20 1100 1100 1100 1100 1100+  	DC.L	$11001100,$11001100,$11001100,$00000000
00135C30 0000 0000 0000 0000 0111+  	DC.L	$00000000,$00000000,$01111000,$11001100
00135C40 1100 1100 1100 1100 0111+  	DC.L	$11001100,$11001100,$01111000,$00000000
00135C50 0000 0000 0000 0000 1111+  	DC.L	$00000000,$00000000,$11111000,$11001100
00135C60 1100 1100 1100 1100 1111+  	DC.L	$11001100,$11001100,$11111000,$11000000
00135C70 0000 0000 0000 0000 0111+  	DC.L	$00000000,$00000000,$01111100,$11001100
00135C80 1100 1100 1100 1100 0111+  	DC.L	$11001100,$11001100,$01111100,$00001100
00135C90 0000 0000 0000 0000 1101+  	DC.L	$00000000,$00000000,$11011100,$11100000
00135CA0 1100 0000 1100 0000 1100+  	DC.L	$11000000,$11000000,$11000000,$00000000
00135CB0 0000 0000 0000 0000 0111+  	DC.L	$00000000,$00000000,$01111100,$11000000
00135CC0 0111 1000 0000 1100 1111+  	DC.L	$01111000,$00001100,$11111000,$00000000
00135CD0 0110 0000 0110 0000 1111+  	DC.L	$01100000,$01100000,$11111100,$01100000
00135CE0 0110 0000 0110 0000 0011+  	DC.L	$01100000,$01100000,$00111100,$00000000
00135CF0 0000 0000 0000 0000 1100+  	DC.L	$00000000,$00000000,$11001100,$11001100
00135D00 1100 1100 1100 1100 0111+  	DC.L	$11001100,$11001100,$01111100,$00000000
00135D10 0000 0000 0000 0000 1100+  	DC.L	$00000000,$00000000,$11001100,$11001100
00135D20 1100 1100 0111 1000 0011+  	DC.L	$11001100,$01111000,$00110000,$00000000
00135D30 0000 0000 0000 0000 1100+  	DC.L	$00000000,$00000000,$11000110,$11000110
00135D40 1101 0110 1111 1110 1100+  	DC.L	$11010110,$11111110,$11000110,$00000000
00135D50 0000 0000 0000 0000 1100+  	DC.L	$00000000,$00000000,$11000110,$01101100
00135D60 0011 1000 0110 1100 1100+  	DC.L	$00111000,$01101100,$11000110,$00000000
00135D70 0000 0000 0000 0000 1100+  	DC.L	$00000000,$00000000,$11001100,$11001100
00135D80 1100 1100 0111 1100 0000+  	DC.L	$11001100,$01111100,$00001100,$11111000
00135D90 0000 0000 0000 0000 1111+  	DC.L	$00000000,$00000000,$11111100,$00011000
00135DA0 0011 0000 0110 0000 1111+  	DC.L	$00110000,$01100000,$11111100,$00000000
00135DB0 0001 1100 0011 0000 0011+  	DC.L	$00011100,$00110000,$00110000,$11100000
00135DC0 0011 0000 0011 0000 0001+  	DC.L	$00110000,$00110000,$00011100,$00000000
00135DD0 0001 1000 0001 1000 0001+  	DC.L	$00011000,$00011000,$00011000,$00000000
00135DE0 0001 1000 0001 1000 0001+  	DC.L	$00011000,$00011000,$00011000,$00000000
00135DF0 1110 0000 0011 0000 0011+  	DC.L	$11100000,$00110000,$00110000,$00011100
00135E00 0011 0000 0011 0000 1110+  	DC.L	$00110000,$00110000,$11100000,$00000000
00135E10 0111 0110 1101 1100 0000+  	DC.L	$01110110,$11011100,$00000000,$00000000
00135E20 0000 0000 0000 0000 0000+  	DC.L	$00000000,$00000000,$00000000,$00000000
00135E30 0000 0000 0001 0000 0011+  	DC.L	$00000000,$00010000,$00111000,$01101100
00135E40 1100 0110 1100 0110 1111+  	DC.L	$11000110,$11000110,$11111110,$00000000
00135E50 1000 0000                  	dc.l	$10000000
00135E54 0000 0000                  	dc.l	$00000000
00135E58 0000 0000                  	dc.l	$00000000
00135E5C 0000 0000                  	dc.l	$00000000
00135E60 0000 0000                  	dc.l	$00000000
00135E64 0000 0000                  	dc.l	$00000000
00135E68 0000 0000                  	dc.l	$00000000
00135E6C 0000 0000                  	dc.l	$00000000
00135E70 0001 1000                  	dc.l	$00011000
00135E74 0001 1000                  	dc.l	$00011000
00135E78 0001 1000                  	dc.l	$00011000
00135E7C 1100 0011                  	dc.l	$11000011
00135E80 1100 0011                  	dc.l	$11000011
00135E84 0001 1000                  	dc.l	$00011000
00135E88 0001 1000                  	dc.l	$00011000
00135E8C 0001 1000                  	dc.l	$00011000
00135E90 0000 0000                  	dc.l	$00000000
00135E94 0110 0110                  	dc.l	$01100110
00135E98 1111 1110                  	dc.l	$11111110
00135E9C 1111 1110                  	dc.l	$11111110
00135EA0 1001 1010                  	dc.l	$10011010
00135EA4 0000 0010                  	dc.l	$00000010
00135EA8 0000 0010                  	dc.l	$00000010
00135EAC 0000 0010                  	dc.l	$00000010
00135EB0 1100 0000                  	dc.l	$11000000
00135EB4 1111 0000                  	dc.l	$11110000
00135EB8 1111 1100                  	dc.l	$11111100
00135EBC 0111 1000                  	dc.l	$01111000
00135EC0 0111 1100                  	dc.l	$01111100
00135EC4 0010 0110                  	dc.l	$00100110
00135EC8 0000 0011                  	dc.l	$00000011
00135ECC 0000 0000                  	dc.l	$00000000
00135ED0                            LogoPalette:
00135ED0 0000 0EEE 0EEE 0EEE 0EEE+  				dc.w	$000,$EEE,$EEE,$EEE,$EEE,$EEE,$EEE
00135EDE                            LogoCycle:
00135EDE 0EA0 0E80 0E60 0E40 0E20+  				dc.w	$EA0,$E80,$E60,$E40,$E20,$E00,$C00,$A00,$800
00135EF0 0A00 0C00 0E00 0E20 0E40+  				dc.w	$A00,$C00,$E00,$E20,$E40,$E60,$E80,$EA0,$E80
00135F02 0E60 0E40 0E20 0E00 0C00+  				dc.w	$E60,$E40,$E20,$E00,$C00,$A00,$800
00135F10                            
00135F10                            ART_SEGA:		incbin	"Splash\Art.bin"
0013C762                            			even
0013C762                            MAPS_SEGA:		incbin	"Splash\Maps.bin"
0013C79E                            			even
0013C79E                            Pal_SEGANew:		incbin	"Splash\Palette.bin"
0013C81E                            			even
0013C81E                            ; ==============================================================
0013C81E                            ; --------------------------------------------------------------
0013C81E                            ; Debugging modules
0013C81E                            ; --------------------------------------------------------------
0013C81E                            
0013C81E                               include   "ErrorHandler.asm"
0013C81E                            
0013C81E                            ; ===============================================================
0013C81E                            ; ---------------------------------------------------------------
0013C81E                            ; Error handling and debugging modules
0013C81E                            ; 2016-2017, Vladikcomper
0013C81E                            ; ---------------------------------------------------------------
0013C81E                            ; Error handler functions and calls
0013C81E                            ; ---------------------------------------------------------------
0013C81E                            
0013C81E                            ; ---------------------------------------------------------------
0013C81E                            ; Error handler control flags
0013C81E                            ; ---------------------------------------------------------------
0013C81E                            
0013C81E                            ; Screen appearence flags
0013C81E =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013C81E =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013C81E                            
0013C81E                            ; Advanced execution flags
0013C81E                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013C81E =00000020                  _eh_return			equ	$20
0013C81E =00000040                  _eh_enter_console	equ	$40
0013C81E =00000080                  _eh_align_offset	equ	$80
0013C81E                            
0013C81E                            ; ---------------------------------------------------------------
0013C81E                            ; Errors vector table
0013C81E                            ; ---------------------------------------------------------------
0013C81E                            
0013C81E                            ; Default screen configuration
0013C81E =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013C81E                            
0013C81E                            ; ---------------------------------------------------------------
0013C81E                            
0013C81E                            BusError:
0013C81E 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error
0013C830                            
0013C830                            AddressError:
0013C830 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error
0013C846                            
0013C846                            IllegalInstr:
0013C846 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default
0013C862                            
0013C862                            ZeroDivide:
0013C862 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default
0013C876                            
0013C876                            ChkInstr:
0013C876 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default
0013C88E                            
0013C88E                            TrapvInstr:
0013C88E 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default
0013C8A8                            
0013C8A8                            PrivilegeViol:
0013C8A8 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default
0013C8C4                            
0013C8C4                            Trace:
0013C8C4 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default
0013C8D2                            
0013C8D2                            Line1010Emu:
0013C8D2 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE 1010 EMULATOR", _eh_default
0013C8EC                            
0013C8EC                            Line1111Emu:
0013C8EC 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE 1111 EMULATOR", _eh_default
0013C906                            
0013C906                            ErrorExcept:
0013C906 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default
0013C91E                            
0013C91E                            
0013C91E                            
0013C91E                            ; ---------------------------------------------------------------
0013C91E                            ; Import error handler global functions
0013C91E                            ; ---------------------------------------------------------------
0013C91E                            
0013C91E                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$146
0013C91E                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$234
0013C91E                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$A1C
0013C91E                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$A58
0013C91E                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$A5E
0013C91E                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$A8A
0013C91E                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$AAC
0013C91E                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$AD4
0013C91E                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$AE8
0013C91E                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$AFE
0013C91E                            ErrorHandler.__global__console_writeline equ ErrorHandler+$B00
0013C91E                            ErrorHandler.__global__console_write equ ErrorHandler+$B04
0013C91E                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$BB0
0013C91E                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$BB4
0013C91E                            
0013C91E                            
0013C91E                            ; ---------------------------------------------------------------
0013C91E                            ; Error handler external functions (compiled only when used)
0013C91E                            ; ---------------------------------------------------------------
0013C91E                            
0013C91E                            
0013C91E                            
0013C91E                            
0013C91E                            
0013C91E                            ; ---------------------------------------------------------------
0013C91E                            ; Include error handler binary module
0013C91E                            ; ---------------------------------------------------------------
0013C91E                            
0013C91E                            ErrorHandler:
0013C91E                            	incbin	ErrorHandler.bin
0013D51E                            
0013D51E                            ; ---------------------------------------------------------------
0013D51E                            ; WARNING!
0013D51E                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
0013D51E                            ;	Symbol data should be appended here after ROM is compiled
0013D51E                            ;	by ConvSym utility, otherwise debugger modules won't be able
0013D51E                            ;	to resolve symbol names.
0013D51E                            ; ---------------------------------------------------------------
0013D51E                            ; ---------------------------------------------------------------
0013D51E                            
0013D51E                            ; end of 'ROM'
0013D51E                            EndOfRom:
0013D51E                            
0013D51E                            
